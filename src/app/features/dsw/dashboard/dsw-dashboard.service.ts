import { Injectable } from '@angular/core';
import { delay, Observable, of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { DswDashboardNode } from '@shared/types/dsw/dashboard/dsw-dashboard-node.type';
import { AppNodeStatusTypes } from '@shared/types/app/app-node-status-types.enum';

@Injectable({
  providedIn: 'root',
})
export class DswDashboardService {

  constructor(private http: HttpClient) { }

  getNodes(): Observable<DswDashboardNode[]> {
    return of(JSON.parse(JSON.stringify(mock()))).pipe(delay(250));
  }
}

export const mockDetail = () => ({
  syncStakingLedger: '20/06/2023 19:43',
  syncEpochLedger: '20/06/2023 19:43',
  syncRootLedger: '20/06/2023 19:43',
  bestTipReceived: Math.floor(Math.random() * 100),
  missingBlocks: Math.floor(Math.random() * 100),
  downloadingBlocks: Math.floor(Math.random() * 100),
  applyingBlocks: Math.floor(Math.random() * 100),
  appliedBlocks: Math.floor(Math.random() * 100),
});

const mock = (): DswDashboardNode[] => [
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 1',
    bestTip: '1586',
    fork: '7690',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 2',
    bestTip: '1964',
    fork: '280',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.BOOTSTRAP,
    name: 'Node 3',
    bestTip: '51',
    fork: '530',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.CATCHUP,
    name: 'Node 4',
    bestTip: '1142',
    fork: '0432',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.OFFLINE,
    name: 'Node 5',
    bestTip: '521',
    fork: '410',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 6',
    bestTip: '1586',
    fork: '7690',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 7',
    bestTip: '1586',
    fork: '7690',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
      name: 'Node 8',
    bestTip: '1586',
    fork: '7690',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 9',
    bestTip: '251586',
    fork: '25',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.SYNCED,
    name: 'Node 10',
    bestTip: '34',
    fork: '735690',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
  {
    status: AppNodeStatusTypes.OFFLINE,
    name: 'Node 11',
    bestTip: '42',
    fork: '534',
    blocksApplied: Math.floor(Math.random() * 100),
    blocksAppliedMax: Math.floor(Math.random() * 100) + 100,
    missingBlocks: Math.floor(Math.random() * 100),
    missingBlocksMax: Math.floor(Math.random() * 100) + 100,
    downloadingBlocks: Math.floor(Math.random() * 100),
    downloadingBlocksMax: Math.floor(Math.random() * 100) + 100,
    details: mockDetail(),
  },
];
