/* tslint:disable */
/* eslint-disable */
export function __wbg_manualconnector_free(a: number): void;
export function manualconnector_dial(a: number, b: number, c: number): number;
export function manualconnector_listen(a: number): number;
export function start(): number;
export function __wbg_jshandle_free(a: number): void;
export function jshandle_logs_range(a: number, b: number, c: number, d: number, e: number): number;
export function jshandle_manual_connector(a: number): number;
export function jshandle_is_peer_id_valid(a: number, b: number, c: number, d: number): void;
export function jshandle_global_state_get(a: number): number;
export function jshandle_peer_connect(a: number, b: number, c: number): number;
export function jshandle_pubsub_publish(a: number, b: number, c: number, d: number): number;
export function jshandle_generate_account_keys(a: number): number;
export function jshandle_payment_sign_and_inject(a: number, b: number): number;
export function __wbg_inmemlog_free(a: number): void;
export function inmemlog_get(a: number, b: number, c: number, d: number): void;
export function inmemlog_id(a: number): number;
export function inmemlog_level(a: number): number;
export function inmemlog_as_json(a: number, b: number): void;
export function wasm_thread_entry_point(a: number): void;
export function __wbg_crypto_free(a: number): void;
export function crypto_pub_key_as_protobuf(a: number, b: number): void;
export function crypto_peer_id_as_b58(a: number, b: number): void;
export function crypto_sign(a: number, b: number, c: number, d: number): void;
export function crypto_pub_key_as_protobuf_to_peer_id_as_b58(a: number, b: number, c: number, d: number): void;
export function crypto_assert_signature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function crypto_pub_key_as_protobuf_to_peer_id(a: number, b: number, c: number, d: number, e: number, f: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_3: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6c12caff3b9c9112(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h789cfe9fd090c15b(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h291ef12d2ea44fdb(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5834577f1f9de1fb(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h0a596c78071ab04b(a: number, b: number, c: number, d: number): void;
export function __wbindgen_thread_destroy(): void;
export function __wbindgen_start(): void;
