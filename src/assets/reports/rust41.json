{"filename":"src/account/legacy.rs","lines":[{"line":"use std::borrow::Cow;","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::Zero;","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_hasher::{create_legacy, Hashable, Hasher, ROInput};","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"use o1_utils::FieldHelpers;","counters":[]},{"line":"","counters":[]},{"line":"use crate::scan_state::currency::{Balance, Magnitude, Nonce};","counters":[]},{"line":"","counters":[]},{"line":"use super::common::*;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug, Hash, PartialEq, Eq)]","counters":[{"col_start":16,"col_end":21,"count":30746}]},{"line":"pub struct TokenIdLegacy(pub u64);","counters":[]},{"line":"","counters":[]},{"line":"impl Default for TokenIdLegacy {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self(1)","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":1}]},{"line":"pub struct PermissionsLegacy<Controller> {","counters":[]},{"line":"    pub stake: bool,","counters":[]},{"line":"    pub edit_state: Controller,","counters":[]},{"line":"    pub send: Controller,","counters":[]},{"line":"    pub receive: Controller,","counters":[]},{"line":"    pub set_delegate: Controller,","counters":[]},{"line":"    pub set_permissions: Controller,","counters":[]},{"line":"    pub set_verification_key: Controller,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl PermissionsLegacy<AuthRequired> {","counters":[]},{"line":"    pub fn user_default() -> Self {","counters":[{"col_start":4,"col_end":35,"count":92}]},{"line":"        use AuthRequired::*;","counters":[{"col_start":0,"col_end":28,"count":92}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":92}]},{"line":"            stake: true,","counters":[{"col_start":0,"col_end":24,"count":92}]},{"line":"            edit_state: Signature,","counters":[{"col_start":0,"col_end":34,"count":92}]},{"line":"            send: Signature,","counters":[{"col_start":0,"col_end":28,"count":92}]},{"line":"            receive: None,","counters":[{"col_start":0,"col_end":26,"count":92}]},{"line":"            set_delegate: Signature,","counters":[{"col_start":0,"col_end":36,"count":92}]},{"line":"            set_permissions: Signature,","counters":[{"col_start":0,"col_end":39,"count":92}]},{"line":"            set_verification_key: Signature,","counters":[{"col_start":0,"col_end":44,"count":92}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":92}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":92}]},{"line":"","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":92}]},{"line":"        use AuthRequired::*;","counters":[{"col_start":0,"col_end":28,"count":92}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":92}]},{"line":"            stake: false,","counters":[{"col_start":0,"col_end":25,"count":92}]},{"line":"            edit_state: None,","counters":[{"col_start":0,"col_end":29,"count":92}]},{"line":"            send: None,","counters":[{"col_start":0,"col_end":23,"count":92}]},{"line":"            receive: None,","counters":[{"col_start":0,"col_end":26,"count":92}]},{"line":"            set_delegate: None,","counters":[{"col_start":0,"col_end":31,"count":92}]},{"line":"            set_permissions: None,","counters":[{"col_start":0,"col_end":34,"count":92}]},{"line":"            set_verification_key: None,","counters":[{"col_start":0,"col_end":39,"count":92}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":92}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":92}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for PermissionsLegacy<AuthRequired> {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self::user_default()","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":1}]},{"line":"pub struct SnappAccount {","counters":[]},{"line":"    pub app_state: Vec<Fp>,","counters":[]},{"line":"    pub verification_key: Option<Fp>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for SnappAccount {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            app_state: vec![Fp::zero(); 8],","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            verification_key: None,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Hashable for SnappAccount {","counters":[]},{"line":"    type D = ();","counters":[]},{"line":"","counters":[]},{"line":"    fn to_roinput(&self) -> ROInput {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        let mut roi = ROInput::new();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(vk) = self.verification_key.as_ref() {","counters":[{"col_start":20,"col_end":22,"count":0},{"col_start":26,"col_end":56,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"            roi = roi.append_field(*vk);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        } else {","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":15,"col_end":16,"count":0}]},{"line":"            roi = roi.append_field(","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                // Value of `dummy_vk_hash`:","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                // https://github.com/MinaProtocol/mina/blob/4f765c866b81fa6fed66be52707fd91fd915041d/src/lib/mina_base/snapp_account.ml#L116","counters":[{"col_start":0,"col_end":141,"count":0}]},{"line":"                Fp::from_hex(\"77a430a03efafd14d72e1a3c45a1fdca8267fcce9a729a1d25128bb5dec69d3f\")","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"                    .unwrap(),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            );","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        for field in &self.app_state {","counters":[{"col_start":12,"col_end":17,"count":33424},{"col_start":21,"col_end":36,"count":33424},{"col_start":37,"col_end":38,"count":33424}]},{"line":"            roi = roi.append_field(*field);","counters":[{"col_start":0,"col_end":43,"count":33424}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":33424}]},{"line":"","counters":[]},{"line":"        // elog!(\"ROInput={:?}\", roi);","counters":[]},{"line":"","counters":[]},{"line":"        roi","counters":[{"col_start":8,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn domain_string(_domain_param: Self::D) -> Option<String> {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        Some(\"CodaSnappAccount****\".to_string())","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/1765ba6bdfd7c454e5ae836c49979fa076de1bea/src/lib/mina_base/account.ml#L368","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":37199}]},{"line":"pub struct AccountLegacy {","counters":[]},{"line":"    pub public_key: CompressedPubKey,         // Public_key.Compressed.t","counters":[]},{"line":"    pub token_id: TokenIdLegacy,              // Token_id.t","counters":[]},{"line":"    pub token_permissions: TokenPermissions,  // Token_permissions.t","counters":[]},{"line":"    pub balance: Balance,                     // Balance.t","counters":[]},{"line":"    pub nonce: Nonce,                         // Nonce.t","counters":[]},{"line":"    pub receipt_chain_hash: ReceiptChainHash, // Receipt.Chain_hash.t","counters":[]},{"line":"    pub delegate: Option<CompressedPubKey>,   // Public_key.Compressed.t option","counters":[]},{"line":"    pub voting_for: VotingFor,                // State_hash.t","counters":[]},{"line":"    pub timing: Timing,                       // Timing.t","counters":[]},{"line":"    pub permissions: PermissionsLegacy<AuthRequired>, // Permissions.t","counters":[]},{"line":"    pub snap: Option<SnappAccount>,","counters":[]},{"line":"    // Below fields are for `develop` branch","counters":[]},{"line":"    // pub token_symbol: TokenSymbol,            // Token_symbol.t","counters":[]},{"line":"    // pub zkapp: Option<ZkAppAccount>,          // Zkapp_account.t","counters":[]},{"line":"    // pub zkapp_uri: String,                    // string","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn get_legacy_hash_of<T: Hashable>(init_value: T::D, item: &T) -> Fp {","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"    let mut hasher = create_legacy::<T>(init_value);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    hasher.update(item);","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    hasher.digest()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"impl Hashable for AccountLegacy {","counters":[]},{"line":"    type D = ();","counters":[]},{"line":"","counters":[]},{"line":"    fn to_roinput(&self) -> ROInput {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        let mut roi = ROInput::new();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::token_symbol","counters":[]},{"line":"","counters":[]},{"line":"        // https://github.com/MinaProtocol/mina/blob/2fac5d806a06af215dbab02f7b154b4f032538b7/src/lib/mina_base/account.ml#L97","counters":[]},{"line":"        // assert!(self.token_symbol.len() <= 6);","counters":[]},{"line":"","counters":[]},{"line":"        // if !self.token_symbol.is_empty() {","counters":[]},{"line":"        //     let mut s = <[u8; 6]>::default();","counters":[]},{"line":"        //     let len = self.token_symbol.len();","counters":[]},{"line":"","counters":[]},{"line":"        //     s[..len].copy_from_slice(&self.token_symbol.as_bytes());","counters":[]},{"line":"        //     roi.append_bytes(self.token_symbol.as_bytes());","counters":[]},{"line":"        // } else {","counters":[]},{"line":"        //     roi.append_bytes(&[0; 6]);","counters":[]},{"line":"        // }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::snapp","counters":[]},{"line":"        let snapp_accout = match self.snap.as_ref() {","counters":[{"col_start":12,"col_end":24,"count":0},{"col_start":33,"col_end":51,"count":0}]},{"line":"            Some(snapp) => Cow::Borrowed(snapp),","counters":[{"col_start":17,"col_end":47,"count":0}]},{"line":"            None => Cow::Owned(SnappAccount::default()),","counters":[{"col_start":20,"col_end":55,"count":0}]},{"line":"        };","counters":[]},{"line":"        let snapp_digest = get_legacy_hash_of((), snapp_accout.as_ref());","counters":[{"col_start":12,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"        roi = roi.append_field(snapp_digest);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(\"ROINPUT={:?}\", roi);","counters":[]},{"line":"","counters":[]},{"line":"        // Self::permissions","counters":[]},{"line":"        for auth in [","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"            self.permissions.set_verification_key,","counters":[{"col_start":12,"col_end":50,"count":0}]},{"line":"            self.permissions.set_permissions,","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            self.permissions.set_delegate,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            self.permissions.receive,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            self.permissions.send,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            self.permissions.edit_state,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        ] {","counters":[]},{"line":"            for bit in auth.encode().to_bits() {","counters":[{"col_start":16,"col_end":19,"count":0},{"col_start":23,"col_end":46,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"                roi = roi.append_bool(bit);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"        roi = roi.append_bool(self.permissions.stake);","counters":[{"col_start":8,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::timing","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        match &self.timing {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            Timing::Untimed => {","counters":[{"col_start":31,"col_end":32,"count":0}]},{"line":"                roi = roi.append_bool(false);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                roi = roi.append_u64(0); // initial_minimum_balance","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                roi = roi.append_u32(0); // cliff_time","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                roi = roi.append_u64(0); // cliff_amount","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                roi = roi.append_u32(1); // vesting_period","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                roi = roi.append_u64(0); // vesting_increment","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            Timing::Timed {","counters":[]},{"line":"                initial_minimum_balance,","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"                cliff_time,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                cliff_amount,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                vesting_period,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                vesting_increment,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                roi = roi.append_bool(true);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                roi = roi.append_u64(initial_minimum_balance.as_u64());","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                roi = roi.append_u32(cliff_time.as_u32());","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                roi = roi.append_u64(cliff_amount.as_u64());","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                roi = roi.append_u32(vesting_period.as_u32());","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                roi = roi.append_u64(vesting_increment.as_u64());","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::voting_for","counters":[]},{"line":"        roi = roi.append_field(self.voting_for.0);","counters":[{"col_start":8,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::delegate","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        match self.delegate.as_ref() {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            Some(delegate) => {","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"                roi = roi.append_field(delegate.x);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                roi = roi.append_bool(delegate.is_odd);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            None => {","counters":[{"col_start":20,"col_end":21,"count":0}]},{"line":"                // Public_key.Compressed.empty","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                roi = roi.append_field(Fp::zero());","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                roi = roi.append_bool(false);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::receipt_chain_hash","counters":[]},{"line":"        roi = roi.append_field(self.receipt_chain_hash.0);","counters":[{"col_start":8,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::nonce","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        roi = roi.append_u32(self.nonce.as_u32());","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::balance","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        roi = roi.append_u64(self.balance.as_u64());","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::token_permissions","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        match self.token_permissions {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            TokenPermissions::TokenOwned {","counters":[]},{"line":"                disable_new_accounts,","counters":[{"col_start":16,"col_end":37,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                roi = roi.append_bool(true);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                roi = roi.append_bool(disable_new_accounts);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            TokenPermissions::NotOwned { account_disabled } => {","counters":[{"col_start":41,"col_end":64,"count":0}]},{"line":"                roi = roi.append_bool(false);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                roi = roi.append_bool(account_disabled);","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::token_id","counters":[]},{"line":"        roi = roi.append_u64(self.token_id.0);","counters":[{"col_start":8,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::public_key","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        roi = roi.append_field(self.public_key.x);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        roi = roi.append_bool(self.public_key.is_odd);","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        roi","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // fn to_roinput(&self) -> ROInput {","counters":[]},{"line":"    //     let mut roi = ROInput::new();","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::public_key","counters":[]},{"line":"    //     roi.append_field(self.public_key.x);","counters":[]},{"line":"    //     roi.append_bool(self.public_key.is_odd);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::token_id","counters":[]},{"line":"    //     roi.append_u64(self.token_id.0);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::token_permissions","counters":[]},{"line":"    //     match self.token_permissions {","counters":[]},{"line":"    //         TokenPermissions::TokenOwned { disable_new_accounts } => {","counters":[]},{"line":"    //             roi.append_bool(true);","counters":[]},{"line":"    //             roi.append_bool(disable_new_accounts);","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //         TokenPermissions::NotOwned { account_disabled } => {","counters":[]},{"line":"    //             roi.append_bool(false);","counters":[]},{"line":"    //             roi.append_bool(account_disabled);","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //     }","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::balance","counters":[]},{"line":"    //     roi.append_u64(self.balance);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::token_symbol","counters":[]},{"line":"","counters":[]},{"line":"    //     // https://github.com/MinaProtocol/mina/blob/2fac5d806a06af215dbab02f7b154b4f032538b7/src/lib/mina_base/account.ml#L97","counters":[]},{"line":"    //     // assert!(self.token_symbol.len() <= 6);","counters":[]},{"line":"","counters":[]},{"line":"    //     // if !self.token_symbol.is_empty() {","counters":[]},{"line":"    //     //     let mut s = <[u8; 6]>::default();","counters":[]},{"line":"    //     //     let len = self.token_symbol.len();","counters":[]},{"line":"","counters":[]},{"line":"    //     //     s[..len].copy_from_slice(&self.token_symbol.as_bytes());","counters":[]},{"line":"    //     //     roi.append_bytes(self.token_symbol.as_bytes());","counters":[]},{"line":"    //     // } else {","counters":[]},{"line":"    //     //     roi.append_bytes(&[0; 6]);","counters":[]},{"line":"    //     // }","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::nonce","counters":[]},{"line":"    //     roi.append_u32(self.nonce);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::receipt_chain_hash","counters":[]},{"line":"    //     roi.append_field(self.receipt_chain_hash.0);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::delegate","counters":[]},{"line":"    //     match self.delegate.as_ref() {","counters":[]},{"line":"    //         Some(delegate) => {","counters":[]},{"line":"    //             roi.append_field(delegate.x);","counters":[]},{"line":"    //             roi.append_bool(delegate.is_odd);","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //         None => {","counters":[]},{"line":"    //             // Public_key.Compressed.empty","counters":[]},{"line":"    //             roi.append_field(Fp::zero());","counters":[]},{"line":"    //             roi.append_bool(false);","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //     }","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::voting_for","counters":[]},{"line":"    //     roi.append_field(self.voting_for.0);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::timing","counters":[]},{"line":"    //     match self.timing {","counters":[]},{"line":"    //         Timing::Untimed => {","counters":[]},{"line":"    //             roi.append_bool(false);","counters":[]},{"line":"    //             roi.append_u64(0); // initial_minimum_balance","counters":[]},{"line":"    //             roi.append_u32(0); // cliff_time","counters":[]},{"line":"    //             roi.append_u64(0); // cliff_amount","counters":[]},{"line":"    //             roi.append_u32(1); // vesting_period","counters":[]},{"line":"    //             roi.append_u64(0); // vesting_increment","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //         Timing::Timed { initial_minimum_balance, cliff_time, cliff_amount, vesting_period, vesting_increment } => {","counters":[]},{"line":"    //             roi.append_bool(true);","counters":[]},{"line":"    //             roi.append_u64(initial_minimum_balance);","counters":[]},{"line":"    //             roi.append_u32(cliff_time);","counters":[]},{"line":"    //             roi.append_u64(cliff_amount);","counters":[]},{"line":"    //             roi.append_u32(vesting_period);","counters":[]},{"line":"    //             roi.append_u64(vesting_increment);","counters":[]},{"line":"    //         },","counters":[]},{"line":"    //     }","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::permissions","counters":[]},{"line":"    //     for auth in [","counters":[]},{"line":"    //         self.permissions.set_verification_key,","counters":[]},{"line":"    //         self.permissions.set_permissions,","counters":[]},{"line":"    //         self.permissions.set_delegate,","counters":[]},{"line":"    //         self.permissions.receive,","counters":[]},{"line":"    //         self.permissions.send,","counters":[]},{"line":"    //         self.permissions.edit_state,","counters":[]},{"line":"    //     ] {","counters":[]},{"line":"    //         for bit in auth.encode().to_bits() {","counters":[]},{"line":"    //             roi.append_bool(bit);","counters":[]},{"line":"    //         }","counters":[]},{"line":"    //     }","counters":[]},{"line":"    //     roi.append_bool(self.permissions.stake);","counters":[]},{"line":"","counters":[]},{"line":"    //     // Self::snapp","counters":[]},{"line":"    //     let snapp_accout = match self.snap.as_ref() {","counters":[]},{"line":"    //         Some(snapp) => Cow::Borrowed(snapp),","counters":[]},{"line":"    //         None => Cow::Owned(SnappAccount::default()),","counters":[]},{"line":"    //     };","counters":[]},{"line":"    //     let mut hasher = create_legacy::<SnappAccount>(());","counters":[]},{"line":"    //     hasher.update(snapp_accout.as_ref());","counters":[]},{"line":"    //     let snapp_digest = hasher.digest();","counters":[]},{"line":"","counters":[]},{"line":"    //     roi.append_field(snapp_digest);","counters":[]},{"line":"","counters":[]},{"line":"    //     elog!(\"ROINPUT={:?}\", roi);","counters":[]},{"line":"","counters":[]},{"line":"    //     roi","counters":[]},{"line":"    // }","counters":[]},{"line":"","counters":[]},{"line":"    fn domain_string(_: ()) -> Option<String> {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        Some(\"CodaAccount*********\".to_string())","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// mina_hasher::poseidon::","counters":[]},{"line":"","counters":[]},{"line":"impl AccountLegacy {","counters":[]},{"line":"    pub fn create() -> Self {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        // use o1_utils::field_helpers::FieldHelpers;","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"        // let token_id = bs58::decode(\"wSHV2S4qX9jFsLjQo8r1BsMLH2ZRKsZx6EJd1sbozGPieEC4Jf\").into_vec().unwrap();","counters":[{"col_start":0,"col_end":113,"count":0}]},{"line":"        // let token_id = Fp::from_bytes(&token_id).unwrap();","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(\"token_id={:?}\", token_id.to_string());","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        // let t = bs58::encode(token_id).into_string();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        // let t = bs58::encode(token_id.to_bytes()).into_string();","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        // elog!(\"token_id={:?}\", t);","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"        let pubkey = CompressedPubKey::from_address(","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            \"B62qnzbXmRNo9q32n4SNu2mpB8e7FYYLH8NmaX6oFCBYjjQ8SbD7uzV\",","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"            // \"B62qiTKpEPjGTSHZrtM8uXiKgn8So916pLmNJKDhKeyBQL9TDb3nvBG\", // Public_key.Compressed.empty","counters":[{"col_start":0,"col_end":104,"count":0}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        .unwrap();","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: pubkey.clone(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            token_id: TokenIdLegacy::default(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            token_permissions: TokenPermissions::NotOwned {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                account_disabled: false,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            // token_symbol: \"\".to_string(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            // token_symbol: String::new(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            balance: Balance::from_u64(10101),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            nonce: Nonce::from_u32(62772),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash::default(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"            delegate: Some(pubkey),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            // delegate: None,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            voting_for: VotingFor::default(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            timing: Timing::Untimed,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            permissions: PermissionsLegacy::user_default(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            snap: None,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            // zkapp: None,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            // zkapp_uri: String::new(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: CompressedPubKey {","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                x: Fp::zero(),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                is_odd: false,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            token_id: TokenIdLegacy::default(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            token_permissions: TokenPermissions::default(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            balance: Balance::zero(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            nonce: Nonce::zero(),","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash::empty_legacy(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            delegate: None,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            voting_for: VotingFor::dummy(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            timing: Timing::Untimed,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            permissions: PermissionsLegacy::user_default(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            snap: None,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}