{"filename":"src/lib/exit_handlers/exit_handlers.ml","lines":[{"line":"(* exit_handlers -- code to call at daemon exit *)","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Async_unix","counters":[]},{"line":"","counters":[]},{"line":"(* register a thunk to be called at exit; log registration and execution *)","counters":[]},{"line":"let register_handler ~logger ~description (f : unit -> unit) =","counters":[]},{"line":"  [%log info] \"Registering exit handler: $description\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    ~metadata:[ (\"description\", `String description) ] ;","counters":[]},{"line":"  let logging_thunk () =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [%log info] \"Running exit handler: $description\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~metadata:[ (\"description\", `String description) ] ;","counters":[]},{"line":"    (* if there's an exception, log it, allow other handlers to run *)","counters":[]},{"line":"    try f ()","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"    with exn ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      [%log info] \"When running exit handler: $description, got exception $exn\"","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          [ (\"description\", `String description)","counters":[]},{"line":"          ; (\"exn\", `String (Exn.to_string exn))","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Stdlib.at_exit logging_thunk","counters":[]},{"line":"","counters":[]},{"line":"(* register a Deferred.t thunk to be called at Async shutdown; log registration and execution *)","counters":[]},{"line":"let register_async_shutdown_handler ~logger ~description","counters":[]},{"line":"    (f : unit -> unit Deferred.t) =","counters":[]},{"line":"  [%log info] \"Registering async shutdown handler: $description\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    ~metadata:[ (\"description\", `String description) ] ;","counters":[]},{"line":"  let logging_thunk () =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [%log info] \"Running async shutdown handler: $description\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~metadata:[ (\"description\", `String description) ] ;","counters":[]},{"line":"    let open Deferred.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map () =","counters":[]},{"line":"      match%map Monitor.try_with ~here:[%here] ~extract_exn:true f with","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ()","counters":[]},{"line":"      | Error exn ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log info]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            \"When running async shutdown handler: $description, got exception \\","counters":[]},{"line":"             $exn\"","counters":[]},{"line":"            ~metadata:","counters":[]},{"line":"              [ (\"description\", `String description)","counters":[]},{"line":"              ; (\"exn\", `String (Exn.to_string exn))","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"              ]","counters":[]},{"line":"    in","counters":[]},{"line":"    ()","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  Shutdown.at_shutdown logging_thunk","counters":[]}]}