{"filename":"src/lib/transition_frontier/transition_frontier.ml","lines":[{"line":"(** This module glues together the various components that compose","counters":[]},{"line":"*  the transition frontier, wrapping high-level initialization","counters":[]},{"line":"*  logic as well as gluing together the logic for adding items","counters":[]},{"line":"*  to the frontier *)","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"include Frontier_base","counters":[]},{"line":"module Full_frontier = Full_frontier","counters":[]},{"line":"module Extensions = Extensions","counters":[]},{"line":"module Persistent_root = Persistent_root","counters":[]},{"line":"module Persistent_frontier = Persistent_frontier","counters":[]},{"line":"module Catchup_tree = Catchup_tree","counters":[]},{"line":"module Full_catchup_tree = Full_catchup_tree","counters":[]},{"line":"module Catchup_hash_tree = Catchup_hash_tree","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let max_catchup_chunk_length = 20","counters":[]},{"line":"","counters":[]},{"line":"let global_max_length (genesis_constants : Genesis_constants.t) =","counters":[]},{"line":"  genesis_constants.protocol.k","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let rejected_blocks = Queue.create ()","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"let validated_blocks = Queue.create ()","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  { logger : Logger.t","counters":[]},{"line":"  ; verifier : Verifier.t","counters":[]},{"line":"  ; consensus_local_state : Consensus.Data.Local_state.t","counters":[]},{"line":"  ; catchup_tree : Catchup_tree.t","counters":[]},{"line":"  ; full_frontier : Full_frontier.t","counters":[]},{"line":"  ; persistent_root : Persistent_root.t","counters":[]},{"line":"  ; persistent_root_instance : Persistent_root.Instance.t","counters":[]},{"line":"  ; persistent_frontier : Persistent_frontier.t","counters":[]},{"line":"  ; persistent_frontier_instance : Persistent_frontier.Instance.t","counters":[]},{"line":"  ; extensions : Extensions.t","counters":[]},{"line":"  ; genesis_state_hash : State_hash.t","counters":[]},{"line":"  ; closed : unit Ivar.t","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let catchup_tree t = t.catchup_tree","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"type Structured_log_events.t += Added_breadcrumb_user_commands","counters":[]},{"line":"  [@@deriving register_event]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"(* There is no Diff.Full.E.of_yojson, so we store raw Yojson.Safe.t here so that","counters":[]},{"line":" * we can still deserialize something to inspect *)","counters":[]},{"line":"type Structured_log_events.t += Applying_diffs of { diffs : Yojson.Safe.t list }","counters":[{"col_start":60,"col_end":60,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"  [@@deriving register_event { msg = \"Applying diffs: $diffs\" }]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"type Structured_log_events.t += Persisted_frontier_loaded","counters":[]},{"line":"  [@@deriving register_event]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"let genesis_root_data ~precomputed_values =","counters":[]},{"line":"  let transition =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Mina_block.Validated.lift @@ Mina_block.genesis ~precomputed_values","counters":[]},{"line":"  in","counters":[]},{"line":"  let constraint_constants = precomputed_values.constraint_constants in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let scan_state = Staged_ledger.Scan_state.empty ~constraint_constants () in","counters":[]},{"line":"  (*if scan state is empty the protocol states required is also empty*)","counters":[]},{"line":"  let protocol_states = [] in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let pending_coinbase =","counters":[]},{"line":"    Or_error.ok_exn","counters":[]},{"line":"      (Pending_coinbase.create","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"         ~depth:constraint_constants.pending_coinbase_depth () )","counters":[]},{"line":"  in","counters":[]},{"line":"  Root_data.Limited.create ~transition ~scan_state ~pending_coinbase","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~protocol_states","counters":[]},{"line":"","counters":[]},{"line":"let load_from_persistence_and_start ~context:(module Context : CONTEXT)","counters":[]},{"line":"    ~verifier ~consensus_local_state ~max_length ~persistent_root","counters":[]},{"line":"    ~persistent_root_instance ~persistent_frontier ~persistent_frontier_instance","counters":[]},{"line":"    ~catchup_mode ignore_consensus_local_state =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Deferred.Result.Let_syntax in","counters":[]},{"line":"  let root_identifier =","counters":[]},{"line":"    match","counters":[]},{"line":"      Persistent_root.Instance.load_root_identifier persistent_root_instance","counters":[]},{"line":"    with","counters":[]},{"line":"    | Some root_identifier ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        root_identifier","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith","counters":[]},{"line":"          \"no persistent root identifier found (should have been written \\","counters":[]},{"line":"           already)\"","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind () =","counters":[]},{"line":"    Deferred.return","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      ( match","counters":[]},{"line":"          Persistent_frontier.Instance.fast_forward persistent_frontier_instance","counters":[]},{"line":"            root_identifier","counters":[]},{"line":"        with","counters":[]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log info] \"Fast forward successful\" ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          Ok ()","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Error `Sync_cannot_be_running ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error (`Failure \"sync job is already running on persistent frontier\")","counters":[]},{"line":"      | Error `Bootstrap_required ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error `Bootstrap_required","counters":[]},{"line":"      | Error (`Failure msg) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log fatal]","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ (\"target_root\", Root_identifier.to_yojson root_identifier) ]","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"            \"Unable to fast forward persistent frontier: %s\" msg ;","counters":[]},{"line":"          Error (`Failure msg) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind full_frontier, extensions =","counters":[]},{"line":"    O1trace.thread \"persistent_frontier_read_from_disk\" (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        let open Deferred.Let_syntax in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        match%map","counters":[]},{"line":"          Persistent_frontier.Instance.load_full_frontier","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            persistent_frontier_instance ~max_length","counters":[]},{"line":"            ~root_ledger:","counters":[]},{"line":"              (Persistent_root.Instance.snarked_ledger persistent_root_instance)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            ~consensus_local_state ~ignore_consensus_local_state","counters":[]},{"line":"            ~persistent_root_instance","counters":[]},{"line":"        with","counters":[]},{"line":"        | Error `Sync_cannot_be_running ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error (`Failure \"sync job is already running on persistent frontier\")","counters":[]},{"line":"        | Error (`Failure _) as err ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            err","counters":[]},{"line":"        | Ok result ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok result )","counters":[]},{"line":"  in","counters":[]},{"line":"  [%log info] \"Loaded full frontier and extensions\" ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"  let%map () =","counters":[]},{"line":"    Deferred.return","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      ( Persistent_frontier.Instance.start_sync","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"          ~constraint_constants:precomputed_values.constraint_constants","counters":[]},{"line":"          ~persistent_root_instance persistent_frontier_instance","counters":[]},{"line":"      |> Result.map_error ~f:(function","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"           | `Sync_cannot_be_running ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               `Failure \"sync job is already running on persistent frontier\"","counters":[]},{"line":"           | `Not_found _ as err ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               `Failure","counters":[]},{"line":"                 (Persistent_frontier.Database.Error.not_found_message err) ) )","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"  in","counters":[]},{"line":"  { logger","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; catchup_tree =","counters":[]},{"line":"      Catchup_tree.create catchup_mode ~root:(Full_frontier.root full_frontier)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"  ; verifier","counters":[]},{"line":"  ; consensus_local_state","counters":[]},{"line":"  ; full_frontier","counters":[]},{"line":"  ; persistent_root","counters":[]},{"line":"  ; persistent_root_instance","counters":[]},{"line":"  ; persistent_frontier","counters":[]},{"line":"  ; persistent_frontier_instance","counters":[]},{"line":"  ; extensions","counters":[]},{"line":"  ; closed = Ivar.create ()","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; genesis_state_hash =","counters":[]},{"line":"      (Precomputed_values.genesis_state_hashes precomputed_values).state_hash","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let rec load_with_max_length :","counters":[]},{"line":"       context:(module CONTEXT)","counters":[]},{"line":"    -> max_length:int","counters":[]},{"line":"    -> ?retry_with_fresh_db:bool","counters":[]},{"line":"    -> verifier:Verifier.t","counters":[]},{"line":"    -> consensus_local_state:Consensus.Data.Local_state.t","counters":[]},{"line":"    -> persistent_root:Persistent_root.t","counters":[]},{"line":"    -> persistent_frontier:Persistent_frontier.t","counters":[]},{"line":"    -> catchup_mode:[ `Normal | `Super ]","counters":[]},{"line":"    -> unit","counters":[]},{"line":"    -> ( t","counters":[]},{"line":"       , [> `Bootstrap_required","counters":[]},{"line":"         | `Persistent_frontier_malformed","counters":[]},{"line":"         | `Snarked_ledger_mismatch","counters":[]},{"line":"         | `Failure of string ] )","counters":[]},{"line":"       Deferred.Result.t =","counters":[]},{"line":" fun ~context:(module Context : CONTEXT) ~max_length","counters":[]},{"line":"     ?(retry_with_fresh_db = true) ~verifier ~consensus_local_state","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"     ~persistent_root ~persistent_frontier ~catchup_mode () ->","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Deferred.Let_syntax in","counters":[]},{"line":"  (* TODO: #3053 *)","counters":[]},{"line":"  let continue persistent_frontier_instance ~ignore_consensus_local_state","counters":[]},{"line":"      ~snarked_ledger_hash =","counters":[]},{"line":"    let snarked_ledger_hash_json =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Frozen_ledger_hash.to_yojson snarked_ledger_hash","counters":[]},{"line":"    in","counters":[]},{"line":"    match","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Persistent_root.load_from_disk_exn persistent_root ~snarked_ledger_hash","counters":[]},{"line":"        ~logger","counters":[]},{"line":"    with","counters":[]},{"line":"    | Error _err as err_result ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* _err has type [> `Snarked_ledger_mismatch ] *)","counters":[]},{"line":"        [%log warn] \"Persisted frontier failed to load\"","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          ~metadata:","counters":[]},{"line":"            [ (\"error\", `String \"SNARKed ledger mismatch on load from disk\")","counters":[]},{"line":"            ; (\"expected_snarked_ledger_hash\", snarked_ledger_hash_json)","counters":[]},{"line":"            ] ;","counters":[]},{"line":"        let%map () =","counters":[]},{"line":"          Persistent_frontier.Instance.destroy persistent_frontier_instance","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        in","counters":[]},{"line":"        err_result","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Ok persistent_root_instance -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match%bind","counters":[]},{"line":"          load_from_persistence_and_start","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~verifier ~consensus_local_state ~max_length ~persistent_root","counters":[]},{"line":"            ~persistent_root_instance ~catchup_mode ~persistent_frontier","counters":[]},{"line":"            ~persistent_frontier_instance ignore_consensus_local_state","counters":[]},{"line":"        with","counters":[]},{"line":"        | Ok _ as result ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%str_log trace] Persisted_frontier_loaded ;","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"            return result","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | Error err as err_result ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let err_str =","counters":[]},{"line":"              match err with","counters":[]},{"line":"              | `Failure msg ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  sprintf \"Failure: %s\" msg","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              | `Bootstrap_required ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"Bootstrap required\"","counters":[]},{"line":"              (* next two cases aren't reachable, needed for types to work out *)","counters":[]},{"line":"              | `Snarked_ledger_mismatch | `Persistent_frontier_malformed ->","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"                  failwith \"Unexpected failure on loading transition frontier\"","counters":[]},{"line":"            in","counters":[]},{"line":"            [%log warn] \"Persisted frontier failed to load\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"error\", `String err_str)","counters":[]},{"line":"                ; (\"expected_snarked_ledger_hash\", snarked_ledger_hash_json)","counters":[]},{"line":"                ] ;","counters":[]},{"line":"","counters":[]},{"line":"            let%map () =","counters":[]},{"line":"              Persistent_frontier.Instance.destroy persistent_frontier_instance","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"            in","counters":[]},{"line":"            Persistent_root.Instance.close persistent_root_instance ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            err_result )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"  in","counters":[]},{"line":"  let persistent_frontier_instance =","counters":[]},{"line":"    Persistent_frontier.create_instance_exn persistent_frontier","counters":[]},{"line":"  in","counters":[]},{"line":"  let reset_and_continue ?(destroy_frontier_instance = true) () =","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    let%bind () =","counters":[]},{"line":"      if destroy_frontier_instance then","counters":[]},{"line":"        Persistent_frontier.Instance.destroy persistent_frontier_instance","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      else return ()","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Persistent_frontier.reset_database_exn persistent_frontier","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"        ~root_data:(genesis_root_data ~precomputed_values)","counters":[]},{"line":"        ~genesis_state_hash:","counters":[]},{"line":"          (State_hash.With_state_hashes.state_hash","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"             precomputed_values.protocol_state_with_hashes )","counters":[]},{"line":"    in","counters":[]},{"line":"    Persistent_root.reset_to_genesis_exn persistent_root ~precomputed_values ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let genesis_ledger_hash =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Precomputed_values.genesis_ledger precomputed_values","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"      |> Lazy.force |> Ledger.merkle_root |> Frozen_ledger_hash.of_ledger_hash","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    in","counters":[]},{"line":"    continue","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Persistent_frontier.create_instance_exn persistent_frontier)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"      ~ignore_consensus_local_state:false","counters":[]},{"line":"      ~snarked_ledger_hash:genesis_ledger_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  match","counters":[]},{"line":"    Persistent_frontier.Instance.check_database","counters":[]},{"line":"      ~genesis_state_hash:","counters":[]},{"line":"        (State_hash.With_state_hashes.state_hash","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"           precomputed_values.protocol_state_with_hashes )","counters":[]},{"line":"      persistent_frontier_instance","counters":[]},{"line":"  with","counters":[]},{"line":"  | Error `Not_initialized ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* TODO: this case can be optimized to not create the","counters":[]},{"line":"         * database twice through rocks -- currently on clean bootup,","counters":[]},{"line":"         * this code path will reinitialize the rocksdb twice *)","counters":[]},{"line":"      [%log info] \"persistent frontier database does not exist\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      reset_and_continue ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error `Invalid_version ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log info] \"persistent frontier database out of date\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      reset_and_continue ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error (`Genesis_state_mismatch persisted_genesis_state_hash) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log info]","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        \"Genesis state in persisted frontier $persisted_state_hash differs \\","counters":[]},{"line":"         from the current genesis state $precomputed_state_hash\"","counters":[]},{"line":"        ~metadata:","counters":[]},{"line":"          [ ( \"persisted_state_hash\"","counters":[]},{"line":"            , State_hash.to_yojson persisted_genesis_state_hash )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; ( \"precomputed_state_hash\"","counters":[]},{"line":"            , State_hash.to_yojson","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                (State_hash.With_state_hashes.state_hash","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                   precomputed_values.protocol_state_with_hashes ) )","counters":[]},{"line":"          ] ;","counters":[]},{"line":"      reset_and_continue ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error (`Corrupt err) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log error] \"Persistent frontier database is corrupt: %s\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (Persistent_frontier.Database.Error.message err) ;","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"      if retry_with_fresh_db then (","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        (* should retry be on by default? this could be unnecessarily destructive *)","counters":[]},{"line":"        [%log info] \"destroying old persistent frontier database \" ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        let%bind () =","counters":[]},{"line":"          Persistent_frontier.Instance.destroy persistent_frontier_instance","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        in","counters":[]},{"line":"        let%bind () =","counters":[]},{"line":"          Persistent_frontier.destroy_database_exn persistent_frontier","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"        in","counters":[]},{"line":"        load_with_max_length","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          ~context:(module Context)","counters":[]},{"line":"          ~max_length ~verifier ~consensus_local_state ~persistent_root","counters":[]},{"line":"          ~persistent_frontier ~retry_with_fresh_db:false ~catchup_mode ()","counters":[]},{"line":"        >>| Result.map_error ~f:(function","counters":[]},{"line":"              | `Persistent_frontier_malformed ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  `Failure","counters":[]},{"line":"                    \"failed to destroy and create new persistent frontier \\","counters":[]},{"line":"                     database\"","counters":[]},{"line":"              | err ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  err ) )","counters":[]},{"line":"      else return (Error `Persistent_frontier_malformed)","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  | Ok snarked_ledger_hash -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match%bind","counters":[]},{"line":"        continue persistent_frontier_instance ~ignore_consensus_local_state:true","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          ~snarked_ledger_hash","counters":[]},{"line":"      with","counters":[]},{"line":"      | Error (`Failure err) when retry_with_fresh_db ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log error]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            \"Failed to initialize transition frontier: $err. Destroying old \\","counters":[]},{"line":"             persistent frontier database and retrying.\"","counters":[]},{"line":"            ~metadata:[ (\"err\", `String err) ] ;","counters":[]},{"line":"          (* The frontier instance is already destroyed by [continue] before it","counters":[]},{"line":"             returns an [Error], don't attempt to do it again.","counters":[]},{"line":"          *)","counters":[]},{"line":"          reset_and_continue ~destroy_frontier_instance:false ()","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | res ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return res )","counters":[]},{"line":"","counters":[]},{"line":"let load ?(retry_with_fresh_db = true) ~context:(module Context : CONTEXT)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    ~verifier ~consensus_local_state ~persistent_root ~persistent_frontier","counters":[]},{"line":"    ~catchup_mode () =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let max_length =","counters":[]},{"line":"    global_max_length (Precomputed_values.genesis_constants precomputed_values)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"  in","counters":[]},{"line":"  load_with_max_length","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~context:(module Context)","counters":[]},{"line":"    ~max_length ~retry_with_fresh_db ~verifier ~consensus_local_state","counters":[]},{"line":"    ~persistent_root ~persistent_frontier ~catchup_mode ()","counters":[]},{"line":"","counters":[]},{"line":"(* The persistent root and persistent frontier as safe to ignore here","counters":[]},{"line":" * because their lifecycle is longer than the transition frontier's *)","counters":[]},{"line":"let close ~loc","counters":[]},{"line":"    { logger","counters":[]},{"line":"    ; verifier = _","counters":[]},{"line":"    ; consensus_local_state = _","counters":[]},{"line":"    ; catchup_tree = _","counters":[]},{"line":"    ; full_frontier","counters":[]},{"line":"    ; persistent_root = _safe_to_ignore_1","counters":[]},{"line":"    ; persistent_root_instance","counters":[]},{"line":"    ; persistent_frontier = _safe_to_ignore_2","counters":[]},{"line":"    ; persistent_frontier_instance","counters":[]},{"line":"    ; extensions","counters":[]},{"line":"    ; closed","counters":[]},{"line":"    ; genesis_state_hash = _","counters":[]},{"line":"    } =","counters":[]},{"line":"  [%log debug] \"Closing transition frontier\" ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  Full_frontier.close ~loc full_frontier ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Extensions.close extensions ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map () =","counters":[]},{"line":"    Persistent_frontier.Instance.destroy persistent_frontier_instance","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  in","counters":[]},{"line":"  Persistent_root.Instance.close persistent_root_instance ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Ivar.fill_if_empty closed ()","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let closed t = Ivar.read t.closed","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"let persistent_root { persistent_root; _ } = persistent_root","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"let persistent_frontier { persistent_frontier; _ } = persistent_frontier","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"let extensions { extensions; _ } = extensions","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"let genesis_state_hash { genesis_state_hash; _ } = genesis_state_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"let root_snarked_ledger { persistent_root_instance; _ } =","counters":[]},{"line":"  Persistent_root.Instance.snarked_ledger persistent_root_instance","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let add_breadcrumb_exn t breadcrumb =","counters":[]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let diffs = Full_frontier.calculate_diffs t.full_frontier breadcrumb in","counters":[]},{"line":"  [%log' trace t.logger]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ ( \"state_hash\"","counters":[]},{"line":"        , State_hash.to_yojson","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            (Breadcrumb.state_hash (Full_frontier.best_tip t.full_frontier)) )","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      ; ( \"n\"","counters":[]},{"line":"        , `Int (List.length @@ Full_frontier.all_breadcrumbs t.full_frontier) )","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      ]","counters":[]},{"line":"    \"PRE: ($state_hash, $n)\" ;","counters":[]},{"line":"  [%str_log' trace t.logger]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    (Applying_diffs { diffs = List.map ~f:Diff.Full.E.to_yojson diffs }) ;","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  Catchup_tree.apply_diffs t.catchup_tree diffs ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let (`New_root_and_diffs_with_mutants","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"        (new_root_identifier, diffs_with_mutants) ) =","counters":[]},{"line":"    (* Root DB moves here *)","counters":[]},{"line":"    Full_frontier.apply_diffs t.full_frontier diffs","counters":[]},{"line":"      ~has_long_catchup_job:","counters":[]},{"line":"        (Catchup_tree.max_catchup_chain_length t.catchup_tree > 5)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"      ~enable_epoch_ledger_sync:(`Enabled (root_snarked_ledger t))","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"  in","counters":[]},{"line":"  Option.iter new_root_identifier","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:(Persistent_root.Instance.set_root_identifier t.persistent_root_instance) ;","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"  [%log' trace t.logger]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ ( \"state_hash\"","counters":[]},{"line":"        , State_hash.to_yojson","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            (Breadcrumb.state_hash @@ Full_frontier.best_tip t.full_frontier) )","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      ; ( \"n\"","counters":[]},{"line":"        , `Int (List.length @@ Full_frontier.all_breadcrumbs t.full_frontier) )","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      ]","counters":[]},{"line":"    \"POST: ($state_hash, $n)\" ;","counters":[]},{"line":"  let user_cmds =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Mina_block.Validated.valid_commands","counters":[]},{"line":"    @@ Breadcrumb.validated_transition breadcrumb","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  in","counters":[]},{"line":"  [%str_log' trace t.logger] Added_breadcrumb_user_commands","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ ( \"user_commands\"","counters":[]},{"line":"        , `List","counters":[]},{"line":"            (List.map user_cmds","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"               ~f:(With_status.to_yojson User_command.Valid.to_yojson) ) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      ; (\"state_hash\", State_hash.to_yojson (Breadcrumb.state_hash breadcrumb))","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"      ] ;","counters":[]},{"line":"  let lite_diffs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.map diffs ~f:Diff.(fun (Full.E.E diff) -> Lite.E.E (to_lite diff))","counters":[{"col_start":51,"col_end":51,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind sync_result =","counters":[]},{"line":"    (* Diffs get put into a buffer here. They're processed asynchronously, except for root transitions *)","counters":[]},{"line":"    Persistent_frontier.Instance.notify_sync t.persistent_frontier_instance","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      ~diffs:lite_diffs","counters":[]},{"line":"  in","counters":[]},{"line":"  sync_result","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  |> Result.map_error ~f:(fun `Sync_must_be_running ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"         Failure","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           \"Cannot add breadcrumb because persistent frontier sync job is not \\","counters":[]},{"line":"            running, which indicates that transition frontier initialization \\","counters":[]},{"line":"            has not been performed correctly\" )","counters":[]},{"line":"  |> Result.ok_exn ;","counters":[]},{"line":"  Extensions.notify t.extensions ~frontier:t.full_frontier ~diffs_with_mutants","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* proxy full frontier functions *)","counters":[]},{"line":"include struct","counters":[]},{"line":"  open Full_frontier","counters":[]},{"line":"","counters":[]},{"line":"  let proxy1 f { full_frontier; _ } = f full_frontier","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"  let max_length = proxy1 max_length","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let consensus_local_state = proxy1 consensus_local_state","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"  let all_breadcrumbs = proxy1 all_breadcrumbs","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"  let visualize ~filename = proxy1 (visualize ~filename)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  let visualize_to_string = proxy1 visualize_to_string","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"  let iter = proxy1 iter","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"  let common_ancestor = proxy1 common_ancestor","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"  (* reduce sucessors functions (probably remove hashes special case *)","counters":[]},{"line":"  let successors = proxy1 successors","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let successors_rec = proxy1 successors_rec","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"","counters":[]},{"line":"  let successor_hashes = proxy1 successor_hashes","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"  let successor_hashes_rec = proxy1 successor_hashes_rec","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"  let hash_path = proxy1 hash_path","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"  let best_tip = proxy1 best_tip","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"  let root = proxy1 root","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"  let find = proxy1 find","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"  let precomputed_values = proxy1 precomputed_values","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"","counters":[]},{"line":"  let genesis_constants = proxy1 genesis_constants","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"  (* TODO: find -> option externally, find_exn internally *)","counters":[]},{"line":"  let find_exn = proxy1 find_exn","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"  (* TODO: is this an abstraction leak? *)","counters":[]},{"line":"  let root_length = proxy1 root_length","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  (* TODO: probably shouldn't be an `_exn` function *)","counters":[]},{"line":"  let best_tip_path ?max_length = proxy1 (best_tip_path ?max_length)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let best_tip_path_length_exn = proxy1 best_tip_path_length_exn","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"","counters":[]},{"line":"  let find_protocol_state = proxy1 find_protocol_state","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"  (* why can't this one be proxied? *)","counters":[]},{"line":"  let path_map ?max_length { full_frontier; _ } breadcrumb ~f =","counters":[]},{"line":"    path_map ?max_length full_frontier breadcrumb ~f","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module For_tests = struct","counters":[]},{"line":"  open Signature_lib","counters":[]},{"line":"  module Ledger_transfer =","counters":[]},{"line":"    Mina_ledger.Ledger_transfer.Make","counters":[]},{"line":"      (Mina_ledger.Ledger)","counters":[]},{"line":"      (Mina_ledger.Ledger.Db)","counters":[]},{"line":"  open Full_frontier.For_tests","counters":[]},{"line":"","counters":[]},{"line":"  let proxy2 f { full_frontier = x; _ } { full_frontier = y; _ } = f x y","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let equal = proxy2 equal","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"","counters":[]},{"line":"  let load_with_max_length = load_with_max_length","counters":[]},{"line":"","counters":[]},{"line":"  let rec deferred_rose_tree_iter (Rose_tree.T (root, trees)) ~f =","counters":[]},{"line":"    let%bind () = f root in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    Deferred.List.iter trees ~f:(deferred_rose_tree_iter ~f)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (*","counters":[]},{"line":"  let with_frontier_from_rose_tree (Rose_tree.T (root, trees)) ~logger ~verifier ~consensus_local_state ~max_length ~root_snarked_ledger ~f =","counters":[]},{"line":"    with_temp_persistence ~f:(fun ~persistent_root ~persistent_frontier ->","counters":[]},{"line":"      Persistent_root.with_instance_exn persistent_root ~f:(fun instance ->","counters":[]},{"line":"        Persistent_root.Instance.set_root_state_hash instance (Breadcrumb.state_hash @@ root);","counters":[]},{"line":"        ignore @@ Ledger_transfer.transfer_accounts","counters":[]},{"line":"          ~src:root_snarked_ledger","counters":[]},{"line":"          ~dest:(Persistent_root.snarked_ledger instance));","counters":[]},{"line":"      let frontier =","counters":[]},{"line":"        let fail msg = failwith (\"failed to load transition frontier: \"^msg) in","counters":[]},{"line":"        load_with_max_length","counters":[]},{"line":"          {logger; verifier; consensus_local_state}","counters":[]},{"line":"          ~persistent_root ~persistent_frontier","counters":[]},{"line":"          ~max_length","counters":[]},{"line":"        >>| Result.map_error ~f:(Fn.compose fail (function","counters":[]},{"line":"          | `Bootstrap_required -> \"bootstrap required\"","counters":[]},{"line":"          | `Persistent_frontier_malformed -> \"persistent frontier malformed\"","counters":[]},{"line":"          | `Faliure msg -> msg))","counters":[]},{"line":"        >>| Result.ok_or_failwith","counters":[]},{"line":"      in","counters":[]},{"line":"      let%bind () = Deferred.List.iter trees ~f:(deferred_rose_tree_iter ~f:(add_breadcrumb_exn frontier)) in","counters":[]},{"line":"      f frontier)","counters":[]},{"line":"  *)","counters":[]},{"line":"","counters":[]},{"line":"  (* a helper quickcheck generator which always returns the genesis breadcrumb *)","counters":[]},{"line":"  let gen_genesis_breadcrumb ?(logger = Logger.null ()) ~verifier","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      ~(precomputed_values : Precomputed_values.t) () =","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Quickcheck.Generator.create (fun ~size:_ ~random:_ ->","counters":[]},{"line":"        let transition_receipt_time = Some (Time.now ()) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        Protocol_version.(set_current zero) ;","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        let genesis_transition =","counters":[]},{"line":"          Mina_block.Validated.lift (Mina_block.genesis ~precomputed_values)","counters":[]},{"line":"        in","counters":[]},{"line":"        let genesis_ledger =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Lazy.force (Precomputed_values.genesis_ledger precomputed_values)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"        in","counters":[]},{"line":"        (*scan state is empty so no protocol state should be required*)","counters":[]},{"line":"        let get_state hash =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Or_error.errorf","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            !\"Protocol state (for scan state transactions) for \\","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"              %{sexp:State_hash.t} not found\"","counters":[]},{"line":"            hash","counters":[]},{"line":"        in","counters":[]},{"line":"        let genesis_staged_ledger =","counters":[]},{"line":"          Or_error.ok_exn","counters":[]},{"line":"            (Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                 Staged_ledger","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                 .of_scan_state_pending_coinbases_and_snarked_ledger ~logger","counters":[]},{"line":"                   ~verifier ~constraint_constants","counters":[]},{"line":"                   ~scan_state:","counters":[]},{"line":"                     (Staged_ledger.Scan_state.empty ~constraint_constants ())","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                   ~get_state","counters":[]},{"line":"                   ~pending_coinbases:","counters":[]},{"line":"                     ( Or_error.ok_exn","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                     @@ Pending_coinbase.create","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                          ~depth:constraint_constants.pending_coinbase_depth ()","counters":[]},{"line":"                     )","counters":[]},{"line":"                   ~snarked_ledger:genesis_ledger","counters":[]},{"line":"                   ~snarked_local_state:(Mina_state.Local_state.empty ())","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"                   ~expected_merkle_root:(Ledger.merkle_root genesis_ledger) )","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"            )","counters":[]},{"line":"        in","counters":[]},{"line":"        Breadcrumb.create ~validated_transition:genesis_transition","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~staged_ledger:genesis_staged_ledger ~just_emitted_a_proof:false","counters":[]},{"line":"          ~transition_receipt_time )","counters":[]},{"line":"","counters":[]},{"line":"  let gen_persistence ?(logger = Logger.null ()) ~verifier","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ~(precomputed_values : Precomputed_values.t) () =","counters":[]},{"line":"    let open Core in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let root_dir = \"/tmp/coda_unit_test\" in","counters":[]},{"line":"    Quickcheck.Generator.create (fun ~size:_ ~random:_ ->","counters":[]},{"line":"        let uuid = Uuid_unix.create () in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let temp_dir = root_dir ^/ Uuid.to_string uuid in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        let root_dir = temp_dir ^/ \"root\" in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let frontier_dir = temp_dir ^/ \"frontier\" in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let cleaned = ref false in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let clean_temp_dirs _ =","counters":[]},{"line":"          if not !cleaned then (","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"            let process_info =","counters":[]},{"line":"              Unix.create_process ~prog:\"rm\" ~args:[ \"-rf\"; temp_dir ]","counters":[]},{"line":"            in","counters":[]},{"line":"            Unix.waitpid process_info.pid","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            |> Result.map_error ~f:(function","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                 | `Exit_non_zero n ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     Printf.sprintf \"error (exit code %d)\" n","counters":[]},{"line":"                 | `Signal _ ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     \"error (received unexpected signal)\" )","counters":[]},{"line":"            |> Result.ok_or_failwith ;","counters":[]},{"line":"            cleaned := true )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        in","counters":[]},{"line":"        Unix.mkdir_p temp_dir ;","counters":[]},{"line":"        Unix.mkdir root_dir ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Unix.mkdir frontier_dir ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let persistent_root =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Persistent_root.create ~logger ~directory:root_dir","counters":[]},{"line":"            ~ledger_depth:precomputed_values.constraint_constants.ledger_depth","counters":[]},{"line":"        in","counters":[]},{"line":"        let persistent_frontier =","counters":[]},{"line":"          Persistent_frontier.create ~logger ~verifier","counters":[]},{"line":"            ~time_controller:(Block_time.Controller.basic ~logger)","counters":[]},{"line":"            ~directory:frontier_dir","counters":[]},{"line":"        in","counters":[]},{"line":"        Gc.Expert.add_finalizer_exn persistent_root clean_temp_dirs ;","counters":[]},{"line":"        Gc.Expert.add_finalizer_exn persistent_frontier (fun x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            Option.iter","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              persistent_frontier.Persistent_frontier.Factory_type.instance","counters":[]},{"line":"              ~f:(fun instance ->","counters":[]},{"line":"                Persistent_frontier.Database.close instance.db ) ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            Option.iter persistent_root.Persistent_root.Factory_type.instance","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~f:(fun instance -> Ledger.Db.close instance.snarked_ledger) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"            clean_temp_dirs x ) ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        (persistent_root, persistent_frontier) )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let gen_genesis_breadcrumb_with_protocol_states ~logger ~verifier","counters":[]},{"line":"      ~precomputed_values () =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map root =","counters":[]},{"line":"      gen_genesis_breadcrumb ~logger ~verifier ~precomputed_values ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    in","counters":[]},{"line":"    (* List of protocol states required to prove transactions in the scan state; empty scan state at genesis*)","counters":[]},{"line":"    let protocol_states = [] in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (root, protocol_states)","counters":[]},{"line":"","counters":[]},{"line":"  let gen ?(logger = Logger.null ()) ~verifier ?trust_system","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      ?consensus_local_state ~precomputed_values","counters":[]},{"line":"      ?(root_ledger_and_accounts =","counters":[]},{"line":"        ( Lazy.force (Precomputed_values.genesis_ledger precomputed_values)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        , Lazy.force (Precomputed_values.accounts precomputed_values) ))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      ?(gen_root_breadcrumb =","counters":[]},{"line":"        gen_genesis_breadcrumb_with_protocol_states ~logger ~verifier","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          ~precomputed_values ()) ~max_length ~size","counters":[]},{"line":"      ?(use_super_catchup : bool option) () =","counters":[]},{"line":"    (* TODO: Take this as an argument *)","counters":[]},{"line":"    let module Context = struct","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let logger = logger","counters":[]},{"line":"","counters":[]},{"line":"      let precomputed_values = precomputed_values","counters":[]},{"line":"","counters":[]},{"line":"      let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"      let consensus_constants = precomputed_values.consensus_constants","counters":[]},{"line":"    end in","counters":[]},{"line":"    let open Context in","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let trust_system =","counters":[]},{"line":"      Option.value trust_system ~default:(Trust_system.null ())","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"    in","counters":[]},{"line":"    let epoch_ledger_location =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Filename.temp_dir_name ^/ \"epoch_ledger\"","counters":[]},{"line":"      ^ (Uuid_unix.create () |> Uuid.to_string)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    in","counters":[]},{"line":"    let consensus_local_state =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Option.value consensus_local_state","counters":[]},{"line":"        ~default:","counters":[]},{"line":"          (Consensus.Data.Local_state.create","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"             ~context:(module Context)","counters":[]},{"line":"             ~genesis_ledger:","counters":[]},{"line":"               (Precomputed_values.genesis_ledger precomputed_values)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"             ~genesis_epoch_data:precomputed_values.genesis_epoch_data","counters":[]},{"line":"             ~epoch_ledger_location Public_key.Compressed.Set.empty","counters":[]},{"line":"             ~genesis_state_hash:","counters":[]},{"line":"               (State_hash.With_state_hashes.state_hash","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                  precomputed_values.protocol_state_with_hashes ) )","counters":[]},{"line":"    in","counters":[]},{"line":"    let root_snarked_ledger, root_ledger_accounts = root_ledger_and_accounts in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* TODO: ensure that rose_tree cannot be longer than k *)","counters":[]},{"line":"    let%bind root, branches, protocol_states =","counters":[]},{"line":"      let%bind root, protocol_states = gen_root_breadcrumb in","counters":[]},{"line":"      let%map (Rose_tree.T (root, branches)) =","counters":[]},{"line":"        Quickcheck.Generator.with_size ~size","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          (Quickcheck_lib.gen_imperative_rose_tree","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"             (Quickcheck.Generator.return root)","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"             (Breadcrumb.For_tests.gen_non_deferred ~logger ~precomputed_values","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                ~verifier ~trust_system","counters":[]},{"line":"                ~accounts_with_secret_keys:root_ledger_accounts () ) )","counters":[]},{"line":"      in","counters":[]},{"line":"      (root, branches, protocol_states)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let root_data =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Root_data.Limited.create","counters":[]},{"line":"        ~transition:(Breadcrumb.validated_transition root)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"        ~scan_state:(Breadcrumb.staged_ledger root |> Staged_ledger.scan_state)","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"        ~pending_coinbase:","counters":[]},{"line":"          ( Breadcrumb.staged_ledger root","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          |> Staged_ledger.pending_coinbase_collection )","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"        ~protocol_states","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map persistent_root, persistent_frontier =","counters":[]},{"line":"      gen_persistence ~logger ~precomputed_values ~verifier ()","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"    in","counters":[]},{"line":"    Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Persistent_frontier.reset_database_exn persistent_frontier ~root_data","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~genesis_state_hash:","counters":[]},{"line":"            (State_hash.With_state_hashes.state_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"               precomputed_values.protocol_state_with_hashes ) ) ;","counters":[]},{"line":"    Persistent_root.with_instance_exn persistent_root ~f:(fun instance ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let transition = Root_data.Limited.transition root_data in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Persistent_root.Instance.set_root_state_hash instance","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Mina_block.Validated.state_hash transition) ;","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"        ignore","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        @@ Ledger_transfer.transfer_accounts ~src:root_snarked_ledger","counters":[]},{"line":"             ~dest:(Persistent_root.Instance.snarked_ledger instance) ) ;","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"    let frontier_result =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"          load_with_max_length ~max_length ~retry_with_fresh_db:false","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~verifier ~consensus_local_state ~persistent_root","counters":[]},{"line":"            ~catchup_mode:","counters":[]},{"line":"              ( match use_super_catchup with","counters":[]},{"line":"              | Some true ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  `Super","counters":[]},{"line":"              | Some false ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  `Normal","counters":[]},{"line":"              | None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  `Normal )","counters":[]},{"line":"            ~persistent_frontier () )","counters":[]},{"line":"    in","counters":[]},{"line":"    let frontier =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let fail msg = failwith (\"failed to load transition frontier: \" ^ msg) in","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      match frontier_result with","counters":[]},{"line":"      | Error `Bootstrap_required ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail \"bootstrap required\"","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      | Error `Persistent_frontier_malformed ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail \"persistent frontier malformed\"","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      | Error `Snarked_ledger_mismatch ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail \"persistent frontier is out of sync with snarked ledger\"","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      | Error (`Failure msg) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail msg","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      | Ok frontier ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          frontier","counters":[]},{"line":"    in","counters":[]},{"line":"    Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"        Deferred.List.iter ~how:`Sequential branches","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~f:(deferred_rose_tree_iter ~f:(add_breadcrumb_exn frontier)) ) ;","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"    Core.Gc.Expert.add_finalizer_exn consensus_local_state","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (fun consensus_local_state ->","counters":[]},{"line":"        Consensus.Data.Local_state.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Snapshot.Ledger_snapshot.close","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          @@ staking_epoch_ledger consensus_local_state) ;","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        Consensus.Data.Local_state.(","counters":[]},{"line":"          Snapshot.Ledger_snapshot.close","counters":[]},{"line":"          @@ next_epoch_ledger consensus_local_state) ) ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    frontier","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let gen_with_branch ?logger ~verifier ?trust_system ?consensus_local_state","counters":[]},{"line":"      ~precomputed_values","counters":[]},{"line":"      ?(root_ledger_and_accounts =","counters":[]},{"line":"        ( Lazy.force (Precomputed_values.genesis_ledger precomputed_values)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        , Lazy.force (Precomputed_values.accounts precomputed_values) ))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      ?gen_root_breadcrumb ?(get_branch_root = root) ~max_length ~frontier_size","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"      ~branch_size ?(use_super_catchup : bool option) () =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind frontier =","counters":[]},{"line":"      gen ?logger ~verifier ?trust_system ?use_super_catchup","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ?consensus_local_state ~precomputed_values ?gen_root_breadcrumb","counters":[]},{"line":"        ~root_ledger_and_accounts ~max_length ~size:frontier_size ()","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map make_branch =","counters":[]},{"line":"      Breadcrumb.For_tests.gen_seq ?logger ~precomputed_values ~verifier","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ?trust_system","counters":[]},{"line":"        ~accounts_with_secret_keys:(snd root_ledger_and_accounts)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        branch_size","counters":[]},{"line":"    in","counters":[]},{"line":"    let branch =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"          make_branch (get_branch_root frontier) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    in","counters":[]},{"line":"    (frontier, branch)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}