{"filename":"src/lib/secrets/keypair_common.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Async.Deferred.Let_syntax","counters":[]},{"line":"","counters":[]},{"line":"let error_raise e ~error_ctx = Error.tag ~tag:error_ctx e |> Error.raise","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"module Make_terminal_stdin (KP : sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val env : string","counters":[]},{"line":"","counters":[]},{"line":"  val read :","counters":[]},{"line":"       privkey_path:string","counters":[]},{"line":"    -> password:Secret_file.password","counters":[]},{"line":"    -> (t, Privkey_error.t) Deferred.Result.t","counters":[]},{"line":"","counters":[]},{"line":"  val write_exn :","counters":[]},{"line":"    t -> privkey_path:string -> password:Secret_file.password -> unit Deferred.t","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  open KP","counters":[]},{"line":"","counters":[]},{"line":"  let rec prompt_password prompt =","counters":[]},{"line":"    let open Deferred.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind pw1 = Password.hidden_line_or_env prompt ~env in","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    let%bind pw2 = Password.hidden_line_or_env \"Again to confirm: \" ~env in","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    if not (Bytes.equal pw1 pw2) then (","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"      eprintf \"Error: passwords don't match, try again\\n\" ;","counters":[]},{"line":"      prompt_password prompt )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    else return pw2","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let read_exn ?(should_prompt_user = true) ?(should_reask = true) ~which path =","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    let read_privkey password = read ~privkey_path:path ~password in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    let%bind result =","counters":[]},{"line":"      match Sys.getenv env with","counters":[]},{"line":"      | Some password ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* this function is only called from client commands that can prompt for","counters":[]},{"line":"             a password, so printing a message, rather than a formatted log, is OK","counters":[]},{"line":"          *)","counters":[]},{"line":"          printf \"Using %s private-key password from environment variable %s\\n\"","counters":[]},{"line":"            which env ;","counters":[]},{"line":"          read_privkey (lazy (Deferred.return @@ Bytes.of_string password))","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if should_prompt_user then","counters":[]},{"line":"            let read_file () =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              read_privkey","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( lazy","counters":[]},{"line":"                  (Password.read_hidden_line ~error_help_message:\"\"","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                     \"Private-key password: \" ) )","counters":[]},{"line":"            in","counters":[]},{"line":"            let rec read_until_correct () =","counters":[]},{"line":"              match%bind read_file () with","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              | Ok result ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Deferred.Result.return result","counters":[]},{"line":"              | Error `Incorrect_password_or_corrupted_privkey ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  eprintf \"Wrong password! Please try again\\n\" ;","counters":[]},{"line":"                  read_until_correct ()","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              | Error exn ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Deferred.Result.fail exn","counters":[]},{"line":"            in","counters":[]},{"line":"            if should_reask then read_until_correct () else read_file ()","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"          else Deferred.Result.fail (`Password_not_in_environment [ env ])","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    in","counters":[]},{"line":"    match result with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok result ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return result","counters":[]},{"line":"    | Error e ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Privkey_error.raise ~which e","counters":[]},{"line":"","counters":[]},{"line":"  let write_exn kp ~privkey_path =","counters":[]},{"line":"    write_exn kp ~privkey_path","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~password:(lazy (prompt_password \"Password for new private key file: \"))","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}