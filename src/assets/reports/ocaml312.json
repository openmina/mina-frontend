{"filename":"src/lib/transition_frontier/extensions/transition_registry.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t = unit Ivar.t list State_hash.Table.t","counters":[]},{"line":"","counters":[]},{"line":"  type view = unit","counters":[]},{"line":"","counters":[]},{"line":"  let create ~logger:_ _frontier = (State_hash.Table.create (), ())","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  let notify t state_hash =","counters":[]},{"line":"    State_hash.Table.change t state_hash ~f:(function","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      | Some ls ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          List.iter ls ~f:(fun ivar ->","counters":[]},{"line":"              if Ivar.is_full ivar then","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log' error (Logger.create ())] \"Ivar.fill bug is here JJJ!\" ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"              Ivar.fill ivar () ) ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          None","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None )","counters":[]},{"line":"","counters":[]},{"line":"  let register t state_hash =","counters":[]},{"line":"    Deferred.create (fun ivar ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        State_hash.Table.update t state_hash ~f:(function","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          | Some ls ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ivar :: ls","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [ ivar ] ) )","counters":[]},{"line":"","counters":[]},{"line":"  let handle_diffs transition_registry _ diffs_with_mutants =","counters":[]},{"line":"    List.iter diffs_with_mutants ~f:(function","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      | Diff.Full.With_mutant.E (New_node (Full breadcrumb), _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          notify transition_registry (Breadcrumb.state_hash breadcrumb)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          () ) ;","counters":[]},{"line":"    None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Broadcasted = Functor.Make_broadcasted (T)","counters":[]},{"line":"include T","counters":[{"col_start":8,"col_end":8,"count":2}]}]}