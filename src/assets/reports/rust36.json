{"filename":"src/staged_ledger/diff_creation_log.rs","lines":[{"line":"use crate::scan_state::currency::{Fee, Magnitude};","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        scan_state::transaction_snark::work,","counters":[]},{"line":"        transaction_logic::{valid, CoinbaseFeeTransfer, GenericCommand, WithStatus},","counters":[]},{"line":"    },","counters":[]},{"line":"    staged_ledger::diff::AtMostTwo,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use self::detail::Detail;","counters":[]},{"line":"use self::summary::Summary;","counters":[]},{"line":"","counters":[]},{"line":"type CountAndFee = (u64, Fee);","counters":[]},{"line":"","counters":[]},{"line":"type FeeSummable = Fee;","counters":[]},{"line":"","counters":[]},{"line":"fn add_fee(fee1: FeeSummable, fee2: FeeSummable) -> FeeSummable {","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"    fee1.checked_add(&fee2).unwrap()","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"#[derive(Copy, Debug, Clone)]","counters":[{"col_start":15,"col_end":16,"count":0},{"col_start":19,"col_end":20,"count":0},{"col_start":22,"col_end":27,"count":0}]},{"line":"pub enum Reason {","counters":[]},{"line":"    NoWork,","counters":[]},{"line":"    NoSpace,","counters":[]},{"line":"    InsufficientFees,","counters":[]},{"line":"    ExtraWork,","counters":[]},{"line":"    Init,","counters":[]},{"line":"    End,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":20,"col_end":21,"count":0}]},{"line":"pub enum Partition {","counters":[]},{"line":"    First,","counters":[]},{"line":"    Second,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"mod summary {","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Clone, Debug)]","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"    pub struct Resources {","counters":[]},{"line":"        pub completed_work: CountAndFee,","counters":[]},{"line":"        pub commands: CountAndFee,","counters":[]},{"line":"        pub coinbase_work_fees: AtMostTwo<Fee>,","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Clone, Debug)]","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"    pub struct CommandConstraints {","counters":[]},{"line":"        insufficient_work: u64,","counters":[]},{"line":"        insufficient_space: u64,","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Clone, Debug)]","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"    pub struct CompletedWorkConstraints {","counters":[]},{"line":"        insufficient_fees: u64,","counters":[]},{"line":"        extra_work: u64,","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Clone, Debug)]","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"    pub struct Summary {","counters":[]},{"line":"        partition: Partition,","counters":[]},{"line":"        start_resources: Resources,","counters":[]},{"line":"        available_slots: u64,","counters":[]},{"line":"        required_work_count: u64,","counters":[]},{"line":"        discarded_commands: CommandConstraints,","counters":[]},{"line":"        discarded_completed_work: CompletedWorkConstraints,","counters":[]},{"line":"        end_resources: Resources,","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    pub fn coinbase_fees(coinbase: &AtMostTwo<CoinbaseFeeTransfer>) -> AtMostTwo<FeeSummable> {","counters":[]},{"line":"        use AtMostTwo::{One, Two, Zero};","counters":[]},{"line":"","counters":[]},{"line":"        match coinbase {","counters":[{"col_start":14,"col_end":22,"count":0}]},{"line":"            One(Some(x)) => One(Some(x.fee)),","counters":[{"col_start":21,"col_end":44,"count":0}]},{"line":"            Two(Some((x, None))) => Two(Some((x.fee, None))),","counters":[{"col_start":22,"col_end":60,"count":0}]},{"line":"            Two(Some((x, Some(x2)))) => Two(Some((x.fee, Some(x2.fee)))),","counters":[{"col_start":22,"col_end":72,"count":0}]},{"line":"            Zero => Zero,","counters":[{"col_start":20,"col_end":24,"count":0}]},{"line":"            One(None) => One(None),","counters":[{"col_start":25,"col_end":34,"count":0}]},{"line":"            Two(None) => Two(None),","counters":[{"col_start":25,"col_end":34,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    impl Resources {","counters":[]},{"line":"        pub fn init_resources(","counters":[{"col_start":8,"col_end":30,"count":0}]},{"line":"            completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        ) -> Resources {","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            let completed_work: CountAndFee = (","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                completed_work.len() as u64,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                completed_work","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .fold(Fee::zero(), |accum, cmd| add_fee(cmd.fee, accum)),","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":52,"col_end":75,"count":0},{"col_start":75,"col_end":77,"count":0}]},{"line":"            );","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            let commands: CountAndFee = (","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                commands.len() as u64,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                commands","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .fold(Fee::zero(), |accum, cmd| add_fee(cmd.data.fee(), accum)),","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":52,"col_end":82,"count":0},{"col_start":82,"col_end":84,"count":0}]},{"line":"            );","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            let coinbase_work_fees = coinbase_fees(coinbase);","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                completed_work,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                commands,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                coinbase_work_fees,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    impl Summary {","counters":[]},{"line":"        pub fn init(","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"            completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            partition: Partition,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            available_slots: u64,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            required_work_count: u64,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        ) -> Summary {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            let start_resources = Resources::init_resources(completed_work, commands, coinbase);","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            let discarded_commands = CommandConstraints {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                insufficient_work: 0,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                insufficient_space: 0,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            let discarded_completed_work = CompletedWorkConstraints {","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                insufficient_fees: 0,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                extra_work: 0,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            let end_resources = Resources {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                completed_work: (0, Fee::zero()),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                commands: (0, Fee::zero()),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                coinbase_work_fees: AtMostTwo::Zero,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                partition,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                start_resources,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                available_slots,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                required_work_count,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                discarded_commands,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                discarded_completed_work,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                end_resources,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        pub fn end_log(","counters":[{"col_start":8,"col_end":23,"count":0}]},{"line":"            &mut self,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        ) {","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"            self.end_resources = Resources::init_resources(completed_work, commands, coinbase);","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        pub fn discard_command(&mut self, why: Reason) {","counters":[{"col_start":8,"col_end":56,"count":0}]},{"line":"            match why {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                Reason::NoWork => {","counters":[{"col_start":34,"col_end":35,"count":0}]},{"line":"                    self.discarded_commands.insufficient_work += 1;","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                Reason::NoSpace => {","counters":[{"col_start":35,"col_end":36,"count":0}]},{"line":"                    self.discarded_commands.insufficient_space += 1;","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                _ => {}","counters":[{"col_start":21,"col_end":23,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        pub fn discard_completed_work(&mut self, why: Reason) {","counters":[{"col_start":8,"col_end":63,"count":0}]},{"line":"            match why {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                Reason::InsufficientFees => {","counters":[{"col_start":44,"col_end":45,"count":0}]},{"line":"                    self.discarded_completed_work.insufficient_fees += 1;","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                Reason::ExtraWork => {","counters":[{"col_start":37,"col_end":38,"count":0}]},{"line":"                    self.discarded_completed_work.extra_work += 1;","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                _ => {}","counters":[{"col_start":21,"col_end":23,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"mod detail {","counters":[]},{"line":"    use crate::staged_ledger::diff::AtMostTwo;","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Debug, Clone)]","counters":[{"col_start":13,"col_end":18,"count":0},{"col_start":20,"col_end":25,"count":0}]},{"line":"    struct Line {","counters":[]},{"line":"        reason: Reason,","counters":[]},{"line":"        commands: CountAndFee,","counters":[]},{"line":"        completed_work: CountAndFee,","counters":[]},{"line":"        coinbase: AtMostTwo<Fee>,","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Clone, Debug)]","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"    pub struct Detail(Vec<Line>);","counters":[]},{"line":"","counters":[]},{"line":"    impl Detail {","counters":[]},{"line":"        pub fn init(","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"            completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        ) -> Detail {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            let mut lines = Vec::with_capacity(256);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            let init = summary::Resources::init_resources(completed_work, commands, coinbase);","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"","counters":[]},{"line":"            lines.push(Line {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                reason: Reason::Init,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                commands: init.commands,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                completed_work: init.completed_work,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                coinbase: init.coinbase_work_fees,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            });","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"            Self(lines)","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        pub fn discard_command(&mut self, why: Reason, command: &valid::UserCommand) {","counters":[{"col_start":8,"col_end":86,"count":0}]},{"line":"            assert!(!self.0.is_empty());","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"            let last = self.0.last().unwrap();","counters":[{"col_start":16,"col_end":46,"count":-1109}]},{"line":"","counters":[]},{"line":"            let new_line = Line {","counters":[{"col_start":0,"col_end":33,"count":-1109}]},{"line":"                reason: why,","counters":[{"col_start":0,"col_end":28,"count":-1109}]},{"line":"                commands: (","counters":[{"col_start":0,"col_end":27,"count":-1109}]},{"line":"                    last.commands.0 - 1,","counters":[{"col_start":0,"col_end":40,"count":-1109}]},{"line":"                    last.commands.1.checked_sub(&command.fee()).unwrap(),","counters":[{"col_start":0,"col_end":73,"count":-1109}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":-1109}]},{"line":"                ..last.clone()","counters":[{"col_start":0,"col_end":30,"count":-1109}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":-1109}]},{"line":"","counters":[]},{"line":"            self.0.push(new_line);","counters":[{"col_start":0,"col_end":34,"count":-1109}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":-1109}]},{"line":"","counters":[]},{"line":"        pub fn discard_completed_work(&mut self, why: Reason, completed_work: &work::Unchecked) {","counters":[{"col_start":8,"col_end":97,"count":0}]},{"line":"            assert!(!self.0.is_empty());","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"            let last = self.0.last().unwrap();","counters":[{"col_start":16,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"            let new_line = Line {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                reason: why,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                completed_work: (","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                    last.completed_work.0 - 1,","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    last.completed_work","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                        .1","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        .checked_sub(&completed_work.fee)","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                        .unwrap(),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                ..last.clone()","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            self.0.push(new_line);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        pub fn end_log(&mut self, coinbase: &AtMostTwo<CoinbaseFeeTransfer>) {","counters":[{"col_start":8,"col_end":78,"count":0}]},{"line":"            assert!(!self.0.is_empty());","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"            let last = self.0.last().unwrap();","counters":[{"col_start":16,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"            // Because coinbase could be updated ooutside of the check_constraints_and_update function","counters":[{"col_start":0,"col_end":102,"count":0}]},{"line":"            let new_line = Line {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                reason: Reason::End,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                coinbase: summary::coinbase_fees(coinbase),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                ..last.clone()","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            self.0.push(new_line);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct DiffCreationLog {","counters":[]},{"line":"    pub summary: Summary,","counters":[]},{"line":"    pub detail: Detail,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"type LogList = Vec<DiffCreationLog>;","counters":[]},{"line":"type SummaryList = Vec<Summary>;","counters":[]},{"line":"type DetailList = Vec<Detail>;","counters":[]},{"line":"","counters":[]},{"line":"impl DiffCreationLog {","counters":[]},{"line":"    pub fn init(","counters":[{"col_start":4,"col_end":16,"count":0}]},{"line":"        completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        partition: Partition,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        available_slots: u64,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        required_work_count: u64,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    ) -> Self {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        let summary = Summary::init(","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            completed_work,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            commands,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            coinbase,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            partition,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            available_slots,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            required_work_count,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        let detail = Detail::init(completed_work, commands, coinbase);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"        Self { summary, detail }","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn discard_command(&mut self, why: Reason, command: &valid::UserCommand) {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        self.detail.discard_command(why, command);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        self.summary.discard_command(why);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn discard_completed_work(&mut self, why: Reason, completed_work: &work::Unchecked) {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        self.detail.discard_completed_work(why, completed_work);","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        self.summary.discard_command(why);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn end_log(","counters":[{"col_start":4,"col_end":19,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        completed_work: &[work::Checked],","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        commands: &[WithStatus<valid::UserCommand>],","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        coinbase: &AtMostTwo<CoinbaseFeeTransfer>,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"    ) {","counters":[{"col_start":0,"col_end":7,"count":0}]},{"line":"        self.summary.end_log(completed_work, commands, coinbase);","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"        self.detail.end_log(coinbase);","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}