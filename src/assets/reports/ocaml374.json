{"filename":"src/lib/snarky_group_map/snarky_group_map.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Params = Group_map.Params","counters":[]},{"line":"","counters":[]},{"line":"let to_group (type t)","counters":[]},{"line":"    (module F : Group_map.Field_intf.S_unchecked with type t = t) ~params t =","counters":[]},{"line":"  let module M =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Group_map.Make","counters":[]},{"line":"      (F)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        include F","counters":[]},{"line":"","counters":[]},{"line":"        let constant = Fn.id","counters":[]},{"line":"      end)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let params = params","counters":[]},{"line":"      end)","counters":[]},{"line":"  in","counters":[]},{"line":"  let { Group_map.Spec.a; b } = Params.spec params in","counters":[]},{"line":"  let try_decode x =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let f x = F.((x * x * x) + (a * x) + b) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    let y = f x in","counters":[]},{"line":"    if F.is_square y then Some (x, F.sqrt y) else None","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  in","counters":[]},{"line":"  let x1, x2, x3 = M.potential_xs t in","counters":[]},{"line":"  List.find_map [ x1; x2; x3 ] ~f:try_decode |> Option.value_exn","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  open Snarky_backendless","counters":[]},{"line":"","counters":[]},{"line":"  let wrap = Checked_map.wrap","counters":[]},{"line":"","counters":[]},{"line":"  let to_group (type f) (module M : Snark_intf.Run with type field = f) ~params","counters":[]},{"line":"      t =","counters":[]},{"line":"    let module G =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Checked_map.Make","counters":[]},{"line":"        (M)","counters":[]},{"line":"        (struct","counters":[]},{"line":"          let params = params","counters":[]},{"line":"        end)","counters":[]},{"line":"    in","counters":[]},{"line":"    G.to_group t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}