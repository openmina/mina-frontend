{"filename":"src/lib/mina_lib/mina_subscriptions.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"type 'a reader_and_writer = 'a Pipe.Reader.t * 'a Pipe.Writer.t","counters":[]},{"line":"","counters":[]},{"line":"module Optional_public_key = struct","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type t = Public_key.Compressed.t option [@@deriving hash, compare, sexp]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.Make (T)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  { subscribed_payment_users :","counters":[]},{"line":"      Signed_command.t reader_and_writer Public_key.Compressed.Table.t","counters":[]},{"line":"  ; subscribed_block_users :","counters":[]},{"line":"      (Filtered_external_transition.t, State_hash.t) With_hash.t","counters":[]},{"line":"      reader_and_writer","counters":[]},{"line":"      list","counters":[]},{"line":"      Optional_public_key.Table.t","counters":[]},{"line":"  ; mutable reorganization_subscription : [ `Changed ] reader_and_writer list","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"(* idempotent *)","counters":[]},{"line":"let add_new_subscription (t : t) ~pk =","counters":[]},{"line":"  (* add a new subscribed block user for this pk if we're not already tracking it *)","counters":[]},{"line":"  ignore","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Optional_public_key.Table.find_or_add t.subscribed_block_users (Some pk)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ~default:(fun () -> [ Pipe.create () ])","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      : (Filtered_external_transition.t, State_hash.t) With_hash.t","counters":[]},{"line":"        reader_and_writer","counters":[]},{"line":"        list ) ;","counters":[]},{"line":"  (* add a new payment user if we're not already tracking it *)","counters":[]},{"line":"  ignore","counters":[]},{"line":"    ( Public_key.Compressed.Table.find_or_add t.subscribed_payment_users pk","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"        ~default:Pipe.create","counters":[]},{"line":"      : Signed_command.t reader_and_writer )","counters":[]},{"line":"","counters":[]},{"line":"let create ~logger ~constraint_constants ~wallets ~new_blocks","counters":[]},{"line":"    ~transition_frontier ~is_storing_all ~time_controller","counters":[]},{"line":"    ~upload_blocks_to_gcloud ~precomputed_block_writer =","counters":[]},{"line":"  let subscribed_block_users =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Optional_public_key.Table.of_alist_multi","counters":[]},{"line":"    @@ List.map (Secrets.Wallets.pks wallets) ~f:(fun wallet ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"           let reader, writer = Pipe.create () in","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           (Some wallet, (reader, writer)) )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  in","counters":[]},{"line":"  let subscribed_payment_users =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Public_key.Compressed.Table.of_alist_exn","counters":[]},{"line":"    @@ List.map (Secrets.Wallets.pks wallets) ~f:(fun wallet ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"           let reader, writer = Pipe.create () in","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           (wallet, (reader, writer)) )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  in","counters":[]},{"line":"  let update_payment_subscriptions filtered_external_transition participants =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Set.iter participants ~f:(fun participant ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Hashtbl.find_and_call subscribed_payment_users participant","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~if_not_found:ignore ~if_found:(fun (_, writer) ->","counters":[]},{"line":"            let user_commands =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              filtered_external_transition","counters":[]},{"line":"              |> Filtered_external_transition.commands","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"              |> List.map ~f:(fun { With_status.data; _ } -> data.data)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"              |> List.filter_map ~f:(function","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                   | User_command.Signed_command c ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       Some c","counters":[]},{"line":"                   | Zkapp_command _ ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       None )","counters":[]},{"line":"              |> Fn.flip Signed_command.filter_by_participant participant","counters":[]},{"line":"            in","counters":[]},{"line":"            List.iter user_commands ~f:(fun user_command ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                Pipe.write_without_pushback_if_open writer user_command ) ) )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  in","counters":[]},{"line":"  let update_block_subscriptions { With_hash.data = external_transition; hash }","counters":[]},{"line":"      transactions participants =","counters":[]},{"line":"    Set.iter participants ~f:(fun participant ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Hashtbl.find_and_call subscribed_block_users (Some participant)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~if_found:(fun pipes ->","counters":[]},{"line":"            List.iter pipes ~f:(fun (_, writer) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                let data =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Filtered_external_transition.of_transition external_transition","counters":[]},{"line":"                    (`Some (Public_key.Compressed.Set.singleton participant))","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                    transactions","counters":[]},{"line":"                in","counters":[]},{"line":"                Pipe.write_without_pushback_if_open writer","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  { With_hash.data; hash } ) )","counters":[]},{"line":"          ~if_not_found:ignore ) ;","counters":[]},{"line":"    Hashtbl.find_and_call subscribed_block_users None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~if_found:(fun pipes ->","counters":[]},{"line":"        List.iter pipes ~f:(fun (_, writer) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let data =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Filtered_external_transition.of_transition external_transition","counters":[]},{"line":"                `All transactions","counters":[]},{"line":"            in","counters":[]},{"line":"            if not (Pipe.is_closed writer) then","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"              Pipe.write_without_pushback writer { With_hash.data; hash } ) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~if_not_found:ignore","counters":[]},{"line":"  in","counters":[]},{"line":"  let gcloud_keyfile =","counters":[]},{"line":"    match Core.Sys.getenv \"GCLOUD_KEYFILE\" with","counters":[]},{"line":"    | Some keyfile ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some keyfile","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log warn]","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          \"GCLOUD_KEYFILE environment variable not set. Must be set to use \\","counters":[]},{"line":"           upload_blocks_to_gcloud\" ;","counters":[]},{"line":"        None","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  Option.iter gcloud_keyfile ~f:(fun path ->","counters":[]},{"line":"      ignore","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( Core.Sys.command","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            (sprintf \"gcloud auth activate-service-account --key-file=%s\" path)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          : int ) ) ;","counters":[]},{"line":"  O1trace.background_thread \"process_new_block_subscriptions\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Strict_pipe.Reader.iter new_blocks ~f:(fun new_block_validated ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let new_block = Mina_block.Validated.forget new_block_validated in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let new_block_no_hash = With_hash.data new_block in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let hash = State_hash.With_state_hashes.state_hash new_block in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          (let path, log = !precomputed_block_writer in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"           match Broadcast_pipe.Reader.peek transition_frontier with","counters":[]},{"line":"           | None ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               [%log warn]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                 \"Transition frontier not available when creating precomputed \\","counters":[]},{"line":"                  block\"","counters":[]},{"line":"           | Some tf -> (","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               let state_hash =","counters":[]},{"line":"                 Mina_block.Validated.state_hash new_block_validated","counters":[]},{"line":"               in","counters":[]},{"line":"               match Transition_frontier.find tf state_hash with","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"               | None ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   [%log warn]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                     \"Could not find new block in transition frontier, can't \\","counters":[]},{"line":"                      create precomputed block\"","counters":[]},{"line":"               | Some breadcrumb ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   let precomputed_block =","counters":[]},{"line":"                     lazy","counters":[]},{"line":"                       (let scheduled_time = Block_time.now time_controller in","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                        let precomputed_block =","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          let staged_ledger =","counters":[]},{"line":"                            Transition_frontier.Breadcrumb.staged_ledger","counters":[]},{"line":"                              breadcrumb","counters":[]},{"line":"                          in","counters":[]},{"line":"                          Mina_block.Precomputed.of_block ~logger","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"                            ~constraint_constants ~staged_ledger ~scheduled_time","counters":[]},{"line":"                            new_block","counters":[]},{"line":"                        in","counters":[]},{"line":"                        [%log debug] \"Precomputed block generated in $time ms\"","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                          ~metadata:","counters":[]},{"line":"                            [ ( \"time\"","counters":[]},{"line":"                              , `Float","counters":[]},{"line":"                                  Time.(","counters":[]},{"line":"                                    Span.to_ms","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                                      (diff (now ())","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                                         (Block_time.to_time_exn scheduled_time) ))","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                              )","counters":[]},{"line":"                            ] ;","counters":[]},{"line":"                        Mina_block.Precomputed.to_yojson precomputed_block )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                   in","counters":[]},{"line":"                   if upload_blocks_to_gcloud then (","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                     [%log info] \"log\" ;","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                     let json =","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       Yojson.Safe.to_string (Lazy.force precomputed_block)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                     in","counters":[]},{"line":"                     let network =","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       match Core.Sys.getenv \"NETWORK_NAME\" with","counters":[]},{"line":"                       | Some network ->","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           Some network","counters":[]},{"line":"                       | _ ->","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           [%log warn]","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                             \"NETWORK_NAME environment variable not set. Must \\","counters":[]},{"line":"                              be set to use upload_blocks_to_gcloud\" ;","counters":[]},{"line":"                           None","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                     in","counters":[]},{"line":"                     let bucket =","counters":[]},{"line":"                       match Core.Sys.getenv \"GCLOUD_BLOCK_UPLOAD_BUCKET\" with","counters":[]},{"line":"                       | Some bucket ->","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           Some bucket","counters":[]},{"line":"                       | _ ->","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           [%log warn]","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                             \"GCLOUD_BLOCK_UPLOAD_BUCKET environment variable \\","counters":[]},{"line":"                              not set. Must be set to use \\","counters":[]},{"line":"                              upload_blocks_to_gcloud\" ;","counters":[]},{"line":"                           None","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                     in","counters":[]},{"line":"                     match (gcloud_keyfile, network, bucket) with","counters":[]},{"line":"                     | Some _, Some network, Some bucket ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                         let hash_string = State_hash.to_base58_check hash in","counters":[]},{"line":"                         let height =","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           Mina_block.blockchain_length new_block_no_hash","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                           |> Mina_numbers.Length.to_string","counters":[]},{"line":"                         in","counters":[]},{"line":"                         let name =","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           sprintf \"%s-%s-%s.json\" network height hash_string","counters":[]},{"line":"                         in","counters":[]},{"line":"                         (* TODO: Use a pipe to queue this if these are building up *)","counters":[]},{"line":"                         don't_wait_for","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"                           ( Mina_metrics.(","counters":[]},{"line":"                               Gauge.inc_one","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                                 Block_latency.Upload_to_gcloud","counters":[]},{"line":"                                 .upload_to_gcloud_blocks) ;","counters":[]},{"line":"                             let tmp_file =","counters":[]},{"line":"                               Core.Filename.temp_file ~in_dir:\"/tmp\"","counters":[]},{"line":"                                 \"upload_block_file\" \"\"","counters":[]},{"line":"                             in","counters":[]},{"line":"                             let f = Stdlib.open_out tmp_file in","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                             fprintf f \"%s\" json ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                             Stdlib.close_out f ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                             let command =","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               Printf.sprintf \"gsutil cp -n %s gs://%s/%s\"","counters":[]},{"line":"                                 tmp_file bucket name","counters":[]},{"line":"                             in","counters":[]},{"line":"                             let%map output =","counters":[]},{"line":"                               (* This double-wrapping of [try_with]s is protection","counters":[]},{"line":"                                  against both immediate exceptions in process setup","counters":[]},{"line":"                                  and exceptions in the 'deferred' part of setup.","counters":[]},{"line":"                                  We also attach 'tags' to the errors below, so that we","counters":[]},{"line":"                                  we have information about which of these different","counters":[]},{"line":"                                  kinds of exception were seen, if any.","counters":[]},{"line":"                               *)","counters":[]},{"line":"                               Deferred.Or_error.try_with_join ~here:[%here]","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                                 (fun () ->","counters":[]},{"line":"                                   Or_error.try_with (fun () ->","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"                                       Async.Process.run () ~prog:\"bash\"","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"                                         ~args:[ \"-c\"; command ]","counters":[]},{"line":"                                       |> Deferred.Result.map_error","counters":[]},{"line":"                                            ~f:(Error.tag ~tag:__LOC__) )","counters":[]},{"line":"                                   |> Result.map_error","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                                        ~f:(Error.tag ~tag:__LOC__)","counters":[]},{"line":"                                   |> Deferred.return |> Deferred.Or_error.join )","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                             in","counters":[]},{"line":"                             ( match output with","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                             | Ok _result ->","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                                 ()","counters":[]},{"line":"                             | Error e ->","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                                 [%log warn]","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                                   ~metadata:","counters":[]},{"line":"                                     [ (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":74,"col_end":74,"count":0}]},{"line":"                                     ; (\"command\", `String command)","counters":[]},{"line":"                                     ]","counters":[]},{"line":"                                   \"Uploading block to gcloud with command \\","counters":[]},{"line":"                                    $command failed: $error\" ) ;","counters":[]},{"line":"                             Sys.remove tmp_file ;","counters":[]},{"line":"                             Mina_metrics.(","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               Gauge.dec_one","counters":[]},{"line":"                                 Block_latency.Upload_to_gcloud","counters":[]},{"line":"                                 .upload_to_gcloud_blocks) )","counters":[]},{"line":"                     | _ ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                         () ) ;","counters":[]},{"line":"                   Option.iter path ~f:(fun (`Path path) ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                       Out_channel.with_file ~append:true path","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                         ~f:(fun out_channel ->","counters":[]},{"line":"                           Out_channel.output_lines out_channel","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                             [ Yojson.Safe.to_string","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                                 (Lazy.force precomputed_block)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                             ] ) ) ;","counters":[]},{"line":"                   [%log info] \"Saw block with state hash $state_hash\"","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"                     ~metadata:","counters":[]},{"line":"                       (let state_hash_data =","counters":[]},{"line":"                          [ ( \"state_hash\"","counters":[]},{"line":"                            , `String (State_hash.to_base58_check hash) )","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                          ]","counters":[]},{"line":"                        in","counters":[]},{"line":"                        if is_some log then","counters":[]},{"line":"                          state_hash_data","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                          @ [ (\"precomputed_block\", Lazy.force precomputed_block)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                            ]","counters":[]},{"line":"                        else state_hash_data ) ) ) ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          match","counters":[]},{"line":"            Filtered_external_transition.validate_transactions","counters":[]},{"line":"              ~constraint_constants new_block_no_hash","counters":[]},{"line":"          with","counters":[]},{"line":"          | Ok verified_transactions ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let unfiltered_external_transition =","counters":[]},{"line":"                lazy","counters":[]},{"line":"                  (Filtered_external_transition.of_transition new_block_no_hash","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                     `All verified_transactions )","counters":[]},{"line":"              in","counters":[]},{"line":"              let filtered_external_transition =","counters":[]},{"line":"                if is_storing_all then Lazy.force unfiltered_external_transition","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"                else","counters":[]},{"line":"                  Filtered_external_transition.of_transition new_block_no_hash","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    (`Some","counters":[]},{"line":"                      ( Public_key.Compressed.Set.of_list","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                      @@ List.filter_opt (Hashtbl.keys subscribed_block_users)","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"                      ) )","counters":[]},{"line":"                    verified_transactions","counters":[]},{"line":"              in","counters":[]},{"line":"              let participants =","counters":[]},{"line":"                Filtered_external_transition.participant_pks","counters":[]},{"line":"                  filtered_external_transition","counters":[]},{"line":"              in","counters":[]},{"line":"              update_payment_subscriptions filtered_external_transition","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                participants ;","counters":[]},{"line":"              update_block_subscriptions","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { With_hash.data = new_block_no_hash; hash }","counters":[]},{"line":"                verified_transactions participants ;","counters":[]},{"line":"              Deferred.unit","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          | Error e ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [%log error]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ~metadata:","counters":[]},{"line":"                  [ ( \"error\"","counters":[]},{"line":"                    , `String (Staged_ledger.Pre_diff_info.Error.to_string e) )","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                  ; (\"state_hash\", State_hash.to_yojson hash)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                  ]","counters":[]},{"line":"                \"Staged ledger had error with transactions in block for state \\","counters":[]},{"line":"                 $state_hash: $error\" ;","counters":[]},{"line":"              Deferred.unit ) ) ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  let reorganization_subscription = [] in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let reader, writer =","counters":[]},{"line":"    Strict_pipe.create ~name:\"Reorganization subscription\"","counters":[]},{"line":"      Strict_pipe.(Buffered (`Capacity 1, `Overflow (Drop_head ignore)))","counters":[]},{"line":"  in","counters":[]},{"line":"  let t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { subscribed_payment_users","counters":[]},{"line":"    ; subscribed_block_users","counters":[]},{"line":"    ; reorganization_subscription","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  don't_wait_for","counters":[]},{"line":"  @@ Broadcast_pipe.Reader.iter transition_frontier","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"       ~f:","counters":[]},{"line":"         (Option.value_map ~default:Deferred.unit ~f:(fun transition_frontier ->","counters":[]},{"line":"              let best_tip_diff_pipe =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Transition_frontier.(","counters":[]},{"line":"                  Extensions.(","counters":[]},{"line":"                    get_view_pipe (extensions transition_frontier) Best_tip_diff))","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"              in","counters":[]},{"line":"              Broadcast_pipe.Reader.iter best_tip_diff_pipe","counters":[]},{"line":"                ~f:(fun { reorg_best_tip; _ } ->","counters":[]},{"line":"                  if reorg_best_tip then Strict_pipe.Writer.write writer () ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"                  Deferred.unit ) ) ) ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  Strict_pipe.Reader.iter reader ~f:(fun () ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      List.iter t.reorganization_subscription ~f:(fun (_, writer) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          if not (Pipe.is_closed writer) then","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"            Pipe.write_without_pushback writer `Changed ) ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      Deferred.unit )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  |> don't_wait_for ;","counters":[]},{"line":"  t","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* When you subscribe to a block, you also subscribe to its payments *)","counters":[]},{"line":"let add_block_subscriber t public_key =","counters":[]},{"line":"  let block_reader, block_writer = Pipe.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let rw_pair = (block_reader, block_writer) in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Hashtbl.add_multi t.subscribed_block_users ~key:public_key ~data:rw_pair ;","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@ ( Pipe.closed block_reader","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"     >>| fun () ->","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"     Hashtbl.change t.subscribed_block_users public_key ~f:(function","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"       | None ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           None","counters":[]},{"line":"       | Some pipes -> (","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           match","counters":[]},{"line":"             List.filter pipes ~f:(fun rw_pair' ->","counters":[]},{"line":"                 (* Intentionally using pointer equality *)","counters":[]},{"line":"                 not","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                 @@ Tuple2.equal ~eq1:Pipe.equal ~eq2:Pipe.equal rw_pair","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                      rw_pair' )","counters":[]},{"line":"           with","counters":[]},{"line":"           | [] ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               None","counters":[]},{"line":"           | l ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Some l ) ) ) ;","counters":[]},{"line":"  block_reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let add_payment_subscriber t public_key =","counters":[]},{"line":"  let payment_reader, payment_writer = Pipe.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Hashtbl.set t.subscribed_payment_users ~key:public_key","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~data:(payment_reader, payment_writer) ;","counters":[]},{"line":"  payment_reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let add_reorganization_subscriber t =","counters":[]},{"line":"  let reader, writer = Pipe.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  t.reorganization_subscription <-","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (reader, writer) :: t.reorganization_subscription ;","counters":[]},{"line":"  reader","counters":[{"col_start":7,"col_end":7,"count":2}]}]}