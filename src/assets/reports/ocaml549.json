{"filename":"src/lib/transaction_snark/transaction_validator.ml","lines":[{"line":"open Base","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"","counters":[]},{"line":"module Hashless_ledger = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { base : Ledger.t; overlay : (Account.Identifier.t, Account.t) Hashtbl.t }","counters":[]},{"line":"","counters":[]},{"line":"  type location = Ours of Account.Identifier.t | Theirs of Ledger.Location.t","counters":[]},{"line":"","counters":[]},{"line":"  let msg s =","counters":[]},{"line":"    s","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ^ \": somehow we got a location that isn't present in the underlying ledger\"","counters":[]},{"line":"","counters":[]},{"line":"  let get t = function","counters":[]},{"line":"    | Ours key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Hashtbl.find t.overlay key","counters":[]},{"line":"    | Theirs loc -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match Ledger.get t.base loc with","counters":[]},{"line":"        | Some a -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match Hashtbl.find t.overlay (Account.identifier a) with","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Some a","counters":[]},{"line":"            | s ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                s )","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwith (msg \"get\") )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"  let location_of_account t key =","counters":[]},{"line":"    match Hashtbl.find t.overlay key with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Some _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (Ours key)","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Option.map","counters":[]},{"line":"          ~f:(fun d -> Theirs d)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"          (Ledger.location_of_account t.base key)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let set t loc acct =","counters":[]},{"line":"    match loc with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ours key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Hashtbl.set t.overlay ~key ~data:acct","counters":[]},{"line":"    | Theirs loc -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match Ledger.get t.base loc with","counters":[]},{"line":"        | Some a ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Hashtbl.set t.overlay ~key:(Account.identifier a) ~data:acct","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwith (msg \"set\") )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"  let get_or_create_account t key account =","counters":[]},{"line":"    match location_of_account t key with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        set t (Ours key) account ;","counters":[]},{"line":"        Ok (`Added, Ours key)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Some loc ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok (`Existed, loc)","counters":[]},{"line":"","counters":[]},{"line":"  let get_or_create_exn ledger aid =","counters":[]},{"line":"    let action, loc =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      get_or_create_account ledger aid (Account.initialize aid)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      |> Or_error.ok_exn","counters":[]},{"line":"    in","counters":[]},{"line":"    (action, Option.value_exn (get ledger loc), loc)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let create_new_account t account_id account =","counters":[]},{"line":"    let open Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind action, _ = get_or_create_account t account_id account in","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    if [%equal: [ `Existed | `Added ]] action `Existed then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      Or_error.errorf","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        !\"Could not create a new account with pk \\","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"          %{sexp:Signature_lib.Public_key.Compressed.t}: Account already \\","counters":[]},{"line":"          exists\"","counters":[]},{"line":"        (Account_id.public_key account_id)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    else Ok ()","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let get_or_create t id = Or_error.try_with (fun () -> get_or_create_exn t id)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"  let remove_accounts_exn _t =","counters":[]},{"line":"    failwith \"hashless_ledger: bug in transaction_logic\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (* Without any validation that the hashes match, Mina_transaction_logic doesn't really care what this is. *)","counters":[]},{"line":"  let merkle_root _t = Ledger_hash.empty_hash","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let create l = { base = l; overlay = Hashtbl.create (module Account_id) }","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"  let with_ledger ~depth ~f =","counters":[]},{"line":"    Ledger.with_ledger ~depth ~f:(fun l ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let t = create l in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        f t )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  (** Create a new ledger mask 'on top of' the given ledger.","counters":[]},{"line":"","counters":[]},{"line":"      Warning: For technical reasons, this mask cannot be applied directly to","counters":[]},{"line":"      the parent ledger; instead, use","counters":[]},{"line":"      [apply_mask parent_ledger ~masked:this_ledger] to update the parent","counters":[]},{"line":"      ledger as necessary.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let create_masked t = { base = t.base; overlay = Hashtbl.copy t.overlay }","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"  (** [apply_mask ledger ~masked] applies any updates in [masked] to the ledger","counters":[]},{"line":"      [ledger]. [masked] should be created by calling [create_masked ledger].","counters":[]},{"line":"","counters":[]},{"line":"      Warning: This function may behave unexpectedly if [ledger] was modified","counters":[]},{"line":"      after calling [create_masked], or the given [ledger] was not used to","counters":[]},{"line":"      create [masked].","counters":[]},{"line":"  *)","counters":[]},{"line":"  let apply_mask t ~masked =","counters":[]},{"line":"    Hashtbl.merge_into ~src:masked.overlay ~dst:t.overlay","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ~key:_ src _dst -> Set_to src)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  (** Create a new 'empty' ledger. *)","counters":[]},{"line":"  let empty ~depth () =","counters":[]},{"line":"    let ledger = Ledger.create_ephemeral ~depth () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let res = create ledger in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* This ledger should never be modified or read. *)","counters":[]},{"line":"    Ledger.close ledger ; res","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Mina_transaction_logic.Make (Hashless_ledger)","counters":[]},{"line":"","counters":[]},{"line":"let create = Hashless_ledger.create","counters":[]},{"line":"","counters":[]},{"line":"let apply_user_command ~constraint_constants ~txn_global_slot l uc =","counters":[]},{"line":"  Result.map","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:(fun applied_txn ->","counters":[]},{"line":"      applied_txn.Transaction_applied.Signed_command_applied.common.user_command","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        .status )","counters":[]},{"line":"    (apply_user_command l ~constraint_constants ~txn_global_slot uc)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"let apply_transaction' ~constraint_constants ~txn_state_view l t =","counters":[]},{"line":"  O1trace.sync_thread \"apply_transaction\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      apply_transaction ~constraint_constants ~txn_state_view l t )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let apply_transaction ~constraint_constants ~txn_state_view l txn =","counters":[]},{"line":"  Result.map ~f:Transaction_applied.transaction_status","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (apply_transaction' l ~constraint_constants ~txn_state_view txn)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":67,"col_end":67,"count":2}]}]}