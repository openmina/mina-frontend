{"filename":"src/lib/mina_base/receipt.ml","lines":[{"line":"(* receipt.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"module B58_lib = Base58_check","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"module Signed_command_elt = struct","counters":[]},{"line":"  type t = Signed_command_payload of Signed_command.Payload.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Zkapp_command_elt = struct","counters":[]},{"line":"  type t = Zkapp_command_commitment of Random_oracle.Digest.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Chain_hash = struct","counters":[]},{"line":"  include Data_hash.Make_full_size (struct","counters":[]},{"line":"    let description = \"Receipt chain hash\"","counters":[]},{"line":"","counters":[]},{"line":"    let version_byte = Base58_check.Version_bytes.receipt_chain_hash","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  (* Data hash versioned boilerplate below *)","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      module T = struct","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"        type t = (Field.t[@version_asserted]) [@@deriving sexp, compare, hash]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":1}]},{"line":"      end","counters":[{"col_start":8,"col_end":8,"count":5}]},{"line":"","counters":[]},{"line":"      include T","counters":[]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      [%%define_from_scope to_yojson, of_yojson]","counters":[]},{"line":"","counters":[]},{"line":"      include Comparable.Make (T)","counters":[]},{"line":"      include Hashable.Make_binable (T)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type _unused = unit constraint t = Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"  let equal = Stable.Latest.equal","counters":[]},{"line":"","counters":[]},{"line":"  let empty = of_hash Random_oracle.(salt \"CodaReceiptEmpty\" |> digest)","counters":[{"col_start":20,"col_end":20,"count":1},{"col_start":40,"col_end":40,"count":1},{"col_start":69,"col_end":69,"count":1}]},{"line":"","counters":[]},{"line":"  let cons_signed_command_payload (e : Signed_command_elt.t) (t : t) =","counters":[]},{"line":"    let open Random_oracle.Legacy in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let x =","counters":[]},{"line":"      match e with","counters":[]},{"line":"      | Signed_command_payload payload ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Transaction_union_payload.(","counters":[]},{"line":"            to_input_legacy (of_user_command_payload payload))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"    in","counters":[]},{"line":"    Input.(append x (field (t :> Field.t)))","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    |> pack_input","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    |> hash ~init:Hash_prefix.receipt_chain_signed_command","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    |> of_hash","counters":[]},{"line":"","counters":[]},{"line":"  (* prepend account_update index computed by Zkapp_command_logic.apply *)","counters":[]},{"line":"  let cons_zkapp_command_commitment (index : Mina_numbers.Index.t)","counters":[]},{"line":"      (e : Zkapp_command_elt.t) (t : t) =","counters":[]},{"line":"    let open Random_oracle in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let x =","counters":[]},{"line":"      match e with Zkapp_command_commitment s -> Input.Chunked.field s","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"    in","counters":[]},{"line":"    let index_input = Mina_numbers.Index.to_input index in","counters":[]},{"line":"    Input.Chunked.(append index_input (append x (field (t :> Field.t))))","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"    |> pack_input","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    |> hash ~init:Hash_prefix.receipt_chain_zkapp_command","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    |> of_hash","counters":[]},{"line":"","counters":[]},{"line":"  [%%if defined consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    module Signed_command_elt = struct","counters":[]},{"line":"      type t = Signed_command_payload of Transaction_union_payload.var","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Zkapp_command_elt = struct","counters":[]},{"line":"      type t = Zkapp_command_commitment of Random_oracle.Checked.Digest.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let constant (t : t) =","counters":[]},{"line":"      var_of_hash_packed (Field.Var.constant (t :> Field.t))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    type t = var","counters":[]},{"line":"","counters":[]},{"line":"    let equal t1 t2 = equal_var t1 t2","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    let if_ = if_","counters":[]},{"line":"","counters":[]},{"line":"    let cons_signed_command_payload (e : Signed_command_elt.t) t =","counters":[]},{"line":"      let open Random_oracle.Legacy in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind x =","counters":[]},{"line":"        match e with","counters":[]},{"line":"        | Signed_command_payload payload ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let%map payload =","counters":[]},{"line":"              Transaction_union_payload.Checked.to_input_legacy payload","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"            in","counters":[]},{"line":"            payload","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      in","counters":[]},{"line":"      make_checked (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Checked.hash ~init:Hash_prefix.receipt_chain_signed_command","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            (Checked.pack_input Input.(append x (field (var_to_hash_packed t))))","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"          |> var_of_hash_packed )","counters":[]},{"line":"","counters":[]},{"line":"    (* prepend account_update index *)","counters":[]},{"line":"    let cons_zkapp_command_commitment (index : Mina_numbers.Index.Checked.t)","counters":[]},{"line":"        (e : Zkapp_command_elt.t) (t : t) =","counters":[]},{"line":"      let open Random_oracle in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind x =","counters":[]},{"line":"        match e with","counters":[]},{"line":"        | Zkapp_command_commitment s ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Let_syntax.return (Input.Chunked.field s)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      in","counters":[]},{"line":"      let index_input = Mina_numbers.Index.Checked.to_input index in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      make_checked (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Checked.hash ~init:Hash_prefix.receipt_chain_zkapp_command","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            (Checked.pack_input","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"               Input.Chunked.(","counters":[]},{"line":"                 append index_input (append x (field (var_to_hash_packed t)))) )","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"          |> var_of_hash_packed )","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"checked-unchecked equivalence (signed command)\" =","counters":[]},{"line":"    let open Quickcheck in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    test ~trials:20 (Generator.tuple2 gen Signed_command_payload.gen)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~f:(fun (base, payload) ->","counters":[]},{"line":"        let unchecked =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          cons_signed_command_payload (Signed_command_payload payload) base","counters":[]},{"line":"        in","counters":[]},{"line":"        let checked =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let comp =","counters":[]},{"line":"            let open Snark_params.Tick.Checked.Let_syntax in","counters":[]},{"line":"            let payload =","counters":[]},{"line":"              Transaction_union_payload.(","counters":[]},{"line":"                Checked.constant (of_user_command_payload payload))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"            in","counters":[]},{"line":"            let%map res =","counters":[]},{"line":"              Checked.cons_signed_command_payload","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                (Signed_command_payload payload) (var_of_t base)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"            in","counters":[]},{"line":"            As_prover.read typ res","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          in","counters":[]},{"line":"          Or_error.ok_exn (run_and_check comp)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        in","counters":[]},{"line":"        assert (equal unchecked checked) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"checked-unchecked equivalence (zkapp_command)\" =","counters":[]},{"line":"    let open Quickcheck in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    test ~trials:20 (Generator.tuple2 gen Field.gen)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~f:(fun (base, commitment) ->","counters":[]},{"line":"        let index_int = 17 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let unchecked =","counters":[]},{"line":"          let index = Mina_numbers.Index.of_int index_int in","counters":[]},{"line":"          cons_zkapp_command_commitment index","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"            (Zkapp_command_commitment commitment) base","counters":[]},{"line":"        in","counters":[]},{"line":"        let checked =","counters":[]},{"line":"          let open Snark_params.Tick.Checked.Let_syntax in","counters":[]},{"line":"          let comp =","counters":[]},{"line":"            let%bind index =","counters":[]},{"line":"              let open Mina_numbers.Index.Checked in","counters":[]},{"line":"              let rec go acc (n : int) =","counters":[]},{"line":"                if Int.equal n 0 then return acc","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"                else","counters":[]},{"line":"                  let%bind acc' = succ acc in","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                  go acc' (n - 1)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              in","counters":[]},{"line":"              go zero index_int","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"            in","counters":[]},{"line":"            let commitment = Field.Var.constant commitment in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let%map res =","counters":[]},{"line":"              Checked.cons_zkapp_command_commitment index","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                (Zkapp_command_commitment commitment) (var_of_t base)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"            in","counters":[]},{"line":"            As_prover.read typ res","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          in","counters":[]},{"line":"          Or_error.ok_exn (run_and_check comp)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        in","counters":[]},{"line":"        assert (equal unchecked checked) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"json\" =","counters":[]},{"line":"    Quickcheck.test ~trials:20 gen ~sexp_of:sexp_of_t ~f:(fun t ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        assert (Codable.For_tests.check_encoding (module Stable.Latest) ~equal t) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}