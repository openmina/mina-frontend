{"filename":"src/lib/mina_base/stack_frame.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type ('caller, 'zkapp_command) t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":35,"col_end":35,"count":5}]},{"line":"      { caller : 'caller; caller_caller : 'caller; calls : 'zkapp_command }","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"    [@@deriving make, fields, sexp, yojson]","counters":[{"col_start":42,"col_end":42,"count":5}]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type value =","counters":[]},{"line":"  ( Token_id.t","counters":[]},{"line":"  , ( Account_update.t","counters":[]},{"line":"    , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"    , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"    Zkapp_command.Call_forest.t )","counters":[]},{"line":"  t","counters":[]},{"line":"","counters":[]},{"line":"type ('caller, 'zkapp_command) frame = ('caller, 'zkapp_command) t","counters":[]},{"line":"","counters":[]},{"line":"let empty : value =","counters":[]},{"line":"  { caller = Token_id.default; caller_caller = Token_id.default; calls = [] }","counters":[]},{"line":"","counters":[]},{"line":"module type Stack_frame_digest_intf = sig","counters":[]},{"line":"  include Digest_intf.S","counters":[]},{"line":"","counters":[]},{"line":"  val create :","counters":[]},{"line":"       ( Token_id.t","counters":[]},{"line":"       , ( 'p","counters":[]},{"line":"         , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"         , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"         Zkapp_command.Call_forest.t )","counters":[]},{"line":"       frame","counters":[]},{"line":"    -> t","counters":[]},{"line":"","counters":[]},{"line":"  val gen : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"  module Checked : sig","counters":[]},{"line":"    include Digest_intf.S_checked","counters":[]},{"line":"","counters":[]},{"line":"    val create :","counters":[]},{"line":"         hash_zkapp_command:","counters":[]},{"line":"           ('zkapp_command -> Zkapp_command.Digest.Forest.Checked.t)","counters":[]},{"line":"      -> (Token_id.Checked.t, 'zkapp_command) frame","counters":[]},{"line":"      -> t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val typ : (Checked.t, t) Typ.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Wire_types = Mina_wire_types.Mina_base.Stack_frame.Digest","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S = Stack_frame_digest_intf with type Stable.V1.t = A.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Kimchi_backend.Pasta.Basic.Fp.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0}]},{"line":"      [@@deriving sexp, compare, equal, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"  let gen = Field.Constant.gen","counters":[]},{"line":"","counters":[]},{"line":"  let to_input (type p)","counters":[]},{"line":"      ({ caller; caller_caller; calls } :","counters":[]},{"line":"        ( Token_id.t","counters":[]},{"line":"        , ( p","counters":[]},{"line":"          , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"          , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"          Zkapp_command.Call_forest.t )","counters":[]},{"line":"        frame ) =","counters":[]},{"line":"    List.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      [ Token_id.to_input caller","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Token_id.to_input caller_caller","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Random_oracle.Input.Chunked.field","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"          (Zkapp_command.Call_forest.hash calls :> Field.Constant.t)","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let create frame =","counters":[]},{"line":"    Random_oracle.hash ~init:Hash_prefix_states.account_update_stack_frame","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      (Random_oracle.pack_input (to_input frame))","counters":[{"col_start":30,"col_end":30,"count":1},{"col_start":40,"col_end":40,"count":1}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    include Field","counters":[]},{"line":"","counters":[]},{"line":"    let to_input (type zkapp_command)","counters":[]},{"line":"        ~(hash_zkapp_command :","counters":[]},{"line":"           zkapp_command -> Zkapp_command.Digest.Forest.Checked.t )","counters":[]},{"line":"        ({ caller; caller_caller; calls } : _ frame) =","counters":[]},{"line":"      List.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ Token_id.Checked.to_input caller","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Token_id.Checked.to_input caller_caller","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Random_oracle.Input.Chunked.field (hash_zkapp_command calls :> Field.t)","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let create ~hash_zkapp_command frame =","counters":[]},{"line":"      Random_oracle.Checked.hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~init:Hash_prefix_states.account_update_stack_frame","counters":[]},{"line":"        (Random_oracle.Checked.pack_input (to_input ~hash_zkapp_command frame))","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ = Field.typ","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Digest = Wire_types.Make (Make_sig) (Make_str)","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  type nonrec 'zkapp_command t = (Token_id.Checked.t, 'zkapp_command) t","counters":[]},{"line":"","counters":[]},{"line":"  let if_ f b ~then_ ~else_ : _ t =","counters":[]},{"line":"    { caller = Token_id.Checked.if_ b ~then_:then_.caller ~else_:else_.caller","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    ; caller_caller =","counters":[]},{"line":"        Token_id.Checked.if_ b ~then_:then_.caller_caller","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          ~else_:else_.caller_caller","counters":[]},{"line":"    ; calls = f b ~then_:then_.calls ~else_:else_.calls","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    }","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}