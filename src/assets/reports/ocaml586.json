{"filename":"src/lib/gossip_net/libp2p.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_peer.Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"type ('q, 'r) dispatch =","counters":[]},{"line":"  Versioned_rpc.Connection_with_menu.t -> 'q -> 'r Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"module Connection_with_state = struct","counters":[]},{"line":"  type t = Banned | Allowed of Rpc.Connection.t Ivar.t","counters":[]},{"line":"","counters":[]},{"line":"  let value_map ~when_allowed ~when_banned t =","counters":[]},{"line":"    match t with Allowed c -> when_allowed c | _ -> when_banned","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type pubsub_topic_mode_t = RO | RW | N","counters":[]},{"line":"","counters":[]},{"line":"let v1_topic_block = \"mina/block/1.0.0\"","counters":[]},{"line":"","counters":[]},{"line":"let v1_topic_tx = \"mina/tx/1.0.0\"","counters":[]},{"line":"","counters":[]},{"line":"let v1_topic_snark_work = \"mina/snark-work/1.0.0\"","counters":[]},{"line":"","counters":[]},{"line":"let v1_topics = [ v1_topic_block; v1_topic_snark_work; v1_topic_tx ]","counters":[]},{"line":"","counters":[]},{"line":"let v0_topic = \"coda/consensus-messages/0.0.1\"","counters":[]},{"line":"","counters":[]},{"line":"module Config = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { timeout : Time.Span.t","counters":[]},{"line":"    ; initial_peers : Mina_net2.Multiaddr.t list","counters":[]},{"line":"    ; addrs_and_ports : Node_addrs_and_ports.t","counters":[]},{"line":"    ; metrics_port : int option","counters":[]},{"line":"    ; conf_dir : string","counters":[]},{"line":"    ; chain_id : string","counters":[]},{"line":"    ; logger : Logger.t","counters":[]},{"line":"    ; unsafe_no_trust_ip : bool","counters":[]},{"line":"    ; isolate : bool","counters":[]},{"line":"    ; trust_system : Trust_system.t","counters":[]},{"line":"    ; flooding : bool","counters":[]},{"line":"    ; direct_peers : Mina_net2.Multiaddr.t list","counters":[]},{"line":"    ; peer_exchange : bool","counters":[]},{"line":"    ; peer_protection_ratio : float","counters":[]},{"line":"    ; seed_peer_list_url : Uri.t option","counters":[]},{"line":"    ; min_connections : int","counters":[]},{"line":"    ; time_controller : Block_time.Controller.t","counters":[]},{"line":"    ; max_connections : int","counters":[]},{"line":"    ; pubsub_v1 : pubsub_topic_mode_t","counters":[]},{"line":"    ; pubsub_v0 : pubsub_topic_mode_t","counters":[]},{"line":"    ; validation_queue_size : int","counters":[]},{"line":"    ; mutable keypair : Mina_net2.Keypair.t","counters":[]},{"line":"    ; all_peers_seen_metric : bool","counters":[]},{"line":"    ; known_private_ip_nets : Core.Unix.Cidr.t list","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving make]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include Intf.Gossip_net_intf","counters":[]},{"line":"","counters":[]},{"line":"  val create :","counters":[]},{"line":"       Config.t","counters":[]},{"line":"    -> pids:Child_processes.Termination.t","counters":[]},{"line":"    -> Rpc_intf.rpc_handler list","counters":[]},{"line":"    -> Message.sinks","counters":[]},{"line":"    -> t Deferred.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let rpc_transport_proto = \"coda/rpcs/0.0.1\"","counters":[]},{"line":"","counters":[]},{"line":"let download_seed_peer_list uri =","counters":[]},{"line":"  let%bind _resp, body = Cohttp_async.Client.get uri in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"  let%map contents = Cohttp_async.Body.to_string body in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"  Mina_net2.Multiaddr.of_file_contents contents","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"type publish_functions =","counters":[]},{"line":"  { publish_v0 : Message.msg -> unit Deferred.t","counters":[]},{"line":"  ; publish_v1_block : Message.state_msg -> unit Deferred.t","counters":[]},{"line":"  ; publish_v1_tx : Message.transaction_pool_diff_msg -> unit Deferred.t","counters":[]},{"line":"  ; publish_v1_snark_work : Message.snark_pool_diff_msg -> unit Deferred.t","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let empty_publish_functions =","counters":[]},{"line":"  { publish_v0 = (fun _ -> failwith \"Call of uninitialized publish_v0\")","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; publish_v1_block =","counters":[]},{"line":"      (fun _ -> failwith \"Call of uninitialized publish_v1_block\")","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; publish_v1_tx = (fun _ -> failwith \"Call of uninitialized publish_v1_tx\")","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"  ; publish_v1_snark_work =","counters":[]},{"line":"      (fun _ -> failwith \"Call of uninitialized publish_v1_snark_work\")","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let validate_gossip_base ~fn my_peer_id envelope validation_callback =","counters":[]},{"line":"  (* Messages from ourselves are valid. Don't try and reingest them. *)","counters":[]},{"line":"  match Envelope.Incoming.sender envelope with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Local ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Mina_net2.Validation_callback.fire_if_not_already_fired","counters":[]},{"line":"        validation_callback `Accept ;","counters":[]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Remote sender ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if not (Peer.Id.equal sender.peer_id my_peer_id) then","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        (* Match on different cases *)","counters":[]},{"line":"        fn (envelope, validation_callback)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else (","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Mina_net2.Validation_callback.fire_if_not_already_fired","counters":[]},{"line":"          validation_callback `Accept ;","counters":[]},{"line":"        Deferred.unit )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"let on_gossip_decode_failure (config : Config.t) envelope (err : Error.t) =","counters":[]},{"line":"  let peer = Envelope.Incoming.sender envelope |> Envelope.Sender.remote_exn in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"  let metadata =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ (\"sender_peer_id\", `String peer.peer_id)","counters":[]},{"line":"    ; (\"error\", Error_json.error_to_yojson err)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"    ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Trust_system.(","counters":[]},{"line":"    record config.trust_system config.logger peer","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      Actions.","counters":[]},{"line":"        (Decoding_failed, Some (\"failed to decode gossip message\", metadata)))","counters":[]},{"line":"  |> don't_wait_for ;","counters":[]},{"line":"  ()","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Make (Rpc_intf : Network_peer.Rpc_intf.Rpc_interface_intf) :","counters":[]},{"line":"  S with module Rpc_intf := Rpc_intf = struct","counters":[]},{"line":"  open Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      { config : Config.t","counters":[]},{"line":"      ; mutable added_seeds : Peer.Hash_set.t","counters":[]},{"line":"      ; net2 : Mina_net2.t Deferred.t ref","counters":[]},{"line":"      ; first_peer_ivar : unit Ivar.t","counters":[]},{"line":"      ; high_connectivity_ivar : unit Ivar.t","counters":[]},{"line":"      ; ban_reader : Intf.ban_notification Linear_pipe.Reader.t","counters":[]},{"line":"      ; publish_functions : publish_functions ref","counters":[]},{"line":"      ; restart_helper : unit -> unit","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let create_rpc_implementations","counters":[]},{"line":"        (Rpc_handler { rpc; f = handler; cost; budget }) =","counters":[]},{"line":"      let (module Impl) = implementation_of_rpc rpc in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let log_rate_limiter_occasionally rl =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let t = Time.Span.of_min 1. in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        every t (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            [%log' debug logger]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"rate_limiter\", Network_pool.Rate_limiter.summary rl) ]","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"              !\"%s $rate_limiter\" Impl.name )","counters":[]},{"line":"      in","counters":[]},{"line":"      let rl = Network_pool.Rate_limiter.create ~capacity:budget in","counters":[]},{"line":"      log_rate_limiter_occasionally rl ;","counters":[]},{"line":"      let handler (peer : Network_peer.Peer.t) ~version q =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Mina_metrics.(Counter.inc_one Network.rpc_requests_received) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        Mina_metrics.(Counter.inc_one @@ fst Impl.received_counter) ;","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        Mina_metrics.(Gauge.inc_one @@ snd Impl.received_counter) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        let score = cost q in","counters":[]},{"line":"        match","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Network_pool.Rate_limiter.add rl (Remote peer) ~now:(Time.now ())","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"            ~score","counters":[]},{"line":"        with","counters":[]},{"line":"        | `Capacity_exceeded ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwithf \"peer exceeded capacity: %s\"","counters":[]},{"line":"              (Network_peer.Peer.to_multiaddr_string peer)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"              ()","counters":[]},{"line":"        | `Within_capacity ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            O1trace.thread (Printf.sprintf \"handle_rpc_%s\" Impl.name) (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                handler peer ~version q )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      in","counters":[]},{"line":"      Impl.implement_multi handler","counters":[]},{"line":"","counters":[]},{"line":"    let prepare_stream_transport stream =","counters":[]},{"line":"      (* Closing the connection calls close_read on the read","counters":[]},{"line":"          pipe, which mina_net2 does not expect. To avoid this, add","counters":[]},{"line":"          an extra pipe and don't propagate the close. We still want","counters":[]},{"line":"          to close the connection because it flushes all the internal","counters":[]},{"line":"          state machines and fills the `closed` ivar.","counters":[]},{"line":"","counters":[]},{"line":"          Pipe.transfer isn't appropriate because it will close the","counters":[]},{"line":"          real_r when read_w is closed, precisely what we don't want.","counters":[]},{"line":"      *)","counters":[]},{"line":"      let read_r, read_w = Pipe.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let underlying_r, underlying_w = Mina_net2.Libp2p_stream.pipes stream in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Pipe.iter underlying_r ~f:(fun msg ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             Pipe.write_without_pushback_if_open read_w msg ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             Deferred.unit ) ) ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      let transport =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Async_rpc_kernel.Pipe_transport.(create Kind.string read_r underlying_w)","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      in","counters":[]},{"line":"      transport","counters":[]},{"line":"","counters":[]},{"line":"    (* peers_snapshot is updated every 30 seconds.","counters":[]},{"line":"*)","counters":[]},{"line":"    let peers_snapshot = ref []","counters":[]},{"line":"","counters":[]},{"line":"    let peers_snapshot_max_staleness = Time.Span.of_sec 30.","counters":[{"col_start":54,"col_end":54,"count":1}]},{"line":"","counters":[]},{"line":"    (* Creates just the helper, making sure to register everything","counters":[]},{"line":"       BEFORE we start listening/advertise ourselves for discovery. *)","counters":[]},{"line":"    let create_libp2p (config : Config.t) rpc_handlers first_peer_ivar","counters":[]},{"line":"        high_connectivity_ivar ~added_seeds ~pids ~on_unexpected_termination","counters":[]},{"line":"        ~sinks:","counters":[]},{"line":"          (Message.Any_sinks (sinksM, (sink_block, sink_tx, sink_snark_work))) =","counters":[]},{"line":"      let module Sinks = (val sinksM) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ctr = ref 0 in","counters":[]},{"line":"      let record_peer_connection () =","counters":[]},{"line":"        [%log' trace config.logger] \"Fired peer_connected callback\" ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        Ivar.fill_if_empty first_peer_ivar () ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        if !ctr < 4 then incr ctr","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        else Ivar.fill_if_empty high_connectivity_ivar ()","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      in","counters":[]},{"line":"      let handle_mina_net2_exception exn =","counters":[]},{"line":"        match exn with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Mina_net2.Libp2p_helper_died_unexpectedly ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            on_unexpected_termination ()","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            raise exn","counters":[]},{"line":"      in","counters":[]},{"line":"      let%bind seeds_from_url =","counters":[]},{"line":"        match config.seed_peer_list_url with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Deferred.return []","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        | Some u ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            download_seed_peer_list u","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      in","counters":[]},{"line":"      let fail err =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error.tag err ~tag:\"Failed to connect to libp2p_helper process\"","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        |> Error.raise","counters":[]},{"line":"      in","counters":[]},{"line":"      let conf_dir = config.conf_dir ^/ \"mina_net2\" in","counters":[]},{"line":"      let%bind () = Unix.mkdir ~p:() conf_dir in","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      match%bind","counters":[]},{"line":"        Monitor.try_with ~here:[%here] ~rest:(`Call handle_mina_net2_exception)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"          (fun () ->","counters":[]},{"line":"            O1trace.thread \"mina_net2\" (fun () ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                Mina_net2.create","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ~all_peers_seen_metric:config.all_peers_seen_metric","counters":[]},{"line":"                  ~on_peer_connected:(fun _ -> record_peer_connection ())","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                  ~on_peer_disconnected:ignore ~logger:config.logger ~conf_dir","counters":[]},{"line":"                  ~pids ) )","counters":[]},{"line":"      with","counters":[]},{"line":"      | Ok (Ok net2) -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let open Mina_net2 in","counters":[]},{"line":"          let me = config.keypair in","counters":[]},{"line":"          let my_peer_id = Keypair.to_peer_id me |> Peer.Id.to_string in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"          Logger.append_to_global_metadata","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ (\"peer_id\", `String my_peer_id)","counters":[]},{"line":"            ; ( \"host\"","counters":[]},{"line":"              , `String","counters":[]},{"line":"                  (Unix.Inet_addr.to_string config.addrs_and_ports.external_ip)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"              )","counters":[]},{"line":"            ; (\"port\", `Int config.addrs_and_ports.libp2p_port)","counters":[]},{"line":"            ] ;","counters":[]},{"line":"          ( match config.addrs_and_ports.peer with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Some _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ()","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              config.addrs_and_ports.peer <-","counters":[]},{"line":"                Some","counters":[]},{"line":"                  (Peer.create config.addrs_and_ports.bind_ip","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                     ~libp2p_port:config.addrs_and_ports.libp2p_port","counters":[]},{"line":"                     ~peer_id:my_peer_id ) ) ;","counters":[]},{"line":"          [%log' info config.logger] \"libp2p peer ID this session is $peer_id\"","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"            ~metadata:[ (\"peer_id\", `String my_peer_id) ] ;","counters":[]},{"line":"          let initializing_libp2p_result : _ Deferred.Or_error.t =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log' debug config.logger] \"(Re)initializing libp2p result\" ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let seed_peers =","counters":[]},{"line":"              List.dedup_and_sort ~compare:Mina_net2.Multiaddr.compare","counters":[]},{"line":"                (List.concat","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                   [ config.initial_peers","counters":[]},{"line":"                   ; seeds_from_url","counters":[]},{"line":"                   ; List.map","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                       ~f:","counters":[]},{"line":"                         (Fn.compose Mina_net2.Multiaddr.of_string","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                            Peer.to_multiaddr_string )","counters":[]},{"line":"                       (Hash_set.to_list added_seeds)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                   ] )","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind () =","counters":[]},{"line":"              configure net2 ~me ~metrics_port:config.metrics_port","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                ~maddrs:","counters":[]},{"line":"                  [ Multiaddr.of_string","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                      (sprintf \"/ip4/0.0.0.0/tcp/%d\"","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                         (Option.value_exn config.addrs_and_ports.peer)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                           .libp2p_port )","counters":[]},{"line":"                  ]","counters":[]},{"line":"                ~external_maddr:","counters":[]},{"line":"                  (Multiaddr.of_string","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                     (sprintf \"/ip4/%s/tcp/%d\"","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                        (Unix.Inet_addr.to_string","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                           config.addrs_and_ports.external_ip )","counters":[]},{"line":"                        (Option.value_exn config.addrs_and_ports.peer)","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                          .libp2p_port ) )","counters":[]},{"line":"                ~network_id:config.chain_id","counters":[]},{"line":"                ~unsafe_no_trust_ip:config.unsafe_no_trust_ip ~seed_peers","counters":[]},{"line":"                ~direct_peers:config.direct_peers","counters":[]},{"line":"                ~peer_exchange:config.peer_exchange","counters":[]},{"line":"                ~peer_protection_ratio:config.peer_protection_ratio","counters":[]},{"line":"                ~flooding:config.flooding","counters":[]},{"line":"                ~min_connections:config.min_connections","counters":[]},{"line":"                ~max_connections:config.max_connections","counters":[]},{"line":"                ~validation_queue_size:config.validation_queue_size","counters":[]},{"line":"                ~known_private_ip_nets:config.known_private_ip_nets","counters":[]},{"line":"                ~initial_gating_config:","counters":[]},{"line":"                  Mina_net2.","counters":[]},{"line":"                    { banned_peers =","counters":[]},{"line":"                        Trust_system.peer_statuses config.trust_system","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                        |> List.filter_map ~f:(fun (peer, status) ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                               match status.banned with","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                               | Banned_until _ ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                                   Some peer","counters":[]},{"line":"                               | _ ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                                   None )","counters":[]},{"line":"                    ; trusted_peers =","counters":[]},{"line":"                        List.filter_map ~f:Mina_net2.Multiaddr.to_peer","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                          config.initial_peers","counters":[]},{"line":"                    ; isolate = config.isolate","counters":[]},{"line":"                    }","counters":[]},{"line":"                ~topic_config:[ [ v0_topic ]; v1_topics ]","counters":[]},{"line":"            in","counters":[]},{"line":"            let implementation_list =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              List.bind rpc_handlers ~f:create_rpc_implementations","counters":[]},{"line":"            in","counters":[]},{"line":"            let implementations =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let handle_unknown_rpc conn_state ~rpc_tag ~version =","counters":[]},{"line":"                Deferred.don't_wait_for","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Trust_system.(","counters":[]},{"line":"                    record config.trust_system config.logger conn_state","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                      Actions.","counters":[]},{"line":"                        ( Unknown_rpc","counters":[]},{"line":"                        , Some","counters":[]},{"line":"                            ( \"Attempt to make unknown (fixed-version) RPC \\","counters":[]},{"line":"                               call \\\"$rpc\\\" with version $version\"","counters":[]},{"line":"                            , [ (\"rpc\", `String rpc_tag)","counters":[]},{"line":"                              ; (\"version\", `Int version)","counters":[]},{"line":"                              ] ) )) ;","counters":[]},{"line":"                `Close_connection","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              in","counters":[]},{"line":"              Rpc.Implementations.create_exn","counters":[]},{"line":"                ~implementations:(Versioned_rpc.Menu.add implementation_list)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                ~on_unknown_rpc:(`Call handle_unknown_rpc)","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind () =","counters":[]},{"line":"              O1trace.thread \"handle_protocol_streams\" (fun () ->","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  Mina_net2.open_protocol net2 ~on_handler_error:`Raise","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    ~protocol:rpc_transport_proto (fun stream ->","counters":[]},{"line":"                      let peer = Mina_net2.Libp2p_stream.remote_peer stream in","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      let transport = prepare_stream_transport stream in","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      let open Deferred.Let_syntax in","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      match%bind","counters":[]},{"line":"                        Async_rpc_kernel.Rpc.Connection.create ~implementations","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                          ~connection_state:(Fn.const peer)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                          ~description:","counters":[]},{"line":"                            (Info.of_thunk (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                                 sprintf \"stream from %s\" peer.peer_id ) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                          transport","counters":[]},{"line":"                      with","counters":[]},{"line":"                      | Error handshake_error ->","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          let%bind () =","counters":[]},{"line":"                            Async_rpc_kernel.Rpc.Transport.close transport","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                          in","counters":[]},{"line":"                          don't_wait_for","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            (Mina_net2.reset_stream net2 stream >>| ignore) ;","counters":[{"col_start":50,"col_end":50,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"                          Trust_system.(","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            record config.trust_system config.logger peer","counters":[]},{"line":"                              Actions.","counters":[]},{"line":"                                ( Incoming_connection_error","counters":[]},{"line":"                                , Some","counters":[]},{"line":"                                    ( \"Handshake error: $exn\"","counters":[]},{"line":"                                    , [ ( \"exn\"","counters":[]},{"line":"                                        , `String","counters":[]},{"line":"                                            (Exn.to_string handshake_error) )","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                                      ] ) ))","counters":[]},{"line":"                      | Ok rpc_connection -> (","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          let%bind () =","counters":[]},{"line":"                            Async_rpc_kernel.Rpc.Connection.close_finished","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                              rpc_connection","counters":[]},{"line":"                          in","counters":[]},{"line":"                          let%bind () =","counters":[]},{"line":"                            Async_rpc_kernel.Rpc.Connection.close","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                              ~reason:(Info.of_string \"connection completed\")","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                              rpc_connection","counters":[]},{"line":"                          in","counters":[]},{"line":"                          match%map Mina_net2.reset_stream net2 stream with","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                          | Error e ->","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                              [%log' warn config.logger]","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                                \"failed to reset stream (this means it was \\","counters":[]},{"line":"                                 probably closed successfully): $error\"","counters":[]},{"line":"                                ~metadata:","counters":[]},{"line":"                                  [ (\"error\", Error_json.error_to_yojson e) ]","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"                          | Ok () ->","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                              () ) ) )","counters":[]},{"line":"            in","counters":[]},{"line":"            let subscribe ~fn topic bin_prot =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_net2.Pubsub.subscribe_encode net2","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                topic","counters":[]},{"line":"                (* Fix for #4097: validation is tied into a lot of complex control flow.","counters":[]},{"line":"                   Instead of refactoring it to have validation up-front and decoupled,","counters":[]},{"line":"                   we pass along a validation callback with the message. This ends up","counters":[]},{"line":"                   ignoring the actual subscription message pipe, so drain it separately. *)","counters":[]},{"line":"                ~handle_and_validate_incoming_message:","counters":[]},{"line":"                  (validate_gossip_base ~fn my_peer_id)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                ~bin_prot","counters":[]},{"line":"                ~on_decode_failure:(`Call (on_gossip_decode_failure config))","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"            in","counters":[]},{"line":"            let tx_bin_prot =","counters":[]},{"line":"              Network_pool.Transaction_pool.Diff_versioned.Stable.Latest.bin_t","counters":[]},{"line":"            in","counters":[]},{"line":"            let snark_bin_prot =","counters":[]},{"line":"              Network_pool.Snark_pool.Diff_versioned.Stable.Latest.bin_t","counters":[]},{"line":"            in","counters":[]},{"line":"            let block_bin_prot = Mina_block.Stable.Latest.bin_t in","counters":[]},{"line":"            let unit_f _ = Deferred.unit in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"            let publish_v1_impl push_impl bin_prot topic =","counters":[]},{"line":"              match config.pubsub_v1 with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | RW ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  subscribe ~fn:push_impl topic bin_prot >>| Pubsub.publish net2","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"              | RO ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  subscribe ~fn:push_impl topic bin_prot >>| fun _ -> unit_f","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"              | _ ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Deferred.Or_error.return unit_f","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind publish_v1_tx =","counters":[]},{"line":"              publish_v1_impl","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                (Sinks.Tx_sink.push sink_tx)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                tx_bin_prot v1_topic_tx","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind publish_v1_snark_work =","counters":[]},{"line":"              publish_v1_impl","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                (Sinks.Snark_sink.push sink_snark_work)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                snark_bin_prot v1_topic_snark_work","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind publish_v1_block =","counters":[]},{"line":"              publish_v1_impl","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                (fun (env, vc) ->","counters":[]},{"line":"                  Sinks.Block_sink.push sink_block","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    ( `Transition env","counters":[]},{"line":"                    , `Time_received (Block_time.now config.time_controller)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                    , `Valid_cb vc ) )","counters":[]},{"line":"                block_bin_prot v1_topic_block","counters":[]},{"line":"            in","counters":[]},{"line":"            let map_v0_msg msg =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match msg with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | Message.New_state state ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Message.Latest.T.New_state state","counters":[]},{"line":"              | Message.Transaction_pool_diff diff ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Message.Latest.T.Transaction_pool_diff diff","counters":[]},{"line":"              | Message.Snark_pool_diff diff ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Message.Latest.T.Snark_pool_diff diff","counters":[]},{"line":"            in","counters":[]},{"line":"            let subscribe_v0_impl =","counters":[]},{"line":"              subscribe","counters":[]},{"line":"                ~fn:(fun (env, vc) ->","counters":[]},{"line":"                  match Envelope.Incoming.data env with","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  | Message.Latest.T.New_state state ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      Sinks.Block_sink.push sink_block","counters":[]},{"line":"                        ( `Transition","counters":[]},{"line":"                            (Envelope.Incoming.map ~f:(const state) env)","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                        , `Time_received (Block_time.now config.time_controller)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                        , `Valid_cb vc )","counters":[]},{"line":"                  | Message.Latest.T.Transaction_pool_diff diff ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      Sinks.Tx_sink.push sink_tx","counters":[]},{"line":"                        (Envelope.Incoming.map ~f:(fun _ -> diff) env, vc)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"                  | Message.Latest.T.Snark_pool_diff diff ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      Sinks.Snark_sink.push sink_snark_work","counters":[]},{"line":"                        (Envelope.Incoming.map ~f:(fun _ -> diff) env, vc) )","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"                v0_topic Message.Latest.T.bin_msg","counters":[]},{"line":"            in","counters":[]},{"line":"            let%bind publish_v0 =","counters":[]},{"line":"              match config.pubsub_v0 with","counters":[]},{"line":"              | RW ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  subscribe_v0_impl >>| Pubsub.publish net2","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"                  >>| Fn.flip Fn.compose map_v0_msg","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"              | RO ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  subscribe_v0_impl >>| fun _ -> unit_f","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"              | _ ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Deferred.Or_error.return unit_f","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"            in","counters":[]},{"line":"            let%map _ =","counters":[]},{"line":"              (* XXX: this ALWAYS needs to be AFTER handle_protocol/subscribe","counters":[]},{"line":"                 or it is possible to miss connections! *)","counters":[]},{"line":"              listen_on net2","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                (Multiaddr.of_string","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                   (sprintf \"/ip4/%s/tcp/%d\"","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                      ( config.addrs_and_ports.bind_ip","counters":[]},{"line":"                      |> Unix.Inet_addr.to_string )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                      (Option.value_exn config.addrs_and_ports.peer).libp2p_port ) )","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            in","counters":[]},{"line":"            let add_many xs ~is_seed =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.map","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (Deferred.List.iter ~how:`Parallel xs ~f:(fun x ->","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                     let open Deferred.Let_syntax in","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                     Mina_net2.add_peer ~is_seed net2 x >>| ignore ) )","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                ~f:(fun () -> Ok ())","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"            in","counters":[]},{"line":"            don't_wait_for","counters":[]},{"line":"              (Deferred.map","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                 (let%bind () = add_many seed_peers ~is_seed:true","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  and () =","counters":[]},{"line":"                    let seeds =","counters":[]},{"line":"                      String.Hash_set.of_list","counters":[]},{"line":"                        (List.map ~f:Multiaddr.to_string seed_peers)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                    in","counters":[]},{"line":"                    add_many ~is_seed:false","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"                      (List.filter !peers_snapshot ~f:(fun p ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                           not (Hash_set.mem seeds (Multiaddr.to_string p)) ) )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  let%bind () = Mina_net2.begin_advertising net2 in","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                  return () )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                 ~f:(function","counters":[]},{"line":"                   | Ok () ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       ()","counters":[]},{"line":"                   | Error e ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       [%log' warn config.logger]","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                         \"starting libp2p up failed: $error\"","counters":[]},{"line":"                         ~metadata:[ (\"error\", Error_json.error_to_yojson e) ]","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"                   ) ) ;","counters":[]},{"line":"            { publish_v0","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            ; publish_v1_block","counters":[]},{"line":"            ; publish_v1_tx","counters":[]},{"line":"            ; publish_v1_snark_work","counters":[]},{"line":"            }","counters":[]},{"line":"          in","counters":[]},{"line":"          match%map initializing_libp2p_result with","counters":[]},{"line":"          | Ok pfs ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (net2, pfs)","counters":[]},{"line":"          | Error e ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              fail e )","counters":[]},{"line":"      | Ok (Error e) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail e","counters":[]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fail (Error.of_exn e)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let peers t = !(t.net2) >>= Mina_net2.peers","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"    let bandwidth_info t = !(t.net2) >>= Mina_net2.bandwidth_info","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let create (config : Config.t) ~pids rpc_handlers (sinks : Message.sinks) =","counters":[]},{"line":"      let first_peer_ivar = Ivar.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let high_connectivity_ivar = Ivar.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let net2_ref = ref (Deferred.never ()) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      let pfs_ref = ref empty_publish_functions in","counters":[]},{"line":"      let restarts_r, restarts_w =","counters":[]},{"line":"        Strict_pipe.create ~name:\"libp2p-restarts\"","counters":[]},{"line":"          (Strict_pipe.Buffered","counters":[]},{"line":"             (`Capacity 0, `Overflow (Strict_pipe.Drop_head ignore)) )","counters":[]},{"line":"      in","counters":[]},{"line":"      let added_seeds = Peer.Hash_set.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        let rec on_libp2p_create res =","counters":[]},{"line":"          net2_ref :=","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Deferred.map res ~f:(fun (n, _) ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                ( match","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                    Sys.getenv \"MINA_LIBP2P_HELPER_RESTART_INTERVAL_BASE\"","counters":[]},{"line":"                  with","counters":[]},{"line":"                | Some base_time ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    let restart_after =","counters":[]},{"line":"                      let plus_or_minus initial ~delta =","counters":[]},{"line":"                        initial +. (Random.float (2. *. delta) -. delta)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                      in","counters":[]},{"line":"                      let base_time = Float.of_string base_time in","counters":[]},{"line":"                      let delta =","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Option.value_map ~f:Float.of_string","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                          (Sys.getenv","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                             \"MINA_LIBP2P_HELPER_RESTART_INTERVAL_DELTA\" )","counters":[]},{"line":"                          ~default:2.5","counters":[]},{"line":"                        |> Float.min (base_time /. 2.)","counters":[]},{"line":"                      in","counters":[]},{"line":"                      Time.Span.(of_min (base_time |> plus_or_minus ~delta))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"                    in","counters":[]},{"line":"                    don't_wait_for","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                      ( after restart_after","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                      >>= fun () -> Mina_net2.shutdown n >>| restart_libp2p )","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"                | None ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    () ) ;","counters":[]},{"line":"                n ) ;","counters":[]},{"line":"          let pf_impl f msg =","counters":[]},{"line":"            let%bind _, pf = res in","counters":[]},{"line":"            f pf msg","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          in","counters":[]},{"line":"          pfs_ref :=","counters":[]},{"line":"            { publish_v0 = pf_impl (fun pf -> pf.publish_v0)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"            ; publish_v1_block = pf_impl (fun pf -> pf.publish_v1_block)","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"            ; publish_v1_tx = pf_impl (fun pf -> pf.publish_v1_tx)","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"            ; publish_v1_snark_work =","counters":[]},{"line":"                pf_impl (fun pf -> pf.publish_v1_snark_work)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"            } ;","counters":[]},{"line":"          upon res (fun _ ->","counters":[]},{"line":"              [%log' trace config.logger] ~metadata:[]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"                \"Successfully restarted libp2p\" )","counters":[]},{"line":"        and start_libp2p () =","counters":[]},{"line":"          let libp2p =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            create_libp2p config rpc_handlers first_peer_ivar","counters":[]},{"line":"              high_connectivity_ivar ~added_seeds ~pids","counters":[]},{"line":"              ~on_unexpected_termination:restart_libp2p ~sinks","counters":[]},{"line":"          in","counters":[]},{"line":"          on_libp2p_create libp2p ; Deferred.ignore_m libp2p","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        and restart_libp2p () = don't_wait_for (start_libp2p ()) in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        don't_wait_for","counters":[]},{"line":"          (Strict_pipe.Reader.iter restarts_r ~f:(fun () ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"               let%bind n = !net2_ref in","counters":[]},{"line":"               let%bind () = Mina_net2.shutdown n in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"               restart_libp2p () ; !net2_ref >>| ignore ) ) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        start_libp2p ()","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      in","counters":[]},{"line":"      let ban_configuration =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ref { Mina_net2.banned_peers = []; trusted_peers = []; isolate = false }","counters":[]},{"line":"      in","counters":[]},{"line":"      let send_heartbeat peer =","counters":[]},{"line":"        O1trace.thread \"execute_heartbeat\" (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let n_def = !net2_ref in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            if Deferred.is_determined n_def then","counters":[]},{"line":"              let%map net2 = n_def in","counters":[]},{"line":"              Mina_net2.send_heartbeat net2 peer.Network_peer.Peer.peer_id","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            else Deferred.unit )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      let do_ban (banned_peer, expiration) =","counters":[]},{"line":"        O1trace.thread \"execute_gossip_net_bans\" (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            don't_wait_for","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ( Clock.at expiration","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              >>= fun () ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              let%bind net2 = !net2_ref in","counters":[]},{"line":"              ban_configuration :=","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { !ban_configuration with","counters":[]},{"line":"                  banned_peers =","counters":[]},{"line":"                    List.filter !ban_configuration.banned_peers ~f:(fun p ->","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                        not (Peer.equal p banned_peer) )","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"                } ;","counters":[]},{"line":"              Mina_net2.set_connection_gating_config net2 !ban_configuration","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"              |> Deferred.ignore_m ) ;","counters":[]},{"line":"            (let%bind net2 = !net2_ref in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"             ban_configuration :=","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               { !ban_configuration with","counters":[]},{"line":"                 banned_peers = banned_peer :: !ban_configuration.banned_peers","counters":[]},{"line":"               } ;","counters":[]},{"line":"             Mina_net2.set_connection_gating_config net2 !ban_configuration )","counters":[]},{"line":"            |> Deferred.ignore_m )","counters":[]},{"line":"      in","counters":[]},{"line":"      let%map () =","counters":[]},{"line":"        Deferred.List.iter (Trust_system.peer_statuses config.trust_system)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          ~f:(function","counters":[]},{"line":"          | ( addr","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            , { banned = Trust_system.Banned_status.Banned_until expiration; _ }","counters":[]},{"line":"            ) ->","counters":[]},{"line":"              do_ban (addr, expiration)","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.unit )","counters":[]},{"line":"      in","counters":[]},{"line":"      let handle_trust_system_upcall upcall =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match upcall with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | `Ban u ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            do_ban u","counters":[]},{"line":"        | `Heartbeat peer ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            send_heartbeat peer","counters":[]},{"line":"      in","counters":[]},{"line":"      let ban_reader, ban_writer = Linear_pipe.create () in","counters":[]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (let%map () =","counters":[]},{"line":"           Strict_pipe.Reader.iter","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"             (Trust_system.upcall_pipe config.trust_system)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             ~f:handle_trust_system_upcall","counters":[]},{"line":"         in","counters":[]},{"line":"         Linear_pipe.close ban_writer ) ;","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      let t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { config","counters":[]},{"line":"        ; added_seeds","counters":[]},{"line":"        ; net2 = net2_ref","counters":[]},{"line":"        ; first_peer_ivar","counters":[]},{"line":"        ; high_connectivity_ivar","counters":[]},{"line":"        ; publish_functions = pfs_ref","counters":[]},{"line":"        ; ban_reader","counters":[]},{"line":"        ; restart_helper = (fun () -> Strict_pipe.Writer.write restarts_w ())","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        }","counters":[]},{"line":"      in","counters":[]},{"line":"      Clock.every' peers_snapshot_max_staleness (fun () ->","counters":[]},{"line":"          O1trace.thread \"snapshot_peers\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let%map peers = peers t in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"              Mina_metrics.(","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Gauge.set Network.peers (List.length peers |> Int.to_float)) ;","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"              peers_snapshot :=","counters":[]},{"line":"                List.map peers","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                  ~f:","counters":[]},{"line":"                    (Fn.compose Mina_net2.Multiaddr.of_string","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                       Peer.to_multiaddr_string ) ) ) ;","counters":[]},{"line":"      t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let set_node_status t data =","counters":[]},{"line":"      !(t.net2) >>= Fn.flip Mina_net2.set_node_status data","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let get_peer_node_status t peer =","counters":[]},{"line":"      !(t.net2)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      >>= Fn.flip Mina_net2.get_peer_node_status","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            (Peer.to_multiaddr_string peer |> Mina_net2.Multiaddr.of_string)","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"    let initial_peers t = t.config.initial_peers","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let add_peer t p ~is_seed =","counters":[]},{"line":"      let open Mina_net2 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if is_seed then Hash_set.add t.added_seeds p ;","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      !(t.net2)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      >>= Fn.flip (add_peer ~is_seed)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            (Multiaddr.of_string (Peer.to_multiaddr_string p))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"    (* OPTIMIZATION: use fast n choose k implementation - see python or old flow code *)","counters":[]},{"line":"    let random_sublist xs n = List.take (List.permute xs) n","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"    let random_peers t n =","counters":[]},{"line":"      let%map peers = peers t in","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      random_sublist peers n","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let random_peers_except t n ~except =","counters":[]},{"line":"      let%map peers = peers t in","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      random_sublist","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Hash_set.(diff (Peer.Hash_set.of_list peers) except |> to_list)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"        n","counters":[]},{"line":"","counters":[]},{"line":"    let try_call_rpc_with_dispatch :","counters":[]},{"line":"        type r q.","counters":[]},{"line":"           ?heartbeat_timeout:Time_ns.Span.t","counters":[]},{"line":"        -> ?timeout:Time.Span.t","counters":[]},{"line":"        -> rpc_counter:Mina_metrics.Counter.t * Mina_metrics.Gauge.t","counters":[]},{"line":"        -> rpc_failed_counter:Mina_metrics.Counter.t","counters":[]},{"line":"        -> rpc_name:string","counters":[]},{"line":"        -> t","counters":[]},{"line":"        -> Peer.t","counters":[]},{"line":"        -> Async.Rpc.Transport.t","counters":[]},{"line":"        -> (r, q) dispatch","counters":[]},{"line":"        -> r","counters":[]},{"line":"        -> q Deferred.Or_error.t =","counters":[]},{"line":"     fun ?heartbeat_timeout ?timeout ~rpc_counter ~rpc_failed_counter ~rpc_name","counters":[]},{"line":"         t peer transport dispatch query ->","counters":[]},{"line":"      let call () =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Monitor.try_with ~here:[%here] (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            (* Async_rpc_kernel takes a transport instead of a Reader.t *)","counters":[]},{"line":"            Async_rpc_kernel.Rpc.Connection.with_close","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~heartbeat_config:","counters":[]},{"line":"                (Async_rpc_kernel.Rpc.Connection.Heartbeat_config.create","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"                   ~send_every:(Time_ns.Span.of_sec 10.)","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                   ~timeout:","counters":[]},{"line":"                     (Option.value ~default:(Time_ns.Span.of_sec 120.)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"                        heartbeat_timeout )","counters":[]},{"line":"                   () )","counters":[]},{"line":"              ~connection_state:(Fn.const ())","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              ~dispatch_queries:(fun conn ->","counters":[]},{"line":"                Versioned_rpc.Connection_with_menu.create conn","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"                >>=? fun conn' ->","counters":[]},{"line":"                Mina_metrics.(Counter.inc_one Network.rpc_requests_sent) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"                Mina_metrics.(Counter.inc_one @@ fst rpc_counter) ;","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"                Mina_metrics.(Gauge.inc_one @@ snd rpc_counter) ;","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"                let d = dispatch conn' query in","counters":[]},{"line":"                match timeout with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | None ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    d","counters":[]},{"line":"                | Some timeout ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Deferred.choose","counters":[]},{"line":"                      [ Deferred.choice d Fn.id","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                      ; choice (after timeout) (fun () ->","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"                            Or_error.error_string \"rpc timed out\" )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                      ] )","counters":[]},{"line":"              transport","counters":[]},{"line":"              ~on_handshake_error:","counters":[]},{"line":"                (`Call","counters":[]},{"line":"                  (fun exn ->","counters":[]},{"line":"                    let%map () =","counters":[]},{"line":"                      Trust_system.(","counters":[]},{"line":"                        record t.config.trust_system t.config.logger peer","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                          Actions.","counters":[]},{"line":"                            ( Outgoing_connection_error","counters":[]},{"line":"                            , Some","counters":[]},{"line":"                                ( \"Handshake error: $exn\"","counters":[]},{"line":"                                , [ (\"exn\", `String (Exn.to_string exn)) ] ) ))","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                    in","counters":[]},{"line":"                    Or_error.error_string \"handshake error\" ) ) )","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        >>= function","counters":[]},{"line":"        | Ok (Ok result) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (* call succeeded, result is valid *)","counters":[]},{"line":"            Deferred.return (Ok result)","counters":[]},{"line":"        | Ok (Error err) -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (* call succeeded, result is an error *)","counters":[]},{"line":"            [%log' warn t.config.logger] \"RPC call error for $rpc\"","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"rpc\", `String rpc_name)","counters":[]},{"line":"                ; (\"error\", Error_json.error_to_yojson err)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                ] ;","counters":[]},{"line":"            Mina_metrics.(Counter.inc_one rpc_failed_counter) ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"            match (Error.to_exn err, Error.sexp_of_t err) with","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"            | ( _","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              , Sexp.List","counters":[]},{"line":"                  [ Sexp.List","counters":[]},{"line":"                      [ Sexp.Atom \"rpc_error\"","counters":[]},{"line":"                      ; Sexp.List [ Sexp.Atom \"Connection_closed\"; _ ]","counters":[]},{"line":"                      ]","counters":[]},{"line":"                  ; _connection_description","counters":[]},{"line":"                  ; _rpc_tag","counters":[]},{"line":"                  ; _rpc_version","counters":[]},{"line":"                  ] ) ->","counters":[]},{"line":"                Mina_metrics.(Counter.inc_one Network.rpc_connections_failed) ;","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"                let%map () =","counters":[]},{"line":"                  Trust_system.(","counters":[]},{"line":"                    record t.config.trust_system t.config.logger peer","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                      Actions.","counters":[]},{"line":"                        ( Outgoing_connection_error","counters":[]},{"line":"                        , Some (\"Closed connection\", []) ))","counters":[]},{"line":"                in","counters":[]},{"line":"                Error err","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let%map () =","counters":[]},{"line":"                  Trust_system.(","counters":[]},{"line":"                    record t.config.trust_system t.config.logger peer","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                      Actions.","counters":[]},{"line":"                        ( Outgoing_connection_error","counters":[]},{"line":"                        , Some","counters":[]},{"line":"                            ( \"RPC call failed, reason: $exn\"","counters":[]},{"line":"                            , [ (\"exn\", Error_json.error_to_yojson err) ] ) ))","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                in","counters":[]},{"line":"                Error err )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        | Error monitor_exn ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (* call itself failed *)","counters":[]},{"line":"            (* TODO: learn what other exceptions are raised here *)","counters":[]},{"line":"            Mina_metrics.(Counter.inc_one rpc_failed_counter) ;","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"            let exn = Monitor.extract_exn monitor_exn in","counters":[]},{"line":"            let () =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match Error.sexp_of_t (Error.of_exn exn) with","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"              | Sexp.List (Sexp.Atom \"connection attempt timeout\" :: _) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  [%log' debug t.config.logger]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                    \"RPC call for $rpc raised an exception\"","counters":[]},{"line":"                    ~metadata:","counters":[]},{"line":"                      [ (\"rpc\", `String rpc_name)","counters":[]},{"line":"                      ; (\"exn\", `String (Exn.to_string exn))","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                      ]","counters":[]},{"line":"              | _ ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  [%log' warn t.config.logger]","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                    \"RPC call for $rpc raised an exception\"","counters":[]},{"line":"                    ~metadata:","counters":[]},{"line":"                      [ (\"rpc\", `String rpc_name)","counters":[]},{"line":"                      ; (\"exn\", `String (Exn.to_string exn))","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                      ]","counters":[]},{"line":"            in","counters":[]},{"line":"            Deferred.return (Or_error.of_exn exn)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      in","counters":[]},{"line":"      call ()","counters":[]},{"line":"","counters":[]},{"line":"    let try_call_rpc :","counters":[]},{"line":"        type q r.","counters":[]},{"line":"           ?heartbeat_timeout:Time_ns.Span.t","counters":[]},{"line":"        -> ?timeout:Time.Span.t","counters":[]},{"line":"        -> t","counters":[]},{"line":"        -> Peer.t","counters":[]},{"line":"        -> _","counters":[]},{"line":"        -> (q, r) rpc","counters":[]},{"line":"        -> q","counters":[]},{"line":"        -> r Deferred.Or_error.t =","counters":[]},{"line":"     fun ?heartbeat_timeout ?timeout t peer transport rpc query ->","counters":[]},{"line":"      let (module Impl) = implementation_of_rpc rpc in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      try_call_rpc_with_dispatch ?heartbeat_timeout ?timeout","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~rpc_counter:Impl.sent_counter","counters":[]},{"line":"        ~rpc_failed_counter:Impl.failed_request_counter ~rpc_name:Impl.name t","counters":[]},{"line":"        peer transport Impl.dispatch_multi query","counters":[]},{"line":"","counters":[]},{"line":"    let query_peer ?heartbeat_timeout ?timeout t (peer_id : Peer.Id.t) rpc","counters":[]},{"line":"        rpc_input =","counters":[]},{"line":"      let%bind net2 = !(t.net2) in","counters":[]},{"line":"      match%bind","counters":[]},{"line":"        Mina_net2.open_stream net2 ~protocol:rpc_transport_proto ~peer:peer_id","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok stream ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let peer = Mina_net2.Libp2p_stream.remote_peer stream in","counters":[]},{"line":"          let transport = prepare_stream_transport stream in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          try_call_rpc ?heartbeat_timeout ?timeout t peer transport rpc","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            rpc_input","counters":[]},{"line":"          >>| fun data ->","counters":[]},{"line":"          Connected (Envelope.Incoming.wrap_peer ~data ~sender:peer)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Mina_metrics.(Counter.inc_one Network.rpc_connections_failed) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"          return (Failed_to_connect e)","counters":[]},{"line":"","counters":[]},{"line":"    let query_peer' (type q r) ?how ?heartbeat_timeout ?timeout t","counters":[]},{"line":"        (peer_id : Peer.Id.t) (rpc : (q, r) rpc) (qs : q list) =","counters":[]},{"line":"      let%bind net2 = !(t.net2) in","counters":[]},{"line":"      match%bind","counters":[]},{"line":"        Mina_net2.open_stream net2 ~protocol:rpc_transport_proto ~peer:peer_id","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok stream ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let peer = Mina_net2.Libp2p_stream.remote_peer stream in","counters":[]},{"line":"          let transport = prepare_stream_transport stream in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let (module Impl) = implementation_of_rpc rpc in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          try_call_rpc_with_dispatch ?heartbeat_timeout ?timeout","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"            ~rpc_counter:Impl.sent_counter","counters":[]},{"line":"            ~rpc_failed_counter:Impl.failed_request_counter ~rpc_name:Impl.name","counters":[]},{"line":"            t peer transport","counters":[]},{"line":"            (fun conn qs ->","counters":[]},{"line":"              Deferred.Or_error.List.map ?how qs ~f:(fun q ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  Impl.dispatch_multi conn q ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            qs","counters":[]},{"line":"          >>| fun data ->","counters":[]},{"line":"          Connected (Envelope.Incoming.wrap_peer ~data ~sender:peer)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Mina_metrics.(Counter.inc_one Network.rpc_connections_failed) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"          return (Failed_to_connect e)","counters":[]},{"line":"","counters":[]},{"line":"    let query_random_peers t n rpc query =","counters":[]},{"line":"      let%map peers = random_peers t n in","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      [%log' trace t.config.logger]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        !\"Querying random peers: %s\"","counters":[]},{"line":"        (Peer.pretty_list peers) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      List.map peers ~f:(fun peer -> query_peer t peer.peer_id rpc query)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    (* Do not broadcast to the topic from which message was originally received *)","counters":[]},{"line":"    let guard_topic ?origin_topic topic f msg =","counters":[]},{"line":"      if Option.equal String.equal origin_topic (Some topic) then Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"      else f msg","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"    (* broadcast to new topics  *)","counters":[]},{"line":"    let broadcast_state ?origin_topic t state =","counters":[]},{"line":"      let pfs = !(t.publish_functions) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        guard_topic ?origin_topic v1_topic_block pfs.publish_v1_block state","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      in","counters":[]},{"line":"      guard_topic ?origin_topic v0_topic pfs.publish_v0 (Message.New_state state)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let broadcast_transaction_pool_diff ?origin_topic t diff =","counters":[]},{"line":"      let pfs = !(t.publish_functions) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        guard_topic ?origin_topic v1_topic_tx pfs.publish_v1_tx diff","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      in","counters":[]},{"line":"      guard_topic ?origin_topic v0_topic pfs.publish_v0","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Message.Transaction_pool_diff diff)","counters":[]},{"line":"","counters":[]},{"line":"    let broadcast_snark_pool_diff ?origin_topic t diff =","counters":[]},{"line":"      let pfs = !(t.publish_functions) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        guard_topic ?origin_topic v1_topic_snark_work pfs.publish_v1_snark_work","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          diff","counters":[]},{"line":"      in","counters":[]},{"line":"      guard_topic ?origin_topic v0_topic pfs.publish_v0","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Message.Snark_pool_diff diff)","counters":[]},{"line":"","counters":[]},{"line":"    let on_first_connect t ~f = Deferred.map (Ivar.read t.first_peer_ivar) ~f","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"    let on_first_high_connectivity t ~f =","counters":[]},{"line":"      Deferred.map (Ivar.read t.high_connectivity_ivar) ~f","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    let ban_notification_reader t = t.ban_reader","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    let connection_gating t =","counters":[]},{"line":"      let%map net2 = !(t.net2) in","counters":[]},{"line":"      Mina_net2.connection_gating_config net2","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let set_connection_gating t config =","counters":[]},{"line":"      let%bind net2 = !(t.net2) in","counters":[]},{"line":"      Mina_net2.set_connection_gating_config net2 config","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let restart_helper t = t.restart_helper ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}