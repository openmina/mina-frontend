{"filename":"src/lib/secrets/password.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"let read_hidden_line ~error_help_message prompt : Bytes.t Async.Deferred.t =","counters":[]},{"line":"  let open Unix in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Async_unix in","counters":[]},{"line":"  let open Async.Deferred.Let_syntax in","counters":[]},{"line":"  let isatty = isatty stdin in","counters":[]},{"line":"  let old_termios =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if isatty then Some (Terminal_io.tcgetattr stdin) else None","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"  in","counters":[]},{"line":"  let () =","counters":[]},{"line":"    if isatty then","counters":[]},{"line":"      Terminal_io.tcsetattr ~mode:Terminal_io.TCSANOW","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        { (Option.value_exn old_termios) with c_echo = false; c_echonl = true }","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        stdin","counters":[]},{"line":"  in","counters":[]},{"line":"  Writer.write (Lazy.force Writer.stdout) prompt ;","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  let%map pwd =","counters":[]},{"line":"    if isatty then Reader.read_line (Lazy.force Reader.stdin)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    else","counters":[]},{"line":"      (* Don't attempt to read the password if stdin isn't a tty, to avoid a","counters":[]},{"line":"         hang waiting for input.","counters":[]},{"line":"      *)","counters":[]},{"line":"      return `Eof","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"  in","counters":[]},{"line":"  if isatty then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Terminal_io.tcsetattr ~mode:Terminal_io.TCSANOW","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      (Option.value_exn old_termios)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      stdin ;","counters":[]},{"line":"  match pwd with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Ok pwd ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Bytes.of_string pwd","counters":[]},{"line":"  | `Eof ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Mina_user_error.raisef {|No password was provided.","counters":[]},{"line":"","counters":[]},{"line":"%s|}","counters":[]},{"line":"        error_help_message","counters":[]},{"line":"","counters":[]},{"line":"let hidden_line_or_env ?error_help_message prompt ~env :","counters":[]},{"line":"    Bytes.t Async.Deferred.t =","counters":[]},{"line":"  let open Async.Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match Sys.getenv env with","counters":[]},{"line":"  | Some p ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      return (Bytes.of_string p)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let error_help_message =","counters":[]},{"line":"        match error_help_message with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf \"Set the %s environment variable to the password\" env","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        | Some s ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            s","counters":[]},{"line":"      in","counters":[]},{"line":"      read_hidden_line ~error_help_message prompt","counters":[{"col_start":48,"col_end":48,"count":2}]}]}