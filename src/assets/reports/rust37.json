{"filename":"src/fuzzing/mutator.rs","lines":[{"line":"use super::{","counters":[]},{"line":"    context::{FuzzerCtx, PermissionModel},","counters":[]},{"line":"    generator::{Generator, GeneratorFromAccount, GeneratorWrapper},","counters":[]},{"line":"};","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    hash_with_kimchi,","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{Balance, MinMax, Nonce, Slot},","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            zkapp_command::{","counters":[]},{"line":"                self, AccountPreconditions, AccountUpdate, Body, ClosedInterval, FeePayer,","counters":[]},{"line":"                FeePayerBody, OrIgnore, Preconditions, SetOrKeep, Timing, Update, ZkAppCommand,","counters":[]},{"line":"                ZkAppPreconditions,","counters":[]},{"line":"            },","counters":[]},{"line":"            Transaction, UserCommand,","counters":[]},{"line":"        },","counters":[]},{"line":"    },","counters":[]},{"line":"    Account, AuthRequired, Permissions,","counters":[]},{"line":"};","counters":[]},{"line":"use ark_ff::Zero;","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::{CompressedPubKey, Signature};","counters":[]},{"line":"use rand::{seq::SliceRandom, Rng};","counters":[]},{"line":"","counters":[]},{"line":"fn rand_elements(ctx: &mut FuzzerCtx, count: usize) -> Vec<usize> {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"    let elements: Vec<usize> = (0..count).collect();","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"    // We give more weight to smaller amount of elements since in general we want to perform fewer mutations","counters":[]},{"line":"    if let Ok(amount) = elements.choose_weighted(&mut ctx.rng, |x| elements.len() - x) {","counters":[{"col_start":14,"col_end":20,"count":0},{"col_start":24,"col_end":63,"count":0},{"col_start":67,"col_end":85,"count":0},{"col_start":85,"col_end":86,"count":0}]},{"line":"        elements","counters":[{"col_start":8,"col_end":16,"count":0}]},{"line":"            .choose_multiple(&mut ctx.rng, *amount)","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            .cloned()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        Vec::new()","counters":[{"col_start":8,"col_end":18,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub trait Mutator<T> {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut T);","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<FeePayerBody> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut FeePayerBody) {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        let account = self.get_account(&t.public_key).unwrap();","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"        for option in rand_elements(self, 3) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => t.fee = self.gen_from_account(&account),","counters":[{"col_start":21,"col_end":60,"count":0}]},{"line":"                1 => t.valid_until = self.gen_wrap(|x| -> Slot { x.gen() }),","counters":[{"col_start":21,"col_end":51,"count":0},{"col_start":63,"col_end":74,"count":0},{"col_start":74,"col_end":75,"count":0}]},{"line":"                2 => t.nonce = self.gen_from_account(&account),","counters":[{"col_start":21,"col_end":62,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<FeePayer> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut FeePayer) {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        for option in rand_elements(self, 2) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate(&mut t.body),","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"                1 => t.authorization = Signature::dummy(), // TODO","counters":[{"col_start":21,"col_end":57,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<Fp> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut Fp) {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        *t = self.gen();","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone> Mutator<SetOrKeep<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: Mutator<T> + Generator<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate(&mut self, t: &mut SetOrKeep<T>) {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        match t {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            SetOrKeep::Set(inner) => {","counters":[{"col_start":27,"col_end":38,"count":0}]},{"line":"                if self.rng.gen_bool(0.5) {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    self.mutate(inner)","counters":[{"col_start":20,"col_end":38,"count":0}]},{"line":"                } else {","counters":[{"col_start":23,"col_end":24,"count":0}]},{"line":"                    *t = SetOrKeep::Keep;","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"            SetOrKeep::Keep => *t = SetOrKeep::Set(self.gen()),","counters":[{"col_start":31,"col_end":62,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T, const N: usize> Mutator<[T; N]> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: Mutator<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate(&mut self, t: &mut [T; N]) {","counters":[{"col_start":4,"col_end":41,"count":0}]},{"line":"        for i in rand_elements(self, t.len()) {","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":31,"col_end":44,"count":0}]},{"line":"            self.mutate(&mut t[i])","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<Permissions<AuthRequired>> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut Permissions<AuthRequired>) {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        match self.permission_model {","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            PermissionModel::Any => {","counters":[]},{"line":"                for option in rand_elements(self, 11) {","counters":[{"col_start":20,"col_end":26,"count":0},{"col_start":44,"col_end":48,"count":0}]},{"line":"                    match option {","counters":[{"col_start":26,"col_end":32,"count":0}]},{"line":"                        0 => t.edit_state = self.gen(),","counters":[{"col_start":29,"col_end":54,"count":0}]},{"line":"                        1 => t.send = self.gen(),","counters":[{"col_start":29,"col_end":48,"count":0}]},{"line":"                        2 => t.receive = self.gen(),","counters":[{"col_start":29,"col_end":51,"count":0}]},{"line":"                        3 => t.set_delegate = self.gen(),","counters":[{"col_start":29,"col_end":56,"count":0}]},{"line":"                        4 => t.set_permissions = self.gen(),","counters":[{"col_start":29,"col_end":59,"count":0}]},{"line":"                        5 => t.set_verification_key = self.gen(),","counters":[{"col_start":29,"col_end":64,"count":0}]},{"line":"                        6 => t.set_zkapp_uri = self.gen(),","counters":[{"col_start":29,"col_end":57,"count":0}]},{"line":"                        7 => t.edit_sequence_state = self.gen(),","counters":[{"col_start":29,"col_end":63,"count":0}]},{"line":"                        8 => t.set_token_symbol = self.gen(),","counters":[{"col_start":29,"col_end":60,"count":0}]},{"line":"                        9 => t.increment_nonce = self.gen(),","counters":[{"col_start":29,"col_end":59,"count":0}]},{"line":"                        10 => t.set_voting_for = self.gen(),","counters":[{"col_start":30,"col_end":59,"count":0}]},{"line":"                        _ => unimplemented!(),","counters":[{"col_start":29,"col_end":45,"count":0}]},{"line":"                    }","counters":[]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            // Don't mutate permissions in the rest of the models","counters":[]},{"line":"            PermissionModel::Empty => (),","counters":[{"col_start":38,"col_end":40,"count":0}]},{"line":"            PermissionModel::Initial => (),","counters":[{"col_start":40,"col_end":42,"count":0}]},{"line":"            PermissionModel::Default => (),","counters":[{"col_start":40,"col_end":42,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub trait MutatorFromAccount<T> {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut T, account: &Account);","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone> MutatorFromAccount<SetOrKeep<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: MutatorFromAccount<T> + GeneratorFromAccount<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut SetOrKeep<T>, account: &Account) {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        match t {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            SetOrKeep::Set(inner) => {","counters":[{"col_start":27,"col_end":38,"count":0}]},{"line":"                if self.rng.gen_bool(0.5) {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    self.mutate_from_account(inner, account)","counters":[{"col_start":20,"col_end":60,"count":0}]},{"line":"                } else {","counters":[{"col_start":23,"col_end":24,"count":0}]},{"line":"                    *t = SetOrKeep::Keep;","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"            SetOrKeep::Keep => *t = SetOrKeep::Set(self.gen_from_account(account)),","counters":[{"col_start":31,"col_end":82,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<Timing> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut Timing, account: &Account) {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        for option in rand_elements(self, 5) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => t.initial_minimum_balance = self.gen_from_account(account),","counters":[{"col_start":21,"col_end":79,"count":0}]},{"line":"                1 => t.cliff_time = self.gen(),","counters":[{"col_start":21,"col_end":46,"count":0}]},{"line":"                2 => t.cliff_amount = self.gen_from_account(account),","counters":[{"col_start":21,"col_end":68,"count":0}]},{"line":"                3 => t.vesting_period = self.gen(),","counters":[{"col_start":21,"col_end":50,"count":0}]},{"line":"                4 => t.vesting_increment = self.gen_from_account(account),","counters":[{"col_start":21,"col_end":73,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<Update> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut Update, account: &Account) {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        for option in rand_elements(self, 8) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate(&mut t.app_state),","counters":[{"col_start":21,"col_end":50,"count":0}]},{"line":"                1 => t.delegate = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":48,"count":0},{"col_start":52,"col_end":59,"count":0},{"col_start":59,"col_end":60,"count":0}]},{"line":"                2 => t.verification_key = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":56,"count":0},{"col_start":60,"col_end":67,"count":0},{"col_start":67,"col_end":68,"count":0}]},{"line":"                3 => self.mutate(&mut t.permissions),","counters":[{"col_start":21,"col_end":52,"count":0}]},{"line":"                4 => t.zkapp_uri = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":49,"count":0},{"col_start":53,"col_end":60,"count":0},{"col_start":60,"col_end":61,"count":0}]},{"line":"                5 => t.token_symbol = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":52,"count":0},{"col_start":56,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"                6 => self.mutate_from_account(&mut t.timing, account),","counters":[{"col_start":21,"col_end":69,"count":0}]},{"line":"                7 => t.voting_for = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":50,"count":0},{"col_start":54,"col_end":61,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone> Mutator<OrIgnore<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: Mutator<T> + Generator<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate(&mut self, t: &mut OrIgnore<T>) {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        match t {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            OrIgnore::Check(inner) => {","counters":[{"col_start":28,"col_end":39,"count":0}]},{"line":"                if self.rng.gen_bool(0.5) {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    self.mutate(inner)","counters":[{"col_start":20,"col_end":38,"count":0}]},{"line":"                } else {","counters":[{"col_start":23,"col_end":24,"count":0}]},{"line":"                    *t = OrIgnore::Ignore;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"            OrIgnore::Ignore => *t = OrIgnore::Check(self.gen()),","counters":[{"col_start":32,"col_end":64,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone> MutatorFromAccount<OrIgnore<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: MutatorFromAccount<T> + GeneratorFromAccount<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut OrIgnore<T>, account: &Account) {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        match t {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            OrIgnore::Check(inner) => {","counters":[{"col_start":28,"col_end":39,"count":0}]},{"line":"                if self.rng.gen_bool(0.5) {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    self.mutate_from_account(inner, account)","counters":[{"col_start":20,"col_end":60,"count":0}]},{"line":"                } else {","counters":[{"col_start":23,"col_end":24,"count":0}]},{"line":"                    *t = OrIgnore::Ignore;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"            OrIgnore::Ignore => *t = OrIgnore::Check(self.gen_from_account(account)),","counters":[{"col_start":32,"col_end":84,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<CompressedPubKey> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut CompressedPubKey) {","counters":[{"col_start":4,"col_end":52,"count":0}]},{"line":"        *t = self.gen();","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<bool> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut bool) {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        *t = !*t;","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone + MinMax> Mutator<ClosedInterval<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: Mutator<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate(&mut self, t: &mut ClosedInterval<T>) {","counters":[]},{"line":"        for option in rand_elements(self, 8) {","counters":[]},{"line":"            match option {","counters":[]},{"line":"                0 => self.mutate(&mut t.lower),","counters":[]},{"line":"                1 => self.mutate(&mut t.upper),","counters":[]},{"line":"                _ => unimplemented!(),","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<Balance> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut Balance, account: &Account) {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        *t = self.gen_from_account(account);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<Nonce> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut Nonce, account: &Account) {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        *t = self.gen_from_account(account);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: Clone + MinMax> MutatorFromAccount<ClosedInterval<T>> for FuzzerCtx","counters":[]},{"line":"where","counters":[]},{"line":"    FuzzerCtx: MutatorFromAccount<T>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut ClosedInterval<T>, account: &Account) {","counters":[{"col_start":4,"col_end":84,"count":0}]},{"line":"        for option in rand_elements(self, 8) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate_from_account(&mut t.lower, account),","counters":[{"col_start":21,"col_end":68,"count":0}]},{"line":"                1 => self.mutate_from_account(&mut t.upper, account),","counters":[{"col_start":21,"col_end":68,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<zkapp_command::Account> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut zkapp_command::Account, account: &Account) {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        for option in rand_elements(self, 8) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate_from_account(&mut t.balance, account),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"                1 => self.mutate_from_account(&mut t.nonce, account),","counters":[{"col_start":21,"col_end":68,"count":0}]},{"line":"                2 => self.mutate(&mut t.receipt_chain_hash),","counters":[{"col_start":21,"col_end":59,"count":0}]},{"line":"                3 => self.mutate(&mut t.delegate),","counters":[{"col_start":21,"col_end":49,"count":0}]},{"line":"                4 => self.mutate(&mut t.state),","counters":[{"col_start":21,"col_end":46,"count":0}]},{"line":"                5 => self.mutate(&mut t.sequence_state),","counters":[{"col_start":21,"col_end":55,"count":0}]},{"line":"                6 => self.mutate(&mut t.proved_state),","counters":[{"col_start":21,"col_end":53,"count":0}]},{"line":"                7 => self.mutate(&mut t.is_new),","counters":[{"col_start":21,"col_end":47,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<AccountPreconditions> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut AccountPreconditions, account: &Account) {","counters":[{"col_start":4,"col_end":88,"count":0}]},{"line":"        match t {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            AccountPreconditions::Accept => {","counters":[]},{"line":"                *t = if self.rng.gen_bool(0.5) {","counters":[{"col_start":16,"col_end":18,"count":0},{"col_start":24,"col_end":46,"count":0}]},{"line":"                    AccountPreconditions::Nonce(self.gen_from_account(account))","counters":[{"col_start":20,"col_end":79,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    AccountPreconditions::Full(Box::new(self.gen_from_account(account)))","counters":[{"col_start":20,"col_end":88,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            AccountPreconditions::Nonce(_nonce) => {","counters":[{"col_start":40,"col_end":46,"count":0}]},{"line":"                *t = match vec![0, 1, 2].choose(&mut self.rng).unwrap() {","counters":[{"col_start":16,"col_end":18,"count":0},{"col_start":27,"col_end":71,"count":0}]},{"line":"                    0 => AccountPreconditions::Accept,","counters":[{"col_start":25,"col_end":53,"count":0}]},{"line":"                    1 => AccountPreconditions::Nonce(self.gen_from_account(account)),","counters":[{"col_start":25,"col_end":84,"count":0}]},{"line":"                    2 => AccountPreconditions::Full(Box::new(self.gen_from_account(account))),","counters":[{"col_start":25,"col_end":93,"count":0}]},{"line":"                    _ => unimplemented!(),","counters":[{"col_start":25,"col_end":41,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            AccountPreconditions::Full(account_preconditions) => {","counters":[{"col_start":39,"col_end":66,"count":0}]},{"line":"                match vec![0, 1, 2].choose(&mut self.rng).unwrap() {","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                    0 => *t = AccountPreconditions::Accept,","counters":[{"col_start":25,"col_end":58,"count":0}]},{"line":"                    1 => *t = AccountPreconditions::Nonce(self.gen_from_account(account)),","counters":[{"col_start":25,"col_end":89,"count":0}]},{"line":"                    2 => self.mutate_from_account(account_preconditions.as_mut(), account),","counters":[{"col_start":25,"col_end":90,"count":0}]},{"line":"                    _ => unimplemented!(),","counters":[{"col_start":25,"col_end":41,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<ZkAppPreconditions> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut ZkAppPreconditions, account: &Account) {","counters":[{"col_start":4,"col_end":85,"count":0}]},{"line":"        for option in rand_elements(self, 9) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => t.snarked_ledger_hash = self.gen_wrap(|x| x.gen()),","counters":[{"col_start":21,"col_end":59,"count":0},{"col_start":63,"col_end":70,"count":0},{"col_start":70,"col_end":71,"count":0}]},{"line":"                1 => t.timestamp = self.gen_wrap(|x| x.gen_wrap(|x| x.gen())),","counters":[{"col_start":21,"col_end":49,"count":0},{"col_start":53,"col_end":64,"count":0},{"col_start":68,"col_end":75,"count":0},{"col_start":75,"col_end":76,"count":0},{"col_start":76,"col_end":77,"count":0}]},{"line":"                2 => t.blockchain_length = self.gen_wrap(|x| x.gen_wrap(|x| x.gen())),","counters":[{"col_start":21,"col_end":57,"count":0},{"col_start":61,"col_end":72,"count":0},{"col_start":76,"col_end":83,"count":0},{"col_start":83,"col_end":84,"count":0},{"col_start":84,"col_end":85,"count":0}]},{"line":"                3 => t.min_window_density = self.gen_wrap(|x| x.gen_wrap(|x| x.gen())),","counters":[{"col_start":21,"col_end":58,"count":0},{"col_start":62,"col_end":73,"count":0},{"col_start":77,"col_end":84,"count":0},{"col_start":84,"col_end":85,"count":0},{"col_start":85,"col_end":86,"count":0}]},{"line":"                4 => {","counters":[]},{"line":"                    t.total_currency =","counters":[{"col_start":20,"col_end":38,"count":0}]},{"line":"                        self.gen_wrap(|x| x.gen_wrap(|x| x.gen_from_account(account)))","counters":[{"col_start":0,"col_end":38,"count":0},{"col_start":42,"col_end":53,"count":0},{"col_start":57,"col_end":84,"count":0},{"col_start":84,"col_end":85,"count":0},{"col_start":85,"col_end":86,"count":0}]},{"line":"                }","counters":[]},{"line":"                5 => t.global_slot_since_hard_fork = self.gen_wrap(|x| x.gen_wrap(|x| x.gen())),","counters":[{"col_start":21,"col_end":67,"count":0},{"col_start":71,"col_end":82,"count":0},{"col_start":86,"col_end":93,"count":0},{"col_start":93,"col_end":94,"count":0},{"col_start":94,"col_end":95,"count":0}]},{"line":"                6 => t.global_slot_since_genesis = self.gen_wrap(|x| x.gen_wrap(|x| x.gen())),","counters":[{"col_start":21,"col_end":65,"count":0},{"col_start":69,"col_end":80,"count":0},{"col_start":84,"col_end":91,"count":0},{"col_start":91,"col_end":92,"count":0},{"col_start":92,"col_end":93,"count":0}]},{"line":"                7 => t.staking_epoch_data = self.gen(),","counters":[{"col_start":21,"col_end":54,"count":0}]},{"line":"                8 => t.next_epoch_data = self.gen(),","counters":[{"col_start":21,"col_end":51,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MutatorFromAccount<Preconditions> for FuzzerCtx {","counters":[]},{"line":"    fn mutate_from_account(&mut self, t: &mut Preconditions, account: &Account) {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        for option in rand_elements(self, 2) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate_from_account(&mut t.network, account),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"                1 => self.mutate_from_account(&mut t.account, account),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<Body> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut Body) {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        let account = self.get_account(&t.public_key).unwrap();","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"        for option in rand_elements(self, 11) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => t.token_id = self.gen(),","counters":[{"col_start":21,"col_end":44,"count":0}]},{"line":"                1 => self.mutate_from_account(&mut t.update, &account),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"                2 => t.balance_change = self.gen_wrap(|x| x.gen_from_account(&account)),","counters":[{"col_start":21,"col_end":54,"count":0},{"col_start":58,"col_end":86,"count":0},{"col_start":86,"col_end":87,"count":0}]},{"line":"                3 => self.mutate(&mut t.increment_nonce),","counters":[{"col_start":21,"col_end":56,"count":0}]},{"line":"                4 => t.events = self.gen(),","counters":[{"col_start":21,"col_end":42,"count":0}]},{"line":"                5 => t.sequence_events = self.gen(),","counters":[{"col_start":21,"col_end":51,"count":0}]},{"line":"                6 => t.call_data = self.gen(),","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"                7 => self.mutate_from_account(&mut t.preconditions, &account),","counters":[{"col_start":21,"col_end":77,"count":0}]},{"line":"                8 => self.mutate(&mut t.use_full_commitment),","counters":[{"col_start":21,"col_end":60,"count":0}]},{"line":"                9 => t.caller = self.gen(),","counters":[{"col_start":21,"col_end":42,"count":0}]},{"line":"                10 => t.authorization_kind = self.gen(),","counters":[{"col_start":22,"col_end":55,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<AccountUpdate> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut AccountUpdate) {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        for option in rand_elements(self, 2) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate(&mut t.body),","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"                1 => t.authorization = self.gen(),","counters":[{"col_start":21,"col_end":49,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<zkapp_command::CallForest<AccountUpdate>> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut zkapp_command::CallForest<AccountUpdate>) {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        for i in rand_elements(self, t.0.len()) {","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":31,"col_end":46,"count":0}]},{"line":"            let tree_digest = {","counters":[{"col_start":16,"col_end":27,"count":0}]},{"line":"                let tree = &mut t.0[i].elt;","counters":[{"col_start":20,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"                for option in rand_elements(self, 2) {","counters":[{"col_start":20,"col_end":26,"count":0},{"col_start":44,"col_end":48,"count":0}]},{"line":"                    match option {","counters":[{"col_start":26,"col_end":32,"count":0}]},{"line":"                        0 => {","counters":[{"col_start":29,"col_end":30,"count":0}]},{"line":"                            self.mutate(&mut tree.account_update);","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                            tree.account_update_digest = tree.account_update.digest();","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                        }","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        1 => self.mutate(&mut tree.calls),","counters":[{"col_start":29,"col_end":57,"count":0}]},{"line":"                        _ => unimplemented!(),","counters":[{"col_start":29,"col_end":45,"count":0}]},{"line":"                    }","counters":[]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"                tree.digest()","counters":[{"col_start":16,"col_end":29,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            let h_tl = if let Some(x) = t.0.get(i + 1) {","counters":[{"col_start":16,"col_end":20,"count":0},{"col_start":35,"col_end":36,"count":0},{"col_start":40,"col_end":54,"count":0}]},{"line":"                x.stack_hash","counters":[{"col_start":16,"col_end":28,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                Fp::zero()","counters":[{"col_start":16,"col_end":26,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            t.0[i].stack_hash = hash_with_kimchi(\"MinaAcctUpdateCons\", &[tree_digest, h_tl]);","counters":[{"col_start":12,"col_end":92,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<ZkAppCommand> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut ZkAppCommand) {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        for option in rand_elements(self, 3) {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":36,"col_end":40,"count":0}]},{"line":"            match option {","counters":[{"col_start":18,"col_end":24,"count":0}]},{"line":"                0 => self.mutate(&mut t.fee_payer),","counters":[{"col_start":21,"col_end":50,"count":0}]},{"line":"                1 => self.mutate(&mut t.account_updates),","counters":[{"col_start":21,"col_end":56,"count":0}]},{"line":"                2 => t.memo = self.gen(),","counters":[{"col_start":21,"col_end":40,"count":0}]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Mutator<Transaction> for FuzzerCtx {","counters":[]},{"line":"    fn mutate(&mut self, t: &mut Transaction) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        match t {","counters":[{"col_start":14,"col_end":15,"count":0}]},{"line":"            Transaction::Command(UserCommand::ZkAppCommand(zkapp_command)) => {","counters":[{"col_start":59,"col_end":79,"count":0}]},{"line":"                self.mutate(zkapp_command.as_mut())","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            }","counters":[]},{"line":"            _ => unimplemented!(),","counters":[{"col_start":17,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}