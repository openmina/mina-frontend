{"filename":"src/lib/cli_lib/background_daemon.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"type state = Start | Run_client | Abort | No_daemon","counters":[]},{"line":"","counters":[]},{"line":"let does_daemon_exist host_and_port =","counters":[]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map result =","counters":[]},{"line":"    Rpc.Connection.client (Tcp.Where_to_connect.of_host_and_port host_and_port)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"  in","counters":[]},{"line":"  Result.is_ok result","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let run ~f (t : Host_and_port.t Flag.Types.with_name) arg =","counters":[]},{"line":"  let rec go = function","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Start ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind has_daemon = does_daemon_exist t.value in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"        if has_daemon then go Run_client else go No_daemon","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    | No_daemon ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Print.printf","counters":[]},{"line":"          !\"Error: Unable to connect to Mina daemon.\\n\\","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"            - The daemon might not be running. See logs (in \\","counters":[]},{"line":"            `~/.mina-config/mina.log`) for details under the host:%s.\\n\\","counters":[]},{"line":"           \\  Run `mina daemon -help` to see how to start daemon.\\n\\","counters":[]},{"line":"            - If you just started the daemon, wait a minute for the RPC server \\","counters":[]},{"line":"            to start.\\n\\","counters":[]},{"line":"            - Alternatively, the daemon may not be running the RPC server on \\","counters":[]},{"line":"            %{sexp:Host_and_port.t}.\\n\\","counters":[]},{"line":"           \\  If so, add flag `-%s` with correct port when running this command.\\n\"","counters":[]},{"line":"          (Host_and_port.host t.value)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          t.value t.name ;","counters":[]},{"line":"        go Abort","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Run_client ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        f t.value arg","counters":[]},{"line":"    | Abort ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        exit 15","counters":[]},{"line":"  in","counters":[]},{"line":"  go Start","counters":[]},{"line":"","counters":[]},{"line":"let rpc_init ~f arg_flag =","counters":[]},{"line":"  let open Command.Param.Applicative_infix in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Command.Param.return (fun port arg () -> run ~f port arg)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  <*> Flag.Host_and_port.Client.daemon <*> arg_flag","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"let graphql_init ~f arg_flag =","counters":[]},{"line":"  let open Command.Param.Applicative_infix in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Command.Param.return (fun rest_uri arg () -> f rest_uri arg)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"  <*> Flag.Uri.Client.rest_graphql <*> arg_flag","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":46,"col_end":46,"count":2}]}]}