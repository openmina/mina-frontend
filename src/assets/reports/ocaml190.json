{"filename":"src/lib/cli_lib/stdout_log.ml","lines":[{"line":"let setup log_json log_level =","counters":[]},{"line":"  let stdout_log_processor =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if log_json then Logger.Processor.raw ~log_level ()","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    else","counters":[]},{"line":"      Logger.Processor.pretty ~log_level","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~config:","counters":[]},{"line":"          { Interpolator_lib.Interpolator.mode = Inline","counters":[]},{"line":"          ; max_interpolation_length = 50","counters":[]},{"line":"          ; pretty_print = true","counters":[]},{"line":"          }","counters":[]},{"line":"  in","counters":[]},{"line":"  Logger.Consumer_registry.register ~id:\"default\"","counters":[]},{"line":"    ~processor:stdout_log_processor","counters":[]},{"line":"    ~transport:(Logger.Transport.stdout ())","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":2}]}]}