{"filename":"src/lib/webkit_trace_event/webkit_trace_event.ml","lines":[{"line":"(** Output a binary or Yojson-compatable representation of WebKit trace events.","counters":[]},{"line":"  Spec at","counters":[]},{"line":"  https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"type event_kind =","counters":[]},{"line":"  | New_thread","counters":[]},{"line":"  | Thread_switch","counters":[]},{"line":"  | Cycle_start","counters":[]},{"line":"  | Cycle_end","counters":[]},{"line":"  | Pid_is","counters":[]},{"line":"  | Event","counters":[]},{"line":"  | Measure_start","counters":[]},{"line":"  | Measure_end","counters":[]},{"line":"  | Trace_end","counters":[]},{"line":"","counters":[]},{"line":"type event =","counters":[]},{"line":"  { name : string","counters":[]},{"line":"  ; categories : string list","counters":[]},{"line":"  ; phase : event_kind","counters":[]},{"line":"  ; timestamp : int","counters":[]},{"line":"  ; pid : int","counters":[]},{"line":"  ; tid : int","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"type events = event list","counters":[]},{"line":"","counters":[]},{"line":"let create_event ?(categories = []) ?(pid = 0) ?(tid = 0) ~phase ~timestamp name","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    =","counters":[]},{"line":"  { name; categories; phase; timestamp; pid; tid }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Output = struct","counters":[]},{"line":"  module JSON = struct","counters":[]},{"line":"    (** This output is designed to mirror Yojson's JSON format, and can be","counters":[]},{"line":"        passed directly to [Yojson.to_channel], etc. to output it to file.","counters":[]},{"line":"","counters":[]},{"line":"        This library deliberately avoid including Yojson here to avoid bloating","counters":[]},{"line":"        the dependency tree of its downstream users.*)","counters":[]},{"line":"    let phase_of_kind = function","counters":[]},{"line":"      | New_thread | Pid_is ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          `String \"M\" (* Meta-events *)","counters":[]},{"line":"      | Cycle_start ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"b\" (* Async event start *)","counters":[]},{"line":"      | Cycle_end ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"e\" (* Async event end *)","counters":[]},{"line":"      | Thread_switch ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"X\"","counters":[]},{"line":"      | Event ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"i\"","counters":[]},{"line":"      | Measure_start ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"B\"","counters":[]},{"line":"      | Measure_end ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"E\"","counters":[]},{"line":"      | Trace_end ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String \"e\"","counters":[]},{"line":"","counters":[]},{"line":"    let json_of_event { name; categories; phase; timestamp; pid; tid } =","counters":[]},{"line":"      let categories = String.concat ~sep:\",\" categories in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      match phase with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | New_thread | Pid_is ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"name\", `String \"thread_name\")","counters":[]},{"line":"            ; (\"cat\", `String categories)","counters":[]},{"line":"            ; (\"ph\", phase_of_kind phase)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; (\"pid\", `Int pid)","counters":[]},{"line":"            ; (\"tid\", `Int tid)","counters":[]},{"line":"            ; (\"args\", `Assoc [ (\"name\", `String name) ])","counters":[]},{"line":"            ]","counters":[]},{"line":"      | Thread_switch ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"name\", `String name)","counters":[]},{"line":"            ; (\"cat\", `String categories)","counters":[]},{"line":"            ; (\"ph\", phase_of_kind phase)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; (\"dur\", `Int 0) (* Placeholder value *)","counters":[]},{"line":"            ; (\"ts\", `Int timestamp)","counters":[]},{"line":"            ; (\"pid\", `Int pid)","counters":[]},{"line":"            ; (\"tid\", `Int tid)","counters":[]},{"line":"            ]","counters":[]},{"line":"      | Cycle_start | Cycle_end | Trace_end ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"name\", `String name)","counters":[]},{"line":"            ; (\"cat\", `String categories)","counters":[]},{"line":"            ; (\"ph\", phase_of_kind phase)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; (\"id\", `Int 0) (* Placeholder value *)","counters":[]},{"line":"            ; (\"ts\", `Int timestamp)","counters":[]},{"line":"            ; (\"pid\", `Int pid)","counters":[]},{"line":"            ; (\"tid\", `Int tid)","counters":[]},{"line":"            ]","counters":[]},{"line":"      | Event | Measure_start | Measure_end ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"name\", `String name)","counters":[]},{"line":"            ; (\"cat\", `String categories)","counters":[]},{"line":"            ; (\"ph\", phase_of_kind phase)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; (\"ts\", `Int timestamp)","counters":[]},{"line":"            ; (\"pid\", `Int pid)","counters":[]},{"line":"            ; (\"tid\", `Int tid)","counters":[]},{"line":"            ]","counters":[]},{"line":"","counters":[]},{"line":"    let json_of_events (events : events) =","counters":[]},{"line":"      `List (List.map ~f:json_of_event events)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]}]}