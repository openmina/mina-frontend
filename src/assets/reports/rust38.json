{"filename":"src/coverage/util.rs","lines":[{"line":"use core::slice;","counters":[]},{"line":"use std::{array, collections::HashMap, io::{Cursor, SeekFrom, Seek}, io::Read, path::Path};","counters":[]},{"line":"","counters":[]},{"line":"use bitvec::macros::internal::funty;","counters":[]},{"line":"use object::{Object, ObjectSection};","counters":[]},{"line":"","counters":[]},{"line":"extern \"C\" {","counters":[]},{"line":"    fn __llvm_profile_begin_counters() -> *mut i64;","counters":[]},{"line":"    fn __llvm_profile_end_counters() -> *mut i64;","counters":[]},{"line":"    fn __llvm_profile_get_num_counters(begin: *mut i64, end: *mut i64) -> i64;","counters":[]},{"line":"    fn __llvm_profile_begin_data() -> *const u8;","counters":[]},{"line":"    fn __llvm_profile_end_data() -> *const u8;","counters":[]},{"line":"    fn __llvm_profile_begin_names() -> *const u8;","counters":[]},{"line":"    fn __llvm_profile_end_names() -> *const u8;","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub unsafe fn get_counters() -> &'static mut [i64] {","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    let begin = __llvm_profile_begin_counters();","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    let end = __llvm_profile_end_counters();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    let num_counters = __llvm_profile_get_num_counters(begin, end);","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"    slice::from_raw_parts_mut(begin, num_counters as usize)","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub unsafe fn get_data() -> &'static [u8] {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    let begin = __llvm_profile_begin_data();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    let end = __llvm_profile_end_data();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"    slice::from_raw_parts(begin, end.offset_from(begin) as usize)","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub unsafe fn get_names() -> &'static [u8] {","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    let begin = __llvm_profile_begin_names();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    let end = __llvm_profile_end_names();","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"    slice::from_raw_parts(begin, end.offset_from(begin) as usize)","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn get_module_path() -> String {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    let maps = rsprocmaps::from_path(\"/proc/self/maps\").unwrap();","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"    for map in maps {","counters":[{"col_start":8,"col_end":11,"count":0},{"col_start":15,"col_end":19,"count":0}]},{"line":"        let map = map.unwrap();","counters":[{"col_start":12,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"        let rsprocmaps::AddressRange { begin, end } = map.address_range;","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"        if (begin..end).contains(&(get_module_path as u64)) {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            if let rsprocmaps::Pathname::Path(path) = map.pathname {","counters":[{"col_start":46,"col_end":50,"count":0},{"col_start":54,"col_end":66,"count":0}]},{"line":"                return path;","counters":[{"col_start":23,"col_end":27,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                panic!()","counters":[{"col_start":16,"col_end":24,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    panic!()","counters":[{"col_start":4,"col_end":12,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn get_elf_sections(module: String, section_names: &Vec<&str>) -> HashMap<String, Vec<u8>> {","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"    let mut result = HashMap::new();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    let path = Path::new(&module);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"    let bin_data = std::fs::read(path).unwrap();","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    let obj_file = object::File::parse(&*bin_data).unwrap();","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"    for section_name in section_names.iter() {","counters":[{"col_start":8,"col_end":20,"count":2},{"col_start":38,"col_end":44,"count":0},{"col_start":45,"col_end":46,"count":2}]},{"line":"        let section = obj_file.section_by_name(section_name).unwrap();","counters":[{"col_start":0,"col_end":70,"count":2}]},{"line":"        result.insert(section_name.to_string(), section.data().unwrap().to_vec());","counters":[{"col_start":0,"col_end":82,"count":2}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2}]},{"line":"","counters":[]},{"line":"    result","counters":[{"col_start":4,"col_end":10,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn read_int<const N: usize, T, A>(cursor: &mut Cursor<A>) -> T","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"where","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    T: funty::Numeric<Bytes = [u8; N]>,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    A: AsRef<[u8]>,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"{","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"    let mut buf = array::from_fn(|_| 0);","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":37,"col_end":38,"count":0},{"col_start":38,"col_end":40,"count":0}]},{"line":"    cursor.read_exact(buf.as_mut_slice()).unwrap();","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"    T::from_le_bytes(buf)","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub trait Leb128 {","counters":[]},{"line":"    type T;","counters":[]},{"line":"","counters":[]},{"line":"    fn read_leb128(cursor: &mut Cursor<&Vec<u8>>) -> Self::T;","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Leb128 for i64 {","counters":[]},{"line":"    type T = i64;","counters":[]},{"line":"","counters":[]},{"line":"    fn read_leb128(cursor: &mut Cursor<&Vec<u8>>) -> Self::T {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        leb128::read::signed(cursor).unwrap()","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Leb128 for u64 {","counters":[]},{"line":"    type T = u64;","counters":[]},{"line":"","counters":[]},{"line":"    fn read_leb128(cursor: &mut Cursor<&Vec<u8>>) -> Self::T {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        leb128::read::unsigned(cursor).unwrap()","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Leb128 for usize {","counters":[]},{"line":"    type T = usize;","counters":[]},{"line":"","counters":[]},{"line":"    fn read_leb128(cursor: &mut Cursor<&Vec<u8>>) -> Self::T {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        leb128::read::unsigned(cursor).unwrap() as usize","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"fn align<T>(pos: u64) -> u64 {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    let alignment = std::mem::size_of::<T>() as u64;","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    (pos + (alignment - 1)) & !(alignment - 1)","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn cursor_align<T>(cursor: &mut Cursor<&Vec<u8>>) {","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"    cursor","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    .seek(SeekFrom::Start(align::<T>(cursor.position())))","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"    .unwrap();","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]}]}