{"filename":"src/lib/transition_handler/processor.ml","lines":[{"line":"(** This module contains the transition processor. The transition processor is","counters":[]},{"line":" *  the thread in which transitions are attached the to the transition frontier.","counters":[]},{"line":" *","counters":[]},{"line":" *  Two types of data are handled by the transition processor: validated external transitions","counters":[]},{"line":" *  with precomputed state hashes (via the block producer and validator pipes)","counters":[]},{"line":" *  and breadcrumb rose trees (via the catchup pipe).","counters":[]},{"line":" *)","counters":[]},{"line":"","counters":[]},{"line":"(* Only show stdout for failed inline tests. *)","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"open Inline_test_quiet_logs","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"open Cache_lib","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: calculate a sensible value from postake consensus arguments *)","counters":[]},{"line":"let catchup_timeout_duration (precomputed_values : Precomputed_values.t) =","counters":[]},{"line":"  Block_time.Span.of_ms","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ( (precomputed_values.genesis_constants.protocol.delta + 1)","counters":[]},{"line":"      * precomputed_values.constraint_constants.block_window_duration_ms","counters":[]},{"line":"    |> Int64.of_int )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  |> Block_time.Span.min (Block_time.Span.of_ms (Int64.of_int 5000))","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"let cached_transform_deferred_result ~transform_cached ~transform_result cached","counters":[]},{"line":"    =","counters":[]},{"line":"  Cached.transform cached ~f:transform_cached","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  |> Cached.sequence_deferred","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  >>= Fn.compose transform_result Cached.sequence_result","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"(* add a breadcrumb and perform post processing *)","counters":[]},{"line":"let add_and_finalize ~logger ~frontier ~catchup_scheduler","counters":[]},{"line":"    ~processed_transition_writer ~only_if_present ~time_controller ~source","counters":[]},{"line":"    ~valid_cb cached_breadcrumb ~(precomputed_values : Precomputed_values.t) =","counters":[]},{"line":"  let breadcrumb =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if Cached.is_pure cached_breadcrumb then Cached.peek cached_breadcrumb","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    else Cached.invalidate_with_success cached_breadcrumb","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  in","counters":[]},{"line":"  let consensus_constants = precomputed_values.consensus_constants in","counters":[]},{"line":"  let transition =","counters":[]},{"line":"    Transition_frontier.Breadcrumb.validated_transition breadcrumb","counters":[]},{"line":"  in","counters":[]},{"line":"  [%log debug] \"add_and_finalize $state_hash %s callback\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ ( \"state_hash\"","counters":[]},{"line":"        , Transition_frontier.Breadcrumb.state_hash breadcrumb","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"          |> State_hash.to_yojson )","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      ]","counters":[]},{"line":"    (Option.value_map valid_cb ~default:\"without\" ~f:(const \"with\")) ;","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"  let%map () =","counters":[]},{"line":"    if only_if_present then (","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      let parent_hash = Transition_frontier.Breadcrumb.parent_hash breadcrumb in","counters":[]},{"line":"      match Transition_frontier.find frontier parent_hash with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Transition_frontier.add_breadcrumb_exn frontier breadcrumb","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log warn]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            !\"When trying to add breadcrumb, its parent had been removed from \\","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"              transition frontier: %{sexp: State_hash.t}\"","counters":[]},{"line":"            parent_hash ;","counters":[]},{"line":"          Deferred.unit )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    else Transition_frontier.add_breadcrumb_exn frontier breadcrumb","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  in","counters":[]},{"line":"  ( match source with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Internal ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ()","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let transition_time =","counters":[]},{"line":"        transition |> Mina_block.Validated.header","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"        |> Mina_block.Header.protocol_state |> Protocol_state.consensus_state","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"        |> Consensus.Data.Consensus_state.consensus_time","counters":[]},{"line":"      in","counters":[]},{"line":"      let time_elapsed =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Block_time.diff","counters":[]},{"line":"          (Block_time.now time_controller)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          (Consensus.Data.Consensus_time.to_time ~constants:consensus_constants","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"             transition_time )","counters":[]},{"line":"      in","counters":[]},{"line":"      Mina_metrics.Block_latency.Inclusion_time.update","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"        (Block_time.Span.to_time_span time_elapsed) ) ;","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"  Writer.write processed_transition_writer","counters":[]},{"line":"    (`Transition transition, `Source source, `Valid_cb valid_cb) ;","counters":[]},{"line":"  Catchup_scheduler.notify catchup_scheduler","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~hash:(Mina_block.Validated.state_hash transition)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"let process_transition ~context:(module Context : CONTEXT) ~trust_system","counters":[]},{"line":"    ~verifier ~frontier ~catchup_scheduler ~processed_transition_writer","counters":[]},{"line":"    ~time_controller ~transition:cached_initially_validated_transition ~valid_cb","counters":[]},{"line":"    =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let enveloped_initially_validated_transition =","counters":[]},{"line":"    Cached.peek cached_initially_validated_transition","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition_receipt_time =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Some","counters":[]},{"line":"      (Envelope.Incoming.received_at enveloped_initially_validated_transition)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  in","counters":[]},{"line":"  let sender =","counters":[]},{"line":"    Envelope.Incoming.sender enveloped_initially_validated_transition","counters":[]},{"line":"  in","counters":[]},{"line":"  let initially_validated_transition =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Envelope.Incoming.data enveloped_initially_validated_transition","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition_hash, transition =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let t, _ = initially_validated_transition in","counters":[]},{"line":"    (State_hash.With_state_hashes.state_hash t, With_hash.data t)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  in","counters":[]},{"line":"  let metadata = [ (\"state_hash\", State_hash.to_yojson transition_hash) ] in","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"  Deferred.map ~f:(Fn.const ())","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    (let open Deferred.Result.Let_syntax in","counters":[]},{"line":"    let%bind mostly_validated_transition =","counters":[]},{"line":"      let open Deferred.Let_syntax in","counters":[]},{"line":"      match","counters":[]},{"line":"        Mina_block.Validation.validate_frontier_dependencies","counters":[]},{"line":"          ~context:(module Context)","counters":[]},{"line":"          ~root_block:","counters":[]},{"line":"            Transition_frontier.(Breadcrumb.block_with_hash @@ root frontier)","counters":[{"col_start":58,"col_end":58,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"          ~get_block_by_hash:","counters":[]},{"line":"            Transition_frontier.(","counters":[]},{"line":"              Fn.compose (Option.map ~f:Breadcrumb.block_with_hash)","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"              @@ find frontier)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          initially_validated_transition","counters":[]},{"line":"      with","counters":[]},{"line":"      | Ok t ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return (Ok t)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Error `Not_selected_over_frontier_root ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%map () =","counters":[]},{"line":"            Trust_system.record_envelope_sender trust_system logger sender","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"              ( Trust_system.Actions.Gossiped_invalid_transition","counters":[]},{"line":"              , Some","counters":[]},{"line":"                  ( \"The transition with hash $state_hash was not selected \\","counters":[]},{"line":"                     over the transition frontier root\"","counters":[]},{"line":"                  , metadata ) )","counters":[]},{"line":"          in","counters":[]},{"line":"          let (_ : Mina_block.initial_valid_block Envelope.Incoming.t) =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Cached.invalidate_with_failure cached_initially_validated_transition","counters":[]},{"line":"          in","counters":[]},{"line":"          Error ()","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Error `Already_in_frontier ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log warn] ~metadata","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            \"Refusing to process the transition with hash $state_hash because \\","counters":[]},{"line":"             is is already in the transition frontier\" ;","counters":[]},{"line":"          let (_ : Mina_block.initial_valid_block Envelope.Incoming.t) =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Cached.invalidate_with_failure cached_initially_validated_transition","counters":[]},{"line":"          in","counters":[]},{"line":"          return (Error ())","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Error `Parent_missing_from_frontier -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let _, validation =","counters":[]},{"line":"            Cached.peek cached_initially_validated_transition","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"            |> Envelope.Incoming.data","counters":[]},{"line":"          in","counters":[]},{"line":"          match validation with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | ( _","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            , _","counters":[]},{"line":"            , _","counters":[]},{"line":"            , (`Delta_block_chain, Truth.True delta_state_hashes)","counters":[]},{"line":"            , _","counters":[]},{"line":"            , _","counters":[]},{"line":"            , _ ) ->","counters":[]},{"line":"              let timeout_duration =","counters":[]},{"line":"                Option.fold","counters":[]},{"line":"                  (Transition_frontier.find frontier","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                     (Non_empty_list.head delta_state_hashes) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                  ~init:(Block_time.Span.of_ms 0L)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                  ~f:(fun _ _ -> catchup_timeout_duration precomputed_values)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              in","counters":[]},{"line":"              Catchup_scheduler.watch catchup_scheduler ~timeout_duration","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~cached_transition:cached_initially_validated_transition","counters":[]},{"line":"                ~valid_cb ;","counters":[]},{"line":"              return (Error ()) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"    in","counters":[]},{"line":"    (* TODO: only access parent in transition frontier once (already done in call to validate dependencies) #2485 *)","counters":[]},{"line":"    let parent_hash =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Protocol_state.previous_state_hash","counters":[]},{"line":"        (Header.protocol_state @@ Mina_block.header transition)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    in","counters":[]},{"line":"    let parent_breadcrumb = Transition_frontier.find_exn frontier parent_hash in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind breadcrumb =","counters":[]},{"line":"      cached_transform_deferred_result cached_initially_validated_transition","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ~transform_cached:(fun _ ->","counters":[]},{"line":"          Transition_frontier.Breadcrumb.build ~logger ~precomputed_values","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~verifier ~trust_system ~transition_receipt_time","counters":[]},{"line":"            ~sender:(Some sender) ~parent:parent_breadcrumb","counters":[]},{"line":"            ~transition:mostly_validated_transition","counters":[]},{"line":"            (* TODO: Can we skip here? *) () )","counters":[]},{"line":"        ~transform_result:(function","counters":[]},{"line":"          | Error (`Invalid_staged_ledger_hash error)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          | Error (`Invalid_staged_ledger_diff error) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [%log error]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ~metadata:","counters":[]},{"line":"                  (metadata @ [ (\"error\", Error_json.error_to_yojson error) ])","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                \"Error while building breadcrumb in the transition handler \\","counters":[]},{"line":"                 processor: $error\" ;","counters":[]},{"line":"              Deferred.return (Error ())","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          | Error (`Fatal_error exn) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              raise exn","counters":[]},{"line":"          | Ok breadcrumb ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.return (Ok breadcrumb) )","counters":[]},{"line":"    in","counters":[]},{"line":"    Mina_metrics.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Counter.inc_one","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        Transition_frontier_controller.breadcrumbs_built_by_processor) ;","counters":[]},{"line":"    Deferred.map ~f:Result.return","counters":[]},{"line":"      (add_and_finalize ~logger ~frontier ~catchup_scheduler","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"         ~processed_transition_writer ~only_if_present:false ~time_controller","counters":[]},{"line":"         ~source:`Gossip breadcrumb ~precomputed_values ~valid_cb ))","counters":[]},{"line":"","counters":[]},{"line":"let run ~context:(module Context : CONTEXT) ~verifier ~trust_system","counters":[]},{"line":"    ~time_controller ~frontier","counters":[]},{"line":"    ~(primary_transition_reader :","counters":[]},{"line":"       ( [ `Block of","counters":[]},{"line":"           ( Mina_block.initial_valid_block Envelope.Incoming.t","counters":[]},{"line":"           , State_hash.t )","counters":[]},{"line":"           Cached.t ]","counters":[]},{"line":"       * [ `Valid_cb of Mina_net2.Validation_callback.t option ] )","counters":[]},{"line":"       Reader.t )","counters":[]},{"line":"    ~(producer_transition_reader : Transition_frontier.Breadcrumb.t Reader.t)","counters":[]},{"line":"    ~(clean_up_catchup_scheduler : unit Ivar.t) ~catchup_job_writer","counters":[]},{"line":"    ~(catchup_breadcrumbs_reader :","counters":[]},{"line":"       ( ( (Transition_frontier.Breadcrumb.t, State_hash.t) Cached.t","counters":[]},{"line":"         * Mina_net2.Validation_callback.t option )","counters":[]},{"line":"         Rose_tree.t","counters":[]},{"line":"         list","counters":[]},{"line":"       * [ `Ledger_catchup of unit Ivar.t | `Catchup_scheduler ] )","counters":[]},{"line":"       Reader.t )","counters":[]},{"line":"    ~(catchup_breadcrumbs_writer :","counters":[]},{"line":"       ( ( (Transition_frontier.Breadcrumb.t, State_hash.t) Cached.t","counters":[]},{"line":"         * Mina_net2.Validation_callback.t option )","counters":[]},{"line":"         Rose_tree.t","counters":[]},{"line":"         list","counters":[]},{"line":"         * [ `Ledger_catchup of unit Ivar.t | `Catchup_scheduler ]","counters":[]},{"line":"       , crash buffered","counters":[]},{"line":"       , unit )","counters":[]},{"line":"       Writer.t ) ~processed_transition_writer =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let catchup_scheduler =","counters":[]},{"line":"    Catchup_scheduler.create ~logger ~precomputed_values ~verifier ~trust_system","counters":[]},{"line":"      ~frontier ~time_controller ~catchup_job_writer ~catchup_breadcrumbs_writer","counters":[]},{"line":"      ~clean_up_signal:clean_up_catchup_scheduler","counters":[]},{"line":"  in","counters":[]},{"line":"  let add_and_finalize =","counters":[]},{"line":"    add_and_finalize ~frontier ~catchup_scheduler ~processed_transition_writer","counters":[]},{"line":"      ~time_controller ~precomputed_values","counters":[]},{"line":"  in","counters":[]},{"line":"  let process_transition =","counters":[]},{"line":"    process_transition","counters":[]},{"line":"      ~context:(module Context)","counters":[]},{"line":"      ~trust_system ~verifier ~frontier ~catchup_scheduler","counters":[]},{"line":"      ~processed_transition_writer ~time_controller","counters":[]},{"line":"  in","counters":[]},{"line":"  O1trace.background_thread \"process_blocks\" (fun () ->","counters":[]},{"line":"      Reader.Merge.iter","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* It is fine to skip the cache layer on blocks produced by this node","counters":[]},{"line":"           * because it is extraordinarily unlikely we would write an internal bug","counters":[]},{"line":"           * triggering this case, and the external case (where we received an","counters":[]},{"line":"           * identical external transition from the network) can happen iff there","counters":[]},{"line":"           * is another node with the exact same private key and view of the","counters":[]},{"line":"           * transaction pool. *)","counters":[]},{"line":"        [ Reader.map producer_transition_reader ~f:(fun breadcrumb ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"              Mina_metrics.(","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Gauge.inc_one","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                  Transition_frontier_controller.transitions_being_processed) ;","counters":[]},{"line":"              `Local_breadcrumb (Cached.pure breadcrumb) )","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; Reader.map catchup_breadcrumbs_reader","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            ~f:(fun (cb, catchup_breadcrumbs_callback) ->","counters":[]},{"line":"              `Catchup_breadcrumbs (cb, catchup_breadcrumbs_callback) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        ; Reader.map primary_transition_reader ~f:(fun vt ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"              `Partially_valid_transition vt )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        ]","counters":[]},{"line":"        ~f:(fun msg ->","counters":[]},{"line":"          let open Deferred.Let_syntax in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          O1trace.thread \"transition_handler_processor\" (fun () ->","counters":[]},{"line":"              match msg with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | `Catchup_breadcrumbs","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (breadcrumb_subtrees, subsequent_callback_action) -> (","counters":[]},{"line":"                  ( match%map","counters":[]},{"line":"                      Deferred.Or_error.List.iter breadcrumb_subtrees","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                        ~f:(fun subtree ->","counters":[]},{"line":"                          Rose_tree.Deferred.Or_error.iter","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            subtree","counters":[]},{"line":"                            (* It could be the case that by the time we try and","counters":[]},{"line":"                               * add the breadcrumb, it's no longer relevant when","counters":[]},{"line":"                               * we're catching up *) ~f:(fun (b, valid_cb) ->","counters":[]},{"line":"                              add_and_finalize ~logger ~only_if_present:true","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                                ~source:`Catchup ~valid_cb b ) )","counters":[]},{"line":"                    with","counters":[]},{"line":"                  | Ok () ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ()","counters":[]},{"line":"                  | Error err ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      List.iter breadcrumb_subtrees ~f:(fun tree ->","counters":[]},{"line":"                          Rose_tree.iter tree","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            ~f:(fun (cached_breadcrumb, _vc) ->","counters":[]},{"line":"                              let (_ : Transition_frontier.Breadcrumb.t) =","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                                Cached.invalidate_with_failure cached_breadcrumb","counters":[]},{"line":"                              in","counters":[]},{"line":"                              () ) ) ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                      [%log error]","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                        \"Error, failed to attach all catchup breadcrumbs to \\","counters":[]},{"line":"                         transition frontier: $error\"","counters":[]},{"line":"                        ~metadata:[ (\"error\", Error_json.error_to_yojson err) ]","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"                  )","counters":[]},{"line":"                  >>| fun () ->","counters":[]},{"line":"                  match subsequent_callback_action with","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  | `Ledger_catchup decrement_signal ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      if Ivar.is_full decrement_signal then","counters":[]},{"line":"                        [%log error] \"Ivar.fill bug is here 444!\" ;","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"                      Ivar.fill decrement_signal ()","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                  | `Catchup_scheduler ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      () )","counters":[]},{"line":"              | `Local_breadcrumb breadcrumb ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  let transition_time =","counters":[]},{"line":"                    Transition_frontier.Breadcrumb.validated_transition","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"                      (Cached.peek breadcrumb)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                    |> Mina_block.Validated.header","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                    |> Mina_block.Header.protocol_state","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                    |> Protocol_state.blockchain_state","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                    |> Blockchain_state.timestamp |> Block_time.to_time_exn","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  Perf_histograms.add_span","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    ~name:\"accepted_transition_local_latency\"","counters":[]},{"line":"                    (Core_kernel.Time.diff","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                       Block_time.(now time_controller |> to_time_exn)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"                       transition_time ) ;","counters":[]},{"line":"                  let%map () =","counters":[]},{"line":"                    match%map","counters":[]},{"line":"                      add_and_finalize ~logger ~only_if_present:false","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                        ~source:`Internal breadcrumb ~valid_cb:None","counters":[]},{"line":"                    with","counters":[]},{"line":"                    | Ok () ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        ()","counters":[]},{"line":"                    | Error err ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        [%log error]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                          ~metadata:","counters":[]},{"line":"                            [ (\"error\", Error_json.error_to_yojson err) ]","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                          \"Error, failed to attach produced breadcrumb to \\","counters":[]},{"line":"                           transition frontier: $error\" ;","counters":[]},{"line":"                        let (_ : Transition_frontier.Breadcrumb.t) =","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          Cached.invalidate_with_failure breadcrumb","counters":[]},{"line":"                        in","counters":[]},{"line":"                        ()","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  Mina_metrics.(","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Gauge.dec_one","counters":[]},{"line":"                      Transition_frontier_controller.transitions_being_processed)","counters":[]},{"line":"              | `Partially_valid_transition","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (`Block transition, `Valid_cb valid_cb) ->","counters":[]},{"line":"                  process_transition ~transition ~valid_cb ) ) )","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Transition_handler.Processor tests\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    open Async","counters":[]},{"line":"    open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"    let () =","counters":[]},{"line":"      Backtrace.elide := false ;","counters":[]},{"line":"      Printexc.record_backtrace true ;","counters":[]},{"line":"      Async.Scheduler.set_record_backtraces true","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let logger = Logger.create ()","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let precomputed_values = Lazy.force Precomputed_values.for_unit_tests","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let proof_level = precomputed_values.proof_level","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    let time_controller = Block_time.Controller.basic ~logger","counters":[]},{"line":"","counters":[]},{"line":"    let trust_system = Trust_system.null ()","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let verifier =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          Verifier.create ~logger ~proof_level ~constraint_constants","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~conf_dir:None","counters":[]},{"line":"            ~pids:(Child_processes.Termination.create_pid_table ()) )","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"    module Context = struct","counters":[]},{"line":"      let logger = logger","counters":[]},{"line":"","counters":[]},{"line":"      let precomputed_values = precomputed_values","counters":[]},{"line":"","counters":[]},{"line":"      let constraint_constants = constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"      let consensus_constants = precomputed_values.consensus_constants","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let downcast_breadcrumb breadcrumb =","counters":[]},{"line":"      let transition =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transition_frontier.Breadcrumb.validated_transition breadcrumb","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"        |> Mina_block.Validated.remember","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        |> Mina_block.Validation.reset_frontier_dependencies_validation","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"        |> Mina_block.Validation.reset_staged_ledger_diff_validation","counters":[]},{"line":"      in","counters":[]},{"line":"      Envelope.Incoming.wrap ~data:transition ~sender:Envelope.Sender.Local","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"adding transitions whose parents are in the frontier\" =","counters":[]},{"line":"      let frontier_size = 1 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let branch_size = 10 in","counters":[]},{"line":"      let max_length = frontier_size + branch_size in","counters":[]},{"line":"      Quickcheck.test ~trials:4","counters":[]},{"line":"        (Transition_frontier.For_tests.gen_with_branch ~precomputed_values","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"           ~verifier ~max_length ~frontier_size ~branch_size () )","counters":[]},{"line":"        ~f:(fun (frontier, branch) ->","counters":[]},{"line":"          assert (","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"            Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                let valid_transition_reader, valid_transition_writer =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Strict_pipe.create","counters":[]},{"line":"                    (Buffered","counters":[]},{"line":"                       (`Capacity branch_size, `Overflow (Drop_head ignore)) )","counters":[]},{"line":"                in","counters":[]},{"line":"                let producer_transition_reader, _ =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Strict_pipe.create","counters":[]},{"line":"                    (Buffered","counters":[]},{"line":"                       (`Capacity branch_size, `Overflow (Drop_head ignore)) )","counters":[]},{"line":"                in","counters":[]},{"line":"                let _, catchup_job_writer =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Strict_pipe.create (Buffered (`Capacity 1, `Overflow Crash))","counters":[]},{"line":"                in","counters":[]},{"line":"                let catchup_breadcrumbs_reader, catchup_breadcrumbs_writer =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Strict_pipe.create (Buffered (`Capacity 1, `Overflow Crash))","counters":[]},{"line":"                in","counters":[]},{"line":"                let processed_transition_reader, processed_transition_writer =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Strict_pipe.create","counters":[]},{"line":"                    (Buffered","counters":[]},{"line":"                       (`Capacity branch_size, `Overflow (Drop_head ignore)) )","counters":[]},{"line":"                in","counters":[]},{"line":"                let clean_up_catchup_scheduler = Ivar.create () in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let cache = Unprocessed_transition_cache.create ~logger in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                run","counters":[]},{"line":"                  ~context:(module Context)","counters":[]},{"line":"                  ~time_controller ~verifier ~trust_system","counters":[]},{"line":"                  ~clean_up_catchup_scheduler ~frontier","counters":[]},{"line":"                  ~primary_transition_reader:valid_transition_reader","counters":[]},{"line":"                  ~producer_transition_reader ~catchup_job_writer","counters":[]},{"line":"                  ~catchup_breadcrumbs_reader ~catchup_breadcrumbs_writer","counters":[]},{"line":"                  ~processed_transition_writer ;","counters":[]},{"line":"                List.iter branch ~f:(fun breadcrumb ->","counters":[]},{"line":"                    let b =","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      downcast_breadcrumb breadcrumb","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                      |> Unprocessed_transition_cache.register_exn cache","counters":[]},{"line":"                    in","counters":[]},{"line":"                    Strict_pipe.Writer.write valid_transition_writer","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      (`Block b, `Valid_cb None) ) ;","counters":[]},{"line":"                match%map","counters":[]},{"line":"                  Block_time.Timeout.await","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                    ~timeout_duration:(Block_time.Span.of_ms 30000L)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"                    time_controller","counters":[]},{"line":"                    (Strict_pipe.Reader.fold_until processed_transition_reader","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                       ~init:branch","counters":[]},{"line":"                       ~f:(fun","counters":[]},{"line":"                            remaining_breadcrumbs","counters":[]},{"line":"                            (`Transition newly_added_transition, _, _)","counters":[]},{"line":"                          ->","counters":[]},{"line":"                         Deferred.return","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           ( match remaining_breadcrumbs with","counters":[]},{"line":"                           | next_expected_breadcrumb :: tail ->","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               [%test_eq: State_hash.t]","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                                 (Transition_frontier.Breadcrumb.state_hash","counters":[{"col_start":74,"col_end":74,"count":0}]},{"line":"                                    next_expected_breadcrumb )","counters":[]},{"line":"                                 (Mina_block.Validated.state_hash","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                                    newly_added_transition ) ;","counters":[]},{"line":"                               [%log info]","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"                                 ~metadata:","counters":[]},{"line":"                                   [ ( \"height\"","counters":[]},{"line":"                                     , `Int","counters":[]},{"line":"                                         ( newly_added_transition","counters":[]},{"line":"                                         |> Mina_block.Validated.forget","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"                                         |> With_hash.data |> Mina_block.header","counters":[{"col_start":57,"col_end":57,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"                                         |> Mina_block.Header.protocol_state","counters":[{"col_start":75,"col_end":75,"count":0}]},{"line":"                                         |> Protocol_state.consensus_state","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                                         |> Consensus.Data.Consensus_state","counters":[]},{"line":"                                            .blockchain_length","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                                         |> Mina_numbers.Length.to_uint32","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"                                         |> Unsigned.UInt32.to_int ) )","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                                   ]","counters":[]},{"line":"                                 \"transition of $height passed processor\" ;","counters":[]},{"line":"                               if List.is_empty tail then `Stop true","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"                               else `Continue tail","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                           | [] ->","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               `Stop false ) ) )","counters":[]},{"line":"                with","counters":[]},{"line":"                | `Timeout ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    failwith \"test timed out\"","counters":[]},{"line":"                | `Ok (`Eof _) ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    failwith \"pipe closed unexpectedly\"","counters":[]},{"line":"                | `Ok (`Terminated x) ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    x ) ) )","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}