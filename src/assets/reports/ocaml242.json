{"filename":"src/lib/secrets/secret_box.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Sodium","counters":[]},{"line":"","counters":[]},{"line":"module BytesWr = struct","counters":[]},{"line":"  include Bytes","counters":[]},{"line":"","counters":[]},{"line":"  module Base58_check = Base58_check.Make (struct","counters":[]},{"line":"    let description = \"Secret box\"","counters":[]},{"line":"","counters":[]},{"line":"    let version_byte = Base58_check.Version_bytes.secret_box_byteswr","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson t = `String (Bytes.to_string t |> Base58_check.encode)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson = function","counters":[]},{"line":"    | `String s -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match Base58_check.decode s with","counters":[]},{"line":"        | Error e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error","counters":[]},{"line":"              (sprintf \"Bytes.of_yojson, bad Base58Check: %s\"","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                 (Error.to_string_hum e) )","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        | Ok x ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok (Bytes.of_string x) )","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error \"Bytes.of_yojson needs a string\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { box_primitive : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"    ; pw_primitive : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    ; nonce : Bytes.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"    ; pwsalt : Bytes.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    ; pwdiff : Int64.t * int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    ; ciphertext : Bytes.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Json : sig","counters":[]},{"line":"  type t [@@deriving yojson]","counters":[]},{"line":"","counters":[]},{"line":"  val of_stable : T.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_stable : t -> T.t","counters":[]},{"line":"end = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { box_primitive : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    ; pw_primitive : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; nonce : BytesWr.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; pwsalt : BytesWr.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ; pwdiff : Int64.t * int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    ; ciphertext : BytesWr.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let of_stable","counters":[]},{"line":"      { T.box_primitive; pw_primitive; nonce; pwsalt; pwdiff; ciphertext } =","counters":[]},{"line":"    { box_primitive; pw_primitive; nonce; pwsalt; pwdiff; ciphertext }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_stable","counters":[]},{"line":"      { box_primitive; pw_primitive; nonce; pwsalt; pwdiff; ciphertext } =","counters":[]},{"line":"    { T.box_primitive; pw_primitive; nonce; pwsalt; pwdiff; ciphertext }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t = T.t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { box_primitive : string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; pw_primitive : string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  ; nonce : Bytes.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"  ; pwsalt : Bytes.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"  ; pwdiff : Int64.t * int","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"  ; ciphertext : Bytes.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"let to_yojson t : Yojson.Safe.t = Json.to_yojson (Json.of_stable t)","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"let of_yojson (t : Yojson.Safe.t) =","counters":[]},{"line":"  Result.map ~f:Json.to_stable (Json.of_yojson t)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"(** warning: this will zero [password] *)","counters":[]},{"line":"let encrypt ~(password : Bytes.t) ~(plaintext : Bytes.t) =","counters":[]},{"line":"  let nonce = Secret_box.random_nonce () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let salt = Password_hash.random_salt () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ({ Password_hash.mem_limit; ops_limit } as diff) =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Password_hash.moderate","counters":[]},{"line":"  in","counters":[]},{"line":"  let pw = Password_hash.Bytes.wipe_to_password password in","counters":[]},{"line":"  let key = Secret_box.derive_key diff pw salt in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ciphertext = Secret_box.Bytes.secret_box key plaintext nonce in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { box_primitive = Secret_box.primitive","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; pw_primitive = Password_hash.primitive","counters":[]},{"line":"  ; nonce = Secret_box.Bytes.of_nonce nonce","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"  ; pwsalt = Password_hash.Bytes.of_salt salt","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  ; pwdiff = (mem_limit, ops_limit)","counters":[]},{"line":"  ; ciphertext","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"(** warning: this will zero [password] *)","counters":[]},{"line":"let decrypt ~(password : Bytes.t)","counters":[]},{"line":"    { box_primitive","counters":[]},{"line":"    ; pw_primitive","counters":[]},{"line":"    ; nonce","counters":[]},{"line":"    ; pwsalt","counters":[]},{"line":"    ; pwdiff = mem_limit, ops_limit","counters":[]},{"line":"    ; ciphertext","counters":[]},{"line":"    } =","counters":[]},{"line":"  if not (String.equal box_primitive Secret_box.primitive) then","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"    Error","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (`Corrupted_privkey","counters":[]},{"line":"        (Error.createf","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"           !\"don't know how to handle a %s secret_box\"","counters":[]},{"line":"           box_primitive ) )","counters":[]},{"line":"  else if not (String.equal pw_primitive Password_hash.primitive) then","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    Error","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (`Corrupted_privkey","counters":[]},{"line":"        (Error.createf","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"           !\"don't know how to handle a %s password_hash\"","counters":[]},{"line":"           pw_primitive ) )","counters":[]},{"line":"  else","counters":[]},{"line":"    let nonce = Secret_box.Bytes.to_nonce nonce in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let salt = Password_hash.Bytes.to_salt pwsalt in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let diff = { Password_hash.mem_limit; ops_limit } in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let pw = Password_hash.Bytes.wipe_to_password password in","counters":[]},{"line":"    let key = Secret_box.derive_key diff pw salt in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    try Result.return @@ Secret_box.Bytes.secret_box_open key ciphertext nonce","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"    with Sodium.Verification_failure ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      Error `Incorrect_password_or_corrupted_privkey","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"successful roundtrip\" =","counters":[]},{"line":"  (* 4 trials because password hashing is slow *)","counters":[]},{"line":"  let bgen = Bytes.gen_with_length 16 Char.quickcheck_generator in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Quickcheck.test","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Quickcheck.Generator.(tuple2 bgen bgen)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    ~trials:4","counters":[]},{"line":"    ~f:(fun (password, plaintext) ->","counters":[]},{"line":"      let enc = encrypt ~password:(Bytes.copy password) ~plaintext in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      let dec = Option.value_exn (decrypt enc ~password |> Result.ok) in","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"      [%test_eq: Bytes.t] dec plaintext )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let%test \"bad password fails\" =","counters":[]},{"line":"  let enc =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    encrypt ~password:(Bytes.of_string \"foobar\")","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"      ~plaintext:(Bytes.of_string \"yo\")","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  in","counters":[]},{"line":"  Result.is_error (decrypt ~password:(Bytes.of_string \"barfoo\") enc)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":67,"col_end":67,"count":2}]}]}