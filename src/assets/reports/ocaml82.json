{"filename":"src/lib/o1trace/plugins.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: ensure plugin names are unique (use encapsulated type as proof of functor application) *)","counters":[]},{"line":"","counters":[]},{"line":"type proof_of_registration = I_have_been_registered","counters":[]},{"line":"","counters":[]},{"line":"let registry = ref String.Set.empty","counters":[]},{"line":"","counters":[]},{"line":"module type Plugin_spec_intf = sig","counters":[]},{"line":"  type state [@@deriving sexp_of]","counters":[]},{"line":"","counters":[]},{"line":"  val name : string","counters":[]},{"line":"","counters":[]},{"line":"  (* TODO: pass parent in (when available) for proper flame graph plugin *)","counters":[]},{"line":"  val init_state : string -> state","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Registered_plugin_spec_intf = sig","counters":[]},{"line":"  include Plugin_spec_intf","counters":[]},{"line":"","counters":[]},{"line":"  val registration : proof_of_registration","counters":[]},{"line":"","counters":[]},{"line":"  val state_id : state Type_equal.Id.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Plugin_intf = sig","counters":[]},{"line":"  include Registered_plugin_spec_intf","counters":[]},{"line":"","counters":[]},{"line":"  val on_job_enter : Thread.Fiber.t -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val on_job_exit : Thread.Fiber.t -> Time_ns.Span.t -> unit","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Register_plugin (Plugin_spec : Plugin_spec_intf) () :","counters":[]},{"line":"  Registered_plugin_spec_intf with type state = Plugin_spec.state = struct","counters":[]},{"line":"  include Plugin_spec","counters":[]},{"line":"","counters":[]},{"line":"  let () =","counters":[]},{"line":"    if Set.mem !registry name then","counters":[]},{"line":"      failwithf \"O1trace plugin already registered: %s\" name ()","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    else registry := Set.add !registry name","counters":[{"col_start":9,"col_end":9,"count":1},{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"  let registration = I_have_been_registered","counters":[]},{"line":"","counters":[]},{"line":"  let state_id = Type_equal.Id.create ~name sexp_of_state","counters":[{"col_start":36,"col_end":36,"count":1}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let plugins : (module Plugin_intf) String.Table.t = String.Table.create ()","counters":[{"col_start":70,"col_end":70,"count":1}]},{"line":"","counters":[]},{"line":"let plugin_state (type a)","counters":[]},{"line":"    (module Plugin : Registered_plugin_spec_intf with type state = a) thread =","counters":[]},{"line":"  match Thread.load_state thread Plugin.state_id with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Some state ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      state","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let state = Plugin.init_state thread.name in","counters":[]},{"line":"      Thread.set_state thread Plugin.state_id state ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      state","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let enable_plugin (module Plugin : Plugin_intf) =","counters":[]},{"line":"  Hashtbl.set plugins ~key:Plugin.name ~data:(module Plugin)","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"","counters":[]},{"line":"let disable_plugin (module Plugin : Plugin_intf) =","counters":[]},{"line":"  Hashtbl.remove plugins Plugin.name","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let dispatch f = Hashtbl.iter plugins ~f","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":39,"col_end":39,"count":2}]}]}