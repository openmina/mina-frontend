{"filename":"src/lib/consensus/slot.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params","counters":[]},{"line":"open Unsigned","counters":[]},{"line":"","counters":[]},{"line":"module T = Mina_numbers.Nat.Make32 ()","counters":[]},{"line":"","counters":[]},{"line":"include (T : module type of T with module Checked := T.Checked)","counters":[]},{"line":"","counters":[]},{"line":"let in_seed_update_range ~(constants : Constants.t) (slot : t) =","counters":[]},{"line":"  let open UInt32.Infix in","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  let third_epoch = constants.slots_per_epoch / UInt32.of_int 3 in","counters":[{"col_start":60,"col_end":60,"count":2}]},{"line":"  assert (UInt32.(equal constants.slots_per_epoch (of_int 3 * third_epoch))) ;","counters":[{"col_start":9,"col_end":9,"count":2},{"col_start":22,"col_end":22,"count":2},{"col_start":56,"col_end":56,"count":2}]},{"line":"  slot < third_epoch * UInt32.of_int 2","counters":[{"col_start":35,"col_end":35,"count":2}]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  include T.Checked","counters":[]},{"line":"","counters":[]},{"line":"  let in_seed_update_range ~(constants : Constants.var) (slot : var) =","counters":[]},{"line":"    let open Tick in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let module Length = Mina_numbers.Length in","counters":[]},{"line":"    let constant c =","counters":[]},{"line":"      Length.Checked.Unsafe.of_field (Field.Var.constant (Field.of_int c))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind third_epoch =","counters":[]},{"line":"      let%bind q, r =","counters":[]},{"line":"        Length.Checked.div_mod constants.slots_per_epoch (constant 3)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%map () = Length.Checked.Assert.equal r (constant 0) in","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      q","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let two = constant 2 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind ck_times_2 = Length.Checked.mul third_epoch two in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    Length.Checked.( < )","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Length.Checked.Unsafe.of_field (T.Checked.to_field slot))","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"      ck_times_2","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let gen (constants : Constants.t) =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let epoch_length = constants.slots_per_epoch |> UInt32.to_int in","counters":[]},{"line":"  Core.Int.gen_incl 0 epoch_length >>| UInt32.of_int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"in_seed_update_range unchecked vs. checked equality\" =","counters":[]},{"line":"  let constants = Lazy.force Constants.for_unit_tests in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let module Length = Mina_numbers.Length in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let test x =","counters":[]},{"line":"    Test_util.test_equal","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Snarky_backendless.Typ.tuple2 Constants.typ typ)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      Tick.Boolean.typ","counters":[]},{"line":"      (fun (c, x) -> Checked.in_seed_update_range ~constants:c x)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      (fun (c, x) -> in_seed_update_range ~constants:c x)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      (constants, x)","counters":[]},{"line":"  in","counters":[]},{"line":"  let x =","counters":[]},{"line":"    UInt32.div constants.slots_per_epoch (UInt32.of_int 3) |> UInt32.to_int","counters":[{"col_start":54,"col_end":54,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"  in","counters":[]},{"line":"  let examples =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.map ~f:UInt32.of_int","counters":[]},{"line":"      [ x; x - 1; x + 1; x * 2; (x * 2) - 1; (x * 2) + 1 ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Quickcheck.test ~trials:100 ~examples (gen constants) ~f:test","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":62,"col_end":62,"count":1}]}]}