{"filename":"src/util/backtrace.rs","lines":[{"line":"use backtrace::Backtrace;","counters":[]},{"line":"use std::fmt::Write;","counters":[]},{"line":"","counters":[]},{"line":"/// Make a backtrace without OCaml dependencies","counters":[]},{"line":"/// Those are very noisy and are not meaningful for our case","counters":[]},{"line":"/// Only Rust and Mina codebase symbols should remain.","counters":[]},{"line":"pub fn short_backtrace() -> String {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    let bt = Backtrace::new();","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let mut s = String::with_capacity(2000);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    for (index, (filename, name, line)) in bt","counters":[{"col_start":9,"col_end":37,"count":0},{"col_start":43,"col_end":45,"count":0}]},{"line":"        .frames()","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        .flat_map(|frame| frame.symbols())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":26,"col_end":41,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"        .map(|sym| (sym.filename(), sym.name(), sym.lineno()))","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":19,"col_end":61,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"        .enumerate()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        .filter(|(_, (filename, name, _))| {","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            return !(filename","counters":[{"col_start":21,"col_end":29,"count":48}]},{"line":"                .map(|filename| {","counters":[{"col_start":0,"col_end":21,"count":48},{"col_start":32,"col_end":33,"count":0}]},{"line":"                    filename.ends_with(\"ledger/src/util/backtrace.rs\")","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                        || filename","counters":[{"col_start":27,"col_end":35,"count":0}]},{"line":"                            .components()","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                            .any(|comp| comp.as_os_str() == \"_opam\")","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":40,"col_end":67,"count":154434},{"col_start":67,"col_end":68,"count":0}]},{"line":"                })","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":48}]},{"line":"                .unwrap_or(false)","counters":[{"col_start":0,"col_end":33,"count":48}]},{"line":"                || name","counters":[{"col_start":19,"col_end":23,"count":-202}]},{"line":"                    .as_ref()","counters":[{"col_start":0,"col_end":29,"count":-202}]},{"line":"                    .and_then(|n| n.as_str())","counters":[{"col_start":0,"col_end":30,"count":-202},{"col_start":34,"col_end":44,"count":2},{"col_start":44,"col_end":45,"count":-202}]},{"line":"                    .map(|name| {","counters":[{"col_start":0,"col_end":25,"count":-202},{"col_start":32,"col_end":33,"count":38911}]},{"line":"                        name.starts_with(\"camlAsync_\")","counters":[{"col_start":0,"col_end":54,"count":38911}]},{"line":"                            || name.starts_with(\"camlBase__\")","counters":[{"col_start":31,"col_end":61,"count":38911}]},{"line":"                            || name.starts_with(\"camlCore__\")","counters":[{"col_start":31,"col_end":61,"count":0}]},{"line":"                            || name.starts_with(\"camlCamlinternalLazy__\")","counters":[{"col_start":31,"col_end":73,"count":0}]},{"line":"                            || name.starts_with(\"camlO1trace__\") // This belongs to the mina repo, but useless to us","counters":[{"col_start":31,"col_end":64,"count":0}]},{"line":"                    })","counters":[{"col_start":20,"col_end":21,"count":0},{"col_start":21,"col_end":22,"count":-202}]},{"line":"                    .unwrap_or(false));","counters":[{"col_start":0,"col_end":37,"count":-202}]},{"line":"        })","counters":[{"col_start":8,"col_end":9,"count":48},{"col_start":9,"col_end":10,"count":0}]},{"line":"        .take_while(|(_, (_, name, _))| {","counters":[{"col_start":0,"col_end":20,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"            name.as_ref().and_then(|n| n.as_str()) != Some(\"caml_program\")","counters":[{"col_start":0,"col_end":35,"count":0},{"col_start":39,"col_end":49,"count":0},{"col_start":49,"col_end":74,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"    {","counters":[]},{"line":"        match (name, filename, line) {","counters":[{"col_start":15,"col_end":35,"count":0}]},{"line":"            (Some(name), None, None) => writeln!(&mut s, \" {:>3} - {}\", index, name).unwrap(),","counters":[{"col_start":18,"col_end":93,"count":0}]},{"line":"            (Some(name), Some(filename), None) => {","counters":[{"col_start":18,"col_end":51,"count":76906}]},{"line":"                writeln!(&mut s, \" {:>3} - {:80} ({:?})\", index, name, filename).unwrap();","counters":[{"col_start":0,"col_end":90,"count":76906}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":76906}]},{"line":"            (Some(name), Some(filename), Some(line)) => {","counters":[{"col_start":18,"col_end":57,"count":76906}]},{"line":"                writeln!(","counters":[{"col_start":0,"col_end":25,"count":76906}]},{"line":"                    &mut s,","counters":[{"col_start":0,"col_end":27,"count":76906}]},{"line":"                    \" {:>3} - {:80} ({:?}:{:?})\",","counters":[{"col_start":0,"col_end":49,"count":76906}]},{"line":"                    index, name, filename, line","counters":[{"col_start":0,"col_end":47,"count":76906}]},{"line":"                )","counters":[{"col_start":0,"col_end":17,"count":76906}]},{"line":"                .unwrap();","counters":[{"col_start":0,"col_end":26,"count":76906}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":76906}]},{"line":"            _ => {}","counters":[{"col_start":17,"col_end":19,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    s.pop(); // Remove last newline","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"    s","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]}]}