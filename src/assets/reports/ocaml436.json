{"filename":"src/app/archive/lib/diff.ml","lines":[{"line":"open Mina_block","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Breadcrumb = Transition_frontier.Breadcrumb","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: We should be able to fully deserialize and serialize via json *)","counters":[]},{"line":"","counters":[]},{"line":"(* these types are serialized for communication between the daemon and archive node,","counters":[]},{"line":"   which should be compiled with the same sources","counters":[]},{"line":"","counters":[]},{"line":"   the RPC is itself not versioned, so these types do not need to be versioned","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"module Transition_frontier = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":4}]},{"line":"    | Breadcrumb_added of","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        { block :","counters":[]},{"line":"            Mina_block.Stable.Latest.t","counters":[]},{"line":"            State_hash.With_state_hashes.Stable.Latest.t","counters":[]},{"line":"              (* ledger index, account *)","counters":[]},{"line":"        ; accounts_accessed : (int * Mina_base.Account.Stable.Latest.t) list","counters":[]},{"line":"        ; accounts_created :","counters":[]},{"line":"            (Account_id.Stable.Latest.t * Currency.Fee.Stable.Latest.t) list","counters":[]},{"line":"        ; tokens_used :","counters":[]},{"line":"            (Token_id.Stable.Latest.t * Account_id.Stable.Latest.t option) list","counters":[]},{"line":"        ; sender_receipt_chains_from_parent_ledger :","counters":[]},{"line":"            (Account_id.Stable.Latest.t * Receipt.Chain_hash.Stable.Latest.t)","counters":[]},{"line":"            list","counters":[]},{"line":"        }","counters":[]},{"line":"    | Root_transitioned of","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Transition_frontier.Diff.Root_transition.Lite.Stable.Latest.t","counters":[]},{"line":"    | Bootstrap of { lost_blocks : State_hash.Stable.Latest.t list }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Transaction_pool = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { added : User_command.Stable.Latest.t list","counters":[]},{"line":"    ; removed : User_command.Stable.Latest.t list","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t = Transition_frontier of Transition_frontier.t","counters":[{"col_start":0,"col_end":0,"count":1},{"col_start":5,"col_end":5,"count":2},{"col_start":9,"col_end":9,"count":0}]},{"line":"[@@deriving bin_io_unversioned]","counters":[{"col_start":30,"col_end":30,"count":4}]},{"line":"","counters":[]},{"line":"module Builder = struct","counters":[]},{"line":"  let breadcrumb_added ~(precomputed_values : Precomputed_values.t) ~logger","counters":[]},{"line":"      breadcrumb =","counters":[]},{"line":"    let validated_block = Breadcrumb.validated_transition breadcrumb in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let commands = Mina_block.Validated.valid_commands validated_block in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let staged_ledger = Breadcrumb.staged_ledger breadcrumb in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ledger = Staged_ledger.ledger staged_ledger in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let sender_receipt_chains_from_parent_ledger =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let senders =","counters":[]},{"line":"        commands","counters":[]},{"line":"        |> List.map ~f:(fun { data; _ } ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"               User_command.(fee_payer (forget_check data)) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        |> Account_id.Set.of_list","counters":[]},{"line":"      in","counters":[]},{"line":"      Set.to_list senders","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      |> List.map ~f:(fun sender ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"             Option.value_exn","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               (let open Option.Let_syntax in","counters":[]},{"line":"               let%bind ledger_location =","counters":[]},{"line":"                 Mina_ledger.Ledger.location_of_account ledger sender","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"               in","counters":[]},{"line":"               let%map { receipt_chain_hash; _ } =","counters":[]},{"line":"                 Mina_ledger.Ledger.get ledger ledger_location","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"               in","counters":[]},{"line":"               (sender, receipt_chain_hash)) )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    let block_with_hash = Mina_block.Validated.forget validated_block in","counters":[]},{"line":"    let block = With_hash.data block_with_hash in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let state_hash = (With_hash.hash block_with_hash).state_hash in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    let start = Time.now () in","counters":[]},{"line":"    let account_ids_accessed = Mina_block.account_ids_accessed block in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let accounts_accessed =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.filter_map account_ids_accessed ~f:(fun acct_id ->","counters":[]},{"line":"          (* an accessed account may not be the ledger *)","counters":[]},{"line":"          let%bind.Option index =","counters":[]},{"line":"            Option.try_with (fun () ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                Mina_ledger.Ledger.index_of_account_exn ledger acct_id )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          in","counters":[]},{"line":"          let account = Mina_ledger.Ledger.get_at_index_exn ledger index in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Some (index, account) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let accounts_accessed_time = Time.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [%log debug]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      \"Archive data generation for $state_hash: accounts-accessed took $time ms\"","counters":[]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"state_hash\", Mina_base.State_hash.to_yojson state_hash)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"        ; ( \"time\"","counters":[]},{"line":"          , `Float (Time.Span.to_ms (Time.diff accounts_accessed_time start)) )","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        ] ;","counters":[]},{"line":"    let accounts_created =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let account_creation_fee =","counters":[]},{"line":"        precomputed_values.constraint_constants.account_creation_fee","counters":[]},{"line":"      in","counters":[]},{"line":"      let previous_block_state_hash =","counters":[]},{"line":"        Mina_block.header block |> Header.protocol_state","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        |> Mina_state.Protocol_state.previous_state_hash","counters":[]},{"line":"      in","counters":[]},{"line":"      List.map","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"        (Staged_ledger.latest_block_accounts_created staged_ledger","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"           ~previous_block_state_hash ) ~f:(fun acct_id ->","counters":[]},{"line":"          (acct_id, account_creation_fee) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let tokens_used =","counters":[]},{"line":"      let unique_tokens =","counters":[]},{"line":"        List.map account_ids_accessed ~f:Account_id.token_id","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        |> List.dedup_and_sort ~compare:Token_id.compare","counters":[]},{"line":"      in","counters":[]},{"line":"      List.map unique_tokens ~f:(fun token_id ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"          let owner = Mina_ledger.Ledger.token_owner ledger token_id in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          (token_id, owner) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let account_created_time = Time.now () in","counters":[]},{"line":"    [%log debug]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      \"Archive data generation for $state_hash: accounts-created took $time ms\"","counters":[]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"state_hash\", Mina_base.State_hash.to_yojson state_hash)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"        ; ( \"time\"","counters":[]},{"line":"          , `Float","counters":[]},{"line":"              (Time.Span.to_ms","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                 (Time.diff account_created_time accounts_accessed_time) ) )","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        ] ;","counters":[]},{"line":"    Transition_frontier.Breadcrumb_added","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { block = block_with_hash","counters":[]},{"line":"      ; accounts_accessed","counters":[]},{"line":"      ; accounts_created","counters":[]},{"line":"      ; tokens_used","counters":[]},{"line":"      ; sender_receipt_chains_from_parent_ledger","counters":[]},{"line":"      }","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}