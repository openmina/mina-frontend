{"filename":"src/lib/ledger_catchup/best_tip_lru.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"type elt =","counters":[]},{"line":"  ( Mina_block.initial_valid_block","counters":[]},{"line":"  , State_body_hash.t list * Mina_block.t )","counters":[]},{"line":"  Proof_carrying_data.t","counters":[]},{"line":"","counters":[]},{"line":"let max_size = 16","counters":[]},{"line":"","counters":[]},{"line":"module Q = Hash_queue.Make (State_hash)","counters":[]},{"line":"","counters":[]},{"line":"let t = Q.create ()","counters":[{"col_start":15,"col_end":15,"count":1}]},{"line":"","counters":[]},{"line":"let add (x : elt) =","counters":[]},{"line":"  let h =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Proof_carrying_data.data x |> Mina_block.Validation.block_with_hash","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    |> State_hash.With_state_hashes.state_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  if not (Q.mem t h) then (","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    if Q.length t >= max_size then ignore (Q.dequeue_front t : elt option) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"    Q.enqueue_back_exn t h x )","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else ignore (Q.lookup_and_move_to_back t h : elt option)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"let get h = Q.lookup t h","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":2}]}]}