{"filename":"src/account/account.rs","lines":[{"line":"use std::{borrow::Cow, fmt::Write, io::Cursor, str::FromStr};","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::{Field, One, UniformRand, Zero};","counters":[]},{"line":"use binprot::{BinProtRead, BinProtWrite};","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"use rand::{prelude::ThreadRng, seq::SliceRandom, Rng};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    hash::{hash_noinputs, hash_with_kimchi, Inputs},","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{Balance, Magnitude, Nonce, Slot},","counters":[]},{"line":"        transaction_logic::account_min_balance_at_slot,","counters":[]},{"line":"    },","counters":[]},{"line":"    MerklePath, ToInputs,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::common::*;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":20,"count":0},{"col_start":22,"col_end":31,"count":0},{"col_start":37,"col_end":47,"count":0}]},{"line":"pub struct TokenId(pub Fp);","counters":[]},{"line":"","counters":[]},{"line":"impl std::fmt::Debug for TokenId {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        use crate::FpExt;","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        f.write_fmt(format_args!(\"TokenId({})\", self.0.to_decimal()))","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for TokenId {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self(Fp::one())","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<u64> for TokenId {","counters":[]},{"line":"    fn from(num: u64) -> Self {","counters":[{"col_start":4,"col_end":31,"count":0}]},{"line":"        TokenId(Fp::from(num))","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl TokenId {","counters":[]},{"line":"    pub fn is_default(&self) -> bool {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        self == &Self::default()","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/develop/src/lib/mina_base/account.ml#L93","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq, derive_more::Deref, derive_more::From)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":32,"count":0},{"col_start":38,"col_end":56,"count":0},{"col_start":58,"col_end":75,"count":0}]},{"line":"pub struct TokenSymbol(pub String);","counters":[]},{"line":"","counters":[]},{"line":"impl Default for TokenSymbol {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        // empty string","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        // https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/mina_base/account.ml#L133","counters":[{"col_start":0,"col_end":127,"count":0}]},{"line":"        Self(String::new())","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl TryFrom<&mina_p2p_messages::string::ByteString> for TokenSymbol {","counters":[]},{"line":"    type Error = std::string::FromUtf8Error;","counters":[]},{"line":"","counters":[]},{"line":"    fn try_from(value: &mina_p2p_messages::string::ByteString) -> Result<Self, Self::Error> {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        Ok(Self(value.clone().try_into()?))","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TokenSymbol> for mina_p2p_messages::string::ByteString {","counters":[]},{"line":"    fn from(value: &TokenSymbol) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        value.0.as_bytes().into()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for TokenSymbol {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        // https://github.com/MinaProtocol/mina/blob/2fac5d806a06af215dbab02f7b154b4f032538b7/src/lib/mina_base/account.ml#L97","counters":[{"col_start":0,"col_end":126,"count":0}]},{"line":"        //assert!(self.len() <= 6);","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        let mut s = <[u8; 6]>::default();","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        if !self.is_empty() {","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":28,"col_end":29,"count":0}]},{"line":"            let len = self.len();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            s[..len].copy_from_slice(self.as_bytes());","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        inputs.append_u48(s);","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/develop/src/lib/mina_base/permissions.mli#L49","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":31,"col_end":32,"count":0}]},{"line":"pub struct Permissions<Controller> {","counters":[]},{"line":"    pub edit_state: Controller,","counters":[]},{"line":"    pub send: Controller,","counters":[]},{"line":"    pub receive: Controller,","counters":[]},{"line":"    pub set_delegate: Controller,","counters":[]},{"line":"    pub set_permissions: Controller,","counters":[]},{"line":"    pub set_verification_key: Controller,","counters":[]},{"line":"    pub set_zkapp_uri: Controller,","counters":[]},{"line":"    pub edit_sequence_state: Controller,","counters":[]},{"line":"    pub set_token_symbol: Controller,","counters":[]},{"line":"    pub increment_nonce: Controller,","counters":[]},{"line":"    pub set_voting_for: Controller,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for Permissions<AuthRequired> {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        for auth in [","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"            self.edit_state,","counters":[{"col_start":12,"col_end":28,"count":0}]},{"line":"            self.send,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            self.receive,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            self.set_delegate,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            self.set_permissions,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            self.set_verification_key,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            self.set_zkapp_uri,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            self.edit_sequence_state,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            self.set_token_symbol,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            self.increment_nonce,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            self.set_voting_for,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        ] {","counters":[]},{"line":"            for bit in auth.encode().to_bits() {","counters":[{"col_start":16,"col_end":19,"count":0},{"col_start":23,"col_end":46,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"                inputs.append_bool(bit);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for Permissions<AuthRequired> {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self::user_default()","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Permissions<AuthRequired> {","counters":[]},{"line":"    pub fn user_default() -> Self {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        use AuthRequired::*;","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            edit_state: Signature,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            send: Signature,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            receive: None,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            set_delegate: Signature,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            set_permissions: Signature,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            set_verification_key: Signature,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            set_zkapp_uri: Signature,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            edit_sequence_state: Signature,","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            set_token_symbol: Signature,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            increment_nonce: Signature,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            set_voting_for: Signature,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        use AuthRequired::*;","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            edit_state: None,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            send: None,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            receive: None,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            set_delegate: None,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            set_permissions: None,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            set_verification_key: None,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            set_zkapp_uri: None,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            edit_sequence_state: None,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            set_token_symbol: None,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            increment_nonce: None,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            set_voting_for: None,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_base/permissions.ml#L385","counters":[]},{"line":"    pub fn gen(auth_tag: ControlTag) -> Self {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"        let auth_required_gen = match auth_tag {","counters":[{"col_start":12,"col_end":29,"count":0},{"col_start":38,"col_end":46,"count":0}]},{"line":"            ControlTag::Proof => AuthRequired::gen_for_proof_authorization,","counters":[{"col_start":33,"col_end":74,"count":-1}]},{"line":"            ControlTag::Signature => AuthRequired::gen_for_signature_authorization,","counters":[{"col_start":37,"col_end":82,"count":1}]},{"line":"            ControlTag::NoneGiven => AuthRequired::gen_for_none_given_authorization,","counters":[{"col_start":37,"col_end":83,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"            edit_state: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            send: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            receive: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            set_delegate: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            set_permissions: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            set_verification_key: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            set_zkapp_uri: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            edit_sequence_state: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            set_token_symbol: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            increment_nonce: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            set_voting_for: auth_required_gen(&mut rng),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// TODO: Not sure if the name is correct","counters":[]},{"line":"// It seems that a similar type exist in proof-systems: TODO","counters":[]},{"line":"#[derive(Copy, Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":15,"col_end":20,"count":0},{"col_start":22,"col_end":27,"count":0},{"col_start":29,"col_end":30,"count":0},{"col_start":37,"col_end":38,"count":0}]},{"line":"pub struct CurveAffine<F: Field>(pub F, pub F);","counters":[]},{"line":"","counters":[]},{"line":"impl<F> CurveAffine<F>","counters":[]},{"line":"where","counters":[]},{"line":"    F: Field + UniformRand + From<i32>,","counters":[]},{"line":"{","counters":[]},{"line":"    pub fn rand(rng: &mut ThreadRng) -> Self {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let a = F::rand(rng);","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        let two: F = 2.into();","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        let b: F = a.mul(two);","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"        Self(a, b)","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/a6e5f182855b3f4b4afb0ea8636760e618e2f7a0/src/lib/pickles_types/plonk_verification_key_evals.ml#L9-L18","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":31,"col_end":32,"count":0}]},{"line":"pub struct PlonkVerificationKeyEvals {","counters":[]},{"line":"    pub sigma: [CurveAffine<Fp>; 7],","counters":[]},{"line":"    pub coefficients: [CurveAffine<Fp>; 15],","counters":[]},{"line":"    pub generic: CurveAffine<Fp>,","counters":[]},{"line":"    pub psm: CurveAffine<Fp>,","counters":[]},{"line":"    pub complete_add: CurveAffine<Fp>,","counters":[]},{"line":"    pub mul: CurveAffine<Fp>,","counters":[]},{"line":"    pub emul: CurveAffine<Fp>,","counters":[]},{"line":"    pub endomul_scalar: CurveAffine<Fp>,","counters":[]},{"line":"} // 28 CurveAffine, 56 Fp","counters":[]},{"line":"","counters":[]},{"line":"impl PlonkVerificationKeyEvals {","counters":[]},{"line":"    pub fn rand(rng: &mut ThreadRng) -> Self {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            sigma: [","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            ],","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            coefficients: [","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            ],","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            generic: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            psm: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            complete_add: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            mul: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            emul: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            endomul_scalar: CurveAffine::rand(rng),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0},{"col_start":16,"col_end":17,"count":0},{"col_start":20,"col_end":21,"count":0},{"col_start":23,"col_end":32,"count":0}]},{"line":"pub enum ProofVerified {","counters":[]},{"line":"    N0,","counters":[]},{"line":"    N1,","counters":[]},{"line":"    N2,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":31,"col_end":32,"count":0}]},{"line":"pub struct VerificationKey {","counters":[]},{"line":"    pub max_proofs_verified: ProofVerified,","counters":[]},{"line":"    pub wrap_index: PlonkVerificationKeyEvals,","counters":[]},{"line":"    // `wrap_vk` is not used for hash inputs","counters":[]},{"line":"    pub wrap_vk: Option<()>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl VerificationKey {","counters":[]},{"line":"    // https://github.com/MinaProtocol/mina/blob/35b1702fbc295713f9bb46bb17e2d007bc2bab84/src/lib/pickles/side_loaded_verification_key.ml#L295-L309","counters":[]},{"line":"    pub fn dummy() -> Self {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        let g = CurveAffine(","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            Fp::one(),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            Fp::from_str(","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                \"12418654782883325593414442427049395787963493412651469444558597405572177144507\",","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            )","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .unwrap(),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            max_proofs_verified: ProofVerified::N2,","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            wrap_index: PlonkVerificationKeyEvals {","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                sigma: [g; 7],","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                coefficients: [g; 15],","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                generic: g,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                psm: g,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                complete_add: g,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                mul: g,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                emul: g,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                endomul_scalar: g,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            wrap_vk: None,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn digest(&self) -> Fp {","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"        self.hash()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn hash(&self) -> Fp {","counters":[{"col_start":4,"col_end":30,"count":0}]},{"line":"        let mut inputs = Inputs::new();","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        // https://github.com/MinaProtocol/mina/blob/35b1702fbc295713f9bb46bb17e2d007bc2bab84/src/lib/pickles_base/proofs_verified.ml#L108-L118","counters":[]},{"line":"        let bits = match self.max_proofs_verified {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":25,"col_end":49,"count":0}]},{"line":"            ProofVerified::N0 => [true, false, false],","counters":[{"col_start":33,"col_end":53,"count":0}]},{"line":"            ProofVerified::N1 => [false, true, false],","counters":[{"col_start":33,"col_end":53,"count":0}]},{"line":"            ProofVerified::N2 => [false, false, true],","counters":[{"col_start":33,"col_end":53,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        for bit in bits {","counters":[{"col_start":12,"col_end":15,"count":0},{"col_start":19,"col_end":23,"count":0},{"col_start":24,"col_end":25,"count":0}]},{"line":"            inputs.append_bool(bit);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let index = &self.wrap_index;","counters":[{"col_start":12,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        for field in index.sigma {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":21,"col_end":32,"count":0},{"col_start":33,"col_end":34,"count":0}]},{"line":"            inputs.append_field(field.0);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            inputs.append_field(field.1);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        for field in index.coefficients {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":21,"col_end":39,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"            inputs.append_field(field.0);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            inputs.append_field(field.1);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.generic.0);","counters":[{"col_start":8,"col_end":45,"count":0}]},{"line":"        inputs.append_field(index.generic.1);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.psm.0);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        inputs.append_field(index.psm.1);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.complete_add.0);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        inputs.append_field(index.complete_add.1);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.mul.0);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        inputs.append_field(index.mul.1);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.emul.0);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        inputs.append_field(index.emul.1);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(index.endomul_scalar.0);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        inputs.append_field(index.endomul_scalar.1);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"        hash_with_kimchi(\"MinaSideLoadedVk\", &inputs.to_fields())","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq, derive_more::From)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":32,"count":0},{"col_start":38,"col_end":55,"count":0}]},{"line":"pub struct ZkAppUri(String);","counters":[]},{"line":"","counters":[]},{"line":"impl ZkAppUri {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self(String::new())","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for Option<&ZkAppUri> {","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/mina_base/zkapp_account.ml#L313","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":45,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"        let field_zkapp_uri = {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            let mut inputs = Inputs::new();","counters":[{"col_start":16,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"            match self {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                Some(zkapp_uri) => {","counters":[{"col_start":21,"col_end":30,"count":0}]},{"line":"                    for c in zkapp_uri.0.as_bytes() {","counters":[{"col_start":24,"col_end":25,"count":0},{"col_start":41,"col_end":51,"count":0}]},{"line":"                        for j in 0..8 {","counters":[{"col_start":28,"col_end":29,"count":0},{"col_start":33,"col_end":37,"count":0},{"col_start":38,"col_end":39,"count":0}]},{"line":"                            inputs.append_bool((c & (1 << j)) != 0);","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                        }","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    inputs.append_bool(true);","counters":[{"col_start":20,"col_end":44,"count":0}]},{"line":"                }","counters":[]},{"line":"                None => {","counters":[{"col_start":24,"col_end":25,"count":0}]},{"line":"                    inputs.append_field(Fp::zero());","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                    inputs.append_field(Fp::zero());","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            hash_with_kimchi(\"MinaZkappUri\", &inputs.to_fields())","counters":[{"col_start":12,"col_end":65,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(field_zkapp_uri);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::ops::Deref for ZkAppUri {","counters":[]},{"line":"    type Target = String;","counters":[]},{"line":"","counters":[]},{"line":"    fn deref(&self) -> &Self::Target {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        &self.0","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl TryFrom<&mina_p2p_messages::string::ByteString> for ZkAppUri {","counters":[]},{"line":"    type Error = std::string::FromUtf8Error;","counters":[]},{"line":"","counters":[]},{"line":"    fn try_from(value: &mina_p2p_messages::string::ByteString) -> Result<Self, Self::Error> {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        Ok(Self(value.clone().try_into()?))","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&ZkAppUri> for mina_p2p_messages::string::ByteString {","counters":[]},{"line":"    fn from(value: &ZkAppUri) -> Self {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        Self::from(value.0.as_bytes())","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/develop/src/lib/mina_base/zkapp_account.ml#L148-L170","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":31,"col_end":32,"count":0}]},{"line":"pub struct ZkAppAccount {","counters":[]},{"line":"    pub app_state: [Fp; 8],","counters":[]},{"line":"    pub verification_key: Option<VerificationKey>,","counters":[]},{"line":"    // pub verification_key: Option<WithHash<VerificationKey>>, // TODO","counters":[]},{"line":"    pub zkapp_version: u32,","counters":[]},{"line":"    pub sequence_state: [Fp; 5],","counters":[]},{"line":"    pub last_sequence_slot: Slot,","counters":[]},{"line":"    pub proved_state: bool,","counters":[]},{"line":"    pub zkapp_uri: ZkAppUri,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for ZkAppAccount {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            app_state: [Fp::zero(); 8],","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            verification_key: None,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            zkapp_version: 0,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            sequence_state: {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                let empty = hash_noinputs(\"MinaZkappSequenceStateEmptyElt\");","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                [empty, empty, empty, empty, empty]","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            last_sequence_slot: Slot::zero(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            proved_state: false,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            zkapp_uri: ZkAppUri::new(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct AccountId {","counters":[]},{"line":"    pub public_key: CompressedPubKey,","counters":[]},{"line":"    pub token_id: TokenId,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Ord for AccountId {","counters":[]},{"line":"    fn cmp(&self, other: &Self) -> std::cmp::Ordering {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        self.partial_cmp(other).unwrap_or(std::cmp::Ordering::Equal)","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl PartialOrd for AccountId {","counters":[]},{"line":"    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {","counters":[]},{"line":"        match self.public_key.x.partial_cmp(&other.public_key.x) {","counters":[{"col_start":32,"col_end":64,"count":0}]},{"line":"            Some(core::cmp::Ordering::Equal) => {}","counters":[{"col_start":48,"col_end":50,"count":0}]},{"line":"            ord => return ord,","counters":[{"col_start":12,"col_end":29,"count":0}]},{"line":"        }","counters":[]},{"line":"        match self.public_key.is_odd.partial_cmp(&other.public_key.is_odd) {","counters":[{"col_start":37,"col_end":74,"count":0}]},{"line":"            Some(core::cmp::Ordering::Equal) => {}","counters":[{"col_start":48,"col_end":50,"count":0}]},{"line":"            ord => return ord,","counters":[{"col_start":12,"col_end":29,"count":0}]},{"line":"        }","counters":[]},{"line":"        self.token_id.partial_cmp(&other.token_id)","counters":[{"col_start":8,"col_end":50,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl AccountId {","counters":[]},{"line":"    pub fn derive_token_id(&self) -> TokenId {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        let is_odd_field = match self.public_key.is_odd {","counters":[{"col_start":12,"col_end":24,"count":0},{"col_start":33,"col_end":55,"count":0}]},{"line":"            true => Fp::one(),","counters":[{"col_start":20,"col_end":29,"count":0}]},{"line":"            false => Fp::zero(),","counters":[{"col_start":21,"col_end":31,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        TokenId(hash_with_kimchi(","counters":[{"col_start":8,"col_end":33,"count":0}]},{"line":"            \"MinaDeriveTokenId\",","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            &[self.public_key.x, self.token_id.0, is_odd_field],","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn new(public_key: CompressedPubKey, token_id: TokenId) -> Self {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            token_id,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create(public_key: CompressedPubKey, token_id: TokenId) -> Self {","counters":[{"col_start":4,"col_end":76,"count":0}]},{"line":"        Self::new(public_key, token_id)","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::fmt::Debug for AccountId {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        f.debug_struct(\"AccountId\")","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            .field(\"public_key\", &self.public_key)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            .field(\"token_id\", &self.token_id)","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            .finish()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::hash::Hash for AccountId {","counters":[]},{"line":"    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        self.public_key.x.hash(state);","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        self.public_key.is_odd.hash(state);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        self.token_id.hash(state);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl PartialEq for AccountId {","counters":[]},{"line":"    fn eq(&self, other: &Self) -> bool {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        self.public_key.x == other.public_key.x","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            && self.public_key.is_odd == other.public_key.is_odd","counters":[{"col_start":15,"col_end":64,"count":0}]},{"line":"            && self.token_id.0 == other.token_id.0","counters":[{"col_start":15,"col_end":50,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"pub enum PermissionTo {","counters":[]},{"line":"    Send,","counters":[]},{"line":"    Receive,","counters":[]},{"line":"    SetDelegate,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Copy, Clone, Debug)]","counters":[{"col_start":15,"col_end":20,"count":0},{"col_start":22,"col_end":23,"count":0},{"col_start":26,"col_end":27,"count":0}]},{"line":"pub enum ControlTag {","counters":[]},{"line":"    Proof,","counters":[]},{"line":"    Signature,","counters":[]},{"line":"    NoneGiven,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ControlTag {","counters":[]},{"line":"    pub fn gen(rng: &mut ThreadRng) -> Self {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        // Match will fail when a variant added","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        match Self::NoneGiven {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            ControlTag::Proof => {}","counters":[]},{"line":"            ControlTag::Signature => {}","counters":[{"col_start":8,"col_end":39,"count":0}]},{"line":"            ControlTag::NoneGiven => {}","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        [Self::Proof, Self::Signature, Self::NoneGiven]","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"            .choose(rng)","counters":[]},{"line":"            .copied()","counters":[]},{"line":"            .unwrap()","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn check_permission(auth: AuthRequired, tag: ControlTag) -> bool {","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"    use AuthRequired::*;","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    use ControlTag as Tag;","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    match (auth, tag) {","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        (Impossible, _) => false,","counters":[{"col_start":27,"col_end":32,"count":0}]},{"line":"        (None, _) => true,","counters":[{"col_start":21,"col_end":25,"count":-2}]},{"line":"        (Proof, Tag::Proof) => true,","counters":[{"col_start":31,"col_end":35,"count":0}]},{"line":"        (Signature, Tag::Signature) => true,","counters":[{"col_start":39,"col_end":43,"count":126}]},{"line":"        // The signatures and proofs have already been checked by this point.","counters":[]},{"line":"        (Either, Tag::Proof | Tag::Signature) => true,","counters":[{"col_start":49,"col_end":53,"count":0}]},{"line":"        (Signature, Tag::Proof) => false,","counters":[{"col_start":35,"col_end":40,"count":0}]},{"line":"        (Proof, Tag::Signature) => false,","counters":[{"col_start":35,"col_end":40,"count":0}]},{"line":"        (Proof | Signature | Either, Tag::NoneGiven) => false,","counters":[{"col_start":56,"col_end":61,"count":0}]},{"line":"        (Both, _) => unimplemented!(\"check_permission with `Both` Not implemented in OCaml\"),","counters":[{"col_start":21,"col_end":92,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":124}]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/1765ba6bdfd7c454e5ae836c49979fa076de1bea/src/lib/mina_base/account.ml#L368","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":31,"col_end":32,"count":214}]},{"line":"pub struct Account {","counters":[]},{"line":"    pub public_key: CompressedPubKey,         // Public_key.Compressed.t","counters":[]},{"line":"    pub token_id: TokenId,                    // Token_id.t","counters":[]},{"line":"    pub token_permissions: TokenPermissions,  // Token_permissions.t","counters":[]},{"line":"    pub token_symbol: TokenSymbol,            // Token_symbol.t","counters":[]},{"line":"    pub balance: Balance,                     // Balance.t","counters":[]},{"line":"    pub nonce: Nonce,                         // Nonce.t","counters":[]},{"line":"    pub receipt_chain_hash: ReceiptChainHash, // Receipt.Chain_hash.t","counters":[]},{"line":"    pub delegate: Option<CompressedPubKey>,   // Public_key.Compressed.t option","counters":[]},{"line":"    pub voting_for: VotingFor,                // State_hash.t","counters":[]},{"line":"    pub timing: Timing,                       // Timing.t","counters":[]},{"line":"    pub permissions: Permissions<AuthRequired>, // Permissions.t","counters":[]},{"line":"    pub zkapp: Option<ZkAppAccount>,          // Zkapp_account.t","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Account {","counters":[]},{"line":"    pub fn create() -> Self {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        let pubkey = CompressedPubKey::from_address(","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            \"B62qnzbXmRNo9q32n4SNu2mpB8e7FYYLH8NmaX6oFCBYjjQ8SbD7uzV\",","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        .unwrap();","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: pubkey.clone(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            token_id: TokenId::default(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            token_permissions: TokenPermissions::default(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            token_symbol: TokenSymbol::default(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            balance: Balance::from_u64(10101),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            nonce: Nonce::zero(),","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash::empty(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            delegate: Some(pubkey),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            voting_for: VotingFor::dummy(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            timing: Timing::Untimed,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            permissions: Permissions::user_default(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            zkapp: None,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create_with(account_id: AccountId, balance: Balance) -> Self {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        let delegate = if account_id.token_id.is_default() {","counters":[{"col_start":12,"col_end":20,"count":0},{"col_start":26,"col_end":58,"count":0}]},{"line":"            // Only allow delegation if this account is for the default token.","counters":[]},{"line":"            Some(account_id.public_key.clone())","counters":[{"col_start":12,"col_end":47,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"            public_key: account_id.public_key,","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            token_id: account_id.token_id,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            token_permissions: TokenPermissions::default(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            token_symbol: TokenSymbol::default(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            balance,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            nonce: Nonce::zero(),","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash::empty(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            delegate,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            voting_for: VotingFor::dummy(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            timing: Timing::Untimed,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            permissions: Permissions::user_default(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            zkapp: None,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn initialize(account_id: &AccountId) -> Self {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        Self::create_with(account_id.clone(), Balance::zero())","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn deserialize(bytes: &[u8]) -> Self {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let mut cursor = Cursor::new(bytes);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        Account::binprot_read(&mut cursor).unwrap()","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn serialize(&self) -> Vec<u8> {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        let mut bytes = Vec::with_capacity(10000);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        self.binprot_write(&mut bytes).unwrap();","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        bytes","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":282}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":282}]},{"line":"            public_key: CompressedPubKey {","counters":[{"col_start":0,"col_end":42,"count":282}]},{"line":"                x: Fp::zero(),","counters":[{"col_start":0,"col_end":30,"count":282}]},{"line":"                is_odd: false,","counters":[{"col_start":0,"col_end":30,"count":282}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":282}]},{"line":"            token_id: TokenId::default(),","counters":[{"col_start":0,"col_end":41,"count":282}]},{"line":"            token_permissions: TokenPermissions::default(),","counters":[{"col_start":0,"col_end":59,"count":282}]},{"line":"            token_symbol: TokenSymbol::default(),","counters":[{"col_start":0,"col_end":49,"count":282}]},{"line":"            balance: Balance::zero(),","counters":[{"col_start":0,"col_end":37,"count":282}]},{"line":"            nonce: Nonce::zero(),","counters":[{"col_start":0,"col_end":33,"count":282}]},{"line":"            receipt_chain_hash: ReceiptChainHash::empty(),","counters":[{"col_start":0,"col_end":58,"count":282}]},{"line":"            delegate: None,","counters":[{"col_start":0,"col_end":27,"count":282}]},{"line":"            voting_for: VotingFor::dummy(),","counters":[{"col_start":0,"col_end":43,"count":282}]},{"line":"            timing: Timing::Untimed,","counters":[{"col_start":0,"col_end":36,"count":282}]},{"line":"            permissions: Permissions::user_default(),","counters":[{"col_start":0,"col_end":53,"count":282}]},{"line":"            zkapp: None,","counters":[{"col_start":0,"col_end":24,"count":282}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":282}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":282}]},{"line":"","counters":[]},{"line":"    pub fn id(&self) -> AccountId {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        AccountId {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            public_key: self.public_key.clone(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            token_id: self.token_id.clone(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn has_locked_tokens(&self, global_slot: Slot) -> bool {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        match self.timing {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            Timing::Untimed => false,","counters":[{"col_start":31,"col_end":36,"count":0}]},{"line":"            Timing::Timed {","counters":[]},{"line":"                initial_minimum_balance,","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"                cliff_time,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                cliff_amount,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                vesting_period,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                vesting_increment,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                let curr_min_balance = account_min_balance_at_slot(","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    global_slot,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    cliff_time,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                    cliff_amount,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                    vesting_period,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                    vesting_increment,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                    initial_minimum_balance,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                );","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"                !curr_min_balance.is_zero()","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/2ee6e004ba8c6a0541056076aab22ea162f7eb3a/src/lib/mina_base/account.ml#L623","counters":[]},{"line":"    pub fn has_permission_to(&self, to: PermissionTo) -> bool {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        match to {","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            PermissionTo::Send => check_permission(self.permissions.send, ControlTag::Signature),","counters":[{"col_start":34,"col_end":96,"count":0}]},{"line":"            PermissionTo::Receive => {","counters":[]},{"line":"                check_permission(self.permissions.receive, ControlTag::NoneGiven)","counters":[{"col_start":16,"col_end":81,"count":0}]},{"line":"            }","counters":[]},{"line":"            PermissionTo::SetDelegate => {","counters":[]},{"line":"                check_permission(self.permissions.set_delegate, ControlTag::Signature)","counters":[{"col_start":16,"col_end":86,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn hash(&self) -> Fp {","counters":[{"col_start":4,"col_end":30,"count":0}]},{"line":"        // elog!(\"account={:#?}\", self);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"        let mut inputs = Inputs::new();","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::zkapp","counters":[]},{"line":"        let field_zkapp = {","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"            let zkapp = match self.zkapp.as_ref() {","counters":[{"col_start":16,"col_end":21,"count":0},{"col_start":30,"col_end":49,"count":0}]},{"line":"                Some(zkapp) => Cow::Borrowed(zkapp),","counters":[{"col_start":21,"col_end":51,"count":0}]},{"line":"                None => Cow::Owned(ZkAppAccount::default()),","counters":[{"col_start":24,"col_end":59,"count":0}]},{"line":"            };","counters":[]},{"line":"            let zkapp = zkapp.as_ref();","counters":[{"col_start":16,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"            let mut inputs = Inputs::new();","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"            // Self::zkapp_uri","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            inputs.append(&Some(&zkapp.zkapp_uri));","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"            inputs.append_bool(zkapp.proved_state);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            inputs.append_u32(zkapp.last_sequence_slot.as_u32());","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            for fp in &zkapp.sequence_state {","counters":[{"col_start":16,"col_end":18,"count":0},{"col_start":22,"col_end":43,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"                inputs.append_field(*fp);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            inputs.append_u32(zkapp.zkapp_version);","counters":[{"col_start":12,"col_end":50,"count":0}]},{"line":"            let vk_hash = match zkapp.verification_key.as_ref() {","counters":[{"col_start":16,"col_end":23,"count":0},{"col_start":32,"col_end":63,"count":0}]},{"line":"                Some(vk) => vk.hash(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"                None => VerificationKey::dummy().hash(),","counters":[{"col_start":24,"col_end":55,"count":0}]},{"line":"            };","counters":[]},{"line":"            inputs.append_field(vk_hash);","counters":[{"col_start":12,"col_end":40,"count":0}]},{"line":"            for fp in &zkapp.app_state {","counters":[{"col_start":16,"col_end":18,"count":0},{"col_start":22,"col_end":38,"count":0},{"col_start":39,"col_end":40,"count":0}]},{"line":"                inputs.append_field(*fp);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            hash_with_kimchi(\"MinaZkappAccount\", &inputs.to_fields())","counters":[{"col_start":12,"col_end":69,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append_field(field_zkapp);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        inputs.append(&self.permissions);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::timing","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        match &self.timing {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            Timing::Untimed => {","counters":[{"col_start":31,"col_end":32,"count":0}]},{"line":"                inputs.append_bool(false);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                inputs.append_u64(0); // initial_minimum_balance","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                inputs.append_u32(0); // cliff_time","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                inputs.append_u64(0); // cliff_amount","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                inputs.append_u32(1); // vesting_period","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                inputs.append_u64(0); // vesting_increment","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            Timing::Timed {","counters":[]},{"line":"                initial_minimum_balance,","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"                cliff_time,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                cliff_amount,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                vesting_period,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                vesting_increment,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                inputs.append_bool(true);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                inputs.append_u64(initial_minimum_balance.as_u64());","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                inputs.append_u32(cliff_time.as_u32());","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                inputs.append_u64(cliff_amount.as_u64());","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                inputs.append_u32(vesting_period.as_u32());","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                inputs.append_u64(vesting_increment.as_u64());","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::voting_for","counters":[]},{"line":"        inputs.append_field(self.voting_for.0);","counters":[{"col_start":8,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::delegate","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        match self.delegate.as_ref() {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            Some(delegate) => {","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"                inputs.append_field(delegate.x);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                inputs.append_bool(delegate.is_odd);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            None => {","counters":[{"col_start":20,"col_end":21,"count":0}]},{"line":"                // Public_key.Compressed.empty","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                inputs.append_field(Fp::zero());","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                inputs.append_bool(false);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::receipt_chain_hash","counters":[]},{"line":"        inputs.append_field(self.receipt_chain_hash.0);","counters":[{"col_start":8,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::nonce","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        inputs.append_u32(self.nonce.as_u32());","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::balance","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        inputs.append_u64(self.balance.as_u64());","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::token_symbol","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"        // https://github.com/MinaProtocol/mina/blob/2fac5d806a06af215dbab02f7b154b4f032538b7/src/lib/mina_base/account.ml#L97","counters":[{"col_start":0,"col_end":126,"count":0}]},{"line":"        assert!(self.token_symbol.len() <= 6);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        let mut s = <[u8; 6]>::default();","counters":[{"col_start":12,"col_end":41,"count":0}]},{"line":"        if !self.token_symbol.is_empty() {","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"            let len = self.token_symbol.len();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            s[..len].copy_from_slice(self.token_symbol.as_bytes());","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        inputs.append_u48(s);","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::token_permissions","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        match self.token_permissions {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            TokenPermissions::TokenOwned {","counters":[]},{"line":"                disable_new_accounts,","counters":[{"col_start":16,"col_end":36,"count":0}]},{"line":"            } => {","counters":[{"col_start":17,"col_end":18,"count":0}]},{"line":"                let bits = if disable_new_accounts { 0b10 } else { 0b00 };","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":30,"col_end":50,"count":0},{"col_start":53,"col_end":57,"count":0},{"col_start":67,"col_end":71,"count":0}]},{"line":"                inputs.append_u2(0b01 | bits);","counters":[{"col_start":16,"col_end":45,"count":0}]},{"line":"            }","counters":[]},{"line":"            TokenPermissions::NotOwned { account_disabled } => {","counters":[{"col_start":41,"col_end":57,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"                let bits = if account_disabled { 0b10 } else { 0b00 };","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":30,"col_end":46,"count":0},{"col_start":49,"col_end":53,"count":0},{"col_start":63,"col_end":67,"count":0}]},{"line":"                inputs.append_u2(bits);","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Self::token_id","counters":[]},{"line":"        inputs.append_field(self.token_id.0);","counters":[{"col_start":8,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        // Self::public_key","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        inputs.append_field(self.public_key.x);","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        inputs.append_bool(self.public_key.is_odd);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"        hash_with_kimchi(\"MinaAccount\", &inputs.to_fields())","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn rand() -> Self {","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        let rng = &mut rng;","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        let symbol: u64 = rng.gen();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        let mut symbol = symbol.to_string();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        symbol.truncate(6);","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        let zkapp_uri: u64 = rng.gen();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        let mut zkapp_uri = zkapp_uri.to_string();","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        zkapp_uri.truncate(6);","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"        let gen_perm = |rng: &mut ThreadRng| {","counters":[{"col_start":0,"col_end":20,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"            let n: u64 = rng.gen();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            if n % 5 == 0 {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                AuthRequired::Either","counters":[{"col_start":16,"col_end":36,"count":0}]},{"line":"            } else if n % 4 == 0 {","counters":[{"col_start":22,"col_end":32,"count":0}]},{"line":"                AuthRequired::Impossible","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"            } else if n % 3 == 0 {","counters":[{"col_start":22,"col_end":32,"count":0}]},{"line":"                AuthRequired::None","counters":[{"col_start":16,"col_end":34,"count":0}]},{"line":"            } else if n % 2 == 0 {","counters":[{"col_start":22,"col_end":32,"count":0}]},{"line":"                AuthRequired::Proof","counters":[{"col_start":16,"col_end":35,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                AuthRequired::Signature","counters":[{"col_start":16,"col_end":39,"count":0}]},{"line":"            }","counters":[]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[]},{"line":"            public_key: CompressedPubKey {","counters":[{"col_start":24,"col_end":42,"count":0}]},{"line":"                x: Fp::rand(rng),","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                is_odd: rng.gen(),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            token_id: TokenId(Fp::rand(rng)),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            token_permissions: if rng.gen() {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                TokenPermissions::NotOwned {","counters":[{"col_start":16,"col_end":44,"count":0}]},{"line":"                    account_disabled: rng.gen(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                TokenPermissions::TokenOwned {","counters":[{"col_start":16,"col_end":46,"count":0}]},{"line":"                    disable_new_accounts: rng.gen(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            },","counters":[]},{"line":"            token_symbol: TokenSymbol(symbol),","counters":[{"col_start":26,"col_end":46,"count":0}]},{"line":"            balance: rng.gen(),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            nonce: rng.gen(),","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash(Fp::rand(rng)),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            delegate: if rng.gen() {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                Some(CompressedPubKey {","counters":[{"col_start":16,"col_end":39,"count":0}]},{"line":"                    x: Fp::rand(rng),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                    is_odd: rng.gen(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                })","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                None","counters":[{"col_start":16,"col_end":20,"count":0}]},{"line":"            },","counters":[]},{"line":"            voting_for: VotingFor(Fp::rand(rng)),","counters":[{"col_start":24,"col_end":49,"count":0}]},{"line":"            timing: if rng.gen() {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                Timing::Untimed","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                Timing::Timed {","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                    initial_minimum_balance: rng.gen(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                    cliff_time: rng.gen(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                    cliff_amount: rng.gen(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                    vesting_period: rng.gen(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    vesting_increment: rng.gen(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            },","counters":[]},{"line":"            permissions: Permissions {","counters":[{"col_start":25,"col_end":38,"count":0}]},{"line":"                edit_state: gen_perm(rng),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                send: gen_perm(rng),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                receive: gen_perm(rng),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                set_delegate: gen_perm(rng),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                set_permissions: gen_perm(rng),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                set_verification_key: gen_perm(rng),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                set_zkapp_uri: gen_perm(rng),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                edit_sequence_state: gen_perm(rng),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                set_token_symbol: gen_perm(rng),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                increment_nonce: gen_perm(rng),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                set_voting_for: gen_perm(rng),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            zkapp: if rng.gen() {","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                Some(ZkAppAccount {","counters":[]},{"line":"                    app_state: [","counters":[{"col_start":31,"col_end":32,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                    ],","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    verification_key: if rng.gen() {","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                        Some(VerificationKey {","counters":[]},{"line":"                            max_proofs_verified: {","counters":[]},{"line":"                                let n: u64 = rng.gen();","counters":[{"col_start":36,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"                                if n % 3 == 0 {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                                    ProofVerified::N2","counters":[{"col_start":36,"col_end":53,"count":0}]},{"line":"                                } else if n % 2 == 0 {","counters":[{"col_start":42,"col_end":52,"count":0}]},{"line":"                                    ProofVerified::N1","counters":[{"col_start":36,"col_end":53,"count":0}]},{"line":"                                } else {","counters":[]},{"line":"                                    ProofVerified::N0","counters":[{"col_start":36,"col_end":53,"count":0}]},{"line":"                                }","counters":[]},{"line":"                            },","counters":[]},{"line":"                            wrap_index: PlonkVerificationKeyEvals::rand(rng),","counters":[{"col_start":40,"col_end":77,"count":0}]},{"line":"                            wrap_vk: None,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        })","counters":[]},{"line":"                    } else {","counters":[]},{"line":"                        None","counters":[{"col_start":24,"col_end":28,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    zkapp_version: rng.gen(),","counters":[{"col_start":35,"col_end":45,"count":0}]},{"line":"                    sequence_state: [","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        Fp::rand(rng),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                    ],","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    last_sequence_slot: rng.gen(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                    proved_state: rng.gen(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                    zkapp_uri: ZkAppUri(zkapp_uri),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                })","counters":[]},{"line":"            } else {","counters":[]},{"line":"                None","counters":[{"col_start":16,"col_end":20,"count":0}]},{"line":"            },","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn verify_merkle_path(account: &Account, merkle_path: &[MerklePath]) -> Fp {","counters":[]},{"line":"    let account_hash = account.hash();","counters":[]},{"line":"    let mut param = String::with_capacity(16);","counters":[]},{"line":"","counters":[]},{"line":"    merkle_path","counters":[]},{"line":"        .iter()","counters":[]},{"line":"        .enumerate()","counters":[]},{"line":"        .fold(account_hash, |accum, (depth, path)| {","counters":[]},{"line":"            let hashes = match path {","counters":[]},{"line":"                MerklePath::Left(right) => [accum, *right],","counters":[]},{"line":"                MerklePath::Right(left) => [*left, accum],","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            param.clear();","counters":[]},{"line":"            write!(&mut param, \"MinaMklTree{:03}\", depth).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"            crate::hash::hash_with_kimchi(param.as_str(), &hashes)","counters":[]},{"line":"        })","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use o1_utils::FieldHelpers;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(not(target_family = \"wasm\"))]","counters":[]},{"line":"    use crate::{base::BaseLedger, database::Database, tree_version::V2};","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_size_account() {","counters":[]},{"line":"        #[cfg(not(target_family = \"wasm\"))]","counters":[]},{"line":"        const SIZE: usize = 2528;","counters":[]},{"line":"","counters":[]},{"line":"        #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"        const SIZE: usize = 2496;","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(std::mem::size_of::<Account>(), SIZE);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_hash_account() {","counters":[]},{"line":"        let acc = Account::create();","counters":[]},{"line":"        let hash = acc.hash();","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"account_hash={}\", hash);","counters":[]},{"line":"        elog!(\"account_hash={}\", hash.to_hex());","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            hash.to_hex(),","counters":[]},{"line":"            \"82a455aa81f57fca2f0b40662ecd6ee6a73dc181fda2f0e233d35813cc5b2b12\"","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        let acc = Account {","counters":[]},{"line":"            public_key: CompressedPubKey::from_address(","counters":[]},{"line":"                \"B62qnzbXmRNo9q32n4SNu2mpB8e7FYYLH8NmaX6oFCBYjjQ8SbD7uzV\",","counters":[]},{"line":"            )","counters":[]},{"line":"            .unwrap(),","counters":[]},{"line":"            token_id: TokenId::default(),","counters":[]},{"line":"            token_permissions: TokenPermissions::default(),","counters":[]},{"line":"            token_symbol: TokenSymbol::from(\"seb\".to_string()),","counters":[]},{"line":"            balance: Balance::from_u64(10101),","counters":[]},{"line":"            nonce: Nonce::from_u32(62772),","counters":[]},{"line":"            receipt_chain_hash: ReceiptChainHash::empty(),","counters":[]},{"line":"            delegate: None,","counters":[]},{"line":"            voting_for: VotingFor::dummy(),","counters":[]},{"line":"            timing: Timing::Untimed,","counters":[]},{"line":"            permissions: Permissions::user_default(),","counters":[]},{"line":"            zkapp: None,","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            acc.hash().to_hex(),","counters":[]},{"line":"            \"fc040a2d79358b092265687701b182b5e32eb000b47d0fa7e394cb8193086d2e\"","counters":[]},{"line":"        );","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_dummy_sideloaded_verification_key() {","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            VerificationKey::dummy().hash().to_hex(),","counters":[]},{"line":"            \"b5d8852f07bb6daffbc4a68829141643f56ebd86a2a571e9d0e939e929fba40f\"","counters":[]},{"line":"        );","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_from_deserialized_account() {","counters":[]},{"line":"        let bytes: &[u8] = &[","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 115, 101, 98, 0, 0, 155, 228, 183, 197, 30, 217, 194,","counters":[]},{"line":"            228, 82, 71, 39, 128, 95, 211, 111, 82, 32, 251, 252, 112, 167, 73, 246, 38, 35, 176,","counters":[]},{"line":"            237, 41, 8, 67, 51, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,","counters":[]},{"line":"        ];","counters":[]},{"line":"","counters":[]},{"line":"        // This deserialize to `MinaBaseAccountBinableArgStableV2` and convert to `Account`","counters":[]},{"line":"        let acc: Account = Account::deserialize(bytes);","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            acc.hash().to_hex(),","counters":[]},{"line":"            \"2e03fd55707e58f82cf5d57ace864ca8cb50a10744d0b127905c0e623bf27214\"","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        let bytes = &[","counters":[]},{"line":"            176, 194, 45, 223, 254, 30, 162, 197, 122, 221, 132, 151, 117, 60, 70, 134, 41, 158,","counters":[]},{"line":"            116, 38, 124, 102, 236, 184, 238, 131, 107, 151, 247, 248, 28, 18, 0, 149, 229, 111,","counters":[]},{"line":"            200, 171, 208, 82, 180, 2, 73, 133, 192, 69, 102, 234, 26, 240, 98, 220, 178, 144, 145,","counters":[]},{"line":"            39, 106, 68, 31, 62, 115, 153, 45, 252, 11, 1, 0, 0, 252, 27, 35, 154, 15, 127, 164,","counters":[]},{"line":"            201, 170, 0, 155, 228, 183, 197, 30, 217, 194, 228, 82, 71, 39, 128, 95, 211, 111, 82,","counters":[]},{"line":"            32, 251, 252, 112, 167, 73, 246, 38, 35, 176, 237, 41, 8, 67, 51, 32, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,","counters":[]},{"line":"            3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,","counters":[]},{"line":"        ];","counters":[]},{"line":"        let acc: Account = Account::deserialize(bytes);","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            acc.hash().to_hex(),","counters":[]},{"line":"            \"1f084f56133cb3735f3e6ffc3dda945a6e8446fef2746662bae99d8249ebcc16\"","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        let fp = Fp::from_str(","counters":[]},{"line":"            \"6989982961557644252722402794378511163775946371102905721368942795880969184859\",","counters":[]},{"line":"        )","counters":[]},{"line":"        .unwrap();","counters":[]},{"line":"        elog!(\"FP={:?}\", fp.to_string());","counters":[]},{"line":"","counters":[]},{"line":"        let bytes = &[","counters":[]},{"line":"            178, 29, 73, 50, 85, 80, 131, 166, 53, 11, 48, 224, 103, 89, 161, 207, 149, 31, 170,","counters":[]},{"line":"            21, 165, 181, 94, 18, 149, 177, 54, 71, 185, 77, 109, 49, 1, 144, 247, 164, 171, 110,","counters":[]},{"line":"            24, 3, 12, 25, 163, 63, 125, 83, 66, 174, 2, 160, 62, 45, 137, 185, 47, 16, 129, 145,","counters":[]},{"line":"            190, 203, 124, 35, 119, 251, 26, 1, 1, 6, 49, 50, 56, 54, 56, 56, 252, 29, 154, 218,","counters":[]},{"line":"            214, 79, 98, 177, 181, 253, 181, 152, 127, 0, 145, 177, 91, 155, 59, 239, 161, 174,","counters":[]},{"line":"            217, 42, 201, 30, 46, 11, 187, 88, 49, 5, 111, 254, 222, 87, 42, 45, 90, 1, 236, 173,","counters":[]},{"line":"            205, 215, 241, 20, 0, 77, 12, 197, 234, 69, 202, 22, 55, 50, 183, 255, 238, 8, 29, 79,","counters":[]},{"line":"            199, 92, 12, 146, 223, 105, 45, 135, 77, 89, 73, 141, 11, 137, 28, 54, 21, 0, 1, 4, 4,","counters":[]},{"line":"            1, 0, 4, 3, 4, 3, 2, 3, 0, 6, 49, 49, 56, 54, 54, 51,","counters":[]},{"line":"        ];","counters":[]},{"line":"        let acc: Account = Account::deserialize(bytes);","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"ACC={:#?}\", acc);","counters":[]},{"line":"","counters":[]},{"line":"        let h = acc.hash();","counters":[]},{"line":"        elog!(\"HASH={:?}\", h.to_string());","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            acc.hash().to_hex(),","counters":[]},{"line":"            \"7e820d3d22f7406151f0f031ab509cc326eba01f447f3e21a74f41fbcdf89714\"","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        // let fp = Fp::from_str(","counters":[]},{"line":"        //     \"6989982961557644252722402794378511163775946371102905721368942795880969184859\",","counters":[]},{"line":"        // )","counters":[]},{"line":"        // .unwrap();","counters":[]},{"line":"        // elog!(\"FP={:?}\", fp.to_string());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_rand() {","counters":[]},{"line":"        for _ in 0..1000 {","counters":[]},{"line":"            let rand = Account::rand();","counters":[]},{"line":"            let hash = rand.hash();","counters":[]},{"line":"","counters":[]},{"line":"            let bytes = Account::serialize(&rand);","counters":[]},{"line":"            let rand2: Account = Account::deserialize(&bytes);","counters":[]},{"line":"","counters":[]},{"line":"            assert_eq!(hash, rand2.hash());","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(not(target_family = \"wasm\"))] // Use multiple threads","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_rand_tree() {","counters":[]},{"line":"        use rayon::prelude::*;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(20);","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(1000);","counters":[]},{"line":"","counters":[]},{"line":"        const NACCOUNTS: usize = 1000;","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let rand = Account::rand();","counters":[]},{"line":"            accounts.push(rand);","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let pool = rayon::ThreadPoolBuilder::new()","counters":[]},{"line":"            .num_threads(16)","counters":[]},{"line":"            .build()","counters":[]},{"line":"            .unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        let hashes = pool.install(|| {","counters":[]},{"line":"            accounts","counters":[]},{"line":"                .par_iter()","counters":[]},{"line":"                .map(|acc| acc.hash())","counters":[]},{"line":"                .collect::<Vec<_>>()","counters":[]},{"line":"        });","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(hashes.len(), NACCOUNTS);","counters":[]},{"line":"        elog!(","counters":[]},{"line":"            \"elapsed to hash accounts in 16 threads: {:?}\",","counters":[]},{"line":"            now.elapsed(),","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        let mut hashes = Vec::with_capacity(accounts.len());","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        for account in accounts.iter() {","counters":[]},{"line":"            hashes.push(account.hash());","counters":[]},{"line":"        }","counters":[]},{"line":"        assert_eq!(hashes.len(), NACCOUNTS);","counters":[]},{"line":"        elog!(\"elapsed to hash accounts in 1 thread: {:?}\", now.elapsed(),);","counters":[]},{"line":"","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        for account in accounts.into_iter() {","counters":[]},{"line":"            let id = account.id();","counters":[]},{"line":"            db.get_or_create_account(id, account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"        assert_eq!(db.naccounts(), NACCOUNTS);","counters":[]},{"line":"        elog!(\"elapsed to insert in tree: {:?}\", now.elapsed());","counters":[]},{"line":"","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        db.root_hash();","counters":[]},{"line":"        elog!(\"root hash computed in {:?}\", now.elapsed());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_verify_merkle_path() {","counters":[]},{"line":"        let mut account = Account::empty();","counters":[]},{"line":"        account.token_id = 202.into();","counters":[]},{"line":"        account.token_symbol = TokenSymbol::from(\"token\".to_string());","counters":[]},{"line":"","counters":[]},{"line":"        let f = |s: &str| Fp::from_str(s).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        let merkle_path = [","counters":[]},{"line":"            MerklePath::Right(f(","counters":[]},{"line":"                \"18227536250766436420332506719307927763848621557295827586492752720030361639151\",","counters":[]},{"line":"            )),","counters":[]},{"line":"            MerklePath::Left(f(","counters":[]},{"line":"                \"19058089777055582893709373756417201639841391101434051152781561397928725072682\",","counters":[]},{"line":"            )),","counters":[]},{"line":"            MerklePath::Left(f(","counters":[]},{"line":"                \"14567363183521815157220528341758405505341431484217567976728226651987143469014\",","counters":[]},{"line":"            )),","counters":[]},{"line":"            MerklePath::Left(f(","counters":[]},{"line":"                \"24964477018986196734411365850696768955131362119835160146013237098764675419844\",","counters":[]},{"line":"            )),","counters":[]},{"line":"        ];","counters":[]},{"line":"","counters":[]},{"line":"        let root_hash = verify_merkle_path(&account, &merkle_path[..]);","counters":[]},{"line":"        let expected_root_hash =","counters":[]},{"line":"            f(\"15669071938119177277046978685444858793777121704378331620682194305905804366005\");","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(root_hash, expected_root_hash);","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]}]}