{"filename":"src/lib/fields_derivers_json/fields_derivers_json.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Fieldslib","counters":[]},{"line":"","counters":[]},{"line":"module To_yojson = struct","counters":[]},{"line":"  module Input = struct","counters":[]},{"line":"    type ('input_type, 'a, 'c) t =","counters":[]},{"line":"      < to_json : ('input_type -> Yojson.Safe.t) ref","counters":[]},{"line":"      ; contramap : ('c -> 'input_type) ref","counters":[]},{"line":"      ; skip : bool ref","counters":[]},{"line":"      ; .. >","counters":[]},{"line":"      as","counters":[]},{"line":"      'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Accumulator = struct","counters":[]},{"line":"    type ('input_type, 'a, 'c) t =","counters":[]},{"line":"      < to_json_accumulator :","counters":[]},{"line":"          (string * ('input_type -> Yojson.Safe.t)) option list ref","counters":[]},{"line":"      ; .. >","counters":[]},{"line":"      as","counters":[]},{"line":"      'a","counters":[]},{"line":"      constraint ('input_type, 'a, 'c) t = ('input_type, 'a, 'c) Input.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let add_field ~t_fields_annots t_field field acc =","counters":[]},{"line":"    let annotations =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"        (Field.name field)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    in","counters":[]},{"line":"    let rest = !(acc#to_json_accumulator) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    acc#to_json_accumulator :=","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ( if annotations.skip || !(t_field#skip) then None","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      else","counters":[]},{"line":"        ( Option.value annotations.name","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            ~default:(Fields_derivers.name_under_to_camel field)","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"        , fun x -> !(t_field#to_json) (!(t_field#contramap) (Field.get field x))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"        )","counters":[]},{"line":"        |> Option.return )","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"      :: rest ;","counters":[]},{"line":"    ((fun _ -> failwith \"Unused\"), acc)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  let finish (_creator, obj) =","counters":[]},{"line":"    let to_json_accumulator = !(obj#to_json_accumulator) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#to_json :=","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"       fun t ->","counters":[]},{"line":"         `Assoc","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           ( List.filter_map to_json_accumulator","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"               ~f:(Option.map ~f:(fun (name, f) -> (name, f t)))","counters":[{"col_start":51,"col_end":51,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"           |> List.rev ) ) ;","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let skip obj =","counters":[]},{"line":"    obj#skip := true ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#to_json :=","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"       fun _ -> failwith \"Unexpected: This obj#to_json should be skipped\" ) ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let int obj =","counters":[]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#to_json := fun x -> `Int x) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let string obj =","counters":[]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#to_json := fun x -> `String x) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let bool obj =","counters":[]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#to_json := fun x -> `Bool x) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let list x obj =","counters":[]},{"line":"    obj#contramap := List.map ~f:!(x#contramap) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    (obj#to_json := fun a -> `List (List.map ~f:!(x#to_json) a)) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let option x obj =","counters":[]},{"line":"    obj#contramap := Option.map ~f:!(x#contramap) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"    (obj#to_json :=","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"       fun a_opt -> match a_opt with Some a -> !(x#to_json) a | None -> `Null ) ;","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let contramap ~f x obj =","counters":[]},{"line":"    (obj#contramap := fun a -> !(x#contramap) (f a)) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    obj#to_json := !(x#to_json) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    obj","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Of_yojson = struct","counters":[]},{"line":"  module Input = struct","counters":[]},{"line":"    type ('input_type, 'a, 'c) t =","counters":[]},{"line":"      < of_json : (Yojson.Safe.t -> 'input_type) ref","counters":[]},{"line":"      ; map : ('input_type -> 'c) ref","counters":[]},{"line":"      ; skip : bool ref","counters":[]},{"line":"      ; .. >","counters":[]},{"line":"      as","counters":[]},{"line":"      'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Creator = struct","counters":[]},{"line":"    type ('input_type, 'a, 'c) t =","counters":[]},{"line":"      < of_json_creator : Yojson.Safe.t String.Map.t ref ; .. > as 'a","counters":[]},{"line":"      constraint ('input_type, 'a, 'c) t = ('input_type, 'a, 'c) Input.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  exception Field_not_found of string","counters":[]},{"line":"","counters":[]},{"line":"  let add_field ?skip_data ~t_fields_annots :","counters":[]},{"line":"      ('t, 'a, 'c) Input.t -> 'field -> 'obj -> 'creator * 'obj =","counters":[]},{"line":"   fun t_field field acc_obj ->","counters":[{"col_start":3,"col_end":3,"count":0}]},{"line":"    let annotations =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"        (Field.name field)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    in","counters":[]},{"line":"    let creator finished_obj =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let map = !(finished_obj#of_json_creator) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      !(t_field#map)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        ( if annotations.skip || !(t_field#skip) then","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"          match skip_data with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Some x ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              x","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith","counters":[]},{"line":"                \"If you are skipping a field in of_json but intend on building \\","counters":[]},{"line":"                 this field, you must provide skip_data to add_field!\"","counters":[]},{"line":"        else","counters":[]},{"line":"          !(t_field#of_json)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"            (let name =","counters":[]},{"line":"               Option.value annotations.name","counters":[]},{"line":"                 ~default:(Fields_derivers.name_under_to_camel field)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"             in","counters":[]},{"line":"             match Map.find map name with","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             | None ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 raise (Field_not_found name)","counters":[]},{"line":"             | Some x ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 x ) )","counters":[]},{"line":"    in","counters":[]},{"line":"    (creator, acc_obj)","counters":[]},{"line":"","counters":[]},{"line":"  exception Json_not_object","counters":[]},{"line":"","counters":[]},{"line":"  let finish (creator, obj) =","counters":[]},{"line":"    let of_json json =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match json with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Assoc pairs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          obj#of_json_creator := String.Map.of_alist_exn pairs ;","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          creator obj","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          raise Json_not_object","counters":[]},{"line":"    in","counters":[]},{"line":"    obj#map := Fn.id ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    obj#of_json := of_json ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  exception Invalid_json_scalar of [ `Int | `String | `Bool | `List ]","counters":[]},{"line":"","counters":[]},{"line":"  let skip obj =","counters":[]},{"line":"    obj#contramap := Fn.id ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    (obj#of_json :=","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"       fun _ -> failwith \"Unexpected: This obj#of_json should be skipped\" ) ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let int obj =","counters":[]},{"line":"    (obj#of_json :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"       function `Int x -> x | _ -> raise (Invalid_json_scalar `Int) ) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    obj#map := Fn.id ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let string obj =","counters":[]},{"line":"    (obj#of_json :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"       function `String x -> x | _ -> raise (Invalid_json_scalar `String) ) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    obj#map := Fn.id ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let bool obj =","counters":[]},{"line":"    (obj#of_json :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"       function `Bool x -> x | _ -> raise (Invalid_json_scalar `Bool) ) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    obj#map := Fn.id ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let list x obj =","counters":[]},{"line":"    (obj#of_json :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"       function","counters":[]},{"line":"       | `List xs ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           List.map xs ~f:!(x#of_json)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"       | _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           raise (Invalid_json_scalar `List) ) ;","counters":[]},{"line":"    obj#map := List.map ~f:!(x#map) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let option x obj =","counters":[]},{"line":"    (obj#of_json :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"       function `Null -> None | other -> Some (!(x#of_json) other) ) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    obj#map := Option.map ~f:!(x#map) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let map ~f x obj =","counters":[]},{"line":"    (obj#map := fun a -> f (!(x#map) a)) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    obj#of_json := !(x#of_json) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    obj","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Test\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    type t = { foo_hello : int; skipped : int [@skip]; bar : string list }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    [@@deriving annot, fields]","counters":[]},{"line":"","counters":[]},{"line":"    let v = { foo_hello = 1; skipped = 0; bar = [ \"baz1\"; \"baz2\" ] }","counters":[]},{"line":"","counters":[]},{"line":"    let m =","counters":[]},{"line":"      {json|{ fooHello: 1, bar: [\"baz1\", \"baz2\"] }|json}","counters":[]},{"line":"      |> Yojson.Safe.from_string","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"    module Yojson_version = struct","counters":[]},{"line":"      type t = { foo_hello : int [@key \"fooHello\"]; bar : string list }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      [@@deriving yojson]","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"      let v = { foo_hello = 1; bar = [ \"baz1\"; \"baz2\" ] }","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let deriver () =","counters":[]},{"line":"      let to_json = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      let of_json = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      let to_json_accumulator = ref [] in","counters":[]},{"line":"      let of_json_creator = ref String.Map.empty in","counters":[]},{"line":"      let map = ref Fn.id in","counters":[]},{"line":"      let contramap = ref Fn.id in","counters":[]},{"line":"      let skip = ref false in","counters":[]},{"line":"      object","counters":[]},{"line":"        method skip = skip","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        method to_json = to_json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"        method map = map","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        method contramap = contramap","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        method of_json = of_json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"        method to_json_accumulator = to_json_accumulator","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"        method of_json_creator = of_json_creator","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"    let o () = deriver ()","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"    (* Explanation: Fields.make_creator roughly executes the following code:","counters":[]},{"line":"","counters":[]},{"line":"       let make_creator ~foo_hello ~bar obj =","counters":[]},{"line":"         (* Fieldslib.Field is actually a little more complicated *)","counters":[]},{"line":"         let field_foo = Field { name = \"foo_hello\" ; getter = (fun o -> o.foo_hello) } in","counters":[]},{"line":"         let field_bar = Field { name = \"bar\"; getter = (fun o -> o.bar) } in","counters":[]},{"line":"         let creator_foo, obj = foo_hello field_foo obj in","counters":[]},{"line":"         let creator_bar, obj = bar field_bar obj in","counters":[]},{"line":"         let creator finished_obj =","counters":[]},{"line":"           { foo_hello = creator_foo finished_obj ; bar = creator_bar finished_obj }","counters":[]},{"line":"         in","counters":[]},{"line":"         (creator, obj)","counters":[]},{"line":"    *)","counters":[]},{"line":"","counters":[]},{"line":"    let to_json obj =","counters":[]},{"line":"      let open To_yojson in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) x fd acc = add_field ~t_fields_annots (x @@ o ()) fd acc in","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"      Fields.make_creator obj ~foo_hello:!.int ~skipped:!.skip","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        ~bar:!.(list @@ string @@ o ())","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      |> finish","counters":[]},{"line":"","counters":[]},{"line":"    let of_json obj =","counters":[]},{"line":"      let open Of_yojson in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) ?skip_data x fd acc =","counters":[]},{"line":"        add_field ?skip_data ~t_fields_annots (x @@ o ()) fd acc","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      in","counters":[]},{"line":"      Fields.make_creator obj ~foo_hello:!.int","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        ~skipped:(( !. ) ~skip_data:0 skip)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        ~bar:!.(list @@ string @@ o ())","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      |> finish","counters":[]},{"line":"","counters":[]},{"line":"    let both_json obj =","counters":[]},{"line":"      let _a = to_json obj in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let _b = of_json obj in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      obj","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let full_derivers = both_json @@ o ()","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"folding creates a yojson object we expect (modulo camel \\","counters":[]},{"line":"                   casing)\" =","counters":[]},{"line":"      [%test_eq: string]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"        (Yojson_version.to_yojson Yojson_version.v |> Yojson.Safe.to_string)","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        (!(full_derivers#to_json) v |> Yojson.Safe.to_string)","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"unfolding creates a yojson object we expect\" =","counters":[]},{"line":"      let expected =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Yojson_version.of_yojson m |> Result.ok |> Option.value_exn","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      in","counters":[]},{"line":"      let actual = !(full_derivers#of_json) m in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"      [%test_eq: string list] expected.bar actual.bar ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      [%test_eq: int] expected.foo_hello actual.foo_hello","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"round trip\" =","counters":[]},{"line":"      [%test_eq: string]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"        ( !(full_derivers#to_json) (!(full_derivers#of_json) m)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        |> Yojson.Safe.to_string )","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        (m |> Yojson.Safe.to_string)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}