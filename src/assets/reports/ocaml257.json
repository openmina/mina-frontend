{"filename":"src/lib/runtime_config/runtime_config.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Fork_config = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { previous_state_hash : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; previous_length : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; previous_global_slot : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson, dhall_type, bin_io_unversioned]","counters":[{"col_start":52,"col_end":52,"count":4}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let yojson_strip_fields ~keep_fields = function","counters":[]},{"line":"  | `Assoc l ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Assoc","counters":[]},{"line":"        (List.filter l ~f:(fun (fld, _) ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"             Array.mem ~equal:String.equal keep_fields fld ) )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  | json ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      json","counters":[]},{"line":"","counters":[]},{"line":"let yojson_rename_fields ~alternates = function","counters":[]},{"line":"  | `Assoc l ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Assoc","counters":[]},{"line":"        (List.map l ~f:(fun (fld, json) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"             let fld =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Option.value ~default:fld","counters":[]},{"line":"                 (Array.find_map alternates ~f:(fun (alt, orig) ->","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                      if String.equal fld alt then Some orig else None ) )","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"             in","counters":[]},{"line":"             (fld, json) ) )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  | json ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      json","counters":[]},{"line":"","counters":[]},{"line":"let opt_fallthrough ~default x2 =","counters":[]},{"line":"  Option.value_map ~default x2 ~f:(fun x -> Some x)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"let result_opt ~f x =","counters":[]},{"line":"  match x with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Some x ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Result.map ~f:Option.some (f x)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Result.return None","counters":[]},{"line":"","counters":[]},{"line":"let dump_on_error yojson x =","counters":[]},{"line":"  Result.map_error x ~f:(fun str ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      str ^ \"\\n\\nCould not parse JSON:\\n\" ^ Yojson.Safe.pretty_to_string yojson )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"let of_yojson_generic ~fields of_yojson json =","counters":[]},{"line":"  dump_on_error json @@ of_yojson","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"  @@ yojson_strip_fields ~keep_fields:fields json","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"module Json_layout = struct","counters":[]},{"line":"  module Accounts = struct","counters":[]},{"line":"    module Single = struct","counters":[]},{"line":"      module Timed = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"          { initial_minimum_balance : Currency.Balance.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          ; cliff_time : Mina_numbers.Global_slot.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          ; cliff_amount : Currency.Amount.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          ; vesting_period : Mina_numbers.Global_slot.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          ; vesting_increment : Currency.Amount.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving yojson, fields, dhall_type, sexp]","counters":[]},{"line":"","counters":[]},{"line":"        let fields = Fields.names |> Array.of_list","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"","counters":[]},{"line":"        let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Permissions = struct","counters":[]},{"line":"        module Auth_required = struct","counters":[]},{"line":"          type t = None | Either | Proof | Signature | Impossible","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":15,"col_end":15,"count":2},{"col_start":19,"col_end":19,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          [@@deriving dhall_type, sexp, bin_io_unversioned]","counters":[{"col_start":58,"col_end":58,"count":4}]},{"line":"","counters":[]},{"line":"          let to_yojson = function","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                `String \"none\"","counters":[]},{"line":"            | Either ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                `String \"either\"","counters":[]},{"line":"            | Proof ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                `String \"proof\"","counters":[]},{"line":"            | Signature ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                `String \"signature\"","counters":[]},{"line":"            | Impossible ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                `String \"impossible\"","counters":[]},{"line":"","counters":[]},{"line":"          let of_yojson = function","counters":[]},{"line":"            | `String s -> (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                match String.lowercase s with","counters":[]},{"line":"                | \"none\" ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok None","counters":[]},{"line":"                | \"either\" ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok Either","counters":[]},{"line":"                | \"proof\" ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok Proof","counters":[]},{"line":"                | \"signature\" ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok Signature","counters":[]},{"line":"                | \"impossible\" ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok Impossible","counters":[]},{"line":"                | _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Error (sprintf \"Invalid Auth_required.t value: %s\" s) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Error","counters":[]},{"line":"                  \"Runtime_config.Json_Account.Single.Permissions.Auth_Required.t\"","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { edit_state : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; send : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; receive : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          ; set_delegate : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ; set_permissions : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          ; set_verification_key : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"          ; set_zkapp_uri : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; edit_sequence_state : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          ; set_token_symbol : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"          ; increment_nonce : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          ; set_voting_for : Auth_required.t [@default None]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving yojson, fields, dhall_type, sexp, bin_io_unversioned]","counters":[{"col_start":72,"col_end":72,"count":4}]},{"line":"","counters":[]},{"line":"        let fields = Fields.names |> Array.of_list","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"","counters":[]},{"line":"        let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Token_permissions = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { token_owned : bool [@default false]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          ; account_disabled : bool [@default false]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"          ; disable_new_accounts : bool [@default false]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving yojson, fields, dhall_type, sexp, bin_io_unversioned]","counters":[{"col_start":72,"col_end":72,"count":4}]},{"line":"","counters":[]},{"line":"        let fields = Fields.names |> Array.of_list","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"","counters":[]},{"line":"        let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Zkapp_account = struct","counters":[]},{"line":"        module Field = struct","counters":[]},{"line":"          type t = Snark_params.Tick.Field.t","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"          [@@deriving sexp, bin_io_unversioned]","counters":[{"col_start":46,"col_end":46,"count":4}]},{"line":"","counters":[]},{"line":"          (* can't be automatically derived *)","counters":[]},{"line":"          let dhall_type = Ppx_dhall_type.Dhall_type.Text","counters":[]},{"line":"","counters":[]},{"line":"          let to_yojson t = `String (Snark_params.Tick.Field.to_string t)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"          let of_yojson = function","counters":[]},{"line":"            | `String s ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Ok (Snark_params.Tick.Field.of_string s)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Error","counters":[]},{"line":"                  \"Invalid JSON in runtime config Zkapp_account.state, \\","counters":[]},{"line":"                   expected string\"","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        module Verification_key = struct","counters":[]},{"line":"          type t = Pickles.Side_loaded.Verification_key.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"          [@@deriving sexp, bin_io_unversioned]","counters":[{"col_start":46,"col_end":46,"count":4}]},{"line":"","counters":[]},{"line":"          (* can't be automatically derived *)","counters":[]},{"line":"          let dhall_type = Ppx_dhall_type.Dhall_type.Text","counters":[]},{"line":"","counters":[]},{"line":"          let to_yojson t =","counters":[]},{"line":"            `String (Pickles.Side_loaded.Verification_key.to_base64 t)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"          let of_yojson = function","counters":[]},{"line":"            | `String s ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let vk_or_err =","counters":[]},{"line":"                  Pickles.Side_loaded.Verification_key.of_base64 s","counters":[]},{"line":"                in","counters":[]},{"line":"                Result.map_error vk_or_err ~f:Error.to_string_hum","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Error","counters":[]},{"line":"                  \"Invalid JSON in runtime config \\","counters":[]},{"line":"                   Zkapp_account.verification_key, expected string\"","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        module Zkapp_version = struct","counters":[]},{"line":"          type t = Mina_numbers.Zkapp_version.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"          [@@deriving bin_io_unversioned]","counters":[{"col_start":40,"col_end":40,"count":4}]},{"line":"","counters":[]},{"line":"          include (","counters":[]},{"line":"            Mina_numbers.Zkapp_version :","counters":[]},{"line":"              module type of Mina_numbers.Zkapp_version with type t := t )","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { state : Field.t list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"          ; verification_key : Verification_key.t option","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          ; zkapp_version : Zkapp_version.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; sequence_state : Field.t list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; last_sequence_slot : int","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          ; proved_state : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; zkapp_uri : string","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving sexp, fields, dhall_type, yojson, bin_io_unversioned]","counters":[{"col_start":72,"col_end":72,"count":4}]},{"line":"","counters":[]},{"line":"        let fields = Fields.names |> Array.of_list","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"","counters":[]},{"line":"        let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        { pk : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        ; sk : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        ; balance : Currency.Balance.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; delegate : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        ; timing : Timed.t option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        ; token : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"        ; token_permissions : Token_permissions.t option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        ; nonce : Mina_numbers.Account_nonce.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              [@default Mina_numbers.Account_nonce.zero]","counters":[]},{"line":"        ; receipt_chain_hash : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; voting_for : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; zkapp : Zkapp_account.t option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; permissions : Permissions.t option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; token_symbol : string option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, fields, yojson, dhall_type]","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"      let fields = Fields.names |> Array.of_list","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"","counters":[]},{"line":"      let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"      let default : t =","counters":[]},{"line":"        { pk = None","counters":[]},{"line":"        ; sk = None","counters":[]},{"line":"        ; balance = Currency.Balance.zero","counters":[]},{"line":"        ; delegate = None","counters":[]},{"line":"        ; timing = None","counters":[]},{"line":"        ; token = None","counters":[]},{"line":"        ; token_permissions = None","counters":[]},{"line":"        ; nonce = Mina_numbers.Account_nonce.zero","counters":[]},{"line":"        ; receipt_chain_hash = None","counters":[]},{"line":"        ; voting_for = None","counters":[]},{"line":"        ; zkapp = None","counters":[]},{"line":"        ; permissions = None","counters":[]},{"line":"        ; token_symbol = None","counters":[]},{"line":"        }","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t = Single.t list [@@deriving yojson, dhall_type]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Ledger = struct","counters":[]},{"line":"    module Balance_spec = struct","counters":[]},{"line":"      type t = { number : int; balance : Currency.Balance.t }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"      [@@deriving yojson, dhall_type]","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { accounts : Accounts.t option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; num_accounts : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; balances : Balance_spec.t list [@default []]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      ; hash : string option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      ; name : string option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      ; add_genesis_winner : bool option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, fields, dhall_type]","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let fields = Fields.names |> Array.of_list","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"    let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Proof_keys = struct","counters":[]},{"line":"    module Transaction_capacity = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { log_2 : int option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"              [@default None] [@key \"2_to_the\"] [@dhall_type.key \"two_to_the\"]","counters":[]},{"line":"        ; txns_per_second_x10 : int option [@default None]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving yojson, dhall_type]","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"      (* we don't deriving the field names here, because the first one differs from the","counters":[]},{"line":"         field in the record type","counters":[]},{"line":"      *)","counters":[]},{"line":"      let fields = [| \"2_to_the\"; \"txns_per_second_x10\" |]","counters":[]},{"line":"","counters":[]},{"line":"      let alternates = [| (\"two_to_the\", \"2_to_the\"); (\"log_2\", \"2_to_the\") |]","counters":[]},{"line":"","counters":[]},{"line":"      let of_yojson json =","counters":[]},{"line":"        json","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        |> yojson_rename_fields ~alternates","counters":[]},{"line":"        |> yojson_strip_fields ~keep_fields:fields","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        |> of_yojson |> dump_on_error json","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { level : string option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"      ; sub_windows_per_window : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"      ; ledger_depth : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; work_delay : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      ; block_window_duration_ms : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      ; transaction_capacity : Transaction_capacity.t option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      ; coinbase_amount : Currency.Amount.t option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      ; supercharged_coinbase_factor : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      ; account_creation_fee : Currency.Fee.t option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      ; fork : Fork_config.t option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, fields, dhall_type]","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let fields = Fields.names |> Array.of_list","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"    let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Genesis = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { k : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"      ; delta : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; slots_per_epoch : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; slots_per_sub_window : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      ; genesis_state_timestamp : string option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, fields, dhall_type]","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let fields = Fields.names |> Array.of_list","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"    let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Daemon = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { txpool_max_size : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; peer_list_url : string option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      ; transaction_expiry_hr : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      ; zkapp_proof_update_cost : float option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      ; zkapp_signed_single_update_cost : float option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      ; zkapp_signed_pair_update_cost : float option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      ; zkapp_transaction_cost_limit : float option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      ; max_event_elements : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"      ; max_sequence_event_elements : int option [@default None]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, fields, dhall_type]","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let fields = Fields.names |> Array.of_list","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"    let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Epoch_data = struct","counters":[]},{"line":"    module Data = struct","counters":[]},{"line":"      type t = { accounts : Accounts.t; seed : string }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      [@@deriving yojson, fields, dhall_type]","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"      let fields = Fields.names |> Array.of_list","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"","counters":[]},{"line":"      let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { staking : Data.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"      ; next : (Data.t option[@default None]) (*If None then next = staking*)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, fields, dhall_type]","counters":[]},{"line":"","counters":[]},{"line":"    let fields = Fields.names |> Array.of_list","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"    let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":7,"col_end":7,"count":0}]},{"line":"    { daemon : Daemon.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; genesis : Genesis.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    ; proof : Proof_keys.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; ledger : Ledger.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; epoch_data : Epoch_data.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson, fields, dhall_type]","counters":[]},{"line":"","counters":[]},{"line":"  let fields = Fields.names |> Array.of_list","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"","counters":[]},{"line":"  let of_yojson json = of_yojson_generic ~fields of_yojson json","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** JSON representation:","counters":[]},{"line":"","counters":[]},{"line":"  { \"daemon\":","counters":[]},{"line":"      { \"txpool_max_size\": 1","counters":[]},{"line":"      , \"peer_list_url\": \"https://www.example.com/peer-list.txt\" }","counters":[]},{"line":"  , \"genesis\": { \"k\": 1, \"delta\": 1 }","counters":[]},{"line":"  , \"proof\":","counters":[]},{"line":"      { \"level\": \"check\"","counters":[]},{"line":"      , \"sub_windows_per_window\": 8","counters":[]},{"line":"      , \"ledger_depth\": 14","counters":[]},{"line":"      , \"work_delay\": 2","counters":[]},{"line":"      , \"block_window_duration_ms\": 120000","counters":[]},{"line":"      , \"transaction_capacity\": {\"txns_per_second_x10\": 2}","counters":[]},{"line":"      , \"coinbase_amount\": \"200\"","counters":[]},{"line":"      , \"supercharged_coinbase_factor\": 2","counters":[]},{"line":"      , \"account_creation_fee\": \"0.001\" }","counters":[]},{"line":"  , \"ledger\":","counters":[]},{"line":"      { \"name\": \"release\"","counters":[]},{"line":"      , \"accounts\":","counters":[]},{"line":"          [ { \"pk\": \"public_key\"","counters":[]},{"line":"            , \"sk\": \"secret_key\"","counters":[]},{"line":"            , \"balance\": \"0.000600000\"","counters":[]},{"line":"            , \"delegate\": \"public_key\" }","counters":[]},{"line":"          , { \"pk\": \"public_key\"","counters":[]},{"line":"            , \"sk\": \"secret_key\"","counters":[]},{"line":"            , \"balance\": \"0.000000000\"","counters":[]},{"line":"            , \"delegate\": \"public_key\" } ]","counters":[]},{"line":"      , \"hash\": \"root_hash\"","counters":[]},{"line":"      , \"num_accounts\": 10","counters":[]},{"line":"      , \"genesis_state_timestamp\": \"2000-00-00 12:00:00+0100\" } }","counters":[]},{"line":"","counters":[]},{"line":"  All fields are optional *except*:","counters":[]},{"line":"  * each account in [ledger.accounts] must have a [balance] field","counters":[]},{"line":"  * if [ledger] is present, it must feature one of [name], [accounts] or [hash].","counters":[]},{"line":"","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"module Accounts = struct","counters":[]},{"line":"  module Single = struct","counters":[]},{"line":"    module Timed = struct","counters":[]},{"line":"      type t = Json_layout.Accounts.Single.Timed.t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { initial_minimum_balance : Currency.Balance.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        ; cliff_time : Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"        ; cliff_amount : Currency.Amount.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"        ; vesting_period : Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; vesting_increment : Currency.Amount.Stable.Latest.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving bin_io_unversioned, sexp]","counters":[{"col_start":42,"col_end":42,"count":4}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Permissions = Json_layout.Accounts.Single.Permissions","counters":[]},{"line":"    module Token_permissions = Json_layout.Accounts.Single.Token_permissions","counters":[]},{"line":"    module Zkapp_account = Json_layout.Accounts.Single.Zkapp_account","counters":[]},{"line":"","counters":[]},{"line":"    type t = Json_layout.Accounts.Single.t =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { pk : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      ; sk : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      ; balance : Currency.Balance.Stable.Latest.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      ; delegate : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      ; timing : Timed.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"      ; token : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      ; token_permissions : Token_permissions.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      ; nonce : Mina_numbers.Account_nonce.Stable.Latest.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      ; receipt_chain_hash : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; voting_for : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      ; zkapp : Zkapp_account.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      ; permissions : Permissions.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      ; token_symbol : string option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving bin_io_unversioned, sexp]","counters":[{"col_start":40,"col_end":40,"count":4}]},{"line":"","counters":[]},{"line":"    let to_json_layout : t -> Json_layout.Accounts.Single.t = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let of_json_layout : Json_layout.Accounts.Single.t -> (t, string) Result.t =","counters":[]},{"line":"      Result.return","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson x = Json_layout.Accounts.Single.to_yojson (to_json_layout x)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"    let of_yojson json =","counters":[]},{"line":"      Result.bind ~f:of_json_layout (Json_layout.Accounts.Single.of_yojson json)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"    let default = Json_layout.Accounts.Single.default","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type single = Single.t =","counters":[]},{"line":"    { pk : string option","counters":[]},{"line":"    ; sk : string option","counters":[]},{"line":"    ; balance : Currency.Balance.t","counters":[]},{"line":"    ; delegate : string option","counters":[]},{"line":"    ; timing : Single.Timed.t option","counters":[]},{"line":"    ; token : string option","counters":[]},{"line":"    ; token_permissions : Single.Token_permissions.t option","counters":[]},{"line":"    ; nonce : Mina_numbers.Account_nonce.t","counters":[]},{"line":"    ; receipt_chain_hash : string option","counters":[]},{"line":"    ; voting_for : string option","counters":[]},{"line":"    ; zkapp : Single.Zkapp_account.t option","counters":[]},{"line":"    ; permissions : Single.Permissions.t option","counters":[]},{"line":"    ; token_symbol : string option","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  type t = Single.t list [@@deriving bin_io_unversioned]","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":1},{"col_start":55,"col_end":55,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout : t -> Json_layout.Accounts.t =","counters":[]},{"line":"    List.map ~f:Single.to_json_layout","counters":[]},{"line":"","counters":[]},{"line":"  let of_json_layout (t : Json_layout.Accounts.t) : (t, string) Result.t =","counters":[]},{"line":"    let exception Stop of string in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    try","counters":[]},{"line":"      Result.return","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      @@ List.map t ~f:(fun x ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"             match Single.of_json_layout x with","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             | Ok x ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 x","counters":[]},{"line":"             | Error err ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 raise (Stop err) )","counters":[]},{"line":"    with Stop err -> Error err","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Accounts.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Accounts.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Ledger = struct","counters":[]},{"line":"  type base =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":10,"col_end":10,"count":2}]},{"line":"    | Named of string  (** One of the named ledgers in [Genesis_ledger] *)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Accounts of Accounts.t  (** A ledger generated from the given accounts *)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Hash of string  (** The ledger with the given root hash *)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { base : base","counters":[]},{"line":"    ; num_accounts : int option","counters":[]},{"line":"    ; balances : (int * Currency.Balance.Stable.Latest.t) list","counters":[]},{"line":"    ; hash : string option","counters":[]},{"line":"    ; name : string option","counters":[]},{"line":"    ; add_genesis_winner : bool option","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout","counters":[]},{"line":"      { base; num_accounts; balances; hash; name; add_genesis_winner } :","counters":[]},{"line":"      Json_layout.Ledger.t =","counters":[]},{"line":"    let balances =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map balances ~f:(fun (number, balance) ->","counters":[]},{"line":"          { Json_layout.Ledger.Balance_spec.number; balance } )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let without_base : Json_layout.Ledger.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { accounts = None","counters":[]},{"line":"      ; num_accounts","counters":[]},{"line":"      ; balances","counters":[]},{"line":"      ; hash","counters":[]},{"line":"      ; name","counters":[]},{"line":"      ; add_genesis_winner","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    match base with","counters":[]},{"line":"    | Named name ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { without_base with name = Some name }","counters":[]},{"line":"    | Accounts accounts ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { without_base with accounts = Some (Accounts.to_json_layout accounts) }","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"    | Hash hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { without_base with hash = Some hash }","counters":[]},{"line":"","counters":[]},{"line":"  let of_json_layout","counters":[]},{"line":"      ({ accounts; num_accounts; balances; hash; name; add_genesis_winner } :","counters":[]},{"line":"        Json_layout.Ledger.t ) : (t, string) Result.t =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map base =","counters":[]},{"line":"      match accounts with","counters":[]},{"line":"      | Some accounts ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%map accounts = Accounts.of_json_layout accounts in","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"          Accounts accounts","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | None -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match name with","counters":[]},{"line":"          | Some name ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return (Named name)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          | None -> (","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match hash with","counters":[]},{"line":"              | Some hash ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  return (Hash hash)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              | None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Error","counters":[]},{"line":"                    \"Runtime_config.Ledger.of_json_layout: Expected a field \\","counters":[]},{"line":"                     'accounts', 'name' or 'hash'\" ) )","counters":[]},{"line":"    in","counters":[]},{"line":"    let balances =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map balances","counters":[]},{"line":"        ~f:(fun { Json_layout.Ledger.Balance_spec.number; balance } ->","counters":[]},{"line":"          (number, balance) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    { base; num_accounts; balances; hash; name; add_genesis_winner }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Ledger.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Ledger.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Proof_keys = struct","counters":[]},{"line":"  module Level = struct","counters":[]},{"line":"    type t = Full | Check | None [@@deriving bin_io_unversioned, equal]","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2},{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":70,"col_end":70,"count":4}]},{"line":"","counters":[]},{"line":"    let to_string = function","counters":[]},{"line":"      | Full ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          \"full\"","counters":[]},{"line":"      | Check ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          \"check\"","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          \"none\"","counters":[]},{"line":"","counters":[]},{"line":"    let of_string str =","counters":[]},{"line":"      match String.lowercase str with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | \"full\" ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok Full","counters":[]},{"line":"      | \"check\" ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok Check","counters":[]},{"line":"      | \"none\" ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok None","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error \"Expected one of 'full', 'check', or 'none'\"","counters":[]},{"line":"","counters":[]},{"line":"    let to_json_layout = to_string","counters":[]},{"line":"","counters":[]},{"line":"    let of_json_layout str =","counters":[]},{"line":"      Result.map_error (of_string str) ~f:(fun err ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          \"Runtime_config.Proof_keys.Level.of_json_layout: Could not decode \\","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"           field 'level'. \" ^ err )","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson x = `String (to_json_layout x)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let of_yojson = function","counters":[]},{"line":"      | `String str ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          of_json_layout str","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error","counters":[]},{"line":"            \"Runtime_config.Proof_keys.Level.of_json_layout: Expected the \\","counters":[]},{"line":"             field 'level' to contain a string\"","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Transaction_capacity = struct","counters":[]},{"line":"    type t = Log_2 of int | Txns_per_second_x10 of int","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2},{"col_start":13,"col_end":13,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    [@@deriving bin_io_unversioned]","counters":[{"col_start":34,"col_end":34,"count":4}]},{"line":"","counters":[]},{"line":"    let to_json_layout : t -> Json_layout.Proof_keys.Transaction_capacity.t =","counters":[]},{"line":"      function","counters":[]},{"line":"      | Log_2 i ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { log_2 = Some i; txns_per_second_x10 = None }","counters":[]},{"line":"      | Txns_per_second_x10 i ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { log_2 = None; txns_per_second_x10 = Some i }","counters":[]},{"line":"","counters":[]},{"line":"    let of_json_layout :","counters":[]},{"line":"        Json_layout.Proof_keys.Transaction_capacity.t -> (t, string) Result.t =","counters":[]},{"line":"      function","counters":[]},{"line":"      | { log_2 = Some i; txns_per_second_x10 = None } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (Log_2 i)","counters":[]},{"line":"      | { txns_per_second_x10 = Some i; log_2 = None } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (Txns_per_second_x10 i)","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error","counters":[]},{"line":"            \"Runtime_config.Proof_keys.Transaction_capacity.of_json_layout: \\","counters":[]},{"line":"             Expected exactly one of the fields '2_to_the' or \\","counters":[]},{"line":"             'txns_per_second_x10'\"","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson x =","counters":[]},{"line":"      Json_layout.Proof_keys.Transaction_capacity.to_yojson (to_json_layout x)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"    let of_yojson json =","counters":[]},{"line":"      Result.bind ~f:of_json_layout","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Json_layout.Proof_keys.Transaction_capacity.of_yojson json)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"    let small : t = Log_2 2","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { level : Level.t option","counters":[]},{"line":"    ; sub_windows_per_window : int option","counters":[]},{"line":"    ; ledger_depth : int option","counters":[]},{"line":"    ; work_delay : int option","counters":[]},{"line":"    ; block_window_duration_ms : int option","counters":[]},{"line":"    ; transaction_capacity : Transaction_capacity.t option","counters":[]},{"line":"    ; coinbase_amount : Currency.Amount.Stable.Latest.t option","counters":[]},{"line":"    ; supercharged_coinbase_factor : int option","counters":[]},{"line":"    ; account_creation_fee : Currency.Fee.Stable.Latest.t option","counters":[]},{"line":"    ; fork : Fork_config.t option","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout","counters":[]},{"line":"      { level","counters":[]},{"line":"      ; sub_windows_per_window","counters":[]},{"line":"      ; ledger_depth","counters":[]},{"line":"      ; work_delay","counters":[]},{"line":"      ; block_window_duration_ms","counters":[]},{"line":"      ; transaction_capacity","counters":[]},{"line":"      ; coinbase_amount","counters":[]},{"line":"      ; supercharged_coinbase_factor","counters":[]},{"line":"      ; account_creation_fee","counters":[]},{"line":"      ; fork","counters":[]},{"line":"      } =","counters":[]},{"line":"    { Json_layout.Proof_keys.level = Option.map ~f:Level.to_json_layout level","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    ; sub_windows_per_window","counters":[]},{"line":"    ; ledger_depth","counters":[]},{"line":"    ; work_delay","counters":[]},{"line":"    ; block_window_duration_ms","counters":[]},{"line":"    ; transaction_capacity =","counters":[]},{"line":"        Option.map ~f:Transaction_capacity.to_json_layout transaction_capacity","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    ; coinbase_amount","counters":[]},{"line":"    ; supercharged_coinbase_factor","counters":[]},{"line":"    ; account_creation_fee","counters":[]},{"line":"    ; fork","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let of_json_layout","counters":[]},{"line":"      { Json_layout.Proof_keys.level","counters":[]},{"line":"      ; sub_windows_per_window","counters":[]},{"line":"      ; ledger_depth","counters":[]},{"line":"      ; work_delay","counters":[]},{"line":"      ; block_window_duration_ms","counters":[]},{"line":"      ; transaction_capacity","counters":[]},{"line":"      ; coinbase_amount","counters":[]},{"line":"      ; supercharged_coinbase_factor","counters":[]},{"line":"      ; account_creation_fee","counters":[]},{"line":"      ; fork","counters":[]},{"line":"      } =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map level = result_opt ~f:Level.of_json_layout level","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    and transaction_capacity =","counters":[]},{"line":"      result_opt ~f:Transaction_capacity.of_json_layout transaction_capacity","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    { level","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; sub_windows_per_window","counters":[]},{"line":"    ; ledger_depth","counters":[]},{"line":"    ; work_delay","counters":[]},{"line":"    ; block_window_duration_ms","counters":[]},{"line":"    ; transaction_capacity","counters":[]},{"line":"    ; coinbase_amount","counters":[]},{"line":"    ; supercharged_coinbase_factor","counters":[]},{"line":"    ; account_creation_fee","counters":[]},{"line":"    ; fork","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Proof_keys.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Proof_keys.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"  let combine t1 t2 =","counters":[]},{"line":"    { level = opt_fallthrough ~default:t1.level t2.level","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    ; sub_windows_per_window =","counters":[]},{"line":"        opt_fallthrough ~default:t1.sub_windows_per_window","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.sub_windows_per_window","counters":[]},{"line":"    ; ledger_depth = opt_fallthrough ~default:t1.ledger_depth t2.ledger_depth","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; work_delay = opt_fallthrough ~default:t1.work_delay t2.work_delay","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; block_window_duration_ms =","counters":[]},{"line":"        opt_fallthrough ~default:t1.block_window_duration_ms","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.block_window_duration_ms","counters":[]},{"line":"    ; transaction_capacity =","counters":[]},{"line":"        opt_fallthrough ~default:t1.transaction_capacity t2.transaction_capacity","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; coinbase_amount =","counters":[]},{"line":"        opt_fallthrough ~default:t1.coinbase_amount t2.coinbase_amount","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; supercharged_coinbase_factor =","counters":[]},{"line":"        opt_fallthrough ~default:t1.supercharged_coinbase_factor","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.supercharged_coinbase_factor","counters":[]},{"line":"    ; account_creation_fee =","counters":[]},{"line":"        opt_fallthrough ~default:t1.account_creation_fee t2.account_creation_fee","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; fork = opt_fallthrough ~default:t1.fork t2.fork","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Genesis = struct","counters":[]},{"line":"  type t = Json_layout.Genesis.t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { k : int option","counters":[]},{"line":"    ; delta : int option","counters":[]},{"line":"    ; slots_per_epoch : int option","counters":[]},{"line":"    ; slots_per_sub_window : int option","counters":[]},{"line":"    ; genesis_state_timestamp : string option","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout : t -> Json_layout.Genesis.t = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let of_json_layout : Json_layout.Genesis.t -> (t, string) Result.t =","counters":[]},{"line":"    Result.return","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Genesis.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Genesis.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let combine t1 t2 =","counters":[]},{"line":"    { k = opt_fallthrough ~default:t1.k t2.k","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    ; delta = opt_fallthrough ~default:t1.delta t2.delta","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    ; slots_per_epoch =","counters":[]},{"line":"        opt_fallthrough ~default:t1.slots_per_epoch t2.slots_per_epoch","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; slots_per_sub_window =","counters":[]},{"line":"        opt_fallthrough ~default:t1.slots_per_sub_window t2.slots_per_sub_window","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; genesis_state_timestamp =","counters":[]},{"line":"        opt_fallthrough ~default:t1.genesis_state_timestamp","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.genesis_state_timestamp","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Daemon = struct","counters":[]},{"line":"  type t = Json_layout.Daemon.t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { txpool_max_size : int option","counters":[]},{"line":"    ; peer_list_url : string option","counters":[]},{"line":"    ; transaction_expiry_hr : int option","counters":[]},{"line":"    ; zkapp_proof_update_cost : float option [@default None]","counters":[]},{"line":"    ; zkapp_signed_single_update_cost : float option [@default None]","counters":[]},{"line":"    ; zkapp_signed_pair_update_cost : float option [@default None]","counters":[]},{"line":"    ; zkapp_transaction_cost_limit : float option [@default None]","counters":[]},{"line":"    ; max_event_elements : int option [@default None]","counters":[]},{"line":"    ; max_sequence_event_elements : int option [@default None]","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned]","counters":[{"col_start":32,"col_end":32,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout : t -> Json_layout.Daemon.t = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let of_json_layout : Json_layout.Daemon.t -> (t, string) Result.t =","counters":[]},{"line":"    Result.return","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Daemon.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Daemon.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"  let combine t1 t2 =","counters":[]},{"line":"    { txpool_max_size =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        opt_fallthrough ~default:t1.txpool_max_size t2.txpool_max_size","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; peer_list_url = opt_fallthrough ~default:t1.peer_list_url t2.peer_list_url","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; transaction_expiry_hr =","counters":[]},{"line":"        opt_fallthrough ~default:t1.transaction_expiry_hr","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.transaction_expiry_hr","counters":[]},{"line":"    ; zkapp_proof_update_cost =","counters":[]},{"line":"        opt_fallthrough ~default:t1.zkapp_proof_update_cost","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.zkapp_proof_update_cost","counters":[]},{"line":"    ; zkapp_signed_single_update_cost =","counters":[]},{"line":"        opt_fallthrough ~default:t1.zkapp_signed_single_update_cost","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.zkapp_signed_single_update_cost","counters":[]},{"line":"    ; zkapp_signed_pair_update_cost =","counters":[]},{"line":"        opt_fallthrough ~default:t1.zkapp_signed_pair_update_cost","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.zkapp_signed_pair_update_cost","counters":[]},{"line":"    ; zkapp_transaction_cost_limit =","counters":[]},{"line":"        opt_fallthrough ~default:t1.zkapp_transaction_cost_limit","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.zkapp_transaction_cost_limit","counters":[]},{"line":"    ; max_event_elements =","counters":[]},{"line":"        opt_fallthrough ~default:t1.max_event_elements t2.max_event_elements","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; max_sequence_event_elements =","counters":[]},{"line":"        opt_fallthrough ~default:t1.max_sequence_event_elements","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          t2.max_sequence_event_elements","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Epoch_data = struct","counters":[]},{"line":"  module Data = struct","counters":[]},{"line":"    type t = { ledger : Ledger.t; seed : string }","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2},{"col_start":15,"col_end":15,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    [@@deriving bin_io_unversioned, yojson]","counters":[{"col_start":42,"col_end":42,"count":4}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { staking : Data.t; next : Data.t option (*If None, then next = staking*) }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  [@@deriving bin_io_unversioned, yojson]","counters":[{"col_start":40,"col_end":40,"count":4}]},{"line":"","counters":[]},{"line":"  let to_json_layout : t -> Json_layout.Epoch_data.t =","counters":[]},{"line":"   fun { staking; next } ->","counters":[]},{"line":"    let accounts (ledger : Ledger.t) =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match ledger.base with Accounts acc -> acc | _ -> assert false","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    in","counters":[]},{"line":"    let staking =","counters":[]},{"line":"      { Json_layout.Epoch_data.Data.accounts = accounts staking.ledger","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"      ; seed = staking.seed","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let next =","counters":[]},{"line":"      Option.map next ~f:(fun n ->","counters":[]},{"line":"          { Json_layout.Epoch_data.Data.accounts = accounts n.ledger","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          ; seed = n.seed","counters":[]},{"line":"          } )","counters":[]},{"line":"    in","counters":[]},{"line":"    { Json_layout.Epoch_data.staking; next }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let of_json_layout : Json_layout.Epoch_data.t -> (t, string) Result.t =","counters":[]},{"line":"   fun { staking; next } ->","counters":[]},{"line":"    let data accounts seed =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let ledger =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Ledger.base = Accounts accounts","counters":[]},{"line":"        ; num_accounts = None","counters":[]},{"line":"        ; balances = []","counters":[]},{"line":"        ; hash = None","counters":[]},{"line":"        ; name = None","counters":[]},{"line":"        ; add_genesis_winner = Some false","counters":[]},{"line":"        }","counters":[]},{"line":"      in","counters":[]},{"line":"      { Data.ledger; seed }","counters":[]},{"line":"    in","counters":[]},{"line":"    let staking = data staking.accounts staking.seed in","counters":[]},{"line":"    let next = Option.map next ~f:(fun n -> data n.accounts n.seed) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"    Ok { staking; next }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson x = Json_layout.Epoch_data.to_yojson (to_json_layout x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    Result.bind ~f:of_json_layout (Json_layout.Epoch_data.of_yojson json)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":1},{"col_start":5,"col_end":5,"count":2}]},{"line":"  { daemon : Daemon.t option","counters":[]},{"line":"  ; genesis : Genesis.t option","counters":[]},{"line":"  ; proof : Proof_keys.t option","counters":[]},{"line":"  ; ledger : Ledger.t option","counters":[]},{"line":"  ; epoch_data : Epoch_data.t option","counters":[]},{"line":"  }","counters":[]},{"line":"[@@deriving bin_io_unversioned]","counters":[{"col_start":30,"col_end":30,"count":4}]},{"line":"","counters":[]},{"line":"let to_json_layout { daemon; genesis; proof; ledger; epoch_data } =","counters":[]},{"line":"  { Json_layout.daemon = Option.map ~f:Daemon.to_json_layout daemon","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; genesis = Option.map ~f:Genesis.to_json_layout genesis","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; proof = Option.map ~f:Proof_keys.to_json_layout proof","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; ledger = Option.map ~f:Ledger.to_json_layout ledger","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  ; epoch_data = Option.map ~f:Epoch_data.to_json_layout epoch_data","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let of_json_layout { Json_layout.daemon; genesis; proof; ledger; epoch_data } =","counters":[]},{"line":"  let open Result.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map daemon = result_opt ~f:Daemon.of_json_layout daemon","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  and genesis = result_opt ~f:Genesis.of_json_layout genesis","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  and proof = result_opt ~f:Proof_keys.of_json_layout proof","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  and ledger = result_opt ~f:Ledger.of_json_layout ledger","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  and epoch_data = result_opt ~f:Epoch_data.of_json_layout epoch_data in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  { daemon; genesis; proof; ledger; epoch_data }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let to_yojson x = Json_layout.to_yojson (to_json_layout x)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"let of_yojson json = Result.bind ~f:of_json_layout (Json_layout.of_yojson json)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"let default =","counters":[]},{"line":"  { daemon = None","counters":[]},{"line":"  ; genesis = None","counters":[]},{"line":"  ; proof = None","counters":[]},{"line":"  ; ledger = None","counters":[]},{"line":"  ; epoch_data = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let combine t1 t2 =","counters":[]},{"line":"  let merge ~combine t1 t2 =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match (t1, t2) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Some t1, Some t2 ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (combine t1 t2)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"    | Some t, None | None, Some t ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"        Some t","counters":[]},{"line":"    | None, None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"  in","counters":[]},{"line":"  { daemon = merge ~combine:Daemon.combine t1.daemon t2.daemon","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  ; genesis = merge ~combine:Genesis.combine t1.genesis t2.genesis","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  ; proof = merge ~combine:Proof_keys.combine t1.proof t2.proof","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; ledger = opt_fallthrough ~default:t1.ledger t2.ledger","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; epoch_data = opt_fallthrough ~default:t1.epoch_data t2.epoch_data","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"module Test_configs = struct","counters":[]},{"line":"  let bootstrap =","counters":[]},{"line":"    lazy","counters":[]},{"line":"      ( (* test_postake_bootstrap *)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        {json|","counters":[]},{"line":"  { \"daemon\":","counters":[]},{"line":"      { \"txpool_max_size\": 3000 }","counters":[]},{"line":"  , \"genesis\":","counters":[]},{"line":"      { \"k\": 6","counters":[]},{"line":"      , \"delta\": 0","counters":[]},{"line":"      , \"genesis_state_timestamp\": \"2019-01-30 12:00:00-08:00\" }","counters":[]},{"line":"  , \"proof\":","counters":[]},{"line":"      { \"level\": \"none\"","counters":[]},{"line":"      , \"sub_windows_per_window\": 8","counters":[]},{"line":"      , \"ledger_depth\": 6","counters":[]},{"line":"      , \"work_delay\": 2","counters":[]},{"line":"      , \"block_window_duration_ms\": 1500","counters":[]},{"line":"      , \"transaction_capacity\": {\"2_to_the\": 3}","counters":[]},{"line":"      , \"coinbase_amount\": \"20\"","counters":[]},{"line":"      , \"supercharged_coinbase_factor\": 2","counters":[]},{"line":"      , \"account_creation_fee\": \"1\" }","counters":[]},{"line":"  , \"ledger\": { \"name\": \"test\", \"add_genesis_winner\": false } }","counters":[]},{"line":"      |json}","counters":[]},{"line":"      |> Yojson.Safe.from_string |> of_yojson |> Result.ok_or_failwith )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let transactions =","counters":[]},{"line":"    lazy","counters":[]},{"line":"      ( (* test_postake_txns *)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        {json|","counters":[]},{"line":"  { \"daemon\":","counters":[]},{"line":"      { \"txpool_max_size\": 3000 }","counters":[]},{"line":"  , \"genesis\":","counters":[]},{"line":"      { \"k\": 6","counters":[]},{"line":"      , \"delta\": 0","counters":[]},{"line":"      , \"genesis_state_timestamp\": \"2019-01-30 12:00:00-08:00\" }","counters":[]},{"line":"  , \"proof\":","counters":[]},{"line":"      { \"level\": \"check\"","counters":[]},{"line":"      , \"sub_windows_per_window\": 8","counters":[]},{"line":"      , \"ledger_depth\": 6","counters":[]},{"line":"      , \"work_delay\": 2","counters":[]},{"line":"      , \"block_window_duration_ms\": 15000","counters":[]},{"line":"      , \"transaction_capacity\": {\"2_to_the\": 3}","counters":[]},{"line":"      , \"coinbase_amount\": \"20\"","counters":[]},{"line":"      , \"supercharged_coinbase_factor\": 2","counters":[]},{"line":"      , \"account_creation_fee\": \"1\" }","counters":[]},{"line":"  , \"ledger\":","counters":[]},{"line":"      { \"name\": \"test_split_two_stakers\"","counters":[]},{"line":"      , \"add_genesis_winner\": false } }","counters":[]},{"line":"      |json}","counters":[]},{"line":"      |> Yojson.Safe.from_string |> of_yojson |> Result.ok_or_failwith )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let split_snarkless =","counters":[]},{"line":"    lazy","counters":[]},{"line":"      ( (* test_postake_split_snarkless *)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        {json|","counters":[]},{"line":"  { \"daemon\":","counters":[]},{"line":"      { \"txpool_max_size\": 3000 }","counters":[]},{"line":"  , \"genesis\":","counters":[]},{"line":"      { \"k\": 24","counters":[]},{"line":"      , \"delta\": 0","counters":[]},{"line":"      , \"genesis_state_timestamp\": \"2019-01-30 12:00:00-08:00\" }","counters":[]},{"line":"  , \"proof\":","counters":[]},{"line":"      { \"level\": \"check\"","counters":[]},{"line":"      , \"sub_windows_per_window\": 8","counters":[]},{"line":"      , \"ledger_depth\": 30","counters":[]},{"line":"      , \"work_delay\": 1","counters":[]},{"line":"      , \"block_window_duration_ms\": 10000","counters":[]},{"line":"      , \"transaction_capacity\": {\"2_to_the\": 2}","counters":[]},{"line":"      , \"coinbase_amount\": \"20\"","counters":[]},{"line":"      , \"supercharged_coinbase_factor\": 2","counters":[]},{"line":"      , \"account_creation_fee\": \"1\" }","counters":[]},{"line":"  , \"ledger\":","counters":[]},{"line":"      { \"name\": \"test_split_two_stakers\"","counters":[]},{"line":"      , \"add_genesis_winner\": false } }","counters":[]},{"line":"      |json}","counters":[]},{"line":"      |> Yojson.Safe.from_string |> of_yojson |> Result.ok_or_failwith )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let delegation =","counters":[]},{"line":"    lazy","counters":[]},{"line":"      ( (* test_postake_delegation *)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        {json|","counters":[]},{"line":"  { \"daemon\":","counters":[]},{"line":"      { \"txpool_max_size\": 3000 }","counters":[]},{"line":"  , \"genesis\":","counters":[]},{"line":"      { \"k\": 4","counters":[]},{"line":"      , \"delta\": 0","counters":[]},{"line":"      , \"slots_per_epoch\": 72","counters":[]},{"line":"      , \"genesis_state_timestamp\": \"2019-01-30 12:00:00-08:00\" }","counters":[]},{"line":"  , \"proof\":","counters":[]},{"line":"      { \"level\": \"check\"","counters":[]},{"line":"      , \"sub_windows_per_window\": 4","counters":[]},{"line":"      , \"ledger_depth\": 6","counters":[]},{"line":"      , \"work_delay\": 1","counters":[]},{"line":"      , \"block_window_duration_ms\": 5000","counters":[]},{"line":"      , \"transaction_capacity\": {\"2_to_the\": 2}","counters":[]},{"line":"      , \"coinbase_amount\": \"20\"","counters":[]},{"line":"      , \"supercharged_coinbase_factor\": 2","counters":[]},{"line":"      , \"account_creation_fee\": \"1\" }","counters":[]},{"line":"  , \"ledger\":","counters":[]},{"line":"      { \"name\": \"test_delegation\"","counters":[]},{"line":"      , \"add_genesis_winner\": false } }","counters":[]},{"line":"      |json}","counters":[]},{"line":"      |> Yojson.Safe.from_string |> of_yojson |> Result.ok_or_failwith )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"end","counters":[]}]}