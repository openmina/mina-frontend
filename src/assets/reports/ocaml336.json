{"filename":"src/lib/mina_block/block.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { header : Header.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"      ; body : Staged_ledger_diff.Body.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving fields, sexp]","counters":[{"col_start":28,"col_end":28,"count":5}]},{"line":"","counters":[]},{"line":"    let to_yojson t =","counters":[]},{"line":"      `Assoc","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ ( \"protocol_state\"","counters":[]},{"line":"          , Protocol_state.value_to_yojson (Header.protocol_state t.header) )","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        ; (\"protocol_state_proof\", `String \"<opaque>\")","counters":[]},{"line":"        ; (\"staged_ledger_diff\", `String \"<opaque>\")","counters":[]},{"line":"        ; (\"delta_transition_chain_proof\", `String \"<opaque>\")","counters":[]},{"line":"        ; ( \"current_protocol_version\"","counters":[]},{"line":"          , `String","counters":[]},{"line":"              (Protocol_version.to_string","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                 (Header.current_protocol_version t.header) ) )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"        ; ( \"proposed_protocol_version\"","counters":[]},{"line":"          , `String","counters":[]},{"line":"              (Option.value_map","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                 (Header.proposed_protocol_version_opt t.header)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                 ~default:\"<None>\" ~f:Protocol_version.to_string ) )","counters":[]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    module Creatable = struct","counters":[]},{"line":"      let id = \"block\"","counters":[]},{"line":"","counters":[]},{"line":"      type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"      let sexp_of_t = sexp_of_t","counters":[]},{"line":"","counters":[]},{"line":"      let t_of_sexp = t_of_sexp","counters":[]},{"line":"","counters":[]},{"line":"      type 'a creator = header:Header.t -> body:Staged_ledger_diff.Body.t -> 'a","counters":[]},{"line":"","counters":[]},{"line":"      let map_creator c ~f ~header ~body = f (c ~header ~body)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"      let create ~header ~body = { header; body }","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let equal =","counters":[]},{"line":"      Comparable.lift Consensus.Data.Consensus_state.Value.equal","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"        ~f:","counters":[]},{"line":"          (Fn.compose Mina_state.Protocol_state.consensus_state","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"             (Fn.compose Header.protocol_state header) )","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"    include (","counters":[]},{"line":"      Allocation_functor.Make.Basic","counters":[]},{"line":"        (Creatable) :","counters":[]},{"line":"          Allocation_functor.Intf.Output.Basic_intf","counters":[]},{"line":"            with type t := t","counters":[]},{"line":"             and type 'a creator := 'a Creatable.creator )","counters":[]},{"line":"","counters":[]},{"line":"    include (","counters":[]},{"line":"      Allocation_functor.Make.Sexp","counters":[]},{"line":"        (Creatable) :","counters":[]},{"line":"          Allocation_functor.Intf.Output.Sexp_intf","counters":[]},{"line":"            with type t := t","counters":[]},{"line":"             and type 'a creator := 'a Creatable.creator )","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type with_hash = t State_hash.With_state_hashes.t [@@deriving sexp]","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"","counters":[]},{"line":"[%%define_locally","counters":[]},{"line":"Stable.Latest.(create, header, body, t_of_sexp, sexp_of_t, to_yojson, equal)]","counters":[]},{"line":"","counters":[]},{"line":"let wrap_with_hash block =","counters":[]},{"line":"  With_hash.of_data block","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~hash_data:","counters":[]},{"line":"      ( Fn.compose Protocol_state.hashes","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      @@ Fn.compose Header.protocol_state header )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let timestamp block =","counters":[]},{"line":"  block |> header |> Header.protocol_state |> Protocol_state.blockchain_state","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"  |> Blockchain_state.timestamp","counters":[]},{"line":"","counters":[]},{"line":"let transactions ~constraint_constants block =","counters":[]},{"line":"  let consensus_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    block |> header |> Header.protocol_state |> Protocol_state.consensus_state","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let staged_ledger_diff =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    block |> body |> Staged_ledger_diff.Body.staged_ledger_diff","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  in","counters":[]},{"line":"  let coinbase_receiver =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Consensus.Data.Consensus_state.coinbase_receiver consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  let supercharge_coinbase =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Consensus.Data.Consensus_state.supercharge_coinbase consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  Staged_ledger.Pre_diff_info.get_transactions ~constraint_constants","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    ~coinbase_receiver ~supercharge_coinbase staged_ledger_diff","counters":[]},{"line":"  |> Result.map_error ~f:Staged_ledger.Pre_diff_info.Error.to_error","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  |> Or_error.ok_exn","counters":[]},{"line":"","counters":[]},{"line":"let payments block =","counters":[]},{"line":"  block |> body |> Staged_ledger_diff.Body.staged_ledger_diff","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"  |> Staged_ledger_diff.commands","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  |> List.filter_map ~f:(function","counters":[]},{"line":"       | { data = Signed_command ({ payload = { body = Payment _; _ }; _ } as c)","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         ; status","counters":[]},{"line":"         } ->","counters":[]},{"line":"           Some { With_status.data = c; status }","counters":[]},{"line":"       | _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           None )","counters":[]},{"line":"","counters":[]},{"line":"let account_ids_accessed t =","counters":[]},{"line":"  let transactions =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    transactions","counters":[]},{"line":"      ~constraint_constants:Genesis_constants.Constraint_constants.compiled t","counters":[]},{"line":"  in","counters":[]},{"line":"  List.map transactions ~f:(fun { data = txn; status } ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      Mina_transaction.Transaction.accounts_accessed txn status )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  |> List.concat","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"  |> List.dedup_and_sort ~compare:Account_id.compare","counters":[{"col_start":51,"col_end":51,"count":2}]}]}