{"filename":"src/lib/mina_base/stake_delegation.ml","lines":[{"line":"(* stake_delegation.ml *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  module V1 = struct","counters":[]},{"line":"    [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Mina_wire_types.Mina_base.Stake_delegation.V1.t =","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":9,"col_end":9,"count":6}]},{"line":"      | Set_delegate of","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          { delegator : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"          ; new_delegate : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"          }","counters":[]},{"line":"    [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":15}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let receiver_pk = function Set_delegate { new_delegate; _ } -> new_delegate","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let receiver = function","counters":[]},{"line":"  | Set_delegate { new_delegate; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Account_id.create new_delegate Token_id.default","counters":[]},{"line":"","counters":[]},{"line":"let source_pk = function Set_delegate { delegator; _ } -> delegator","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"let source = function","counters":[]},{"line":"  | Set_delegate { delegator; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Account_id.create delegator Token_id.default","counters":[]},{"line":"","counters":[]},{"line":"let gen_with_delegator delegator =","counters":[]},{"line":"  Quickcheck.Generator.map Public_key.Compressed.gen ~f:(fun k ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Set_delegate { delegator; new_delegate = k } )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  Quickcheck.Generator.bind ~f:gen_with_delegator Public_key.Compressed.gen","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let to_input_legacy = function","counters":[]},{"line":"  | Set_delegate { delegator; new_delegate } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Random_oracle.Input.Legacy.append","counters":[]},{"line":"        (Public_key.Compressed.to_input_legacy delegator)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        (Public_key.Compressed.to_input_legacy new_delegate)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":59,"col_end":59,"count":1}]}]}