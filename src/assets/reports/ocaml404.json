{"filename":"src/lib/trust_system/record.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { trust : float","counters":[]},{"line":"      ; trust_last_updated : Core.Time.Stable.V1.t","counters":[]},{"line":"      ; banned_until_opt : Core.Time.Stable.V1.t option","counters":[]},{"line":"      }","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  val init : unit -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ban : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val add_trust : t -> float -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_peer_status : t -> Peer_status.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* Trust is conceptually multiplied by this factor every second. This value is","counters":[]},{"line":"   such that trust halves in 24 hours. =~ 0.999992 *)","counters":[]},{"line":"let decay_rate = 0.5 ** (1. /. (60. *. 60. *. 24.))","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"(** Module handling the data associated with a peer's trust.","counters":[]},{"line":"    @param Now get the current time. Functored for mocking.","counters":[]},{"line":"*)","counters":[]},{"line":"module Make (Now : sig","counters":[]},{"line":"  val now : unit -> Time.t","counters":[]},{"line":"end) : S = struct","counters":[]},{"line":"  (** Create a new blank trust record. *)","counters":[]},{"line":"  let init () =","counters":[]},{"line":"    { trust = 0.; trust_last_updated = Now.now (); banned_until_opt = None }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let clamp_trust trust = Float.clamp_exn trust ~min:(-1.0) ~max:1.0","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  (* Update a trust record. This must be called by every function that reads","counters":[]},{"line":"     records, and is not exposed outside this module. *)","counters":[]},{"line":"  let update { trust; trust_last_updated; banned_until_opt } =","counters":[]},{"line":"    let now = Now.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let elap = Time.diff now trust_last_updated in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let elapsed_time =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if Time.Span.(elap >= zero) then elap else Time.Span.zero","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"    in","counters":[]},{"line":"    (* ntpd or a user may have reset the system time, yielding a negative elapsed time.  in that case, clamp the elapsed time to zero*)","counters":[]},{"line":"    let new_trust = (decay_rate ** Time.Span.to_sec elapsed_time) *. trust in","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    { trust = new_trust","counters":[]},{"line":"    ; trust_last_updated = now","counters":[]},{"line":"    ; banned_until_opt =","counters":[]},{"line":"        ( match banned_until_opt with","counters":[]},{"line":"        | Some banned_until ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if Time.is_later banned_until ~than:(Now.now ()) then","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"              Some banned_until","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            else None","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None )","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (** Set the record to banned, updating trust. *)","counters":[]},{"line":"  let ban t =","counters":[]},{"line":"    let new_record = update t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { new_record with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      trust = -1.0","counters":[]},{"line":"    ; banned_until_opt = Some (Time.add (Now.now ()) Time.Span.day)","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (** Add some trust, subtract by passing a negative number. *)","counters":[]},{"line":"  let add_trust t increment =","counters":[]},{"line":"    let new_record = update t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let new_trust = clamp_trust @@ (new_record.trust +. increment) in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { new_record with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      trust = new_trust","counters":[]},{"line":"    ; banned_until_opt =","counters":[]},{"line":"        ( if Float.(new_trust <= -1.) then","counters":[]},{"line":"          Some (Time.add new_record.trust_last_updated Time.Span.day)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        else new_record.banned_until_opt )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (** Convert the internal type to the externally visible one. *)","counters":[]},{"line":"  let to_peer_status t =","counters":[]},{"line":"    let new_record = update t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match new_record.banned_until_opt with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Peer_status.","counters":[]},{"line":"          { trust = new_record.trust; banned = Banned_status.Unbanned }","counters":[]},{"line":"    | Some banned_until ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Peer_status.","counters":[]},{"line":"          { trust = new_record.trust","counters":[]},{"line":"          ; banned = Banned_status.Banned_until banned_until","counters":[]},{"line":"          }","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}