{"filename":"src/lib/mina_base/call_stack_digest.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Wire_types = Mina_wire_types.Mina_base.Call_stack_digest","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S = Call_stack_digest_intf.Full with type Stable.V1.t = A.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Kimchi_backend.Pasta.Basic.Fp.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0}]},{"line":"      [@@deriving sexp, compare, equal, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"  let cons (h : Stack_frame.Digest.t) (t : t) : t =","counters":[]},{"line":"    Random_oracle.hash ~init:Hash_prefix_states.account_update_stack_frame_cons","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [| (h :> Field.Constant.t); t |]","counters":[]},{"line":"","counters":[]},{"line":"  let empty = Field.Constant.zero","counters":[]},{"line":"","counters":[]},{"line":"  let gen = Field.Constant.gen","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    include Field","counters":[]},{"line":"","counters":[]},{"line":"    let cons (h : Stack_frame.Digest.Checked.t) (t : t) : t =","counters":[]},{"line":"      Random_oracle.Checked.hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~init:Hash_prefix_states.account_update_stack_frame_cons","counters":[]},{"line":"        [| (h :> Field.t); t |]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let constant = Field.constant","counters":[]},{"line":"","counters":[]},{"line":"  let typ = Field.typ","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Wire_types.Make (Make_sig) (Make_str)","counters":[{"col_start":44,"col_end":44,"count":1}]}]}