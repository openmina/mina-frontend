{"filename":"src/lib/cache_dir/native/cache_dir.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"let autogen_path = Filename.temp_dir_name ^/ \"coda_cache_dir\"","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"","counters":[]},{"line":"let s3_install_path = \"/tmp/s3_cache_dir\"","counters":[]},{"line":"","counters":[]},{"line":"let s3_keys_bucket_prefix =","counters":[]},{"line":"  \"https://s3-us-west-2.amazonaws.com/snark-keys.o1test.net\"","counters":[]},{"line":"","counters":[]},{"line":"let manual_install_path = \"/var/lib/coda\"","counters":[]},{"line":"","counters":[]},{"line":"let brew_install_path =","counters":[]},{"line":"  match","counters":[]},{"line":"    let p = Core.Unix.open_process_in \"brew --prefix 2>/dev/null\" in","counters":[]},{"line":"    let r = In_channel.input_lines p in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    (r, Core.Unix.close_process_in p)","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":33,"col_end":33,"count":1}]},{"line":"  with","counters":[]},{"line":"  | brew :: _, Ok () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      brew ^ \"/var/coda\"","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      \"/usr/local/var/coda\"","counters":[]},{"line":"","counters":[]},{"line":"let cache =","counters":[]},{"line":"  let dir d w = Key_cache.Spec.On_disk { directory = d; should_write = w } in","counters":[{"col_start":16,"col_end":16,"count":4}]},{"line":"  [ dir manual_install_path false","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  ; dir brew_install_path false","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  ; dir s3_install_path false","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  ; dir autogen_path true","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  ; Key_cache.Spec.S3","counters":[]},{"line":"      { bucket_prefix = s3_keys_bucket_prefix; install_path = s3_install_path }","counters":[]},{"line":"  ]","counters":[]},{"line":"","counters":[]},{"line":"let env_path =","counters":[]},{"line":"  match Sys.getenv \"MINA_KEYS_PATH\" with","counters":[]},{"line":"  | Some path ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      path","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      manual_install_path","counters":[]},{"line":"","counters":[]},{"line":"let possible_paths base =","counters":[]},{"line":"  List.map","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ env_path","counters":[]},{"line":"    ; brew_install_path","counters":[]},{"line":"    ; s3_install_path","counters":[]},{"line":"    ; autogen_path","counters":[]},{"line":"    ; manual_install_path","counters":[]},{"line":"    ] ~f:(fun d -> d ^/ base)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let load_from_s3 s3_bucket_prefix s3_install_path ~logger =","counters":[]},{"line":"  Deferred.map ~f:Result.join","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@ Monitor.try_with ~here:[%here] (fun () ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"         let each_uri (uri_string, file_path) =","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           let open Deferred.Let_syntax in","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           [%log trace] \"Downloading file from S3\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"             ~metadata:","counters":[]},{"line":"               [ (\"url\", `String uri_string)","counters":[]},{"line":"               ; (\"local_file_path\", `String file_path)","counters":[]},{"line":"               ] ;","counters":[]},{"line":"           let%map _result =","counters":[]},{"line":"             Process.run_exn ~prog:\"curl\"","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"               ~args:","counters":[]},{"line":"                 [ \"--fail\"","counters":[]},{"line":"                 ; \"--silent\"","counters":[]},{"line":"                 ; \"--show-error\"","counters":[]},{"line":"                 ; \"-o\"","counters":[]},{"line":"                 ; file_path","counters":[]},{"line":"                 ; uri_string","counters":[]},{"line":"                 ]","counters":[]},{"line":"               ()","counters":[]},{"line":"           in","counters":[]},{"line":"           [%log trace] \"Download finished\"","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"             ~metadata:","counters":[]},{"line":"               [ (\"url\", `String uri_string)","counters":[]},{"line":"               ; (\"local_file_path\", `String file_path)","counters":[]},{"line":"               ] ;","counters":[]},{"line":"           Result.return ()","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"         in","counters":[]},{"line":"         Deferred.List.map ~f:each_uri","counters":[]},{"line":"           (List.zip_exn s3_bucket_prefix s3_install_path)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"         |> Deferred.map ~f:Result.all_unit )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"  |> Deferred.Result.map_error ~f:Error.of_exn","counters":[{"col_start":5,"col_end":5,"count":0}]}]}