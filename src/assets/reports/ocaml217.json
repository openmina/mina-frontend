{"filename":"src/lib/mina_base/fee_with_prover.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t = Mina_wire_types.Mina_base.Fee_with_prover.V1.t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { fee : Currency.Fee.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      ; prover : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving sexp, yojson, hash]","counters":[{"col_start":34,"col_end":34,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    module T = struct","counters":[]},{"line":"      type typ = t [@@deriving sexp]","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"      type t = typ [@@deriving sexp]","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"      (* TODO: Compare in a better way than with public key, like in transaction pool *)","counters":[]},{"line":"      let compare t1 t2 =","counters":[]},{"line":"        let r = Currency.Fee.compare t1.fee t2.fee in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        if Int.( <> ) r 0 then r","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        else Public_key.Compressed.compare t1.prover t2.prover","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Comparable.Make (T)","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"include Comparable.Make (Stable.V1.T)","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  Quickcheck.Generator.map2 Currency.Fee.gen Public_key.Compressed.gen","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"    ~f:(fun fee prover -> { fee; prover })","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":1}]}]}