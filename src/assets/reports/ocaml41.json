{"filename":"src/lib/consensus/global_slot_intf.ml","lines":[{"line":"module type Full = sig","counters":[]},{"line":"  [%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"  open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"  module Poly : sig","counters":[]},{"line":"    [%%versioned:","counters":[]},{"line":"    module Stable : sig","counters":[]},{"line":"      module V1 : sig","counters":[]},{"line":"        type ('slot_number, 'slots_per_epoch) t","counters":[]},{"line":"        [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      type t =","counters":[]},{"line":"        ( Mina_numbers.Global_slot.Stable.V1.t","counters":[]},{"line":"        , Mina_numbers.Length.Stable.V1.t )","counters":[]},{"line":"        Poly.Stable.V1.t","counters":[]},{"line":"      [@@deriving compare, equal, sexp, hash, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  val to_input : t -> Snark_params.Tick.Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"  val of_slot_number : constants:Constants.t -> Mina_numbers.Global_slot.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val gen : constants:Constants.t -> t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( + ) : t -> int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( - ) : t -> t -> Mina_numbers.Global_slot.t option","counters":[]},{"line":"","counters":[]},{"line":"  val ( < ) : t -> t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val max : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val succ : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val create : constants:Constants.t -> epoch:Epoch.t -> slot:Slot.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_epoch_and_slot : constants:Constants.t -> Epoch.t * Slot.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val zero : constants:Constants.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val epoch : t -> Epoch.t","counters":[]},{"line":"","counters":[]},{"line":"  val slot : t -> Slot.t","counters":[]},{"line":"","counters":[]},{"line":"  val start_time : constants:Constants.t -> t -> Block_time.t","counters":[]},{"line":"","counters":[]},{"line":"  val end_time : constants:Constants.t -> t -> Block_time.t","counters":[]},{"line":"","counters":[]},{"line":"  val time_hum : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val to_epoch_and_slot : t -> Epoch.t * Slot.t","counters":[]},{"line":"","counters":[]},{"line":"  val of_time_exn : constants:Constants.t -> Block_time.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val diff : constants:Constants.t -> t -> Epoch.t * Slot.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"  module Checked : sig","counters":[]},{"line":"    open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[]},{"line":"      (Mina_numbers.Global_slot.Checked.t, Mina_numbers.Length.Checked.t) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"    val ( < ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    val of_slot_number :","counters":[]},{"line":"      constants:Constants.var -> Mina_numbers.Global_slot.Checked.t -> t","counters":[]},{"line":"","counters":[]},{"line":"    val to_input : t -> Field.Var.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"    val to_epoch_and_slot : t -> (Epoch.Checked.t * Slot.Checked.t) Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    (** [sub ~m x y] computes [x - y] and ensures that [0 <= x - y] *)","counters":[]},{"line":"    val sub : t -> t -> Mina_numbers.Global_slot.Checked.t Checked.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val typ : (Checked.t, t) Typ.t","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  val slot_number : ('a, _) Poly.t -> 'a","counters":[]},{"line":"","counters":[]},{"line":"  val slots_per_epoch : (_, 'b) Poly.t -> 'b","counters":[]},{"line":"","counters":[]},{"line":"  module For_tests : sig","counters":[]},{"line":"    val of_global_slot : t -> Mina_numbers.Global_slot.t -> t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}