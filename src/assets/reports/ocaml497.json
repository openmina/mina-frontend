{"filename":"src/lib/otp_lib/worker_supervisor.ml","lines":[{"line":"(** This module provides a functor for instantiating async supervisors which is","counters":[]},{"line":" *  capable of monitoring and dispatching work to a single worker. The module","counters":[]},{"line":" *  allows synchronous checking of the worker's state (is it processing work","counters":[]},{"line":" *  or not), and prevents parallel dispatching of work to that worker.","counters":[]},{"line":" *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(** The interface shared by both the worker and the supervisor which wraps it. *)","counters":[]},{"line":"module type Base_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  type create_args","counters":[]},{"line":"","counters":[]},{"line":"  type input","counters":[]},{"line":"","counters":[]},{"line":"  type output","counters":[]},{"line":"","counters":[]},{"line":"  val create : create_args -> t","counters":[]},{"line":"","counters":[]},{"line":"  val close : t -> unit Deferred.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** The interface of the worker. Extends the base interface with a [perform]","counters":[]},{"line":" *  function.","counters":[]},{"line":" *)","counters":[]},{"line":"module type Worker_intf = sig","counters":[]},{"line":"  include Base_intf","counters":[]},{"line":"","counters":[]},{"line":"  val perform : t -> input -> output Deferred.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** The interface of the supervisor constructed by the [Make] functor. *)","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include Base_intf","counters":[]},{"line":"","counters":[]},{"line":"  val is_working : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val dispatch : t -> input -> output Deferred.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** [Make (Worker)] creates a supervisor which wraps dispatches to [Worker]. *)","counters":[]},{"line":"module Make (Worker : Worker_intf) :","counters":[]},{"line":"  S","counters":[]},{"line":"    with type create_args := Worker.create_args","counters":[]},{"line":"     and type input := Worker.input","counters":[]},{"line":"     and type output := Worker.output = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { mutable thread : Worker.output Deferred.t option; worker : Worker.t }","counters":[]},{"line":"","counters":[]},{"line":"  let create args = { thread = None; worker = Worker.create args }","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  let is_working t =","counters":[]},{"line":"    Option.value_map t.thread ~default:false ~f:Deferred.is_determined","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let assert_not_working t =","counters":[]},{"line":"    if is_working t then failwith \"cannot dispatch to busy worker\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let dispatch t work =","counters":[]},{"line":"    assert_not_working t ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let thread = Worker.perform t.worker work in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    t.thread <- Some thread ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map x = thread in","counters":[]},{"line":"    t.thread <- None ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    x","counters":[]},{"line":"","counters":[]},{"line":"  let close t = assert_not_working t ; Worker.close t.worker","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}