{"filename":"src/lib/crypto/kimchi_bindings/stubs/kimchi_bindings.ml","lines":[{"line":"(* This file is generated automatically with ocaml_gen. *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"module FieldVectors = struct","counters":[]},{"line":"  module Fp = struct","counters":[]},{"line":"    type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"    type nonrec elt = Pasta_bindings.Fp.t","counters":[]},{"line":"","counters":[]},{"line":"    external create : unit -> t = \"caml_fp_vector_create\"","counters":[]},{"line":"","counters":[]},{"line":"    external length : t -> int = \"caml_fp_vector_length\"","counters":[]},{"line":"","counters":[]},{"line":"    external emplace_back : t -> elt -> unit = \"caml_fp_vector_emplace_back\"","counters":[]},{"line":"","counters":[]},{"line":"    external get : t -> int -> elt = \"caml_fp_vector_get\"","counters":[]},{"line":"","counters":[]},{"line":"    external set : t -> int -> elt -> unit = \"caml_fp_vector_set\"","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Fq = struct","counters":[]},{"line":"    type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"    type nonrec elt = Pasta_bindings.Fq.t","counters":[]},{"line":"","counters":[]},{"line":"    external create : unit -> t = \"caml_fq_vector_create\"","counters":[]},{"line":"","counters":[]},{"line":"    external length : t -> int = \"caml_fq_vector_length\"","counters":[]},{"line":"","counters":[]},{"line":"    external emplace_back : t -> elt -> unit = \"caml_fq_vector_emplace_back\"","counters":[]},{"line":"","counters":[]},{"line":"    external get : t -> int -> elt = \"caml_fq_vector_get\"","counters":[]},{"line":"","counters":[]},{"line":"    external set : t -> int -> elt -> unit = \"caml_fq_vector_set\"","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Protocol = struct","counters":[]},{"line":"  module Gates = struct","counters":[]},{"line":"    module Vector = struct","counters":[]},{"line":"      module Fp = struct","counters":[]},{"line":"        type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"        type nonrec elt = Pasta_bindings.Fp.t Kimchi_types.circuit_gate","counters":[]},{"line":"","counters":[]},{"line":"        external create : unit -> t = \"caml_pasta_fp_plonk_gate_vector_create\"","counters":[]},{"line":"","counters":[]},{"line":"        external add : t -> elt -> unit = \"caml_pasta_fp_plonk_gate_vector_add\"","counters":[]},{"line":"","counters":[]},{"line":"        external get : t -> int -> elt = \"caml_pasta_fp_plonk_gate_vector_get\"","counters":[]},{"line":"","counters":[]},{"line":"        external wrap : t -> Kimchi_types.wire -> Kimchi_types.wire -> unit","counters":[]},{"line":"          = \"caml_pasta_fp_plonk_gate_vector_wrap\"","counters":[]},{"line":"","counters":[]},{"line":"        external digest : t -> bytes = \"caml_pasta_fp_plonk_gate_vector_digest\"","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Fq = struct","counters":[]},{"line":"        type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"        type nonrec elt = Pasta_bindings.Fq.t Kimchi_types.circuit_gate","counters":[]},{"line":"","counters":[]},{"line":"        external create : unit -> t = \"caml_pasta_fq_plonk_gate_vector_create\"","counters":[]},{"line":"","counters":[]},{"line":"        external add : t -> elt -> unit = \"caml_pasta_fq_plonk_gate_vector_add\"","counters":[]},{"line":"","counters":[]},{"line":"        external get : t -> int -> elt = \"caml_pasta_fq_plonk_gate_vector_get\"","counters":[]},{"line":"","counters":[]},{"line":"        external wrap : t -> Kimchi_types.wire -> Kimchi_types.wire -> unit","counters":[]},{"line":"          = \"caml_pasta_fq_plonk_gate_vector_wrap\"","counters":[]},{"line":"","counters":[]},{"line":"        external digest : t -> bytes = \"caml_pasta_fq_plonk_gate_vector_digest\"","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module SRS = struct","counters":[]},{"line":"    module Fp = struct","counters":[]},{"line":"      type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"      module Poly_comm = struct","counters":[]},{"line":"        type nonrec t =","counters":[]},{"line":"          Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      external create : int -> t = \"caml_fp_srs_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit = \"caml_fp_srs_write\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> string -> t option = \"caml_fp_srs_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external lagrange_commitment :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fp_srs_lagrange_commitment\"","counters":[]},{"line":"","counters":[]},{"line":"      external add_lagrange_basis : t -> int -> unit","counters":[]},{"line":"        = \"caml_fp_srs_add_lagrange_basis\"","counters":[]},{"line":"","counters":[]},{"line":"      external commit_evaluations :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fp_srs_commit_evaluations\"","counters":[]},{"line":"","counters":[]},{"line":"      external b_poly_commitment :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fp_srs_b_poly_commitment\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_accumulator_check :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        -> bool = \"caml_fp_srs_batch_accumulator_check\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_accumulator_generate :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity array","counters":[]},{"line":"        = \"caml_fp_srs_batch_accumulator_generate\"","counters":[]},{"line":"","counters":[]},{"line":"      external urs_h : t -> Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"        = \"caml_fp_srs_h\"","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fq = struct","counters":[]},{"line":"      type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"      external create : int -> t = \"caml_fq_srs_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit = \"caml_fq_srs_write\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> string -> t option = \"caml_fq_srs_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external lagrange_commitment :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fq_srs_lagrange_commitment\"","counters":[]},{"line":"","counters":[]},{"line":"      external add_lagrange_basis : t -> int -> unit","counters":[]},{"line":"        = \"caml_fq_srs_add_lagrange_basis\"","counters":[]},{"line":"","counters":[]},{"line":"      external commit_evaluations :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fq_srs_commit_evaluations\"","counters":[]},{"line":"","counters":[]},{"line":"      external b_poly_commitment :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        = \"caml_fq_srs_b_poly_commitment\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_accumulator_check :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        -> bool = \"caml_fq_srs_batch_accumulator_check\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_accumulator_generate :","counters":[]},{"line":"           t","counters":[]},{"line":"        -> int","counters":[]},{"line":"        -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity array","counters":[]},{"line":"        = \"caml_fq_srs_batch_accumulator_generate\"","counters":[]},{"line":"","counters":[]},{"line":"      external urs_h : t -> Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"        = \"caml_fq_srs_h\"","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Index = struct","counters":[]},{"line":"    module Fp = struct","counters":[]},{"line":"      type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"      external create : Gates.Vector.Fp.t -> int -> int -> SRS.Fp.t -> t","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external max_degree : t -> int = \"caml_pasta_fp_plonk_index_max_degree\"","counters":[]},{"line":"","counters":[]},{"line":"      external public_inputs : t -> int","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_public_inputs\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d1_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_domain_d1_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d4_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_domain_d4_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d8_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_domain_d8_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> SRS.Fp.t -> string -> t","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_index_write\"","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fq = struct","counters":[]},{"line":"      type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"      external create : Gates.Vector.Fq.t -> int -> int -> SRS.Fq.t -> t","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external max_degree : t -> int = \"caml_pasta_fq_plonk_index_max_degree\"","counters":[]},{"line":"","counters":[]},{"line":"      external public_inputs : t -> int","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_public_inputs\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d1_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_domain_d1_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d4_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_domain_d4_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external domain_d8_size : t -> int","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_domain_d8_size\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> SRS.Fq.t -> string -> t","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_index_write\"","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module VerifierIndex = struct","counters":[]},{"line":"    module Fp = struct","counters":[]},{"line":"      type nonrec t =","counters":[]},{"line":"        ( Pasta_bindings.Fp.t","counters":[]},{"line":"        , SRS.Fp.t","counters":[]},{"line":"        , Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        )","counters":[]},{"line":"        Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"","counters":[]},{"line":"      external create : Index.Fp.t -> t","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_verifier_index_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> SRS.Fp.t -> string -> t","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_verifier_index_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_verifier_index_write\"","counters":[]},{"line":"","counters":[]},{"line":"      external shifts : int -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_verifier_index_shifts\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy : unit -> t = \"caml_pasta_fp_plonk_verifier_index_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy : t -> t","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_verifier_index_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fq = struct","counters":[]},{"line":"      type nonrec t =","counters":[]},{"line":"        ( Pasta_bindings.Fq.t","counters":[]},{"line":"        , SRS.Fq.t","counters":[]},{"line":"        , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"        )","counters":[]},{"line":"        Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"","counters":[]},{"line":"      external create : Index.Fq.t -> t","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_verifier_index_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external read : int option -> SRS.Fq.t -> string -> t","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_verifier_index_read\"","counters":[]},{"line":"","counters":[]},{"line":"      external write : bool option -> t -> string -> unit","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_verifier_index_write\"","counters":[]},{"line":"","counters":[]},{"line":"      external shifts : int -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_verifier_index_shifts\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy : unit -> t = \"caml_pasta_fq_plonk_verifier_index_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy : t -> t","counters":[]},{"line":"        = \"caml_pasta_fq_plonk_verifier_index_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Oracles = struct","counters":[]},{"line":"    module Fp = struct","counters":[]},{"line":"      type nonrec t = Pasta_bindings.Fp.t Kimchi_types.oracles","counters":[]},{"line":"","counters":[]},{"line":"      external create :","counters":[]},{"line":"           Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           array","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t","counters":[]},{"line":"           , SRS.Fp.t","counters":[]},{"line":"           , Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> t = \"fp_oracles_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy : unit -> Pasta_bindings.Fp.t Kimchi_types.random_oracles","counters":[]},{"line":"        = \"fp_oracles_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy :","counters":[]},{"line":"           Pasta_bindings.Fp.t Kimchi_types.random_oracles","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.random_oracles","counters":[]},{"line":"        = \"fp_oracles_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fq = struct","counters":[]},{"line":"      type nonrec t = Pasta_bindings.Fq.t Kimchi_types.oracles","counters":[]},{"line":"","counters":[]},{"line":"      external create :","counters":[]},{"line":"           Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           array","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t","counters":[]},{"line":"           , SRS.Fq.t","counters":[]},{"line":"           , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> t = \"fq_oracles_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy : unit -> Pasta_bindings.Fq.t Kimchi_types.random_oracles","counters":[]},{"line":"        = \"fq_oracles_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy :","counters":[]},{"line":"           Pasta_bindings.Fq.t Kimchi_types.random_oracles","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.random_oracles","counters":[]},{"line":"        = \"fq_oracles_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Proof = struct","counters":[]},{"line":"    module Fp = struct","counters":[]},{"line":"      external create :","counters":[]},{"line":"           Index.Fp.t","counters":[]},{"line":"        -> FieldVectors.Fp.t array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t Kimchi_types.or_infinity array","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fp_plonk_proof_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external example_with_lookup :","counters":[]},{"line":"           SRS.Fp.t","counters":[]},{"line":"        -> bool","counters":[]},{"line":"        -> Index.Fp.t","counters":[]},{"line":"           * Pasta_bindings.Fp.t","counters":[]},{"line":"           * ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"             , Pasta_bindings.Fp.t )","counters":[]},{"line":"             Kimchi_types.prover_proof","counters":[]},{"line":"        = \"caml_pasta_fp_plonk_proof_example_with_lookup\"","counters":[]},{"line":"","counters":[]},{"line":"      external verify :","counters":[]},{"line":"           ( Pasta_bindings.Fp.t","counters":[]},{"line":"           , SRS.Fp.t","counters":[]},{"line":"           , Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> bool = \"caml_pasta_fp_plonk_proof_verify\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_verify :","counters":[]},{"line":"           ( Pasta_bindings.Fp.t","counters":[]},{"line":"           , SRS.Fp.t","counters":[]},{"line":"           , Pasta_bindings.Fq.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"           array","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"           array","counters":[]},{"line":"        -> bool = \"caml_pasta_fp_plonk_proof_batch_verify\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy :","counters":[]},{"line":"           unit","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fp_plonk_proof_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy :","counters":[]},{"line":"           ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> ( Pasta_bindings.Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fp.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fp_plonk_proof_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fq = struct","counters":[]},{"line":"      external create :","counters":[]},{"line":"           Index.Fq.t","counters":[]},{"line":"        -> FieldVectors.Fq.t array","counters":[]},{"line":"        -> Pasta_bindings.Fq.t array","counters":[]},{"line":"        -> Pasta_bindings.Fp.t Kimchi_types.or_infinity array","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fq_plonk_proof_create\"","counters":[]},{"line":"","counters":[]},{"line":"      external verify :","counters":[]},{"line":"           ( Pasta_bindings.Fq.t","counters":[]},{"line":"           , SRS.Fq.t","counters":[]},{"line":"           , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> bool = \"caml_pasta_fq_plonk_proof_verify\"","counters":[]},{"line":"","counters":[]},{"line":"      external batch_verify :","counters":[]},{"line":"           ( Pasta_bindings.Fq.t","counters":[]},{"line":"           , SRS.Fq.t","counters":[]},{"line":"           , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"           )","counters":[]},{"line":"           Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"           array","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"           array","counters":[]},{"line":"        -> bool = \"caml_pasta_fq_plonk_proof_batch_verify\"","counters":[]},{"line":"","counters":[]},{"line":"      external dummy :","counters":[]},{"line":"           unit","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fq_plonk_proof_dummy\"","counters":[]},{"line":"","counters":[]},{"line":"      external deep_copy :","counters":[]},{"line":"           ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof","counters":[]},{"line":"        -> ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"           , Pasta_bindings.Fq.t )","counters":[]},{"line":"           Kimchi_types.prover_proof = \"caml_pasta_fq_plonk_proof_deep_copy\"","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}