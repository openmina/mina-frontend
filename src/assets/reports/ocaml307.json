{"filename":"src/lib/pickles/cache.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Step = struct","counters":[]},{"line":"  module Key = struct","counters":[]},{"line":"    module Proving = struct","counters":[]},{"line":"      type t =","counters":[]},{"line":"        Type_equal.Id.Uid.t","counters":[]},{"line":"        * Snark_keys_header.t","counters":[]},{"line":"        * int","counters":[]},{"line":"        * Backend.Tick.R1CS_constraint_system.t","counters":[]},{"line":"","counters":[]},{"line":"      let to_string : t -> _ = function","counters":[]},{"line":"        | _id, header, n, h ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf !\"step-%s-%s-%d-%s\" header.kind.type_ header.kind.identifier","counters":[]},{"line":"              n header.identifying_hash","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Verification = struct","counters":[]},{"line":"      type t = Type_equal.Id.Uid.t * Snark_keys_header.t * int * Md5.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"      let to_string : t -> _ = function","counters":[]},{"line":"        | _id, header, n, h ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf !\"vk-step-%s-%s-%d-%s\" header.kind.type_","counters":[]},{"line":"              header.kind.identifier n header.identifying_hash","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let storable =","counters":[]},{"line":"    Key_cache.Sync.Disk_storable.simple Key.Proving.to_string","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"      (fun (_, header, _, cs) ~path ->","counters":[]},{"line":"        Or_error.try_with_join (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let open Or_error.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let%map header_read, index =","counters":[]},{"line":"              Snark_keys_header.read_with_header","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                ~read_data:(fun ~offset ->","counters":[]},{"line":"                  Kimchi_bindings.Protocol.Index.Fp.read (Some offset)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    (Backend.Tick.Keypair.load_urs ()) )","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                path","counters":[]},{"line":"            in","counters":[]},{"line":"            [%test_eq: int] header.header_version header_read.header_version ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Kind.t] header.kind header_read.kind ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Constraint_constants.t]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header.constraint_constants header_read.constraint_constants ;","counters":[]},{"line":"            [%test_eq: string] header.constraint_system_hash","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header_read.constraint_system_hash ;","counters":[]},{"line":"            { Backend.Tick.Keypair.index; cs } ) )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      (fun (_, header, _, _) t path ->","counters":[]},{"line":"        Or_error.try_with (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            Snark_keys_header.write_with_header","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~expected_max_size_log2:33 (* 8 GB should be enough *)","counters":[]},{"line":"              ~append_data:","counters":[]},{"line":"                (Kimchi_bindings.Protocol.Index.Fp.write (Some true)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                   t.Backend.Tick.Keypair.index )","counters":[]},{"line":"              header path ) )","counters":[]},{"line":"","counters":[]},{"line":"  let vk_storable =","counters":[]},{"line":"    Key_cache.Sync.Disk_storable.simple Key.Verification.to_string","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"      (fun (_, header, _, _) ~path ->","counters":[]},{"line":"        Or_error.try_with_join (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let open Or_error.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let%map header_read, index =","counters":[]},{"line":"              Snark_keys_header.read_with_header","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                ~read_data:(fun ~offset path ->","counters":[]},{"line":"                  Kimchi_bindings.Protocol.VerifierIndex.Fp.read (Some offset)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    (Backend.Tick.Keypair.load_urs ())","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                    path )","counters":[]},{"line":"                path","counters":[]},{"line":"            in","counters":[]},{"line":"            [%test_eq: int] header.header_version header_read.header_version ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Kind.t] header.kind header_read.kind ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Constraint_constants.t]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header.constraint_constants header_read.constraint_constants ;","counters":[]},{"line":"            [%test_eq: string] header.constraint_system_hash","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header_read.constraint_system_hash ;","counters":[]},{"line":"            index ) )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      (fun (_, header, _, _) x path ->","counters":[]},{"line":"        Or_error.try_with (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            Snark_keys_header.write_with_header","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~expected_max_size_log2:33 (* 8 GB should be enough *)","counters":[]},{"line":"              ~append_data:","counters":[]},{"line":"                (Kimchi_bindings.Protocol.VerifierIndex.Fp.write (Some true) x)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"              header path ) )","counters":[]},{"line":"","counters":[]},{"line":"  let read_or_generate ~prev_challenges cache k_p k_v typ return_typ main =","counters":[]},{"line":"    let s_p = storable in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let s_v = vk_storable in","counters":[]},{"line":"    let open Impls.Step in","counters":[]},{"line":"    let pk =","counters":[]},{"line":"      lazy","counters":[]},{"line":"        ( match","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            Common.time \"step keypair read\" (fun () ->","counters":[]},{"line":"                Key_cache.Sync.read cache s_p (Lazy.force k_p) )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"          with","counters":[]},{"line":"        | Ok (pk, dirty) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Common.time \"step keypair create\" (fun () ->","counters":[]},{"line":"                (Keypair.create ~pk ~vk:(Backend.Tick.Keypair.vk pk), dirty) )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        | Error _e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let r =","counters":[]},{"line":"              Common.time \"stepkeygen\" (fun () ->","counters":[]},{"line":"                  constraint_system ~input_typ:typ ~return_typ main","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"                  |> Keypair.generate ~prev_challenges )","counters":[]},{"line":"            in","counters":[]},{"line":"            Timer.clock __LOC__ ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            ignore","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ( Key_cache.Sync.write cache s_p (Lazy.force k_p) (Keypair.pk r)","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"                : unit Or_error.t ) ;","counters":[]},{"line":"            (r, `Generated_something) )","counters":[]},{"line":"    in","counters":[]},{"line":"    let vk =","counters":[]},{"line":"      lazy","counters":[]},{"line":"        (let k_v = Lazy.force k_v in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         match","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Common.time \"step vk read\" (fun () ->","counters":[]},{"line":"               Key_cache.Sync.read cache s_v k_v )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"         with","counters":[]},{"line":"         | Ok (vk, _) ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             (vk, `Cache_hit)","counters":[]},{"line":"         | Error _e ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             let pk, c = Lazy.force pk in","counters":[]},{"line":"             let vk = Keypair.vk pk in","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             ignore (Key_cache.Sync.write cache s_v k_v vk : unit Or_error.t) ;","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"             (vk, c) )","counters":[]},{"line":"    in","counters":[]},{"line":"    (pk, vk)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Wrap = struct","counters":[]},{"line":"  module Key = struct","counters":[]},{"line":"    module Verification = struct","counters":[]},{"line":"      type t = Type_equal.Id.Uid.t * Snark_keys_header.t * Md5.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"      let equal ((_, x1, y1) : t) ((_, x2, y2) : t) =","counters":[]},{"line":"        [%equal: unit * Md5.t] ((* TODO: *) ignore x1, y1) (ignore x2, y2)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"      let to_string : t -> _ = function","counters":[]},{"line":"        | _id, header, h ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf !\"vk-wrap-%s-%s-%s\" header.kind.type_ header.kind.identifier","counters":[]},{"line":"              header.identifying_hash","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Proving = struct","counters":[]},{"line":"      type t =","counters":[]},{"line":"        Type_equal.Id.Uid.t","counters":[]},{"line":"        * Snark_keys_header.t","counters":[]},{"line":"        * Backend.Tock.R1CS_constraint_system.t","counters":[]},{"line":"","counters":[]},{"line":"      let to_string : t -> _ = function","counters":[]},{"line":"        | _id, header, h ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf !\"wrap-%s-%s-%s\" header.kind.type_ header.kind.identifier","counters":[]},{"line":"              header.identifying_hash","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let storable =","counters":[]},{"line":"    Key_cache.Sync.Disk_storable.simple Key.Proving.to_string","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"      (fun (_, header, cs) ~path ->","counters":[]},{"line":"        Or_error.try_with_join (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let open Or_error.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let%map header_read, index =","counters":[]},{"line":"              Snark_keys_header.read_with_header","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                ~read_data:(fun ~offset ->","counters":[]},{"line":"                  Kimchi_bindings.Protocol.Index.Fq.read (Some offset)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    (Backend.Tock.Keypair.load_urs ()) )","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                path","counters":[]},{"line":"            in","counters":[]},{"line":"            [%test_eq: int] header.header_version header_read.header_version ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Kind.t] header.kind header_read.kind ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            [%test_eq: Snark_keys_header.Constraint_constants.t]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header.constraint_constants header_read.constraint_constants ;","counters":[]},{"line":"            [%test_eq: string] header.constraint_system_hash","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              header_read.constraint_system_hash ;","counters":[]},{"line":"            { Backend.Tock.Keypair.index; cs } ) )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      (fun (_, header, _) t path ->","counters":[]},{"line":"        Or_error.try_with (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            Snark_keys_header.write_with_header","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~expected_max_size_log2:33 (* 8 GB should be enough *)","counters":[]},{"line":"              ~append_data:","counters":[]},{"line":"                (Kimchi_bindings.Protocol.Index.Fq.write (Some true) t.index)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"              header path ) )","counters":[]},{"line":"","counters":[]},{"line":"  let read_or_generate ~prev_challenges cache k_p k_v typ return_typ main =","counters":[]},{"line":"    let module Vk = Verification_key in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Impls.Wrap in","counters":[]},{"line":"    let s_p = storable in","counters":[]},{"line":"    let pk =","counters":[]},{"line":"      lazy","counters":[]},{"line":"        (let k = Lazy.force k_p in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         match","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Common.time \"wrap key read\" (fun () ->","counters":[]},{"line":"               Key_cache.Sync.read cache s_p k )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"         with","counters":[]},{"line":"         | Ok (pk, d) ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             (Keypair.create ~pk ~vk:(Backend.Tock.Keypair.vk pk), d)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"         | Error _e ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             let r =","counters":[]},{"line":"               Common.time \"wrapkeygen\" (fun () ->","counters":[]},{"line":"                   constraint_system ~input_typ:typ ~return_typ main","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"                   |> Keypair.generate ~prev_challenges )","counters":[]},{"line":"             in","counters":[]},{"line":"             ignore","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               ( Key_cache.Sync.write cache s_p k (Keypair.pk r)","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"                 : unit Or_error.t ) ;","counters":[]},{"line":"             (r, `Generated_something) )","counters":[]},{"line":"    in","counters":[]},{"line":"    let vk =","counters":[]},{"line":"      lazy","counters":[]},{"line":"        (let k_v = Lazy.force k_v in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         let s_v =","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Key_cache.Sync.Disk_storable.simple Key.Verification.to_string","counters":[]},{"line":"             (fun (_, header, cs) ~path ->","counters":[]},{"line":"               Or_error.try_with_join (fun () ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                   let open Or_error.Let_syntax in","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                   let%map header_read, index =","counters":[]},{"line":"                     Snark_keys_header.read_with_header","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                       ~read_data:(fun ~offset path ->","counters":[]},{"line":"                         Binable.of_string","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                           (module Vk.Stable.Latest)","counters":[]},{"line":"                           (In_channel.read_all path) )","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                       path","counters":[]},{"line":"                   in","counters":[]},{"line":"                   [%test_eq: int] header.header_version","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                     header_read.header_version ;","counters":[]},{"line":"                   [%test_eq: Snark_keys_header.Kind.t] header.kind","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                     header_read.kind ;","counters":[]},{"line":"                   [%test_eq: Snark_keys_header.Constraint_constants.t]","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                     header.constraint_constants","counters":[]},{"line":"                     header_read.constraint_constants ;","counters":[]},{"line":"                   [%test_eq: string] header.constraint_system_hash","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                     header_read.constraint_system_hash ;","counters":[]},{"line":"                   index ) )","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"             (fun (_, header, _) t path ->","counters":[]},{"line":"               Or_error.try_with (fun () ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                   Snark_keys_header.write_with_header","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     ~expected_max_size_log2:33 (* 8 GB should be enough *)","counters":[]},{"line":"                     ~append_data:(fun path ->","counters":[]},{"line":"                       Out_channel.with_file ~append:true path ~f:(fun file ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                           Out_channel.output_string file","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                             (Binable.to_string (module Vk.Stable.Latest) t) )","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                       )","counters":[]},{"line":"                     header path ) )","counters":[]},{"line":"         in","counters":[]},{"line":"         match Key_cache.Sync.read cache s_v k_v with","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         | Ok (vk, d) ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             (vk, d)","counters":[]},{"line":"         | Error e ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             let kp, _dirty = Lazy.force pk in","counters":[]},{"line":"             let vk = Keypair.vk kp in","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             let pk = Keypair.pk kp in","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             let vk : Vk.t =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               { index = vk","counters":[]},{"line":"               ; commitments =","counters":[]},{"line":"                   Kimchi_pasta.Pallas_based_plonk.Keypair.vk_commitments vk","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"               ; data =","counters":[]},{"line":"                   (let open Kimchi_bindings.Protocol.Index.Fq in","counters":[]},{"line":"                   { constraints = domain_d1_size pk.index })","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"               }","counters":[]},{"line":"             in","counters":[]},{"line":"             ignore (Key_cache.Sync.write cache s_v k_v vk : unit Or_error.t) ;","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"             let _vk = Key_cache.Sync.read cache s_v k_v in","counters":[]},{"line":"             (vk, `Generated_something) )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    in","counters":[]},{"line":"    (pk, vk)","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}