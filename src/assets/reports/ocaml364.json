{"filename":"src/lib/mina_base/zkapp_call_forest.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(* Same as the type of the field account_updates in Mina_base.Zkapp_command.t *)","counters":[]},{"line":"type t =","counters":[]},{"line":"  ( Account_update.t","counters":[]},{"line":"  , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"  , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"  Zkapp_command.Call_forest.t","counters":[]},{"line":"","counters":[]},{"line":"type account_update =","counters":[]},{"line":"  (Account_update.t, Zkapp_command.Digest.Account_update.t) With_hash.t","counters":[]},{"line":"","counters":[]},{"line":"let empty () = []","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"let if_ = Zkapp_command.value_if","counters":[]},{"line":"","counters":[]},{"line":"let is_empty = List.is_empty","counters":[]},{"line":"","counters":[]},{"line":"let pop_exn : t -> (Account_update.t * t) * t = function","counters":[]},{"line":"  | { stack_hash = _","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; elt = { account_update; calls; account_update_digest = _ }","counters":[]},{"line":"    }","counters":[]},{"line":"    :: xs ->","counters":[]},{"line":"      ((account_update, calls), xs)","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith \"pop_exn\"","counters":[]},{"line":"","counters":[]},{"line":"let push ~account_update ~calls t =","counters":[]},{"line":"  Zkapp_command.Call_forest.cons ~calls account_update t","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let hash (t : t) = Zkapp_command.Call_forest.hash t","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"open Snark_params.Tick.Run","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  module F = Zkapp_command.Digest.Forest.Checked","counters":[]},{"line":"  module V = Prover_value","counters":[]},{"line":"","counters":[]},{"line":"  type account_update =","counters":[]},{"line":"    { account_update :","counters":[]},{"line":"        ( Account_update.Body.Checked.t","counters":[]},{"line":"        , Zkapp_command.Digest.Account_update.Checked.t )","counters":[]},{"line":"        With_hash.t","counters":[]},{"line":"    ; control : Control.t Prover_value.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let account_update_typ () :","counters":[]},{"line":"      ( account_update","counters":[]},{"line":"      , (Account_update.t, Zkapp_command.Digest.Account_update.t) With_hash.t","counters":[]},{"line":"      )","counters":[]},{"line":"      Typ.t =","counters":[]},{"line":"    let (Typ typ) =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Typ.(","counters":[]},{"line":"        Account_update.Body.typ () * Prover_value.typ ()","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"        * Zkapp_command.Digest.Account_update.typ)","counters":[]},{"line":"      |> Typ.transport","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"           ~back:(fun ((body, authorization), hash) ->","counters":[]},{"line":"             { With_hash.data = { Account_update.body; authorization }; hash }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             )","counters":[]},{"line":"           ~there:(fun { With_hash.data = { Account_update.body; authorization }","counters":[]},{"line":"                       ; hash","counters":[]},{"line":"                       } -> ((body, authorization), hash) )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      |> Typ.transport_var","counters":[]},{"line":"           ~back:(fun ((account_update, control), hash) ->","counters":[]},{"line":"             { account_update = { hash; data = account_update }; control } )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"           ~there:(fun { account_update = { hash; data = account_update }","counters":[]},{"line":"                       ; control","counters":[]},{"line":"                       } -> ((account_update, control), hash) )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    in","counters":[]},{"line":"    Typ","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { typ with","counters":[]},{"line":"        check =","counters":[]},{"line":"          (fun ( { account_update = { hash; data = account_update }","counters":[]},{"line":"                 ; control = _","counters":[]},{"line":"                 } as x ) ->","counters":[]},{"line":"            make_checked_ast (fun () ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                run_checked_ast (typ.check x) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"                Field.Assert.equal","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (hash :> Field.t)","counters":[]},{"line":"                  ( Zkapp_command.Call_forest.Digest.Account_update.Checked","counters":[]},{"line":"                    .create account_update","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                    :> Field.t ) ) )","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( ( Account_update.t","counters":[]},{"line":"      , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"      , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"      Zkapp_command.Call_forest.t","counters":[]},{"line":"      V.t","counters":[]},{"line":"    , F.t )","counters":[]},{"line":"    With_hash.t","counters":[]},{"line":"","counters":[]},{"line":"  let if_ b ~then_:(t : t) ~else_:(e : t) : t =","counters":[]},{"line":"    { hash = F.if_ b ~then_:t.hash ~else_:e.hash","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    ; data = V.if_ b ~then_:t.data ~else_:e.data","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let empty =","counters":[]},{"line":"    Zkapp_command.Digest.Forest.constant","counters":[{"col_start":39,"col_end":39,"count":1}]},{"line":"      Zkapp_command.Call_forest.With_hashes.empty","counters":[]},{"line":"","counters":[]},{"line":"  let is_empty ({ hash = x; _ } : t) = F.equal empty x","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let empty () : t = { hash = empty; data = V.create (fun () -> []) }","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"  let pop_exn ({ hash = h; data = r } : t) : (account_update * t) * t =","counters":[]},{"line":"    with_label \"Zkapp_call_forest.pop_exn\" (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let hd_r =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.create (fun () -> V.get r |> List.hd_exn |> With_stack_hash.elt)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        in","counters":[]},{"line":"        let account_update = V.create (fun () -> (V.get hd_r).account_update) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        let auth =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.(create (fun () -> (V.get account_update).authorization))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        in","counters":[]},{"line":"        let account_update =","counters":[]},{"line":"          exists (Account_update.Body.typ ()) ~compute:(fun () ->","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              (V.get account_update).body )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"        in","counters":[]},{"line":"        let account_update =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          With_hash.of_data account_update","counters":[]},{"line":"            ~hash_data:Zkapp_command.Digest.Account_update.Checked.create","counters":[]},{"line":"        in","counters":[]},{"line":"        let subforest : t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let subforest = V.create (fun () -> (V.get hd_r).calls) in","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          let subforest_hash =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            exists Zkapp_command.Digest.Forest.typ ~compute:(fun () ->","counters":[]},{"line":"                Zkapp_command.Call_forest.hash (V.get subforest) )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          in","counters":[]},{"line":"          { hash = subforest_hash; data = subforest }","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        in","counters":[]},{"line":"        let tl_hash =","counters":[]},{"line":"          exists Zkapp_command.Digest.Forest.typ ~compute:(fun () ->","counters":[]},{"line":"              V.get r |> List.tl_exn |> Zkapp_command.Call_forest.hash )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        in","counters":[]},{"line":"        let tree_hash =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Zkapp_command.Digest.Tree.Checked.create","counters":[]},{"line":"            ~account_update:account_update.hash ~calls:subforest.hash","counters":[]},{"line":"        in","counters":[]},{"line":"        let hash_cons =","counters":[]},{"line":"          Zkapp_command.Digest.Forest.Checked.cons tree_hash tl_hash","counters":[]},{"line":"        in","counters":[]},{"line":"        F.Assert.equal hash_cons h ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ( ( ({ account_update; control = auth }, subforest)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          , { hash = tl_hash","counters":[]},{"line":"            ; data = V.(create (fun () -> List.tl_exn (get r)))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"            } )","counters":[]},{"line":"          : (account_update * t) * t ) )","counters":[]},{"line":"","counters":[]},{"line":"  let push","counters":[]},{"line":"      ~account_update:","counters":[]},{"line":"        { account_update = { hash = account_update_hash; data = account_update }","counters":[]},{"line":"        ; control = auth","counters":[]},{"line":"        } ~calls:({ hash = calls_hash; data = calls } : t)","counters":[]},{"line":"      ({ hash = tl_hash; data = tl_data } : t) : t =","counters":[]},{"line":"    with_label \"Zkapp_call_forest.push\" (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let tree_hash =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Zkapp_command.Digest.Tree.Checked.create","counters":[]},{"line":"            ~account_update:account_update_hash ~calls:calls_hash","counters":[]},{"line":"        in","counters":[]},{"line":"        let hash_cons =","counters":[]},{"line":"          Zkapp_command.Digest.Forest.Checked.cons tree_hash tl_hash","counters":[]},{"line":"        in","counters":[]},{"line":"        let data =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.create (fun () ->","counters":[]},{"line":"              let body =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                As_prover.read (Account_update.Body.typ ()) account_update","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"              in","counters":[]},{"line":"              let authorization = V.get auth in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let tl = V.get tl_data in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let account_update : Account_update.t = { body; authorization } in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let calls = V.get calls in","counters":[]},{"line":"              let res =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Zkapp_command.Call_forest.cons ~calls account_update tl","counters":[]},{"line":"              in","counters":[]},{"line":"              (* Sanity check; we're re-hashing anyway, might as well make sure it's","counters":[]},{"line":"                 consistent.","counters":[]},{"line":"              *)","counters":[]},{"line":"              assert (","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"                Zkapp_command.Digest.Forest.(","counters":[]},{"line":"                  equal","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    (As_prover.read typ hash_cons)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                    (Zkapp_command.Call_forest.hash res)) ) ;","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"              res )","counters":[]},{"line":"        in","counters":[]},{"line":"        ({ hash = hash_cons; data } : t) )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let hash ({ hash; _ } : t) = hash","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let typ : (Checked.t, t) Typ.t =","counters":[]},{"line":"  Typ.(Zkapp_command.Digest.Forest.typ * Prover_value.typ ())","counters":[{"col_start":56,"col_end":56,"count":1}]},{"line":"  |> Typ.transport","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"       ~back:(fun (_digest, forest) ->","counters":[]},{"line":"         Zkapp_command.Call_forest.map","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           ~f:(fun account_update -> account_update)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"           forest )","counters":[]},{"line":"       ~there:(fun forest ->","counters":[]},{"line":"         ( Zkapp_command.Call_forest.hash forest","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"         , Zkapp_command.Call_forest.map","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"             ~f:(fun account_update -> account_update)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"             forest ) )","counters":[]},{"line":"  |> Typ.transport_var","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"       ~back:(fun (digest, forest) -> { With_hash.hash = digest; data = forest })","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"       ~there:(fun { With_hash.hash = digest; data = forest } ->","counters":[]},{"line":"         (digest, forest) )","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":26,"col_end":26,"count":1}]}]}