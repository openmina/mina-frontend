{"filename":"src/lib/network_pool/pool_sink.ml","lines":[{"line":"open Pipe_lib","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type BC_ext = sig","counters":[]},{"line":"  include Intf.Broadcast_callback","counters":[]},{"line":"","counters":[]},{"line":"  val is_expired : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val error : Error.t -> t -> unit Deferred.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Pool_sink = sig","counters":[]},{"line":"  include Mina_net2.Sink.S_with_void","counters":[]},{"line":"","counters":[]},{"line":"  type unwrapped_t","counters":[]},{"line":"","counters":[]},{"line":"  type pool","counters":[]},{"line":"","counters":[]},{"line":"  val create :","counters":[]},{"line":"       ?on_push:(unit -> unit Deferred.t)","counters":[]},{"line":"    -> ?log_gossip_heard:bool","counters":[]},{"line":"    -> wrap:(unwrapped_t -> 'wrapped_t)","counters":[]},{"line":"    -> unwrap:('wrapped_t -> unwrapped_t)","counters":[]},{"line":"    -> trace_label:string","counters":[]},{"line":"    -> logger:Logger.t","counters":[]},{"line":"    -> pool","counters":[]},{"line":"    -> 'wrapped_t Strict_pipe.Reader.t * t * Rate_limiter.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Base","counters":[]},{"line":"    (Diff : Intf.Resource_pool_diff_intf)","counters":[]},{"line":"    (BC : BC_ext","counters":[]},{"line":"            with type resource_pool_diff = Diff.t","counters":[]},{"line":"             and type rejected_diff = Diff.rejected)","counters":[]},{"line":"    (Msg : sig","counters":[]},{"line":"      type raw_msg","counters":[]},{"line":"","counters":[]},{"line":"      type raw_callback","counters":[]},{"line":"","counters":[]},{"line":"      val convert_callback : raw_callback -> BC.t","counters":[]},{"line":"","counters":[]},{"line":"      val convert : raw_msg -> Diff.t Envelope.Incoming.t","counters":[]},{"line":"    end) :","counters":[]},{"line":"  Pool_sink","counters":[]},{"line":"    with type pool := Diff.pool","counters":[]},{"line":"     and type unwrapped_t = Diff.verified Envelope.Incoming.t * BC.t","counters":[]},{"line":"     and type msg := Msg.raw_msg * Msg.raw_callback = struct","counters":[]},{"line":"  type unwrapped_t = Diff.verified Envelope.Incoming.t * BC.t","counters":[]},{"line":"","counters":[]},{"line":"  (* TODO consider moving these constants elsewhere *)","counters":[]},{"line":"  let max_waiting_jobs = 2048","counters":[]},{"line":"","counters":[]},{"line":"  let max_concurrent_jobs = 1024","counters":[]},{"line":"","counters":[]},{"line":"  let verified_pipe_capacity = 1024","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    | Sink :","counters":[]},{"line":"        { writer :","counters":[]},{"line":"            ( 'w","counters":[]},{"line":"            , Strict_pipe.call Strict_pipe.buffered","counters":[]},{"line":"            , unit Deferred.t option )","counters":[]},{"line":"            Strict_pipe.Writer.t","counters":[]},{"line":"        ; logger : Logger.t","counters":[]},{"line":"        ; rate_limiter : Rate_limiter.t","counters":[]},{"line":"        ; pool : Diff.pool","counters":[]},{"line":"        ; wrap : unwrapped_t -> 'w","counters":[]},{"line":"        ; trace_label : string","counters":[]},{"line":"        ; throttle : unit Throttle.t","counters":[]},{"line":"        ; on_push : unit -> unit Deferred.t","counters":[]},{"line":"        ; log_gossip_heard : bool","counters":[]},{"line":"        }","counters":[]},{"line":"        -> t","counters":[]},{"line":"    | Void","counters":[]},{"line":"","counters":[]},{"line":"  let on_overflow ~unwrap logger m =","counters":[]},{"line":"    match unwrap m with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | env, cb ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Mina_metrics.(","counters":[]},{"line":"          Counter.inc_one Pipe.Drop_on_overflow.verified_network_pool_diffs) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        let diff = Envelope.Incoming.data env in","counters":[]},{"line":"        [%log' warn logger] \"Dropping verified diff $diff due to pipe overflow\"","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"          ~metadata:[ (\"diff\", Diff.verified_to_yojson diff) ] ;","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"        BC.drop Diff.empty (Diff.reject_overloaded_diff diff) cb","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"  let verify_impl ~logger ~trace_label resource_pool rl env cb :","counters":[]},{"line":"      Diff.verified Envelope.Incoming.t option Deferred.t =","counters":[]},{"line":"    let handle_diffs_thread_label = \"handle_\" ^ trace_label ^ \"_diffs\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"    let verify_diffs_thread_label = \"verify_\" ^ trace_label ^ \"_diffs\" in","counters":[]},{"line":"    O1trace.sync_thread handle_diffs_thread_label (fun () ->","counters":[]},{"line":"        if BC.is_expired cb then Deferred.return None","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        else","counters":[]},{"line":"          let summary = `String (Diff.summary @@ Envelope.Incoming.data env) in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"          [%log' debug logger] \"Verifying $diff from $sender\"","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ (\"diff\", summary)","counters":[]},{"line":"              ; (\"sender\", Envelope.Sender.to_yojson env.sender)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"              ] ;","counters":[]},{"line":"          match","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Rate_limiter.add rl env.sender ~now:(Time.now ())","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"              ~score:(Diff.score env.data)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          with","counters":[]},{"line":"          | `Capacity_exceeded ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [%log' debug logger]","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                ~metadata:","counters":[]},{"line":"                  [ (\"sender\", Envelope.Sender.to_yojson env.sender)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                  ; (\"diff\", summary)","counters":[]},{"line":"                  ]","counters":[]},{"line":"                \"exceeded capacity from $sender\" ;","counters":[]},{"line":"              BC.error (Error.of_string \"exceeded capacity\") cb","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"              >>| fun _ -> None","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          | `Within_capacity ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              O1trace.thread verify_diffs_thread_label (fun () ->","counters":[]},{"line":"                  match%bind Diff.verify resource_pool env with","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  | Error err ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      [%log' debug logger]","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                        \"Refusing to rebroadcast $diff. Verification error: \\","counters":[]},{"line":"                         $error\"","counters":[]},{"line":"                        ~metadata:","counters":[]},{"line":"                          [ (\"diff\", summary)","counters":[]},{"line":"                          ; (\"error\", Error_json.error_to_yojson err)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                          ] ;","counters":[]},{"line":"                      (*reject incoming messages*)","counters":[]},{"line":"                      BC.error err cb >>| fun _ -> None","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"                  | Ok verified_diff ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      [%log' debug logger] \"Verified diff: $verified_diff\"","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                        ~metadata:","counters":[]},{"line":"                          [ ( \"verified_diff\"","counters":[]},{"line":"                            , Diff.verified_to_yojson","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                              @@ Envelope.Incoming.data verified_diff )","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                          ; ( \"sender\"","counters":[]},{"line":"                            , Envelope.Sender.to_yojson","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                              @@ Envelope.Incoming.sender verified_diff )","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                          ] ;","counters":[]},{"line":"                      Deferred.return (Some verified_diff) ) )","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let push t (msg, cb) =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Sink","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { writer = w","counters":[]},{"line":"        ; logger","counters":[]},{"line":"        ; rate_limiter = rl","counters":[]},{"line":"        ; pool","counters":[]},{"line":"        ; wrap","counters":[]},{"line":"        ; trace_label","counters":[]},{"line":"        ; throttle","counters":[]},{"line":"        ; on_push","counters":[]},{"line":"        ; log_gossip_heard","counters":[]},{"line":"        } ->","counters":[]},{"line":"        O1trace.sync_thread (sprintf \"handle_%s_gossip\" trace_label)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        @@ fun () ->","counters":[]},{"line":"        let%bind () = on_push () in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        let env' = Msg.convert msg in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let cb' = Msg.convert_callback cb in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ( match cb' with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | BC.External cb'' ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Diff.update_metrics env' cb''","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"              (Option.some_if log_gossip_heard logger)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            () ) ;","counters":[]},{"line":"        if Throttle.num_jobs_waiting_to_start throttle > max_waiting_jobs then","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"          [%log warn] \"Ignoring push to %s: throttle is full\" trace_label","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"        else","counters":[]},{"line":"          don't_wait_for","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            (Throttle.enqueue throttle (fun () ->","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                 match%bind","counters":[]},{"line":"                   verify_impl ~logger ~trace_label pool rl env' cb'","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                 with","counters":[]},{"line":"                 | None ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     [%log debug] \"Received unverified gossip on %s\" trace_label","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                       ~metadata:","counters":[]},{"line":"                         [ (\"sender\", Envelope.Sender.to_yojson env'.sender)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                         ; ( \"received_at\"","counters":[]},{"line":"                           , `String (Time.to_string env'.received_at) )","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                         ] ;","counters":[]},{"line":"                     Deferred.unit","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                 | Some verified_env ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     let m' = wrap (verified_env, cb') in","counters":[]},{"line":"                     Option.value ~default:Deferred.unit","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       (Strict_pipe.Writer.write w m') ) ) ;","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"        Deferred.unit","counters":[]},{"line":"    | Void ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Deferred.unit","counters":[]},{"line":"","counters":[]},{"line":"  let create ?(on_push = Fn.const Deferred.unit) ?(log_gossip_heard = false)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"      ~wrap ~unwrap ~trace_label ~logger pool =","counters":[]},{"line":"    let r, writer =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Strict_pipe.create ~name:\"verified network pool diffs\"","counters":[]},{"line":"        (Buffered","counters":[]},{"line":"           ( `Capacity verified_pipe_capacity","counters":[]},{"line":"           , `Overflow (Call (on_overflow ~unwrap logger)) ) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    in","counters":[]},{"line":"","counters":[]},{"line":"    let rate_limiter =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Rate_limiter.create","counters":[]},{"line":"        ~capacity:(Diff.max_per_15_seconds, `Per (Time.Span.of_sec 15.0))","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"    in","counters":[]},{"line":"    let throttle =","counters":[]},{"line":"      Throttle.create ~continue_on_error:true ~max_concurrent_jobs","counters":[]},{"line":"    in","counters":[]},{"line":"    ( r","counters":[]},{"line":"    , Sink","counters":[]},{"line":"        { writer","counters":[]},{"line":"        ; logger","counters":[]},{"line":"        ; rate_limiter","counters":[]},{"line":"        ; pool","counters":[]},{"line":"        ; wrap","counters":[]},{"line":"        ; trace_label","counters":[]},{"line":"        ; throttle","counters":[]},{"line":"        ; on_push","counters":[]},{"line":"        ; log_gossip_heard","counters":[]},{"line":"        }","counters":[]},{"line":"    , rate_limiter )","counters":[]},{"line":"","counters":[]},{"line":"  let void = Void","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Local_sink","counters":[]},{"line":"    (Diff : Intf.Resource_pool_diff_intf)","counters":[]},{"line":"    (BC : BC_ext","counters":[]},{"line":"            with type resource_pool_diff = Diff.t","counters":[]},{"line":"             and type rejected_diff = Diff.rejected) :","counters":[]},{"line":"  Pool_sink","counters":[]},{"line":"    with type pool := Diff.pool","counters":[]},{"line":"     and type unwrapped_t = Diff.verified Envelope.Incoming.t * BC.t","counters":[]},{"line":"     and type msg :=","counters":[]},{"line":"      BC.resource_pool_diff","counters":[]},{"line":"      * (   ( [ `Broadcasted | `Not_broadcasted ]","counters":[]},{"line":"            * BC.resource_pool_diff","counters":[]},{"line":"            * BC.rejected_diff )","counters":[]},{"line":"            Or_error.t","counters":[]},{"line":"         -> unit ) =","counters":[]},{"line":"  Base (Diff) (BC)","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type raw_msg = BC.resource_pool_diff","counters":[]},{"line":"","counters":[]},{"line":"      type raw_callback =","counters":[]},{"line":"           ( [ `Broadcasted | `Not_broadcasted ]","counters":[]},{"line":"           * BC.resource_pool_diff","counters":[]},{"line":"           * BC.rejected_diff )","counters":[]},{"line":"           Or_error.t","counters":[]},{"line":"        -> unit","counters":[]},{"line":"","counters":[]},{"line":"      let convert_callback cb = BC.Local cb","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"      let convert m = Envelope.Incoming.local m","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"module Remote_sink","counters":[]},{"line":"    (Diff : Intf.Resource_pool_diff_intf)","counters":[]},{"line":"    (BC : BC_ext","counters":[]},{"line":"            with type resource_pool_diff = Diff.t","counters":[]},{"line":"             and type rejected_diff = Diff.rejected) :","counters":[]},{"line":"  Pool_sink","counters":[]},{"line":"    with type pool := Diff.pool","counters":[]},{"line":"     and type unwrapped_t = Diff.verified Envelope.Incoming.t * BC.t","counters":[]},{"line":"     and type msg :=","counters":[]},{"line":"      BC.resource_pool_diff Envelope.Incoming.t","counters":[]},{"line":"      * Mina_net2.Validation_callback.t =","counters":[]},{"line":"  Base (Diff) (BC)","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type raw_msg = BC.resource_pool_diff Envelope.Incoming.t","counters":[]},{"line":"","counters":[]},{"line":"      type raw_callback = Mina_net2.Validation_callback.t","counters":[]},{"line":"","counters":[]},{"line":"      let convert_callback cb = BC.External cb","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"      let convert m = m","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    end)","counters":[{"col_start":7,"col_end":7,"count":1}]}]}