{"filename":"src/lib/transition_frontier/frontier_base/diff.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"","counters":[]},{"line":"type full = Full","counters":[]},{"line":"","counters":[]},{"line":"type lite = Lite","counters":[]},{"line":"","counters":[]},{"line":"[@@@alert \"-deprecated\"]","counters":[]},{"line":"","counters":[]},{"line":"module Dummy_binable1 (T : sig","counters":[]},{"line":"  type 'a t","counters":[]},{"line":"end) =","counters":[]},{"line":"  Binable.Of_binable1","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type 'a t = unit [@@deriving bin_io_unversioned]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":3},{"col_start":53,"col_end":53,"count":1}]},{"line":"    end)","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type 'a t = 'a T.t","counters":[]},{"line":"","counters":[]},{"line":"      let to_binable _ = ()","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      let of_binable _ = assert false","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"module Dummy_binable2 (T : sig","counters":[]},{"line":"  type (_, _) t","counters":[]},{"line":"end) =","counters":[]},{"line":"  Binable.Of_binable2","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type (_, _) t = unit [@@deriving bin_io_unversioned]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":4},{"col_start":57,"col_end":57,"count":1}]},{"line":"    end)","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type ('a, 'b) t = ('a, 'b) T.t","counters":[]},{"line":"","counters":[]},{"line":"      let to_binable _ = ()","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      let of_binable _ = assert false","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"[@@@alert \"+deprecated\"]","counters":[]},{"line":"","counters":[]},{"line":"module Node = struct","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V3 = struct","counters":[]},{"line":"      type 'a t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | Full : Breadcrumb.t -> full t","counters":[]},{"line":"        | Lite : Mina_block.Validated.Stable.V2.t -> lite t","counters":[]},{"line":"","counters":[]},{"line":"      include Dummy_binable1 (struct","counters":[]},{"line":"        type nonrec 'a t = 'a t","counters":[]},{"line":"      end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Node_list = struct","counters":[]},{"line":"  type full_node =","counters":[]},{"line":"    { transition : Mina_block.Validated.t","counters":[]},{"line":"    ; scan_state : Staged_ledger.Scan_state.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  type lite_node = State_hash.t","counters":[]},{"line":"","counters":[]},{"line":"  (* Full representation unfortunately cannot be breadcrumbs since they","counters":[]},{"line":"   * will no longer be linked after mutation *)","counters":[]},{"line":"  type _ t = Full : full_node list -> full t | Lite : lite_node list -> lite t","counters":[]},{"line":"","counters":[]},{"line":"  type 'repr node_list = 'repr t","counters":[]},{"line":"","counters":[]},{"line":"  let to_lite =","counters":[]},{"line":"    List.map ~f:(fun { transition; _ } ->","counters":[]},{"line":"        Mina_block.Validated.state_hash transition )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  module Lite = struct","counters":[]},{"line":"    module Binable_arg = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"        module V1 = struct","counters":[]},{"line":"          type t = State_hash.Stable.V1.t list","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":1},{"col_start":45,"col_end":45,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned_binable","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = lite node_list","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"        module T_nonbinable = struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable (Lite ls) = ls","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"          let of_binable ls = Lite ls","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        include Binable.Of_binable (Binable_arg.Stable.V1) (T_nonbinable)","counters":[]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Root_transition = struct","counters":[]},{"line":"  type 'repr t =","counters":[]},{"line":"    { new_root : Root_data.Limited.t","counters":[]},{"line":"    ; garbage : 'repr Node_list.t","counters":[]},{"line":"    ; just_emitted_a_proof : bool","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  type 'repr root_transition = 'repr t","counters":[]},{"line":"","counters":[]},{"line":"  module Lite_binable = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V4 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { new_root : Root_data.Limited.Stable.V3.t","counters":[]},{"line":"          ; garbage : Node_list.Lite.Stable.V1.t","counters":[]},{"line":"          ; just_emitted_a_proof : bool","counters":[]},{"line":"          }","counters":[{"col_start":10,"col_end":10,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Lite = struct","counters":[]},{"line":"    module Binable_arg = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"        module V4 = struct","counters":[]},{"line":"          type t = Lite_binable.Stable.V4.t","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":1},{"col_start":42,"col_end":42,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned_binable","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V4 = struct","counters":[]},{"line":"        type t = lite root_transition","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":36,"col_end":36,"count":1}]},{"line":"","counters":[]},{"line":"        module T_nonbinable = struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable ({ new_root; garbage; just_emitted_a_proof } : t) :","counters":[]},{"line":"              Binable_arg.Stable.V4.t =","counters":[]},{"line":"            { new_root; garbage; just_emitted_a_proof }","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"          let of_binable","counters":[]},{"line":"              ({ new_root; garbage; just_emitted_a_proof } :","counters":[]},{"line":"                Binable_arg.Stable.V4.t ) : t =","counters":[]},{"line":"            { new_root; garbage; just_emitted_a_proof }","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        include Binable.Of_binable (Binable_arg.Stable.V4) (T_nonbinable)","counters":[]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ('repr, 'mutant) t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | New_node : 'repr Node.Stable.V3.t -> ('repr, unit) t","counters":[]},{"line":"        | Root_transitioned : 'repr Root_transition.t -> ('repr, State_hash.t) t","counters":[]},{"line":"        | Best_tip_changed : State_hash.t -> (_, State_hash.t) t","counters":[]},{"line":"","counters":[]},{"line":"      include Dummy_binable2 (struct","counters":[]},{"line":"        type nonrec ('a, 'b) t = ('a, 'b) t","counters":[]},{"line":"      end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type ('repr, 'mutant) t = ('repr, 'mutant) T.t =","counters":[]},{"line":"  | New_node : 'repr Node.t -> ('repr, unit) t","counters":[]},{"line":"  | Root_transitioned : 'repr Root_transition.t -> ('repr, State_hash.t) t","counters":[]},{"line":"  | Best_tip_changed : State_hash.t -> (_, State_hash.t) t","counters":[]},{"line":"","counters":[]},{"line":"type ('repr, 'mutant) diff = ('repr, 'mutant) T.t","counters":[]},{"line":"","counters":[]},{"line":"let name : type repr mutant. (repr, mutant) t -> string = function","counters":[]},{"line":"  | Root_transitioned _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"Root_transitioned\"","counters":[]},{"line":"  | New_node _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"New_node\"","counters":[]},{"line":"  | Best_tip_changed _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"Best_tip_changed\"","counters":[]},{"line":"","counters":[]},{"line":"let to_yojson (type repr mutant) (key : (repr, mutant) t) =","counters":[]},{"line":"  let json_key =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match key with","counters":[]},{"line":"    | New_node (Full breadcrumb) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        State_hash.to_yojson (Breadcrumb.state_hash breadcrumb)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    | New_node (Lite transition) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        State_hash.to_yojson (Mina_block.Validated.state_hash transition)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"    | Root_transitioned { new_root; garbage; just_emitted_a_proof } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let garbage_hashes =","counters":[]},{"line":"          match garbage with","counters":[]},{"line":"          | Node_list.Full nodes ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Node_list.to_lite nodes","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          | Node_list.Lite hashes ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              hashes","counters":[]},{"line":"        in","counters":[]},{"line":"        `Assoc","counters":[]},{"line":"          [ ( \"new_root\"","counters":[]},{"line":"            , State_hash.to_yojson","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                (Root_data.Limited.hashes new_root).state_hash )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; (\"garbage\", `List (List.map ~f:State_hash.to_yojson garbage_hashes))","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"          ; (\"just_emitted_a_proof\", `Bool just_emitted_a_proof)","counters":[]},{"line":"          ]","counters":[]},{"line":"    | Best_tip_changed breadcrumb ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        State_hash.to_yojson breadcrumb","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  in","counters":[]},{"line":"  `Assoc [ (name key, json_key) ]","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"let to_lite (type mutant) (diff : (full, mutant) t) : (lite, mutant) t =","counters":[]},{"line":"  match diff with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | New_node (Full breadcrumb) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let external_transition = Breadcrumb.validated_transition breadcrumb in","counters":[]},{"line":"      New_node (Lite external_transition)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Root_transitioned","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { new_root; garbage = Full garbage_nodes; just_emitted_a_proof } ->","counters":[]},{"line":"      Root_transitioned","counters":[]},{"line":"        { new_root","counters":[]},{"line":"        ; garbage = Lite (Node_list.to_lite garbage_nodes)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ; just_emitted_a_proof","counters":[]},{"line":"        }","counters":[]},{"line":"  | Best_tip_changed b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Best_tip_changed b","counters":[]},{"line":"","counters":[]},{"line":"module Lite_binable = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V3 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        | New_node of Mina_block.Validated.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Root_transitioned of Root_transition.Lite.Stable.V4.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Best_tip_changed of State_hash.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":51,"col_end":51,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Lite = struct","counters":[]},{"line":"  type 'mutant t = (lite, 'mutant) diff","counters":[]},{"line":"","counters":[]},{"line":"  module E = struct","counters":[]},{"line":"    module Binable_arg = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"        module V3 = struct","counters":[]},{"line":"          type t = Lite_binable.Stable.V3.t","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":1},{"col_start":42,"col_end":42,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned_binable","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V3 = struct","counters":[]},{"line":"        type t = E : (lite, 'mutant) diff -> t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"        module T_nonbinable = struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable = function","counters":[]},{"line":"            | E (New_node (Lite x)) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (New_node x : Binable_arg.Stable.V3.t)","counters":[]},{"line":"            | E (Root_transitioned x) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Root_transitioned x","counters":[]},{"line":"            | E (Best_tip_changed x) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Best_tip_changed x","counters":[]},{"line":"","counters":[]},{"line":"          let of_binable = function","counters":[]},{"line":"            | (New_node x : Binable_arg.Stable.V3.t) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                E (New_node (Lite x))","counters":[]},{"line":"            | Root_transitioned x ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                E (Root_transitioned x)","counters":[]},{"line":"            | Best_tip_changed x ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                E (Best_tip_changed x)","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        include Binable.Of_binable (Binable_arg.Stable.V3) (T_nonbinable)","counters":[]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    include (Stable.Latest : module type of Stable.Latest)","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Full = struct","counters":[]},{"line":"  type 'mutant t = (full, 'mutant) diff","counters":[]},{"line":"","counters":[]},{"line":"  module E = struct","counters":[]},{"line":"    type t = E : (full, 'mutant) diff -> t","counters":[]},{"line":"","counters":[]},{"line":"    let to_lite (E diff) = Lite.E.E (to_lite diff)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    let to_yojson (E diff) = to_yojson diff","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module With_mutant = struct","counters":[]},{"line":"    type t = E : (full, 'mutant) diff * 'mutant -> t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}