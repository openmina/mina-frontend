{"filename":"src/lib/pickles/verification_key.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Import","counters":[]},{"line":"open Kimchi_pasta.Pasta","counters":[]},{"line":"","counters":[]},{"line":"module Verifier_index_json = struct","counters":[]},{"line":"  module Lookup = struct","counters":[]},{"line":"    type lookups_used = Kimchi_types.VerifierIndex.Lookup.lookups_used =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      | Single","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Joint","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving yojson]","counters":[]},{"line":"","counters":[]},{"line":"    type 't lookup_selectors =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"          't Kimchi_types.VerifierIndex.Lookup.lookup_selectors =","counters":[]},{"line":"      { lookup_gate : 't option }","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    [@@deriving yojson]","counters":[]},{"line":"","counters":[]},{"line":"    type 'polyComm t = 'polyComm Kimchi_types.VerifierIndex.Lookup.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { lookup_used : lookups_used","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      ; lookup_table : 'polyComm array","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      ; lookup_selectors : 'polyComm lookup_selectors","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; table_ids : 'polyComm option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; max_joint_size : int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      ; runtime_tables_selector : 'polyComm option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson]","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type 'fr domain = 'fr Kimchi_types.VerifierIndex.domain =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { log_size_of_group : int; group_gen : 'fr }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  type 'polyComm verification_evals =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"        'polyComm Kimchi_types.VerifierIndex.verification_evals =","counters":[]},{"line":"    { sigma_comm : 'polyComm array","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; coefficients_comm : 'polyComm array","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; generic_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; psm_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    ; complete_add_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    ; mul_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    ; emul_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; endomul_scalar_comm : 'polyComm","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; chacha_comm : 'polyComm array option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  type ('fr, 'sRS, 'polyComm) verifier_index =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"        ('fr, 'sRS, 'polyComm) Kimchi_types.VerifierIndex.verifier_index =","counters":[]},{"line":"    { domain : 'fr domain","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    ; max_poly_size : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    ; max_quot_size : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    ; public : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    ; prev_challenges : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; srs : 'sRS","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"    ; evals : 'polyComm verification_evals","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    ; shifts : 'fr array","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ; lookup_index : 'polyComm Lookup.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  type 'f or_infinity = 'f Kimchi_types.or_infinity =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Infinity","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Finite of ('f * 'f)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  type 'g polycomm = 'g Kimchi_types.poly_comm =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { unshifted : 'g array; shifted : 'g option }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson fp fq =","counters":[]},{"line":"    verifier_index_to_yojson fp","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (fun _ -> `Null)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      (polycomm_to_yojson (or_infinity_to_yojson fq))","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Data = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = { constraints : int } [@@deriving yojson]","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":17,"col_end":17,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Repr = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { commitments :","counters":[]},{"line":"            Backend.Tock.Curve.Affine.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            Plonk_verification_key_evals.Stable.V2.t","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; data : Data.Stable.V1.t","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving to_yojson]","counters":[{"col_start":27,"col_end":27,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned_binable","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { commitments : Backend.Tock.Curve.Affine.t Plonk_verification_key_evals.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":79,"col_end":79,"count":0}]},{"line":"      ; index :","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Impls.Wrap.Verification_key.t","counters":[]},{"line":"          [@to_yojson","counters":[]},{"line":"            Verifier_index_json.to_yojson Backend.Tock.Field.to_yojson","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              Backend.Tick.Field.to_yojson] )","counters":[]},{"line":"      ; data : Data.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving fields, to_yojson]","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let of_repr srs { Repr.commitments = c; data = d } =","counters":[]},{"line":"      let t : Impls.Wrap.Verification_key.t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let log2_size = Int.ceil_log2 d.constraints in","counters":[]},{"line":"        let d = Domain.Pow_2_roots_of_unity log2_size in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let max_quot_size = Common.max_quot_size_int (Domain.size d) in","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"        let public =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (input, conv, _conv_inv)) = Impls.Wrap.input () in","counters":[]},{"line":"          let (Typ typ) = input in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          typ.size_in_field_elements","counters":[]},{"line":"        in","counters":[]},{"line":"        { domain =","counters":[]},{"line":"            { log_size_of_group = log2_size","counters":[]},{"line":"            ; group_gen = Backend.Tock.Field.domain_generator ~log2_size","counters":[]},{"line":"            }","counters":[]},{"line":"        ; max_poly_size = 1 lsl Nat.to_int Rounds.Wrap.n","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"        ; max_quot_size","counters":[]},{"line":"        ; public","counters":[]},{"line":"        ; prev_challenges = 2 (* Due to Wrap_hack *)","counters":[]},{"line":"        ; srs","counters":[]},{"line":"        ; evals =","counters":[]},{"line":"            (let g (x, y) =","counters":[]},{"line":"               { Kimchi_types.unshifted = [| Kimchi_types.Finite (x, y) |]","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"               ; shifted = None","counters":[]},{"line":"               }","counters":[]},{"line":"             in","counters":[]},{"line":"             { sigma_comm = Array.map ~f:g (Vector.to_array c.sigma_comm)","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"             ; coefficients_comm =","counters":[]},{"line":"                 Array.map ~f:g (Vector.to_array c.coefficients_comm)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"             ; generic_comm = g c.generic_comm","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"             ; mul_comm = g c.mul_comm","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"             ; psm_comm = g c.psm_comm","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"             ; emul_comm = g c.emul_comm","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"             ; complete_add_comm = g c.complete_add_comm","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"             ; endomul_scalar_comm = g c.endomul_scalar_comm","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             ; chacha_comm = None","counters":[]},{"line":"             } )","counters":[]},{"line":"        ; shifts = Common.tock_shifts ~log2_size","counters":[]},{"line":"        ; lookup_index = None","counters":[]},{"line":"        }","counters":[]},{"line":"      in","counters":[]},{"line":"      { commitments = c; data = d; index = t }","counters":[]},{"line":"","counters":[]},{"line":"    include","counters":[]},{"line":"      Binable.Of_binable","counters":[]},{"line":"        (Repr.Stable.V2)","counters":[]},{"line":"        (struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable { commitments; data; index = _ } =","counters":[]},{"line":"            { Repr.commitments; data }","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"          let of_binable r = of_repr (Backend.Tock.Keypair.load_urs ()) r","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        end)","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let to_yojson = Stable.Latest.to_yojson","counters":[]},{"line":"","counters":[]},{"line":"let dummy_commitments g =","counters":[]},{"line":"  let open Plonk_types in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { Plonk_verification_key_evals.sigma_comm =","counters":[]},{"line":"      Vector.init Permuts.n ~f:(fun _ -> g)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"  ; coefficients_comm = Vector.init Columns.n ~f:(fun _ -> g)","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"  ; generic_comm = g","counters":[]},{"line":"  ; psm_comm = g","counters":[]},{"line":"  ; complete_add_comm = g","counters":[]},{"line":"  ; mul_comm = g","counters":[]},{"line":"  ; emul_comm = g","counters":[]},{"line":"  ; endomul_scalar_comm = g","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let dummy =","counters":[]},{"line":"  lazy","counters":[]},{"line":"    (let rows = Domain.size (Common.wrap_domains ~proofs_verified:2).h in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"     let g = Backend.Tock.Curve.(to_affine_exn one) in","counters":[{"col_start":5,"col_end":5,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"     { Repr.commitments = dummy_commitments g; data = { constraints = rows } }","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"     |> Stable.Latest.of_repr (Kimchi_bindings.Protocol.SRS.Fq.create 1) )","counters":[{"col_start":68,"col_end":68,"count":0},{"col_start":73,"col_end":73,"count":2}]}]}