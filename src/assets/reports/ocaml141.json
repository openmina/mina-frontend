{"filename":"src/lib/network_peer/peer.ml","lines":[{"line":"(* peer.ml -- peer with libp2p port and peer id *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"(** A libp2p PeerID is more or less a hash of a public key. *)","counters":[]},{"line":"module Id = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = string [@@deriving compare, hash, equal, sexp]","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":60,"col_end":60,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  (** Convert to the libp2p-defined base58 string *)","counters":[]},{"line":"  let to_string (x : t) = x","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  (** Create a Peer ID from a string, without checking if it is well-formed. *)","counters":[]},{"line":"  let unsafe_of_string (s : string) : t = s","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { host : Core.Unix.Inet_addr.Stable.V1.t (* IPv4 or IPv6 address *)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      ; libp2p_port : int (* TCP *)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"      ; peer_id : Id.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving compare, sexp]","counters":[{"col_start":29,"col_end":29,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let equal t t' = compare t t' = 0","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    (* these hash functions come from the implementation of Inet_addr,","counters":[]},{"line":"         though they're not exposed *)","counters":[]},{"line":"    let hash_fold_t hash t = hash_fold_int hash (Hashtbl.hash t)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"    let hash : t -> int = Ppx_hash_lib.Std.Hash.of_fold hash_fold_t","counters":[{"col_start":54,"col_end":54,"count":1}]},{"line":"","counters":[]},{"line":"    let to_yojson { host; peer_id; libp2p_port } =","counters":[]},{"line":"      `Assoc","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"host\", `String (Unix.Inet_addr.to_string host))","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; (\"peer_id\", `String peer_id)","counters":[]},{"line":"        ; (\"libp2p_port\", `Int libp2p_port)","counters":[]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let of_yojson =","counters":[]},{"line":"      let lift_string = function `String s -> Some s | _ -> None in","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"      let lift_int = function `Int n -> Some n | _ -> None in","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      function","counters":[]},{"line":"      | `Assoc ls ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let open Option.Let_syntax in","counters":[]},{"line":"          Result.of_option ~error:\"missing keys\"","counters":[]},{"line":"            (let%bind host_str =","counters":[]},{"line":"               List.Assoc.find ls \"host\" ~equal:String.equal >>= lift_string","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"             in","counters":[]},{"line":"             let%bind peer_id =","counters":[]},{"line":"               List.Assoc.find ls \"peer_id\" ~equal:String.equal >>= lift_string","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"             in","counters":[]},{"line":"             let%map libp2p_port =","counters":[]},{"line":"               List.Assoc.find ls \"libp2p_port\" ~equal:String.equal >>= lift_int","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"             in","counters":[]},{"line":"             let host = Unix.Inet_addr.of_string host_str in","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             { host; peer_id; libp2p_port } )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error \"expected object\"","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type t = Stable.Latest.t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { host : Unix.Inet_addr.Blocking_sexp.t; libp2p_port : int; peer_id : string }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":62,"col_end":62,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"[@@deriving compare, sexp]","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally Stable.Latest.(of_yojson, to_yojson)]","counters":[]},{"line":"","counters":[]},{"line":"include Hashable.Make (Stable.Latest)","counters":[]},{"line":"include Comparable.Make_binable (Stable.Latest)","counters":[]},{"line":"","counters":[]},{"line":"let create host ~libp2p_port ~peer_id = { host; libp2p_port; peer_id }","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"let to_discovery_host_and_port t =","counters":[]},{"line":"  Host_and_port.create","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~host:(Unix.Inet_addr.to_string t.host)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    ~port:t.libp2p_port","counters":[]},{"line":"","counters":[]},{"line":"let to_string { host; libp2p_port; peer_id } =","counters":[]},{"line":"  sprintf","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    !\"[host : %s, libp2p_port : %s, peer_id : %s]\"","counters":[]},{"line":"    (Unix.Inet_addr.to_string host)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    (Int.to_string libp2p_port)","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    peer_id","counters":[]},{"line":"","counters":[]},{"line":"let to_multiaddr_string { host; libp2p_port; peer_id } =","counters":[]},{"line":"  sprintf \"/ip4/%s/tcp/%d/p2p/%s\"","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Unix.Inet_addr.to_string host)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    libp2p_port peer_id","counters":[]},{"line":"","counters":[]},{"line":"let pretty_list peers = String.concat ~sep:\",\" @@ List.map peers ~f:to_string","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"module Event = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Connect of Stable.Latest.t list","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Disconnect of Stable.Latest.t list","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Display = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = { host : string; libp2p_port : int; peer_id : string }","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":17,"col_end":17,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"      [@@deriving yojson, version, sexp, fields]","counters":[{"col_start":47,"col_end":47,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { host : string; libp2p_port : int; peer_id : string }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  [@@deriving yojson, sexp]","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  module Fields = Stable.Latest.Fields","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let ip { host; _ } = host","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let to_display { host; libp2p_port; peer_id } =","counters":[]},{"line":"  Display.","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { host = Unix.Inet_addr.to_string host","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; libp2p_port","counters":[]},{"line":"    ; peer_id = Id.to_string peer_id","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"let of_display { Display.host; libp2p_port; peer_id } =","counters":[]},{"line":"  { host = Unix.Inet_addr.of_string host","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; libp2p_port","counters":[]},{"line":"  ; peer_id = Id.unsafe_of_string peer_id","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  }","counters":[{"col_start":2,"col_end":2,"count":2}]}]}