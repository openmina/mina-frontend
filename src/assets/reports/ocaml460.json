{"filename":"src/lib/mina_state/blockchain_state.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ( 'staged_ledger_hash","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"           , 'snarked_ledger_hash","counters":[]},{"line":"           , 'local_state","counters":[]},{"line":"           , 'time","counters":[]},{"line":"           , 'body_reference )","counters":[]},{"line":"           t =","counters":[{"col_start":11,"col_end":11,"count":8}]},{"line":"            ( 'staged_ledger_hash","counters":[]},{"line":"            , 'snarked_ledger_hash","counters":[]},{"line":"            , 'local_state","counters":[]},{"line":"            , 'time","counters":[]},{"line":"            , 'body_reference )","counters":[]},{"line":"            Mina_wire_types.Mina_state.Blockchain_state.Poly.V2.t =","counters":[]},{"line":"        { staged_ledger_hash : 'staged_ledger_hash","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        ; genesis_ledger_hash : 'snarked_ledger_hash","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; registers :","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"            ('snarked_ledger_hash, unit, 'local_state) Registers.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"        ; timestamp : 'time","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ; body_reference : 'body_reference","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, fields, equal, compare, hash, yojson, hlist]","counters":[{"col_start":67,"col_end":67,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally","counters":[]},{"line":"Poly.","counters":[]},{"line":"  ( staged_ledger_hash","counters":[]},{"line":"  , genesis_ledger_hash","counters":[]},{"line":"  , timestamp","counters":[]},{"line":"  , body_reference","counters":[]},{"line":"  , registers","counters":[]},{"line":"  , to_hlist","counters":[]},{"line":"  , of_hlist )]","counters":[]},{"line":"","counters":[]},{"line":"let snarked_ledger_hash (t : _ Poly.t) = t.registers.ledger","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"module Value = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Staged_ledger_hash.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Frozen_ledger_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Local_state.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Block_time.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Consensus.Body_reference.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Poly.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, compare, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type var =","counters":[]},{"line":"  ( Staged_ledger_hash.var","counters":[]},{"line":"  , Frozen_ledger_hash.var","counters":[]},{"line":"  , Local_state.Checked.t","counters":[]},{"line":"  , Block_time.Checked.t","counters":[]},{"line":"  , Consensus.Body_reference.var )","counters":[]},{"line":"  Poly.t","counters":[]},{"line":"","counters":[]},{"line":"let create_value ~staged_ledger_hash ~genesis_ledger_hash ~registers ~timestamp","counters":[]},{"line":"    ~body_reference =","counters":[]},{"line":"  { Poly.staged_ledger_hash","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; timestamp","counters":[]},{"line":"  ; genesis_ledger_hash","counters":[]},{"line":"  ; registers","counters":[]},{"line":"  ; body_reference","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let typ : (var, Value.t) Typ.t =","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Staged_ledger_hash.typ","counters":[]},{"line":"    ; Frozen_ledger_hash.typ","counters":[]},{"line":"    ; Registers.typ [ Frozen_ledger_hash.typ; Typ.unit; Local_state.typ ]","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"    ; Block_time.Checked.typ","counters":[]},{"line":"    ; Consensus.Body_reference.typ","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"    ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"module Impl = Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"let var_to_input","counters":[]},{"line":"    ({ staged_ledger_hash","counters":[]},{"line":"     ; genesis_ledger_hash","counters":[]},{"line":"     ; registers","counters":[]},{"line":"     ; timestamp","counters":[]},{"line":"     ; body_reference","counters":[]},{"line":"     } :","counters":[]},{"line":"      var ) : Field.Var.t Random_oracle.Input.Chunked.t =","counters":[]},{"line":"  let open Random_oracle.Input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let registers =","counters":[]},{"line":"    (* TODO: If this were the actual Registers itself (without the unit arg)","counters":[]},{"line":"       then we could more efficiently deal with the transaction SNARK input","counters":[]},{"line":"       (as we could reuse the hash)","counters":[]},{"line":"    *)","counters":[]},{"line":"    let { ledger; pending_coinbase_stack = (); local_state } = registers in","counters":[]},{"line":"    Array.reduce_exn ~f:append","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"      [| Frozen_ledger_hash.var_to_input ledger","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"       ; Local_state.Checked.to_input local_state","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      |]","counters":[]},{"line":"  in","counters":[]},{"line":"  List.reduce_exn ~f:append","counters":[]},{"line":"    [ Staged_ledger_hash.var_to_input staged_ledger_hash","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; Frozen_ledger_hash.var_to_input genesis_ledger_hash","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; registers","counters":[]},{"line":"    ; Block_time.Checked.to_input timestamp","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; Consensus.Body_reference.var_to_input body_reference","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"let to_input","counters":[]},{"line":"    ({ staged_ledger_hash","counters":[]},{"line":"     ; genesis_ledger_hash","counters":[]},{"line":"     ; registers","counters":[]},{"line":"     ; timestamp","counters":[]},{"line":"     ; body_reference","counters":[]},{"line":"     } :","counters":[]},{"line":"      Value.t ) =","counters":[]},{"line":"  let open Random_oracle.Input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":5}]},{"line":"  let registers =","counters":[]},{"line":"    (* TODO: If this were the actual Registers itself (without the unit arg)","counters":[]},{"line":"       then we could more efficiently deal with the transaction SNARK input","counters":[]},{"line":"       (as we could reuse the hash)","counters":[]},{"line":"    *)","counters":[]},{"line":"    let { ledger; pending_coinbase_stack = (); local_state } = registers in","counters":[]},{"line":"    Array.reduce_exn ~f:append","counters":[{"col_start":19,"col_end":19,"count":5}]},{"line":"      [| Frozen_ledger_hash.to_input ledger; Local_state.to_input local_state |]","counters":[{"col_start":35,"col_end":35,"count":5},{"col_start":64,"col_end":64,"count":5}]},{"line":"  in","counters":[]},{"line":"  List.reduce_exn ~f:append","counters":[]},{"line":"    [ Staged_ledger_hash.to_input staged_ledger_hash","counters":[{"col_start":32,"col_end":32,"count":5}]},{"line":"    ; Frozen_ledger_hash.to_input genesis_ledger_hash","counters":[{"col_start":32,"col_end":32,"count":5}]},{"line":"    ; registers","counters":[]},{"line":"    ; Block_time.to_input timestamp","counters":[{"col_start":24,"col_end":24,"count":5}]},{"line":"    ; Consensus.Body_reference.to_input body_reference","counters":[{"col_start":38,"col_end":38,"count":5}]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"let set_timestamp t timestamp = { t with Poly.timestamp }","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"let negative_one","counters":[]},{"line":"    ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"    ~(consensus_constants : Consensus.Constants.t) ~genesis_ledger_hash","counters":[]},{"line":"    ~genesis_body_reference : Value.t =","counters":[]},{"line":"  { staged_ledger_hash =","counters":[{"col_start":2,"col_end":2,"count":4}]},{"line":"      Staged_ledger_hash.genesis ~constraint_constants ~genesis_ledger_hash","counters":[]},{"line":"  ; genesis_ledger_hash","counters":[]},{"line":"  ; registers =","counters":[]},{"line":"      { ledger = genesis_ledger_hash","counters":[]},{"line":"      ; pending_coinbase_stack = ()","counters":[]},{"line":"      ; local_state = Local_state.dummy ()","counters":[{"col_start":38,"col_end":38,"count":4}]},{"line":"      }","counters":[]},{"line":"  ; timestamp = consensus_constants.genesis_state_timestamp","counters":[]},{"line":"  ; body_reference = genesis_body_reference","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"(* negative_one and genesis blockchain states are equivalent *)","counters":[]},{"line":"let genesis = negative_one","counters":[]},{"line":"","counters":[]},{"line":"type display = (string, string, Local_state.display, string, string) Poly.t","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"[@@deriving yojson]","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let display","counters":[]},{"line":"    ({ staged_ledger_hash","counters":[]},{"line":"     ; genesis_ledger_hash","counters":[]},{"line":"     ; registers = { ledger; pending_coinbase_stack = (); local_state }","counters":[]},{"line":"     ; timestamp","counters":[]},{"line":"     ; body_reference","counters":[]},{"line":"     } :","counters":[]},{"line":"      Value.t ) : display =","counters":[]},{"line":"  { Poly.staged_ledger_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Visualization.display_prefix_of_string @@ Ledger_hash.to_base58_check","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"      @@ Staged_ledger_hash.ledger_hash staged_ledger_hash","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; genesis_ledger_hash =","counters":[]},{"line":"      Visualization.display_prefix_of_string","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      @@ Frozen_ledger_hash.to_base58_check @@ genesis_ledger_hash","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"  ; registers =","counters":[]},{"line":"      { ledger =","counters":[]},{"line":"          Visualization.display_prefix_of_string","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          @@ Frozen_ledger_hash.to_base58_check ledger","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      ; pending_coinbase_stack = ()","counters":[]},{"line":"      ; local_state = Local_state.display local_state","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      }","counters":[]},{"line":"  ; timestamp =","counters":[]},{"line":"      Time.to_string_trimmed ~zone:Time.Zone.utc","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        (Block_time.to_time_exn timestamp)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"  ; body_reference =","counters":[]},{"line":"      Visualization.display_prefix_of_string","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      @@ Consensus.Body_reference.to_hex body_reference","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  }","counters":[{"col_start":2,"col_end":2,"count":1}]}]}