{"filename":"src/lib/data_hash_lib/data_hash_intf.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_bits","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"module type Data_hash_descriptor = sig","counters":[]},{"line":"  val version_byte : char","counters":[]},{"line":"","counters":[]},{"line":"  val description : string","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Basic = sig","counters":[]},{"line":"  type t = Field.t [@@deriving sexp, yojson]","counters":[]},{"line":"","counters":[]},{"line":"  val to_decimal_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val of_decimal_string : string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_bytes : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  val gen : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  type var","counters":[]},{"line":"","counters":[]},{"line":"  val var_to_hash_packed : var -> Random_oracle.Checked.Digest.t","counters":[]},{"line":"","counters":[]},{"line":"  val var_to_input : var -> Field.Var.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"  val var_to_bits : var -> Boolean.var list Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val typ : (var, t) Typ.t","counters":[]},{"line":"","counters":[]},{"line":"  val assert_equal : var -> var -> unit Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val equal_var : var -> var -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val var_of_t : t -> var","counters":[]},{"line":"","counters":[]},{"line":"  (* TODO : define bit ops using Random_oracle instead of Pedersen.Digest,","counters":[]},{"line":"     move this outside of consensus_mechanism guard","counters":[]},{"line":"  *)","counters":[]},{"line":"  include Bits_intf.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  val to_base58_check : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val of_base58_check : string -> t Base.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val of_base58_check_exn : string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input : t -> Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Full_size = sig","counters":[]},{"line":"  include Basic","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  val if_ : Boolean.var -> then_:var -> else_:var -> var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val var_of_hash_packed : Random_oracle.Checked.Digest.t -> var","counters":[]},{"line":"","counters":[]},{"line":"  val var_to_field : var -> Random_oracle.Checked.Digest.t","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  val of_hash : Field.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_field : t -> Field.t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}