{"filename":"src/lib/data_hash_lib/state_hash.ml","lines":[{"line":"(* state_hash.ml -- defines the type for the protocol state hash *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"include Data_hash.Make_full_size (struct","counters":[]},{"line":"  let version_byte = Base58_check.Version_bytes.state_hash","counters":[]},{"line":"","counters":[]},{"line":"  let description = \"State hash\"","counters":[]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"let dummy = of_hash Outside_hash_image.t","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"let zero = dummy","counters":[]},{"line":"","counters":[]},{"line":"[%%else]","counters":[]},{"line":"","counters":[]},{"line":"(* in the nonconsensus world, we don't have the Pedersen machinery available,","counters":[]},{"line":"   so just inline the value for zero","counters":[]},{"line":"*)","counters":[]},{"line":"let zero = Field.of_string \"0\"","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let raw_hash_bytes = to_bytes","counters":[]},{"line":"","counters":[]},{"line":"let to_bytes = `Use_to_base58_check_or_raw_hash_bytes","counters":[]},{"line":"","counters":[]},{"line":"let to_decimal_string = to_decimal_string","counters":[]},{"line":"","counters":[]},{"line":"let of_decimal_string = of_decimal_string","counters":[]},{"line":"","counters":[]},{"line":"(* Data hash versioned boilerplate below *)","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    module T = struct","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      type t = (Field.t[@version_asserted]) [@@deriving sexp, compare, hash]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":1}]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"","counters":[]},{"line":"    include T","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    [%%define_from_scope to_yojson, of_yojson]","counters":[]},{"line":"","counters":[]},{"line":"    include Comparable.Make (T)","counters":[]},{"line":"    include Hashable.Make_binable (T)","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type _unused = unit constraint t = Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"let deriver obj =","counters":[]},{"line":"  Fields_derivers_zkapps.iso_string obj ~name:\"StateHash\" ~js_type:Field","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~to_string:to_base58_check ~of_string:of_base58_check_exn","counters":[{"col_start":60,"col_end":60,"count":1}]}]}