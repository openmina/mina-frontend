{"filename":"src/lib/merkle_ledger/location_intf.ml","lines":[{"line":"(* location_intf.ml -- interface file for Location *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  module Addr : module type of Merkle_address","counters":[]},{"line":"","counters":[]},{"line":"  module Prefix : sig","counters":[]},{"line":"    val generic : Unsigned.UInt8.t","counters":[]},{"line":"","counters":[]},{"line":"    val account : Unsigned.UInt8.t","counters":[]},{"line":"","counters":[]},{"line":"    val hash : ledger_depth:int -> int -> Unsigned.UInt8.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = Generic of Bigstring.t | Account of Addr.t | Hash of Addr.t","counters":[]},{"line":"  [@@deriving sexp, hash, compare]","counters":[]},{"line":"","counters":[]},{"line":"  val is_generic : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val is_account : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val is_hash : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val height : ledger_depth:int -> t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val root_hash : t","counters":[]},{"line":"","counters":[]},{"line":"  val last_direction : Addr.t -> Direction.t","counters":[]},{"line":"","counters":[]},{"line":"  val build_generic : Bigstring.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val parse : ledger_depth:int -> Bigstring.t -> (t, unit) Result.t","counters":[]},{"line":"","counters":[]},{"line":"  val prefix_bigstring : Unsigned.UInt8.t -> Bigstring.t -> Bigstring.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_path_exn : t -> Addr.t","counters":[]},{"line":"","counters":[]},{"line":"  val serialize : ledger_depth:int -> t -> Bigstring.t","counters":[]},{"line":"","counters":[]},{"line":"  val parent : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val next : t -> t Option.t","counters":[]},{"line":"","counters":[]},{"line":"  val prev : t -> t Option.t","counters":[]},{"line":"","counters":[]},{"line":"  val sibling : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val order_siblings : t -> 'a -> 'a -> 'a * 'a","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}