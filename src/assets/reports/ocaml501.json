{"filename":"src/lib/mina_base/coinbase_intf.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"module type Full = sig","counters":[]},{"line":"  module Fee_transfer = Coinbase_fee_transfer","counters":[]},{"line":"","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      type t = private","counters":[]},{"line":"        { receiver : Public_key.Compressed.Stable.V1.t","counters":[]},{"line":"        ; amount : Currency.Amount.Stable.V1.t","counters":[]},{"line":"        ; fee_transfer : Fee_transfer.Stable.V1.t option","counters":[]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, bin_io, compare, equal, version, hash, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V1","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  (* bin_io intentionally omitted in deriving list *)","counters":[]},{"line":"  type t = Stable.Latest.t = private","counters":[]},{"line":"    { receiver : Public_key.Compressed.t","counters":[]},{"line":"    ; amount : Currency.Amount.t","counters":[]},{"line":"    ; fee_transfer : Fee_transfer.t option","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, compare, equal, hash, yojson]","counters":[]},{"line":"","counters":[]},{"line":"  include Codable.Base58_check_intf with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val receiver_pk : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"  val receiver : t -> Account_id.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_payer_pk : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"  val amount : t -> Currency.Amount.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_transfer : t -> Fee_transfer.t option","counters":[]},{"line":"","counters":[]},{"line":"  val accounts_accessed : t -> Account_id.t list","counters":[]},{"line":"","counters":[]},{"line":"  val create :","counters":[]},{"line":"       amount:Currency.Amount.t","counters":[]},{"line":"    -> receiver:Public_key.Compressed.t","counters":[]},{"line":"    -> fee_transfer:Fee_transfer.t option","counters":[]},{"line":"    -> t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val expected_supply_increase : t -> Currency.Amount.t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_excess : t -> Fee_excess.t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  module Gen : sig","counters":[]},{"line":"    val gen :","counters":[]},{"line":"         constraint_constants:Genesis_constants.Constraint_constants.t","counters":[]},{"line":"      -> (t * [ `Supercharged_coinbase of bool ]) Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"    (** Creates coinbase with reward between [min_amount] and [max_amount]. The generated amount[coinbase_amount] is then used as the upper bound for the fee transfer. *)","counters":[]},{"line":"    val with_random_receivers :","counters":[]},{"line":"         keys:Signature_keypair.t array","counters":[]},{"line":"      -> min_amount:int","counters":[]},{"line":"      -> max_amount:int","counters":[]},{"line":"      -> fee_transfer:","counters":[]},{"line":"           (   coinbase_amount:Currency.Amount.t","counters":[]},{"line":"            -> Fee_transfer.t Quickcheck.Generator.t )","counters":[]},{"line":"      -> t Quickcheck.Generator.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}