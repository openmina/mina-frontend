{"filename":"src/lib/mina_base/transaction_union_payload.ml","lines":[{"line":"(* transaction_union_payload.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Currency","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module Tag = Transaction_union_tag","counters":[]},{"line":"","counters":[]},{"line":"module Body = struct","counters":[]},{"line":"  type ('tag, 'public_key, 'token_id, 'amount, 'bool) t_ =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { tag : 'tag","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"    ; source_pk : 'public_key","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    ; receiver_pk : 'public_key","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; token_id : 'token_id","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    ; amount : 'amount","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    ; token_locked : 'bool","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, hlist]","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Tag.t, Public_key.Compressed.t, Token_id.t, Currency.Amount.t, bool) t_","counters":[]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  let of_user_command_payload_body = function","counters":[]},{"line":"    | Signed_command_payload.Body.Payment { source_pk; receiver_pk; amount } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { tag = Tag.Payment","counters":[]},{"line":"        ; source_pk","counters":[]},{"line":"        ; receiver_pk","counters":[]},{"line":"        ; token_id = Token_id.default","counters":[]},{"line":"        ; amount","counters":[]},{"line":"        ; token_locked = false","counters":[]},{"line":"        }","counters":[]},{"line":"    | Stake_delegation (Set_delegate { delegator; new_delegate }) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { tag = Tag.Stake_delegation","counters":[]},{"line":"        ; source_pk = delegator","counters":[]},{"line":"        ; receiver_pk = new_delegate","counters":[]},{"line":"        ; token_id = Token_id.default","counters":[]},{"line":"        ; amount = Currency.Amount.zero","counters":[]},{"line":"        ; token_locked = false","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"  let gen ~fee =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind tag = Tag.gen in","counters":[]},{"line":"    let%map amount =","counters":[]},{"line":"      let min, max =","counters":[]},{"line":"        let max_amount_without_overflow =","counters":[]},{"line":"          Amount.(sub max_int (of_fee fee))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          |> Option.value_exn ?here:None ?message:None ?error:None","counters":[]},{"line":"        in","counters":[]},{"line":"        match tag with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Payment ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Amount.zero, max_amount_without_overflow)","counters":[]},{"line":"        | Stake_delegation ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Amount.zero, Amount.zero)","counters":[]},{"line":"        | Create_account ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Amount.zero, Amount.zero)","counters":[]},{"line":"        | Fee_transfer ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Amount.zero, max_amount_without_overflow)","counters":[]},{"line":"        | Coinbase ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (* In this case,","counters":[]},{"line":"               amount - fee should be defined. In other words,","counters":[]},{"line":"               amount >= fee *)","counters":[]},{"line":"            (Amount.of_fee fee, Amount.max_int)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        | Mint_tokens ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Amount.zero, Amount.max_int)","counters":[]},{"line":"      in","counters":[]},{"line":"      Amount.gen_incl min max","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"    and token_locked =","counters":[]},{"line":"      match tag with","counters":[]},{"line":"      | Payment ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return false","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Stake_delegation ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return false","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Create_account ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Quickcheck.Generator.bool","counters":[]},{"line":"      | Fee_transfer ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return false","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Coinbase ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return false","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Mint_tokens ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return false","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    and source_pk = Public_key.Compressed.gen","counters":[]},{"line":"    and receiver_pk = Public_key.Compressed.gen","counters":[]},{"line":"    and token_id =","counters":[]},{"line":"      match tag with","counters":[]},{"line":"      | Payment ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Token_id.gen","counters":[]},{"line":"      | Stake_delegation ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return Token_id.default","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Create_account ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Token_id.gen","counters":[]},{"line":"      | Mint_tokens ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Token_id.gen","counters":[]},{"line":"      | Fee_transfer ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return Token_id.default","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Coinbase ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return Token_id.default","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    { tag; source_pk; receiver_pk; token_id; amount; token_locked }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var =","counters":[]},{"line":"    ( Tag.Unpacked.var","counters":[]},{"line":"    , Public_key.Compressed.var","counters":[]},{"line":"    , Token_id.Checked.t","counters":[]},{"line":"    , Currency.Amount.var","counters":[]},{"line":"    , Boolean.var )","counters":[]},{"line":"    t_","counters":[]},{"line":"","counters":[]},{"line":"  let typ =","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"      [ Tag.unpacked_typ","counters":[]},{"line":"      ; Public_key.Compressed.typ","counters":[]},{"line":"      ; Public_key.Compressed.typ","counters":[]},{"line":"      ; Token_id.typ","counters":[]},{"line":"      ; Currency.Amount.typ","counters":[]},{"line":"      ; Boolean.typ","counters":[]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:t__to_hlist ~value_to_hlist:t__to_hlist","counters":[]},{"line":"      ~var_of_hlist:t__of_hlist ~value_of_hlist:t__of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    let constant","counters":[]},{"line":"        ({ tag; source_pk; receiver_pk; token_id; amount; token_locked } : t) :","counters":[]},{"line":"        var =","counters":[]},{"line":"      { tag = Tag.unpacked_of_t tag","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      ; source_pk = Public_key.Compressed.var_of_t source_pk","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"      ; receiver_pk = Public_key.Compressed.var_of_t receiver_pk","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"      ; token_id = Token_id.Checked.constant token_id","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; amount = Currency.Amount.var_of_t amount","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      ; token_locked = Boolean.var_of_value token_locked","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let to_input_legacy","counters":[]},{"line":"        { tag; source_pk; receiver_pk; token_id; amount; token_locked } =","counters":[]},{"line":"      let%map amount = Currency.Amount.var_to_input_legacy amount","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"      and () =","counters":[]},{"line":"        make_checked (fun () ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            Token_id.Checked.Assert.equal token_id","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (Token_id.Checked.constant Token_id.default) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      in","counters":[]},{"line":"      let token_id = Signed_command_payload.Legacy_token_id.default_checked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Array.reduce_exn ~f:Random_oracle.Input.Legacy.append","counters":[]},{"line":"        [| Tag.Unpacked.to_input_legacy tag","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"         ; Public_key.Compressed.Checked.to_input_legacy source_pk","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"         ; Public_key.Compressed.Checked.to_input_legacy receiver_pk","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"         ; token_id","counters":[]},{"line":"         ; amount","counters":[]},{"line":"         ; Random_oracle.Input.Legacy.bitstring [ token_locked ]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"        |]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  let to_input_legacy","counters":[]},{"line":"      { tag; source_pk; receiver_pk; token_id; amount; token_locked } =","counters":[]},{"line":"    assert (Token_id.equal token_id Token_id.default) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    Array.reduce_exn ~f:Random_oracle.Input.Legacy.append","counters":[]},{"line":"      [| Tag.to_input_legacy tag","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"       ; Public_key.Compressed.to_input_legacy source_pk","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"       ; Public_key.Compressed.to_input_legacy receiver_pk","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"       ; Signed_command_payload.Legacy_token_id.default","counters":[]},{"line":"       ; Currency.Amount.to_input_legacy amount","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"       ; Random_oracle.Input.Legacy.bitstring [ token_locked ]","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      |]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Payload_common = struct","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    type ('fee, 'public_key, 'token_id, 'nonce, 'global_slot, 'memo) t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { fee : 'fee","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      ; fee_token : 'token_id","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      ; fee_payer_pk : 'public_key","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      ; nonce : 'nonce","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      ; valid_until : 'global_slot","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      ; memo : 'memo","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving sexp, hlist]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_signed_command_payload_common","counters":[]},{"line":"      { Poly.fee; fee_payer_pk; nonce; valid_until; memo; fee_token = _ } =","counters":[]},{"line":"    { Signed_command_payload.Common.Poly.fee","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; fee_payer_pk","counters":[]},{"line":"    ; nonce","counters":[]},{"line":"    ; valid_until","counters":[]},{"line":"    ; memo","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Currency.Fee.t","counters":[]},{"line":"    , Public_key.Compressed.t","counters":[]},{"line":"    , Token_id.t","counters":[]},{"line":"    , Mina_numbers.Account_nonce.t","counters":[]},{"line":"    , Mina_numbers.Global_slot.t","counters":[]},{"line":"    , Signed_command_memo.t )","counters":[]},{"line":"    Poly.t","counters":[]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type value = t","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( Currency.Fee.Checked.t","counters":[]},{"line":"      , Public_key.Compressed.var","counters":[]},{"line":"      , Token_id.Checked.t","counters":[]},{"line":"      , Mina_numbers.Account_nonce.Checked.t","counters":[]},{"line":"      , Mina_numbers.Global_slot.Checked.t","counters":[]},{"line":"      , Signed_command_memo.Checked.t )","counters":[]},{"line":"      Poly.t","counters":[]},{"line":"","counters":[]},{"line":"    let constant","counters":[]},{"line":"        ({ fee; fee_payer_pk; nonce; valid_until; memo; fee_token } : value) : t","counters":[]},{"line":"        =","counters":[]},{"line":"      { fee = Currency.Fee.var_of_t fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      ; fee_payer_pk = Public_key.Compressed.var_of_t fee_payer_pk","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; fee_token = Token_id.Checked.constant fee_token","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      ; nonce = Mina_numbers.Account_nonce.Checked.constant nonce","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      ; memo = Signed_command_memo.Checked.constant memo","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"      ; valid_until = Mina_numbers.Global_slot.Checked.constant valid_until","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ : (Checked.t, t) Typ.t =","counters":[]},{"line":"    let open Poly in","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"      [ Currency.Fee.typ","counters":[]},{"line":"      ; Token_id.typ","counters":[]},{"line":"      ; Public_key.Compressed.typ","counters":[]},{"line":"      ; Mina_numbers.Account_nonce.typ","counters":[]},{"line":"      ; Mina_numbers.Global_slot.typ","counters":[]},{"line":"      ; Signed_command_memo.typ","counters":[]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:to_hlist ~value_to_hlist:to_hlist ~var_of_hlist:of_hlist","counters":[]},{"line":"      ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t = (Payload_common.t, Body.t) Signed_command_payload.Poly.t","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"[@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"type payload = t [@@deriving sexp]","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"","counters":[]},{"line":"let of_user_command_payload","counters":[]},{"line":"    ({ common = { memo; fee; fee_payer_pk; nonce; valid_until }; body } :","counters":[]},{"line":"      Signed_command_payload.t ) : t =","counters":[]},{"line":"  { common =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      { fee","counters":[]},{"line":"      ; fee_token = Token_id.default","counters":[]},{"line":"      ; fee_payer_pk","counters":[]},{"line":"      ; nonce","counters":[]},{"line":"      ; valid_until","counters":[]},{"line":"      ; memo","counters":[]},{"line":"      }","counters":[]},{"line":"  ; body = Body.of_user_command_payload_body body","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"  let%bind common = Signed_command_payload.Common.gen in","counters":[]},{"line":"  let%map body = Body.gen ~fee:common.fee in","counters":[]},{"line":"  Signed_command_payload.Poly.{ common; body }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"type var = (Payload_common.Checked.t, Body.var) Signed_command_payload.Poly.t","counters":[]},{"line":"","counters":[]},{"line":"type payload_var = var","counters":[]},{"line":"","counters":[]},{"line":"let typ : (var, t) Typ.t =","counters":[]},{"line":"  let to_hlist = Signed_command_payload.Poly.to_hlist in","counters":[]},{"line":"  let of_hlist = Signed_command_payload.Poly.of_hlist in","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Payload_common.typ; Body.typ ]","counters":[]},{"line":"    ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"    ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"let payload_typ = typ","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  let to_input_legacy ({ common; body } : var) =","counters":[]},{"line":"    let%map common =","counters":[]},{"line":"      Signed_command_payload.Common.Checked.to_input_legacy","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"        (Payload_common.to_signed_command_payload_common common)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"    and body = Body.Checked.to_input_legacy body in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    Random_oracle.Input.Legacy.append common body","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let constant ({ common; body } : t) : var =","counters":[]},{"line":"    { common = Payload_common.Checked.constant common","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; body = Body.Checked.constant body","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let to_input_legacy ({ common; body } : t) =","counters":[]},{"line":"  Random_oracle.Input.Legacy.append","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Signed_command_payload.Common.to_input_legacy","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"       (Payload_common.to_signed_command_payload_common common) )","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"    (Body.to_input_legacy body)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"let excess (payload : t) : Amount.Signed.t =","counters":[]},{"line":"  let tag = payload.body.tag in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let fee = payload.common.fee in","counters":[]},{"line":"  let amount = payload.body.amount in","counters":[]},{"line":"  match tag with","counters":[]},{"line":"  | Payment | Stake_delegation | Create_account | Mint_tokens ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      (* For all user commands, the fee excess is just the fee. *)","counters":[]},{"line":"      Amount.Signed.of_unsigned (Amount.of_fee fee)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  | Fee_transfer ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Option.value_exn (Amount.add_fee amount fee)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      |> Amount.Signed.of_unsigned |> Amount.Signed.negate","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  | Coinbase ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Amount.Signed.zero","counters":[]},{"line":"","counters":[]},{"line":"let fee_excess ({ body = { tag; amount; _ }; common = { fee; _ } } : t) =","counters":[]},{"line":"  match tag with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Payment | Stake_delegation | Create_account | Mint_tokens ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      (* For all user commands, the fee excess is just the fee. *)","counters":[]},{"line":"      Fee_excess.of_single (Token_id.default, Fee.Signed.of_unsigned fee)","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"  | Fee_transfer ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let excess =","counters":[]},{"line":"        Option.value_exn (Amount.add_fee amount fee)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        |> Amount.to_fee |> Fee.Signed.of_unsigned |> Fee.Signed.negate","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      in","counters":[]},{"line":"      Fee_excess.of_single (Token_id.default, excess)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Coinbase ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fee_excess.of_single (Token_id.default, Fee.Signed.zero)","counters":[]},{"line":"","counters":[]},{"line":"let expected_supply_increase (payload : payload) =","counters":[]},{"line":"  let tag = payload.body.tag in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match tag with","counters":[]},{"line":"  | Coinbase ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      payload.body.amount","counters":[]},{"line":"  | Payment | Stake_delegation | Create_account | Mint_tokens | Fee_transfer ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"      Amount.zero","counters":[{"col_start":16,"col_end":16,"count":1}]}]}