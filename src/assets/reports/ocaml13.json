{"filename":"src/lib/mina_lib/config.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: Pass banlist to modules discussed in Ban Reasons issue: https://github.com/CodaProtocol/coda/issues/852 *)","counters":[]},{"line":"","counters":[]},{"line":"module Snark_worker_config = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { initial_snark_worker_key : Public_key.Compressed.t option","counters":[]},{"line":"    ; shutdown_on_disconnect : bool","counters":[]},{"line":"    ; num_threads : int option","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** If ledger_db_location is None, will auto-generate a db based on a UUID *)","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { conf_dir : string","counters":[]},{"line":"  ; chain_id : string","counters":[]},{"line":"  ; logger : Logger.t","counters":[]},{"line":"  ; pids : Child_processes.Termination.t","counters":[]},{"line":"  ; trust_system : Trust_system.t","counters":[]},{"line":"  ; monitor : Monitor.t option","counters":[]},{"line":"  ; is_seed : bool","counters":[]},{"line":"  ; disable_node_status : bool","counters":[]},{"line":"  ; super_catchup : bool","counters":[]},{"line":"  ; block_production_keypairs : Keypair.And_compressed_pk.Set.t","counters":[]},{"line":"  ; coinbase_receiver : Consensus.Coinbase_receiver.t","counters":[]},{"line":"  ; work_selection_method : (module Work_selector.Selection_method_intf)","counters":[]},{"line":"  ; snark_worker_config : Snark_worker_config.t","counters":[]},{"line":"  ; snark_coordinator_key : Public_key.Compressed.t option [@default None]","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"  ; work_reassignment_wait : int","counters":[]},{"line":"  ; gossip_net_params : Gossip_net.Libp2p.Config.t","counters":[]},{"line":"  ; net_config : Mina_networking.Config.t","counters":[]},{"line":"  ; initial_protocol_version : Protocol_version.t","counters":[]},{"line":"        (* Option.t instead of option, so that the derived `make' requires an argument *)","counters":[]},{"line":"  ; proposed_protocol_version_opt : Protocol_version.t Option.t","counters":[]},{"line":"  ; snark_pool_disk_location : string","counters":[]},{"line":"  ; wallets_disk_location : string","counters":[]},{"line":"  ; persistent_root_location : string","counters":[]},{"line":"  ; persistent_frontier_location : string","counters":[]},{"line":"  ; epoch_ledger_location : string","counters":[]},{"line":"  ; staged_ledger_transition_backup_capacity : int [@default 10]","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"  ; time_controller : Block_time.Controller.t","counters":[]},{"line":"  ; snark_work_fee : Currency.Fee.t","counters":[]},{"line":"  ; consensus_local_state : Consensus.Data.Local_state.t","counters":[]},{"line":"  ; is_archive_rocksdb : bool [@default false]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"  ; archive_process_location :","counters":[]},{"line":"      Core.Host_and_port.t Cli_lib.Flag.Types.with_name option","counters":[]},{"line":"        [@default None]","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  ; demo_mode : bool [@default false]","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  ; log_block_creation : bool [@default false]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"  ; precomputed_values : Precomputed_values.t","counters":[]},{"line":"  ; start_time : Time.t","counters":[]},{"line":"  ; precomputed_blocks_path : string option","counters":[]},{"line":"  ; log_precomputed_blocks : bool","counters":[]},{"line":"  ; upload_blocks_to_gcloud : bool","counters":[]},{"line":"  ; block_reward_threshold : Currency.Amount.t option [@default None]","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"  ; node_status_url : string option [@default None]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"  ; uptime_url : Uri.t option [@default None]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"  ; uptime_submitter_keypair : Keypair.t option [@default None]","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"  ; stop_time : int","counters":[]},{"line":"  }","counters":[]},{"line":"[@@deriving make]","counters":[{"col_start":16,"col_end":16,"count":2}]}]}