{"filename":"src/lib/mina_numbers/intf.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Fold_lib","counters":[]},{"line":"open Tuple_lib","counters":[]},{"line":"open Unsigned","counters":[]},{"line":"open Snark_bits","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"module type S_unchecked = sig","counters":[]},{"line":"  type t [@@deriving sexp, compare, hash, yojson]","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  (* not automatically derived *)","counters":[]},{"line":"  val dhall_type : Ppx_dhall_type.Dhall_type.t","counters":[]},{"line":"","counters":[]},{"line":"  val max_value : t","counters":[]},{"line":"","counters":[]},{"line":"  val length_in_bits : int","counters":[]},{"line":"","counters":[]},{"line":"  val gen : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  val gen_incl : t -> t -> t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  val zero : t","counters":[]},{"line":"","counters":[]},{"line":"  val succ : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val add : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val sub : t -> t -> t option","counters":[]},{"line":"","counters":[]},{"line":"  val of_int : int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_int : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  (* Someday: I think this only does ones greater than zero, but it doesn't really matter for","counters":[]},{"line":"     selecting the nonce *)","counters":[]},{"line":"","counters":[]},{"line":"  val random : unit -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_string : string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  module Bits : Bits_intf.Convertible_bits with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val to_bits : t -> bool list","counters":[]},{"line":"","counters":[]},{"line":"  val of_bits : bool list -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input : t -> Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input_legacy : t -> (_, bool) Random_oracle.Legacy.Input.t","counters":[]},{"line":"","counters":[]},{"line":"  val fold : t -> bool Triple.t Fold.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"module type S_checked = sig","counters":[]},{"line":"  type unchecked","counters":[]},{"line":"","counters":[]},{"line":"  open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"  type var","counters":[]},{"line":"","counters":[]},{"line":"  val constant : unchecked -> var","counters":[]},{"line":"","counters":[]},{"line":"  type t = var","counters":[]},{"line":"","counters":[]},{"line":"  val zero : t","counters":[]},{"line":"","counters":[]},{"line":"  val succ : t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val add : t -> t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val mul : t -> t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  (** [sub_or_zero x y] computes [x - y].","counters":[]},{"line":"","counters":[]},{"line":"    - If the argument to [`Underflow] is true, [x < y] and the returned integer","counters":[]},{"line":"      value is pinned to [zero].","counters":[]},{"line":"    - If the argument to [`Underflow] is false, [x >= y] and the returned","counters":[]},{"line":"      integer value is equal to [x - y]","counters":[]},{"line":"  *)","counters":[]},{"line":"  val sub_or_zero : t -> t -> ([ `Underflow of Boolean.var ] * t) Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  (** [sub ~m x y] computes [x - y] and ensures that [0 <= x - y] *)","counters":[]},{"line":"  val sub : t -> t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val is_succ : pred:t -> succ:t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val min : t -> t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input : t -> Field.Var.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input_legacy :","counters":[]},{"line":"    t -> (_, Boolean.var) Random_oracle.Legacy.Input.t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val succ_if : t -> Boolean.var -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val if_ : Boolean.var -> then_:t -> else_:t -> t Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  (** warning: this typ does not work correctly with the generic if_ *)","counters":[]},{"line":"  val typ : (t, unchecked) Snark_params.Tick.Typ.t","counters":[]},{"line":"","counters":[]},{"line":"  val equal : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val div_mod : t -> t -> (t * t) Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( = ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( < ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( > ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( <= ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  val ( >= ) : t -> t -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  module Assert : sig","counters":[]},{"line":"    val equal : t -> t -> unit Checked.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val to_field : t -> Field.Var.t","counters":[]},{"line":"","counters":[]},{"line":"  module Unsafe : sig","counters":[]},{"line":"    val of_field : Field.Var.t -> t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include S_unchecked","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  module Checked : S_checked with type unchecked := t","counters":[]},{"line":"","counters":[]},{"line":"  (** warning: this typ does not work correctly with the generic if_ *)","counters":[]},{"line":"  val typ : (Checked.t, t) Snark_params.Tick.Typ.t","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type UInt32_A = sig","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type t [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  include S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val to_uint32 : t -> uint32","counters":[]},{"line":"","counters":[]},{"line":"  val of_uint32 : uint32 -> t","counters":[]},{"line":"end","counters":[]},{"line":"[@@warning \"-32\"]","counters":[]},{"line":"","counters":[]},{"line":"module type UInt32 = UInt32_A with type Stable.V1.t = Unsigned_extended.UInt32.t","counters":[]},{"line":"","counters":[]},{"line":"module type UInt64_A = sig","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type t [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  include S with type t := Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_uint64 : t -> uint64","counters":[]},{"line":"","counters":[]},{"line":"  val of_uint64 : uint64 -> t","counters":[]},{"line":"end","counters":[]},{"line":"[@@warning \"-32\"]","counters":[]},{"line":"","counters":[]},{"line":"module type UInt64 = UInt64_A with type Stable.V1.t = Unsigned_extended.UInt64.t","counters":[]},{"line":"","counters":[]},{"line":"module type F = functor","counters":[]},{"line":"  (N : sig","counters":[]},{"line":"     type t [@@deriving bin_io, sexp, compare, hash]","counters":[]},{"line":"","counters":[]},{"line":"     include Unsigned_extended.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"     val random : unit -> t","counters":[]},{"line":"   end)","counters":[]},{"line":"  (Bits : Bits_intf.Convertible_bits with type t := N.t)","counters":[]},{"line":"  -> S with type t := N.t and module Bits := Bits","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"module type F_checked = functor","counters":[]},{"line":"  (N : Unsigned_extended.S)","counters":[]},{"line":"  (Bits : Bits_intf.Convertible_bits with type t := N.t)","counters":[]},{"line":"  -> S_checked with type unchecked := N.t","counters":[]},{"line":"[@@warning \"-67\"]","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}