{"filename":"src/lib/secrets/wallets.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"module Secret_keypair = Keypair","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"(** The string is the filename of the secret key file *)","counters":[]},{"line":"type locked_key =","counters":[]},{"line":"  | Locked of string","counters":[]},{"line":"  | Unlocked of (string * Keypair.t)","counters":[]},{"line":"  | Hd_account of Mina_numbers.Hd_index.t","counters":[]},{"line":"","counters":[]},{"line":"(* A simple cache on top of the fs *)","counters":[]},{"line":"type t = { cache : locked_key Public_key.Compressed.Table.t; path : string }","counters":[]},{"line":"","counters":[]},{"line":"let get_privkey_filename public_key =","counters":[]},{"line":"  Public_key.Compressed.to_base58_check public_key","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let get_path { path; cache } public_key =","counters":[]},{"line":"  (* TODO: Do we need to version this? *)","counters":[]},{"line":"  let filename =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Public_key.Compressed.Table.find cache public_key","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    |> Option.bind ~f:(function","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"         | Locked file | Unlocked (file, _) ->","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"             Option.return file","counters":[]},{"line":"         | Hd_account _ ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Option.return","counters":[]},{"line":"               (Public_key.Compressed.to_base58_check public_key ^ \".index\") )","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    |> Option.value ~default:(get_privkey_filename public_key)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"  in","counters":[]},{"line":"  path ^/ filename","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let decode_public_key key file path logger =","counters":[]},{"line":"  match","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Or_error.try_with (fun () -> Public_key.of_base58_check_decompress_exn key)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  with","counters":[]},{"line":"  | Ok pk ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Some pk","counters":[]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log error] \"Error decoding public key at $path/$file: $error\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          [ (\"file\", `String file)","counters":[]},{"line":"          ; (\"path\", `String path)","counters":[]},{"line":"          ; (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          ] ;","counters":[]},{"line":"      None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let reload ~logger { cache; path } : unit Deferred.t =","counters":[]},{"line":"  let logger =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Logger.extend logger [ (\"wallets_context\", `String \"Wallets.get\") ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Public_key.Compressed.Table.clear cache ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () = File_system.create_dir path in","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  let%bind files = Sys.readdir path >>| Array.to_list in","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  let%bind () =","counters":[]},{"line":"    Deferred.List.iter files ~f:(fun file ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        match String.chop_suffix file ~suffix:\".pub\" with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Some sk_filename -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let%map lines = Reader.file_lines (path ^/ file) in","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"            match lines with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | public_key :: _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                decode_public_key public_key file path logger","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                |> Option.iter ~f:(fun pk ->","counters":[]},{"line":"                       ignore","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                       @@ Public_key.Compressed.Table.add cache ~key:pk","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                            ~data:(Locked sk_filename) )","counters":[]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                () )","counters":[]},{"line":"        | None -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match String.chop_suffix file ~suffix:\".index\" with","counters":[]},{"line":"            | Some public_key -> (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let%map lines = Reader.file_lines (path ^/ file) in","counters":[{"col_start":48,"col_end":48,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"                match lines with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | hd_index :: _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    decode_public_key public_key file path logger","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                    |> Option.iter ~f:(fun pk ->","counters":[]},{"line":"                           ignore","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                           @@ Public_key.Compressed.Table.add cache ~key:pk","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"                                ~data:","counters":[]},{"line":"                                  (Hd_account","counters":[]},{"line":"                                     (Mina_numbers.Hd_index.of_string hd_index)","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"                                  ) )","counters":[]},{"line":"                | _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    () )","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                return () ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  Unix.chmod path ~perm:0o700","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let load ~logger ~disk_location =","counters":[]},{"line":"  let t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { cache = Public_key.Compressed.Table.create ()","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"    ; path = disk_location ^/ \"store\"","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let%map () = reload ~logger t in","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  t","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let import_keypair_helper t keypair write_keypair =","counters":[]},{"line":"  let compressed_pk = Public_key.compress keypair.Keypair.public_key in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let privkey_path = get_path t compressed_pk in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () = write_keypair privkey_path in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  let%map () = Unix.chmod privkey_path ~perm:0o600 in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  ignore","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Public_key.Compressed.Table.add t.cache ~key:compressed_pk","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        ~data:(Unlocked (get_privkey_filename compressed_pk, keypair))","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      : [ `Duplicate | `Ok ] ) ;","counters":[]},{"line":"  compressed_pk","counters":[]},{"line":"","counters":[]},{"line":"let import_keypair t keypair ~password =","counters":[]},{"line":"  import_keypair_helper t keypair (fun privkey_path ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Secret_keypair.write_exn keypair ~privkey_path ~password )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let import_keypair_terminal_stdin t keypair =","counters":[]},{"line":"  import_keypair_helper t keypair (fun privkey_path ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Secret_keypair.Terminal_stdin.write_exn keypair ~privkey_path )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"(** Generates a new private key file and a keypair *)","counters":[]},{"line":"let generate_new t ~password : Public_key.Compressed.t Deferred.t =","counters":[]},{"line":"  let keypair = Keypair.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  import_keypair t keypair ~password","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create_hd_account t ~hd_index :","counters":[]},{"line":"    (Public_key.Compressed.t, string) Deferred.Result.t =","counters":[]},{"line":"  let open Deferred.Result.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind public_key = Hardware_wallets.compute_public_key ~hd_index in","counters":[]},{"line":"  let compressed_pk = Public_key.compress public_key in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let index_path =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    t.path ^/ Public_key.Compressed.to_base58_check compressed_pk ^ \".index\"","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind () =","counters":[]},{"line":"    Hardware_wallets.write_exn ~hd_index ~index_path","counters":[]},{"line":"    |> Deferred.map ~f:Result.return","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%map () =","counters":[]},{"line":"    Unix.chmod index_path ~perm:0o600 |> Deferred.map ~f:Result.return","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"  in","counters":[]},{"line":"  ignore","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Public_key.Compressed.Table.add t.cache ~key:compressed_pk","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        ~data:(Hd_account hd_index)","counters":[]},{"line":"      : [ `Duplicate | `Ok ] ) ;","counters":[]},{"line":"  compressed_pk","counters":[]},{"line":"","counters":[]},{"line":"let delete ({ cache; _ } as t : t) (pk : Public_key.Compressed.t) :","counters":[]},{"line":"    (unit, [ `Not_found ]) Deferred.Result.t =","counters":[]},{"line":"  Hashtbl.remove cache pk ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Deferred.Or_error.try_with ~here:[%here] (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      Unix.remove (get_path t pk) )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  |> Deferred.Result.map_error ~f:(fun _ -> `Not_found)","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"let pks ({ cache; _ } : t) = Public_key.Compressed.Table.keys cache","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"let find_unlocked ({ cache; _ } : t) ~needle =","counters":[]},{"line":"  Public_key.Compressed.Table.find cache needle","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  |> Option.bind ~f:(function","counters":[]},{"line":"       | Locked _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           None","counters":[]},{"line":"       | Unlocked (_, kp) ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Some kp","counters":[]},{"line":"       | Hd_account _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           None )","counters":[]},{"line":"","counters":[]},{"line":"let find_identity ({ cache; _ } : t) ~needle =","counters":[]},{"line":"  Public_key.Compressed.Table.find cache needle","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  |> Option.bind ~f:(function","counters":[]},{"line":"       | Locked _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           None","counters":[]},{"line":"       | Unlocked (_, kp) ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Some (`Keypair kp)","counters":[]},{"line":"       | Hd_account index ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           Some (`Hd_index index) )","counters":[]},{"line":"","counters":[]},{"line":"let check_locked { cache; _ } ~needle =","counters":[]},{"line":"  Public_key.Compressed.Table.find cache needle","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  |> Option.map ~f:(function","counters":[]},{"line":"       | Locked _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           true","counters":[]},{"line":"       | Unlocked _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           false","counters":[]},{"line":"       | Hd_account _ ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           true )","counters":[]},{"line":"","counters":[]},{"line":"let unlock { cache; path } ~needle ~password =","counters":[]},{"line":"  let unlock_keypair = function","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Locked file ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Secret_keypair.read ~privkey_path:(path ^/ file) ~password","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"        |> Deferred.Result.map_error ~f:(fun e -> `Key_read_error e)","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        |> Deferred.Result.map ~f:(fun kp ->","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"               Public_key.Compressed.Table.set cache ~key:needle","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 ~data:(Unlocked (file, kp)) )","counters":[]},{"line":"        |> Deferred.Result.ignore_m","counters":[]},{"line":"    | Unlocked _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Deferred.Result.return ()","counters":[]},{"line":"    | Hd_account _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Deferred.Result.return ()","counters":[]},{"line":"  in","counters":[]},{"line":"  Public_key.Compressed.Table.find cache needle","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  |> Result.of_option ~error:`Not_found","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  |> Deferred.return","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"  |> Deferred.Result.bind ~f:unlock_keypair","counters":[]},{"line":"","counters":[]},{"line":"let lock { cache; _ } ~needle =","counters":[]},{"line":"  Public_key.Compressed.Table.change cache needle ~f:(function","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Some (Unlocked (file, _)) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (Locked file)","counters":[]},{"line":"    | k ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        k )","counters":[]},{"line":"","counters":[]},{"line":"let get_tracked_keypair ~logger ~which ~read_from_env_exn ~conf_dir pk =","counters":[]},{"line":"  let%bind wallets = load ~logger ~disk_location:(conf_dir ^/ \"wallets\") in","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"  let sk_file = get_path wallets pk in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  read_from_env_exn ~which sk_file","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let%test_module \"wallets\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let logger = Logger.create ()","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let password = lazy (Deferred.return (Bytes.of_string \"\"))","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"    module Set = Public_key.Compressed.Set","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"get from scratch\" =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          File_system.with_temp_dir \"/tmp/coda-wallets-test\" ~f:(fun path ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let%bind wallets = load ~logger ~disk_location:path in","counters":[]},{"line":"              let%map pk = generate_new wallets ~password in","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"              let keys = Set.of_list (pks wallets) in","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              assert (Set.mem keys pk) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"              assert (find_unlocked wallets ~needle:pk |> Option.is_some) ) )","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"get from existing file system not-scratch\" =","counters":[]},{"line":"      Backtrace.elide := false ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"          File_system.with_temp_dir \"/tmp/coda-wallets-test\" ~f:(fun path ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let%bind wallets = load ~logger ~disk_location:path in","counters":[]},{"line":"              let%bind pk1 = generate_new wallets ~password in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              let%bind pk2 = generate_new wallets ~password in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              let keys = Set.of_list (pks wallets) in","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              assert (Set.mem keys pk1 && Set.mem keys pk2) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"              (* Get wallets again from scratch *)","counters":[]},{"line":"              let%map wallets = load ~logger ~disk_location:path in","counters":[]},{"line":"              let keys = Set.of_list (pks wallets) in","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              assert (Set.mem keys pk1 && Set.mem keys pk2) ) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"create wallet then delete it\" =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          File_system.with_temp_dir \"/tmp/coda-wallets-test\" ~f:(fun path ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let%bind wallets = load ~logger ~disk_location:path in","counters":[]},{"line":"              let%bind pk = generate_new wallets ~password in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              let keys = Set.of_list (pks wallets) in","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              assert (Set.mem keys pk) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"              match%map delete wallets pk with","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"              | Ok () ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  assert (","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                    Option.is_none","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                    @@ Public_key.Compressed.Table.find wallets.cache pk )","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"              | Error _ ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"unexpected\" ) )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"Unable to find wallet\" =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          File_system.with_temp_dir \"/tmp/coda-wallets-test\" ~f:(fun path ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let%bind wallets = load ~logger ~disk_location:path in","counters":[]},{"line":"              let keypair = Keypair.create () in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let%map result =","counters":[]},{"line":"                delete wallets (Public_key.compress @@ keypair.public_key)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"              in","counters":[]},{"line":"              assert (Result.is_error result) ) )","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}