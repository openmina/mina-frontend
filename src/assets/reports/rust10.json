{"filename":"src/account/conv.rs","lines":[{"line":"#![allow(clippy::type_complexity)]","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::Field;","counters":[]},{"line":"use mina_p2p_messages::{","counters":[]},{"line":"    bigint::BigInt,","counters":[]},{"line":"    pseq::PaddedSeq,","counters":[]},{"line":"    v2::{","counters":[]},{"line":"        MinaBaseAccountBinableArgStableV2, MinaBaseAccountIdDigestStableV1,","counters":[]},{"line":"        MinaBaseAccountIdStableV2, MinaBaseAccountTimingStableV1,","counters":[]},{"line":"        MinaBasePermissionsAuthRequiredStableV2, MinaBasePermissionsStableV2,","counters":[]},{"line":"        MinaBaseTokenPermissionsStableV1, MinaBaseVerificationKeyWireStableV1,","counters":[]},{"line":"        NonZeroCurvePointUncompressedStableV1, PicklesBaseProofsVerifiedStableV1, TokenIdKeyHash,","counters":[]},{"line":"    },","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    scan_state::currency::{Amount, Balance, Nonce, Slot},","counters":[]},{"line":"    CurveAffine, Permissions, PlonkVerificationKeyEvals, ProofVerified, ReceiptChainHash, Timing,","counters":[]},{"line":"    TokenPermissions, TokenSymbol, VerificationKey, VotingFor, ZkAppAccount,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::{Account, AccountId, AuthRequired, TokenId};","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtRead for TokenId {","counters":[]},{"line":"    fn binprot_read<R: std::io::Read + ?Sized>(r: &mut R) -> Result<Self, binprot::Error>","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        Self: Sized,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":4,"count":0}]},{"line":"        let token_id = TokenIdKeyHash::binprot_read(r)?;","counters":[{"col_start":12,"col_end":20,"count":0},{"col_start":23,"col_end":54,"count":0},{"col_start":54,"col_end":55,"count":0}]},{"line":"        let token_id: MinaBaseAccountIdDigestStableV1 = token_id.into_inner();","counters":[{"col_start":12,"col_end":78,"count":0}]},{"line":"        Ok(token_id.into())","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtWrite for TokenId {","counters":[]},{"line":"    fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        let token_id: MinaBaseAccountIdDigestStableV1 = self.clone().into();","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"        let token_id: TokenIdKeyHash = token_id.into();","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        token_id.binprot_write(w)?;","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":33,"col_end":34,"count":0}]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<F> From<(BigInt, BigInt)> for CurveAffine<F>","counters":[]},{"line":"where","counters":[]},{"line":"    F: Field + From<BigInt>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn from((a, b): (BigInt, BigInt)) -> Self {","counters":[]},{"line":"        Self(a.into(), b.into())","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<F> From<CurveAffine<F>> for (BigInt, BigInt)","counters":[]},{"line":"where","counters":[]},{"line":"    F: Field + Into<BigInt>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(fps: CurveAffine<F>) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        (fps.0.into(), fps.1.into())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<F> From<&(BigInt, BigInt)> for CurveAffine<F>","counters":[]},{"line":"where","counters":[]},{"line":"    F: Field + From<BigInt>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn from((a, b): &(BigInt, BigInt)) -> Self {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        Self(a.to_field(), b.to_field())","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<F> From<&CurveAffine<F>> for (BigInt, BigInt)","counters":[]},{"line":"where","counters":[]},{"line":"    F: Field + Into<BigInt>,","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(fps: &CurveAffine<F>) -> Self {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        (fps.0.into(), fps.1.into())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtRead for AccountId {","counters":[]},{"line":"    fn binprot_read<R: std::io::Read + ?Sized>(r: &mut R) -> Result<Self, binprot::Error>","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        Self: Sized,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":4,"count":0}]},{"line":"        let account_id = MinaBaseAccountIdStableV2::binprot_read(r)?;","counters":[{"col_start":12,"col_end":22,"count":0},{"col_start":25,"col_end":67,"count":0},{"col_start":67,"col_end":68,"count":0}]},{"line":"        Ok(account_id.into())","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtWrite for AccountId {","counters":[]},{"line":"    fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        let account_id: MinaBaseAccountIdStableV2 = self.clone().into();","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"        account_id.binprot_write(w)?;","counters":[{"col_start":0,"col_end":35,"count":0},{"col_start":35,"col_end":36,"count":0}]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn array_into<'a, T, U, const N: usize>(value: &'a [T; N]) -> [U; N]","counters":[{"col_start":0,"col_end":72,"count":1}]},{"line":"where","counters":[{"col_start":0,"col_end":5,"count":1}]},{"line":"    T: 'a,","counters":[{"col_start":0,"col_end":10,"count":1}]},{"line":"    U: From<&'a T>,","counters":[{"col_start":0,"col_end":19,"count":1}]},{"line":"{","counters":[{"col_start":0,"col_end":1,"count":1}]},{"line":"    std::array::from_fn(|i| U::from(&value[i]))","counters":[{"col_start":0,"col_end":24,"count":1},{"col_start":28,"col_end":46,"count":0},{"col_start":46,"col_end":47,"count":1}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":1}]},{"line":"","counters":[]},{"line":"pub fn array_into_with<'a, T, U, F, const N: usize>(value: &'a [T; N], fun: F) -> [U; N]","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"where","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    T: 'a,","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    F: Fn(&T) -> U,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"{","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"    std::array::from_fn(|i| fun(&value[i]))","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":42,"count":1},{"col_start":42,"col_end":43,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseVerificationKeyWireStableV1> for VerificationKey {","counters":[]},{"line":"    fn from(vk: &MinaBaseVerificationKeyWireStableV1) -> Self {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        let sigma = array_into(&vk.wrap_index.sigma_comm);","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        let coefficients = array_into(&vk.wrap_index.coefficients_comm);","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"        VerificationKey {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            max_proofs_verified: match vk.max_proofs_verified {","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                PicklesBaseProofsVerifiedStableV1::N0 => ProofVerified::N0,","counters":[{"col_start":57,"col_end":74,"count":0}]},{"line":"                PicklesBaseProofsVerifiedStableV1::N1 => ProofVerified::N1,","counters":[{"col_start":57,"col_end":74,"count":0}]},{"line":"                PicklesBaseProofsVerifiedStableV1::N2 => ProofVerified::N2,","counters":[{"col_start":57,"col_end":74,"count":0}]},{"line":"            },","counters":[]},{"line":"            wrap_index: PlonkVerificationKeyEvals {","counters":[{"col_start":24,"col_end":51,"count":0}]},{"line":"                sigma,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                coefficients,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                generic: (&vk.wrap_index.generic_comm).into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                psm: (&vk.wrap_index.psm_comm).into(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                complete_add: (&vk.wrap_index.complete_add_comm).into(),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                mul: (&vk.wrap_index.mul_comm).into(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                emul: (&vk.wrap_index.emul_comm).into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                endomul_scalar: (&vk.wrap_index.endomul_scalar_comm).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            wrap_vk: None,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&VerificationKey> for MinaBaseVerificationKeyWireStableV1 {","counters":[]},{"line":"    fn from(vk: &VerificationKey) -> Self {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            max_proofs_verified: match vk.max_proofs_verified {","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                super::ProofVerified::N0 => PicklesBaseProofsVerifiedStableV1::N0,","counters":[{"col_start":44,"col_end":81,"count":0}]},{"line":"                super::ProofVerified::N1 => PicklesBaseProofsVerifiedStableV1::N1,","counters":[{"col_start":44,"col_end":81,"count":0}]},{"line":"                super::ProofVerified::N2 => PicklesBaseProofsVerifiedStableV1::N2,","counters":[{"col_start":44,"col_end":81,"count":0}]},{"line":"            },","counters":[]},{"line":"            wrap_index: (&vk.wrap_index).into(),","counters":[{"col_start":24,"col_end":48,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseAccountTimingStableV1> for Timing {","counters":[]},{"line":"    fn from(timing: &MinaBaseAccountTimingStableV1) -> Self {","counters":[{"col_start":4,"col_end":61,"count":10}]},{"line":"        match timing {","counters":[{"col_start":0,"col_end":20,"count":10}]},{"line":"            MinaBaseAccountTimingStableV1::Untimed => Timing::Untimed,","counters":[{"col_start":54,"col_end":69,"count":10}]},{"line":"            MinaBaseAccountTimingStableV1::Timed {","counters":[]},{"line":"                initial_minimum_balance,","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"                cliff_time,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                cliff_amount,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                vesting_period,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                vesting_increment,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            } => Timing::Timed {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                initial_minimum_balance: Balance::from_u64(initial_minimum_balance.as_u64()),","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"                cliff_time: Slot::from_u32(cliff_time.as_u32()),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                cliff_amount: Amount::from_u64(cliff_amount.as_u64()),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                vesting_period: Slot::from_u32(vesting_period.as_u32()),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                vesting_increment: Amount::from_u64(vesting_increment.as_u64()),","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":10}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Timing> for MinaBaseAccountTimingStableV1 {","counters":[]},{"line":"    fn from(timing: &Timing) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        use mina_p2p_messages::v2::*;","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"        match timing {","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            super::Timing::Untimed => MinaBaseAccountTimingStableV1::Untimed,","counters":[{"col_start":38,"col_end":76,"count":0}]},{"line":"            super::Timing::Timed {","counters":[]},{"line":"                initial_minimum_balance,","counters":[{"col_start":16,"col_end":40,"count":0}]},{"line":"                cliff_time,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                cliff_amount,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                vesting_period,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                vesting_increment,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            } => MinaBaseAccountTimingStableV1::Timed {","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                initial_minimum_balance: CurrencyBalanceStableV1(CurrencyAmountStableV1(","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                    UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                        (initial_minimum_balance.as_u64() as i64).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                )),","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"                cliff_time: UnsignedExtendedUInt32StableV1((cliff_time.as_u32() as i32).into()),","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"                cliff_amount: CurrencyAmountStableV1(","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                        (cliff_amount.as_u64() as i64).into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                vesting_period: UnsignedExtendedUInt32StableV1(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                    (vesting_period.as_u32() as i32).into(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                vesting_increment: CurrencyAmountStableV1(","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                        (vesting_increment.as_u64() as i64).into(),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<Account> for mina_p2p_messages::v2::MinaBaseAccountBinableArgStableV2 {","counters":[]},{"line":"    fn from(acc: Account) -> Self {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        use mina_p2p_messages::v2::*;","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                let public_key: NonZeroCurvePointUncompressedStableV1 = acc.public_key.into();","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                public_key.into()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            token_id: {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                let token_id: MinaBaseAccountIdDigestStableV1 = acc.token_id.into();","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                token_id.into()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            token_permissions: match acc.token_permissions {","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                super::TokenPermissions::TokenOwned {","counters":[]},{"line":"                    disable_new_accounts,","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"                } => MinaBaseTokenPermissionsStableV1::TokenOwned {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    disable_new_accounts,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                super::TokenPermissions::NotOwned { account_disabled } => {","counters":[{"col_start":52,"col_end":75,"count":0}]},{"line":"                    MinaBaseTokenPermissionsStableV1::NotOwned { account_disabled }","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                }","counters":[]},{"line":"            },","counters":[]},{"line":"            token_symbol: MinaBaseSokMessageDigestStableV1(acc.token_symbol.as_bytes().into()),","counters":[{"col_start":26,"col_end":95,"count":0}]},{"line":"            balance: CurrencyBalanceStableV1(CurrencyAmountStableV1(","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                    (acc.balance.as_u64() as i64).into(),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            )),","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            nonce: UnsignedExtendedUInt32StableV1((acc.nonce.as_u32() as i32).into()),","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"            receipt_chain_hash: MinaBaseReceiptChainHashStableV1(acc.receipt_chain_hash.0.into()),","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"            delegate: acc.delegate.map(|delegate| {","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":50,"col_end":51,"count":0}]},{"line":"                let delegate: NonZeroCurvePointUncompressedStableV1 = delegate.into();","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                delegate.into()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"            voting_for: DataHashLibStateHashStableV1(acc.voting_for.0.into()),","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"            timing: (&acc.timing).into(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            permissions: (&acc.permissions).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            zkapp: acc.zkapp.map(|zkapp| {","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"                let s = zkapp.app_state;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                let app_state = MinaBaseZkappStateValueStableV1(PaddedSeq(s.map(|v| v.into())));","counters":[{"col_start":0,"col_end":80,"count":0},{"col_start":84,"col_end":92,"count":0},{"col_start":92,"col_end":96,"count":0}]},{"line":"","counters":[]},{"line":"                let verification_key = zkapp.verification_key.as_ref().map(|vk| vk.into());","counters":[{"col_start":0,"col_end":75,"count":0},{"col_start":80,"col_end":89,"count":0},{"col_start":89,"col_end":91,"count":0}]},{"line":"","counters":[]},{"line":"                let seq = zkapp.sequence_state;","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                let sequence_state = PaddedSeq(seq.map(|v| v.into()));","counters":[{"col_start":0,"col_end":55,"count":0},{"col_start":59,"col_end":67,"count":0},{"col_start":67,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"                MinaBaseZkappAccountStableV2 {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    app_state,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    verification_key,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                    zkapp_version: MinaNumbersNatMake32StableV1(UnsignedExtendedUInt32StableV1(","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                        (zkapp.zkapp_version as i32).into(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                    )),","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                    sequence_state,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                    last_sequence_slot: UnsignedExtendedUInt32StableV1(","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                        (zkapp.last_sequence_slot.as_u32() as i32).into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    proved_state: zkapp.proved_state,","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    zkapp_uri: zkapp.zkapp_uri.as_bytes().into(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&AuthRequired> for mina_p2p_messages::v2::MinaBasePermissionsAuthRequiredStableV2 {","counters":[]},{"line":"    fn from(perms: &AuthRequired) -> Self {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        match perms {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            AuthRequired::None => Self::None,","counters":[{"col_start":34,"col_end":44,"count":0}]},{"line":"            AuthRequired::Either => Self::Either,","counters":[{"col_start":36,"col_end":48,"count":0}]},{"line":"            AuthRequired::Proof => Self::Proof,","counters":[{"col_start":35,"col_end":46,"count":0}]},{"line":"            AuthRequired::Signature => Self::Signature,","counters":[{"col_start":39,"col_end":54,"count":0}]},{"line":"            AuthRequired::Impossible => Self::Impossible,","counters":[{"col_start":40,"col_end":56,"count":0}]},{"line":"            AuthRequired::Both => panic!(\"doesn't exist in `develop` branch\"),","counters":[{"col_start":34,"col_end":77,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&PlonkVerificationKeyEvals>","counters":[]},{"line":"    for mina_p2p_messages::v2::MinaBaseVerificationKeyWireStableV1WrapIndex","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(vk: &PlonkVerificationKeyEvals) -> Self {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        let sigma = PaddedSeq(array_into(&vk.sigma));","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        let coef = PaddedSeq(array_into(&vk.coefficients));","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            sigma_comm: sigma,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            coefficients_comm: coef,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            generic_comm: vk.generic.into(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            psm_comm: vk.psm.into(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            complete_add_comm: vk.complete_add.into(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            mul_comm: vk.mul.into(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            emul_comm: vk.emul.into(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            endomul_scalar_comm: vk.endomul_scalar.into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// // Following types were written manually","counters":[]},{"line":"","counters":[]},{"line":"impl From<AccountId> for mina_p2p_messages::v2::MinaBaseAccountIdStableV2 {","counters":[]},{"line":"    fn from(account_id: AccountId) -> Self {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        let public_key: NonZeroCurvePointUncompressedStableV1 = account_id.public_key.into();","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"        Self(public_key.into(), account_id.token_id.into())","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<mina_p2p_messages::v2::MinaBaseAccountIdStableV2> for AccountId {","counters":[]},{"line":"    fn from(account_id: mina_p2p_messages::v2::MinaBaseAccountIdStableV2) -> Self {","counters":[{"col_start":4,"col_end":83,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: account_id.0.into_inner().into(),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            token_id: account_id.1.into(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&mina_p2p_messages::v2::MinaBaseAccountIdStableV2> for AccountId {","counters":[]},{"line":"    fn from(account_id: &mina_p2p_messages::v2::MinaBaseAccountIdStableV2) -> Self {","counters":[{"col_start":4,"col_end":84,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: account_id.0.clone().into_inner().into(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            token_id: account_id.1.clone().into(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<TokenId> for mina_p2p_messages::v2::MinaBaseAccountIdDigestStableV1 {","counters":[]},{"line":"    fn from(token_id: TokenId) -> Self {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        Self(token_id.0.into())","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<mina_p2p_messages::v2::MinaBaseAccountIdDigestStableV1> for TokenId {","counters":[]},{"line":"    fn from(token_id: mina_p2p_messages::v2::MinaBaseAccountIdDigestStableV1) -> Self {","counters":[{"col_start":4,"col_end":87,"count":0}]},{"line":"        Self(token_id.0.into())","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&mina_p2p_messages::v2::MinaBaseAccountIdDigestStableV1> for TokenId {","counters":[]},{"line":"    fn from(token_id: &mina_p2p_messages::v2::MinaBaseAccountIdDigestStableV1) -> Self {","counters":[{"col_start":4,"col_end":88,"count":0}]},{"line":"        Self(token_id.0.to_field())","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TokenId> for mina_p2p_messages::v2::MinaBaseTokenIdStableV2 {","counters":[]},{"line":"    fn from(token_id: &TokenId) -> Self {","counters":[{"col_start":4,"col_end":41,"count":0}]},{"line":"        Self(MinaBaseAccountIdDigestStableV1(token_id.0.into()))","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&mina_p2p_messages::v2::MinaBaseTokenIdStableV2> for TokenId {","counters":[]},{"line":"    fn from(token_id: &mina_p2p_messages::v2::MinaBaseTokenIdStableV2) -> Self {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        Self((&token_id.0 .0).into())","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtRead for Account {","counters":[]},{"line":"    fn binprot_read<R: std::io::Read + ?Sized>(r: &mut R) -> Result<Self, binprot::Error>","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        Self: Sized,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":4,"count":0}]},{"line":"        let account = MinaBaseAccountBinableArgStableV2::binprot_read(r)?;","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":22,"col_end":72,"count":0},{"col_start":72,"col_end":73,"count":0}]},{"line":"        Ok(account.into())","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtWrite for Account {","counters":[]},{"line":"    fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        let account: MinaBaseAccountBinableArgStableV2 = self.clone().into();","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"        account.binprot_write(w)?;","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":32,"col_end":33,"count":0}]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBasePermissionsAuthRequiredStableV2> for AuthRequired {","counters":[]},{"line":"    fn from(auth: &MinaBasePermissionsAuthRequiredStableV2) -> Self {","counters":[{"col_start":4,"col_end":69,"count":0}]},{"line":"        match auth {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            MinaBasePermissionsAuthRequiredStableV2::None => Self::None,","counters":[{"col_start":61,"col_end":71,"count":0}]},{"line":"            MinaBasePermissionsAuthRequiredStableV2::Either => Self::Either,","counters":[{"col_start":63,"col_end":75,"count":0}]},{"line":"            MinaBasePermissionsAuthRequiredStableV2::Proof => Self::Proof,","counters":[{"col_start":62,"col_end":73,"count":0}]},{"line":"            MinaBasePermissionsAuthRequiredStableV2::Signature => Self::Signature,","counters":[{"col_start":66,"col_end":81,"count":0}]},{"line":"            MinaBasePermissionsAuthRequiredStableV2::Impossible => Self::Impossible,","counters":[{"col_start":67,"col_end":83,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBasePermissionsStableV2> for Permissions<AuthRequired> {","counters":[]},{"line":"    fn from(perms: &MinaBasePermissionsStableV2) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        Permissions {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            edit_state: (&perms.edit_state).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            send: (&perms.send).into(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            receive: (&perms.receive).into(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            set_delegate: (&perms.set_delegate).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            set_permissions: (&perms.set_permissions).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            set_verification_key: (&perms.set_verification_key).into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            set_zkapp_uri: (&perms.set_zkapp_uri).into(),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            edit_sequence_state: (&perms.edit_sequence_state).into(),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"            set_token_symbol: (&perms.set_token_symbol).into(),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            increment_nonce: (&perms.increment_nonce).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            set_voting_for: (&perms.set_voting_for).into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Permissions<AuthRequired>> for MinaBasePermissionsStableV2 {","counters":[]},{"line":"    fn from(perms: &Permissions<AuthRequired>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        MinaBasePermissionsStableV2 {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            edit_state: (&perms.edit_state).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            send: (&perms.send).into(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            receive: (&perms.receive).into(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            set_delegate: (&perms.set_delegate).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            set_permissions: (&perms.set_permissions).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            set_verification_key: (&perms.set_verification_key).into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            set_zkapp_uri: (&perms.set_zkapp_uri).into(),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            edit_sequence_state: (&perms.edit_sequence_state).into(),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"            set_token_symbol: (&perms.set_token_symbol).into(),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            increment_nonce: (&perms.increment_nonce).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            set_voting_for: (&perms.set_voting_for).into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<MinaBaseAccountBinableArgStableV2> for Account {","counters":[]},{"line":"    fn from(acc: MinaBaseAccountBinableArgStableV2) -> Self {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            public_key: acc.public_key.into_inner().into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            token_id: acc.token_id.into_inner().into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            token_permissions: match acc.token_permissions {","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                MinaBaseTokenPermissionsStableV1::TokenOwned {","counters":[]},{"line":"                    disable_new_accounts,","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"                } => TokenPermissions::TokenOwned {","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                    disable_new_accounts,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                MinaBaseTokenPermissionsStableV1::NotOwned { account_disabled } => {","counters":[{"col_start":61,"col_end":84,"count":0}]},{"line":"                    TokenPermissions::NotOwned { account_disabled }","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                }","counters":[]},{"line":"            },","counters":[]},{"line":"            token_symbol: {","counters":[]},{"line":"                let s: String = acc.token_symbol.0.try_into().unwrap();","counters":[{"col_start":20,"col_end":71,"count":0}]},{"line":"                TokenSymbol::from(s)","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            balance: Balance::from_u64(acc.balance.0 .0 .0 .0 as u64),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"            nonce: Nonce::from_u32(acc.nonce.0 .0 as u32),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            receipt_chain_hash: ReceiptChainHash(acc.receipt_chain_hash.0.into()),","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"            delegate: acc.delegate.map(|d| d.into_inner().into()),","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":43,"col_end":64,"count":0},{"col_start":64,"col_end":66,"count":0}]},{"line":"            voting_for: VotingFor(acc.voting_for.0.into()),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            timing: (&acc.timing).into(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            permissions: (&acc.permissions).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            zkapp: acc.zkapp.map(|zkapp| {","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"                let app_state = zkapp.app_state.0 .0.map(|v| v.into());","counters":[{"col_start":0,"col_end":57,"count":0},{"col_start":61,"col_end":69,"count":0},{"col_start":69,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"                ZkAppAccount {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    app_state,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    verification_key: zkapp.verification_key.map(|vk| (&vk).into()),","counters":[{"col_start":0,"col_end":65,"count":0},{"col_start":70,"col_end":82,"count":0},{"col_start":82,"col_end":84,"count":0}]},{"line":"                    zkapp_version: zkapp.zkapp_version.0 .0 .0 as u32,","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                    sequence_state: zkapp.sequence_state.0.map(|v| v.into()),","counters":[{"col_start":0,"col_end":63,"count":0},{"col_start":67,"col_end":75,"count":0},{"col_start":75,"col_end":77,"count":0}]},{"line":"                    last_sequence_slot: Slot::from_u32(zkapp.last_sequence_slot.as_u32()),","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"                    proved_state: zkapp.proved_state,","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    zkapp_uri: (&zkapp.zkapp_uri).try_into().unwrap(),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_deserialize_account() {","counters":[]},{"line":"        let bytes: &[u8] = &[","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 115, 101, 98, 0, 0, 155, 228, 183, 197, 30, 217, 194,","counters":[]},{"line":"            228, 82, 71, 39, 128, 95, 211, 111, 82, 32, 251, 252, 112, 167, 73, 246, 38, 35, 176,","counters":[]},{"line":"            237, 41, 8, 67, 51, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[]},{"line":"            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0,","counters":[]},{"line":"        ];","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"len={:?}\", bytes.len());","counters":[]},{"line":"        let result: Account = Account::deserialize(bytes);","counters":[]},{"line":"        elog!(\"account={:#?}\", result);","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]}]}