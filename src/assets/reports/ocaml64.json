{"filename":"src/lib/mina_base/util/mina_base_util.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"let field_of_bool =","counters":[]},{"line":"  Snark_params.Tick.(fun b -> if b then Field.one else Field.zero)","counters":[{"col_start":30,"col_end":30,"count":4001},{"col_start":40,"col_end":40,"count":1782},{"col_start":55,"col_end":55,"count":2219}]},{"line":"","counters":[]},{"line":"let bit_length_to_triple_length n =","counters":[]},{"line":"  let r = n mod 3 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let k = n / 3 in","counters":[]},{"line":"  if r = 0 then k else k + 1","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"let split_last_exn =","counters":[]},{"line":"  let rec go acc x xs =","counters":[]},{"line":"    match xs with [] -> (List.rev acc, x) | x' :: xs -> go (x :: acc) x' xs","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  in","counters":[]},{"line":"  function [] -> failwith \"split_last: Empty list\" | x :: xs -> go [] x xs","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"let two_to_the i = Bignum_bigint.(pow (of_int 2) (of_int i))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":55,"col_end":55,"count":0}]}]}