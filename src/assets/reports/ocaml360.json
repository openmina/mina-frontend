{"filename":"src/lib/hash_prefixes/hash_prefixes.ml","lines":[{"line":"let length_in_bytes = 20","counters":[]},{"line":"","counters":[]},{"line":"module T : sig","counters":[]},{"line":"  type t = private string","counters":[]},{"line":"","counters":[]},{"line":"  val create : string -> t","counters":[]},{"line":"end = struct","counters":[]},{"line":"  type t = string","counters":[]},{"line":"","counters":[]},{"line":"  let padding_char = '*'","counters":[]},{"line":"","counters":[]},{"line":"  let create s : t =","counters":[]},{"line":"    let string_length = String.length s in","counters":[{"col_start":4,"col_end":4,"count":45}]},{"line":"    assert (string_length <= length_in_bytes) ;","counters":[{"col_start":4,"col_end":4,"count":45},{"col_start":11,"col_end":11,"count":45}]},{"line":"    let diff = length_in_bytes - string_length in","counters":[]},{"line":"    let r = s ^ String.init diff (fun _ -> padding_char) in","counters":[{"col_start":26,"col_end":26,"count":45},{"col_start":43,"col_end":43,"count":210}]},{"line":"    assert (String.length r = length_in_bytes) ;","counters":[{"col_start":11,"col_end":11,"count":45},{"col_start":24,"col_end":24,"count":45}]},{"line":"    r","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"let protocol_state = create \"MinaProtoState\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let protocol_state_body = create \"MinaProtoStateBody\"","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"let account = create \"MinaAccount\"","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"","counters":[]},{"line":"let side_loaded_vk = create \"MinaSideLoadedVk\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_account = create \"MinaZkappAccount\"","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_payload = create \"MinaZkappPayload\"","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_body = create \"MinaZkappBody\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let merkle_tree i = create (Printf.sprintf \"MinaMklTree%03d\" i)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"let coinbase_merkle_tree i = create (Printf.sprintf \"MinaCbMklTree%03d\" i)","counters":[{"col_start":29,"col_end":29,"count":4},{"col_start":50,"col_end":50,"count":4}]},{"line":"","counters":[]},{"line":"let merge_snark = create \"MinaMergeSnark\"","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"let base_snark = create \"MinaBaseSnark\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let transition_system_snark = create \"MinaTransitionSnark\"","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"let signature_testnet = create \"CodaSignature\"","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"let signature_mainnet = create \"MinaSignatureMainnet\"","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"let receipt_chain_user_command = create \"MinaReceiptUC\"","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"","counters":[]},{"line":"(* leaving this one with \"Coda\", to preserve the existing hashes *)","counters":[]},{"line":"let receipt_chain_zkapp = create \"CodaReceiptZkapp\"","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"let epoch_seed = create \"MinaEpochSeed\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let vrf_message = create \"MinaVrfMessage\"","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"let vrf_output = create \"MinaVrfOutput\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let vrf_evaluation = create \"MinaVrfEvaluation\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let pending_coinbases = create \"PendingCoinbases\"","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"let coinbase_stack_data = create \"CoinbaseStackData\"","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"(* length is limited, so we drop some characters here *)","counters":[]},{"line":"let coinbase_stack_state_hash = create \"CoinbaseStackStaHash\"","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"","counters":[]},{"line":"let coinbase_stack = create \"CoinbaseStack\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let coinbase = create \"Coinbase\"","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"let checkpoint_list = create \"MinaCheckpoints\"","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"let bowe_gabizon_hash = create \"MinaTockBGHash\"","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_precondition = create \"MinaZkappPred\"","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"(*for Zkapp_precondition.Account.t*)","counters":[]},{"line":"let zkapp_precondition_account = create \"MinaZkappPredAcct\"","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_precondition_protocol_state = create \"MinaZkappPredPS\"","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"(*for Account_update.Account_precondition.t*)","counters":[]},{"line":"let account_update_account_precondition = create \"MinaAcctUpdAcctPred\"","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"","counters":[]},{"line":"let account_update = create \"MinaAcctUpdate\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let account_update_cons = create \"MinaAcctUpdateCons\"","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"let account_update_node = create \"MinaAcctUpdateNode\"","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"let account_update_stack_frame = create \"MinaAcctUpdStckFrm\"","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"","counters":[]},{"line":"let account_update_stack_frame_cons = create \"MinaActUpStckFrmCons\"","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_uri = create \"MinaZkappUri\"","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_event = create \"MinaZkappEvent\"","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_events = create \"MinaZkappEvents\"","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_sequence_events = create \"MinaZkappSeqEvents\"","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_memo = create \"MinaZkappMemo\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let zkapp_test = create \"MinaZkappTest\"","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"let derive_token_id = create \"MinaDeriveTokenId\"","counters":[{"col_start":27,"col_end":27,"count":1}]}]}