{"filename":"src/lib/mina_base/sok_message.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_util","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"module Wire_types = Mina_wire_types.Mina_base.Sok_message","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S = Sok_message_intf.Full with type Digest.t = A.Digest.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { fee : Currency.Fee.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; prover : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, yojson, equal, compare]","counters":[{"col_start":46,"col_end":46,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let create ~fee ~prover = Stable.Latest.{ fee; prover }","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  module Digest = struct","counters":[]},{"line":"    let length_in_bytes = Blake2.digest_size_in_bytes","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned_binable","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = string [@@deriving sexp, hash, compare, equal, yojson]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":70,"col_end":70,"count":1}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        include","counters":[]},{"line":"          Binable.Of_binable_without_uuid","counters":[]},{"line":"            (Core_kernel.String.Stable.V1)","counters":[]},{"line":"            (struct","counters":[]},{"line":"              type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"              let to_binable = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"              let of_binable s =","counters":[]},{"line":"                assert (String.length s = length_in_bytes) ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"                s","counters":[]},{"line":"            end)","counters":[]},{"line":"","counters":[]},{"line":"        open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"        let to_input t =","counters":[]},{"line":"          Random_oracle.Input.Chunked.packeds","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Array.of_list_map","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"               Fold_lib.Fold.(to_list (string_bits t))","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"               ~f:(fun b -> (field_of_bool b, 1)) )","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        let typ =","counters":[]},{"line":"          Typ.array ~length:Blake2.digest_size_in_bits Boolean.typ","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"          |> Typ.transport ~there:Blake2.string_to_bits","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"               ~back:Blake2.bits_to_string","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"      type t = Boolean.var array","counters":[]},{"line":"","counters":[]},{"line":"      let to_input (t : t) =","counters":[]},{"line":"        Random_oracle.Input.Chunked.packeds","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Array.map t ~f:(fun b -> ((b :> Field.Var.t), 1)))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    [%%define_locally Stable.Latest.(to_input, typ)]","counters":[]},{"line":"","counters":[]},{"line":"    let default = String.init length_in_bytes ~f:(fun _ -> '\\000')","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":59,"col_end":59,"count":32}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    Blake2.to_raw_string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Blake2.digest_string (Binable.to_string (module Stable.Latest) t))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Wire_types.Make (Make_sig) (Make_str)","counters":[{"col_start":44,"col_end":44,"count":1}]}]}