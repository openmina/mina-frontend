{"filename":"src/lib/consensus/proof_of_stake_intf.ml","lines":[{"line":"module type Full = sig","counters":[]},{"line":"  include Intf.S","counters":[]},{"line":"","counters":[]},{"line":"  (** Exported provides an easy way to publicly expose certain internal details","counters":[]},{"line":"   *  of proof of stake which can be used when referring directly to the","counters":[]},{"line":"   *  [Consensus.Proof_of_stake] consensus implementation rather than the default","counters":[]},{"line":"   *  [Consensus] implementation","counters":[]},{"line":"   *)","counters":[]},{"line":"  module Exported : sig","counters":[]},{"line":"    module Global_slot = Global_slot","counters":[]},{"line":"","counters":[]},{"line":"    module Block_data : sig","counters":[]},{"line":"      include module type of Data.Block_data with type t = Data.Block_data.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Consensus_state : sig","counters":[]},{"line":"      include","counters":[]},{"line":"        module type of Data.Consensus_state","counters":[]},{"line":"          with type Value.Stable.V1.t = Data.Consensus_state.Value.Stable.V1.t","counters":[]},{"line":"           and type var = Data.Consensus_state.var","counters":[]},{"line":"","counters":[]},{"line":"      val global_slot : Value.t -> Global_slot.t","counters":[]},{"line":"","counters":[]},{"line":"      val total_currency : Value.t -> Currency.Amount.t","counters":[]},{"line":"","counters":[]},{"line":"      val min_window_density : Value.t -> Mina_numbers.Length.t","counters":[]},{"line":"","counters":[]},{"line":"      val staking_epoch_data : Value.t -> Mina_base.Epoch_data.Value.t","counters":[]},{"line":"","counters":[]},{"line":"      val next_epoch_data : Value.t -> Mina_base.Epoch_data.Value.t","counters":[]},{"line":"","counters":[]},{"line":"      (* unsafe modules for creating dummy states when doing vrf evaluations *)","counters":[]},{"line":"      (* TODO: refactor code so that [Hooks.next_proposal] does not require a full [Consensus_state] *)","counters":[]},{"line":"      module Unsafe : sig","counters":[]},{"line":"        val dummy_advance :","counters":[]},{"line":"             Value.t","counters":[]},{"line":"          -> ?increase_epoch_count:bool","counters":[]},{"line":"          -> new_global_slot:Global_slot.t","counters":[]},{"line":"          -> Value.t","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}