{"filename":"src/lib/fields_derivers_graphql/fields_derivers_graphql.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Fieldslib","counters":[]},{"line":"","counters":[]},{"line":"module Graphql_raw = struct","counters":[]},{"line":"  module Make (Schema : Graphql_intf.Schema) = struct","counters":[]},{"line":"    module Args = struct","counters":[]},{"line":"      module Input = struct","counters":[]},{"line":"        type ('row, 'result, 'ty, 'nullable) t =","counters":[]},{"line":"          < graphql_arg : (unit -> 'ty Schema.Arg.arg_typ) ref","counters":[]},{"line":"          ; nullable_graphql_arg : (unit -> 'nullable Schema.Arg.arg_typ) ref","counters":[]},{"line":"          ; map : ('ty -> 'result) ref","counters":[]},{"line":"          ; skip : bool ref","counters":[]},{"line":"          ; .. >","counters":[]},{"line":"          as","counters":[]},{"line":"          'row","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Acc = struct","counters":[]},{"line":"        module T = struct","counters":[]},{"line":"          type ('ty, 'fields) t_inner =","counters":[]},{"line":"            { graphql_arg_fields : ('ty, 'fields) Schema.Arg.arg_list","counters":[]},{"line":"            ; graphql_arg_coerce : 'fields","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"          type 'ty t = Init | Acc : ('ty, 'fields) t_inner -> 'ty t","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        type ('row, 'result, 'ty, 'nullable) t =","counters":[]},{"line":"          < graphql_arg_accumulator : 'result T.t ref ; .. > as 'row","counters":[]},{"line":"          constraint","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) t =","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) Input.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Creator = struct","counters":[]},{"line":"        type ('row, 'c, 'ty, 'nullable) t = < .. > as 'row","counters":[]},{"line":"          constraint","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) t =","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) Input.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Output = struct","counters":[]},{"line":"        type ('row, 'c, 'ty, 'nullable) t = < .. > as 'row","counters":[]},{"line":"          constraint","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) t =","counters":[]},{"line":"            ('row, 'c, 'ty, 'nullable) Input.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      let add_field (type f f' ty ty' nullable1 nullable2) ?skip_data","counters":[]},{"line":"          ~t_fields_annots :","counters":[]},{"line":"             ('f_row, f', f, nullable1) Input.t","counters":[]},{"line":"          -> ([< `Read | `Set_and_create ], _, _) Field.t_with_perm","counters":[]},{"line":"          -> ('row, ty', ty, nullable2) Acc.t","counters":[]},{"line":"          -> (('row, ty', ty, nullable2) Creator.t -> f')","counters":[]},{"line":"             * ('row_after, ty', ty, nullable2) Acc.t =","counters":[]},{"line":"       fun f_input field acc ->","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"        let annotations =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"            (Field.name field)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        in","counters":[]},{"line":"        let ref_as_pipe = ref None in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let name =","counters":[]},{"line":"          Option.value annotations.name","counters":[]},{"line":"            ~default:(Fields_derivers.name_under_to_camel field)","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"        in","counters":[]},{"line":"        let () =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let inner_acc = acc#graphql_arg_accumulator in","counters":[]},{"line":"          if annotations.skip || !(f_input#skip) then ()","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          else","counters":[]},{"line":"            let arg =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Schema.Arg.arg name ?doc:annotations.doc","counters":[]},{"line":"                ~typ:(!(f_input#graphql_arg) ())","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"            in","counters":[]},{"line":"            match !inner_acc with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Init ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                inner_acc :=","counters":[]},{"line":"                  Acc","counters":[]},{"line":"                    { graphql_arg_coerce =","counters":[]},{"line":"                        (fun x ->","counters":[]},{"line":"                          ref_as_pipe := Some x ;","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                          !(acc#graphql_creator) acc )","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                    ; graphql_arg_fields = [ arg ]","counters":[]},{"line":"                    }","counters":[]},{"line":"            | Acc { graphql_arg_fields; graphql_arg_coerce } -> (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                match graphql_arg_fields with","counters":[]},{"line":"                | [] ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    inner_acc :=","counters":[]},{"line":"                      Acc","counters":[]},{"line":"                        { graphql_arg_coerce =","counters":[]},{"line":"                            (fun x ->","counters":[]},{"line":"                              ref_as_pipe := Some x ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                              !(acc#graphql_creator) acc )","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                        ; graphql_arg_fields = [ arg ]","counters":[]},{"line":"                        }","counters":[]},{"line":"                | _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    inner_acc :=","counters":[]},{"line":"                      Acc","counters":[]},{"line":"                        { graphql_arg_coerce =","counters":[]},{"line":"                            (fun x ->","counters":[]},{"line":"                              ref_as_pipe := Some x ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                              graphql_arg_coerce )","counters":[]},{"line":"                        ; graphql_arg_fields = arg :: graphql_arg_fields","counters":[]},{"line":"                        } )","counters":[]},{"line":"        in","counters":[]},{"line":"        ( (fun _creator_input ->","counters":[]},{"line":"            !(f_input#map)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"            @@","counters":[]},{"line":"            if annotations.skip || !(f_input#skip) then","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"              match skip_data with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | Some data ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  data","counters":[]},{"line":"              | None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith","counters":[]},{"line":"                    \"If you are skipping a field but intend on building this \\","counters":[]},{"line":"                     field, you must provide skip_data to add_field!\"","counters":[]},{"line":"            else Option.value_exn !ref_as_pipe )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        , acc )","counters":[]},{"line":"","counters":[]},{"line":"      let finish name ~t_toplevel_annots (type ty result nullable) :","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"             (('row, result, ty, nullable) Input.t -> result)","counters":[]},{"line":"             * ('row, result, ty, nullable) Acc.t","counters":[]},{"line":"          -> _ Output.t =","counters":[]},{"line":"       fun (creator, acc) ->","counters":[]},{"line":"        let annotations =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Fields_derivers.Annotations.Top.of_annots ~name t_toplevel_annots","counters":[]},{"line":"        in","counters":[]},{"line":"        acc#graphql_creator := creator ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        (acc#graphql_arg :=","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"           fun () ->","counters":[]},{"line":"             match !(acc#graphql_arg_accumulator) with","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"             | Init ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 failwith \"Graphql args need at least one field\"","counters":[]},{"line":"             | Acc { graphql_arg_fields; graphql_arg_coerce } ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 (* TODO: Figure out why the typechecker doesn't like this","counters":[]},{"line":"                  * expression and remove Obj.magic. *)","counters":[]},{"line":"                 Obj.magic","counters":[]},{"line":"                 @@ Schema.Arg.(","counters":[]},{"line":"                      obj ?doc:annotations.doc","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                        (annotations.name ^ \"Input\")","counters":[]},{"line":"                        ~fields:graphql_arg_fields ~coerce:graphql_arg_coerce","counters":[]},{"line":"                      |> non_null) ) ;","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        (acc#nullable_graphql_arg :=","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"           fun () ->","counters":[]},{"line":"             match !(acc#graphql_arg_accumulator) with","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"             | Init ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 failwith \"Graphql args need at least one field\"","counters":[]},{"line":"             | Acc { graphql_arg_fields; graphql_arg_coerce } ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 (* TODO: See above *)","counters":[]},{"line":"                 Obj.magic","counters":[]},{"line":"                 @@ Schema.Arg.(","counters":[]},{"line":"                      obj ?doc:annotations.doc","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                        (annotations.name ^ \"Input\")","counters":[]},{"line":"                        ~fields:graphql_arg_fields ~coerce:graphql_arg_coerce)","counters":[]},{"line":"        ) ;","counters":[]},{"line":"        acc","counters":[]},{"line":"","counters":[]},{"line":"      let skip obj =","counters":[]},{"line":"        obj#skip := true ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"        (obj#graphql_arg :=","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"           fun () ->","counters":[]},{"line":"             failwith \"Unexpected: This obj#graphql_arg should be skipped\" ) ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"        obj#map := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(obj#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        (obj#nullable_graphql_arg :=","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"           fun () ->","counters":[]},{"line":"             failwith \"Unexpected: This obj#graphql_arg should be skipped\" ) ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let int obj =","counters":[]},{"line":"        (obj#graphql_arg := fun () -> Schema.Arg.(non_null int)) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#map := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(obj#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        (obj#nullable_graphql_arg := fun () -> Schema.Arg.int) ;","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let string obj =","counters":[]},{"line":"        (obj#graphql_arg := fun () -> Schema.Arg.(non_null string)) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#map := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(obj#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        (obj#nullable_graphql_arg := fun () -> Schema.Arg.string) ;","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let bool obj =","counters":[]},{"line":"        (obj#graphql_arg := fun () -> Schema.Arg.(non_null bool)) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#map := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(obj#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        (obj#nullable_graphql_arg := fun () -> Schema.Arg.bool) ;","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let list x obj : (_, 'result list, 'input_type list, _) Input.t =","counters":[]},{"line":"        (obj#graphql_arg :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"           fun () -> Schema.Arg.(non_null (list (!(x#graphql_arg) ()))) ) ;","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        obj#map := List.map ~f:!(x#map) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(x#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        (obj#nullable_graphql_arg :=","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"           fun () -> Schema.Arg.(list (!(x#graphql_arg) ())) ) ;","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let option (x : (_, 'result, 'input_type, _) Input.t) obj =","counters":[]},{"line":"        obj#graphql_arg := !(x#nullable_graphql_arg) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        obj#nullable_graphql_arg := !(x#nullable_graphql_arg) ;","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"        obj#map := Option.map ~f:!(x#map) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(x#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let map ~(f : 'c -> 'd) (x : (_, 'c, 'input_type, _) Input.t) obj :","counters":[]},{"line":"          (_, 'd, 'input_type, _) Input.t =","counters":[]},{"line":"        obj#graphql_arg := !(x#graphql_arg) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        (obj#map := fun a -> f (!(x#map) a)) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        obj#nullable_graphql_arg := !(x#nullable_graphql_arg) ;","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"        obj#graphql_arg_accumulator := !(x#graphql_arg_accumulator) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        obj","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Fields = struct","counters":[]},{"line":"      module Input = struct","counters":[]},{"line":"        module T = struct","counters":[]},{"line":"          type 'input_type t =","counters":[]},{"line":"            { run : 'ctx. unit -> ('ctx, 'input_type) Schema.typ }","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        type ('input_type, 'a, 'c, 'nullable) t =","counters":[]},{"line":"          < graphql_fields : 'input_type T.t ref","counters":[]},{"line":"          ; contramap : ('c -> 'input_type) ref","counters":[]},{"line":"          ; nullable_graphql_fields : 'nullable T.t ref","counters":[]},{"line":"          ; .. >","counters":[]},{"line":"          as","counters":[]},{"line":"          'a","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Accumulator = struct","counters":[]},{"line":"        module T = struct","counters":[]},{"line":"          type 'input_type t =","counters":[]},{"line":"            { run : 'ctx. unit -> ('ctx, 'input_type) Schema.field option }","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        (** thunks generating the schema in reverse *)","counters":[]},{"line":"        type ('input_type, 'a, 'c, 'nullable) t =","counters":[]},{"line":"          < graphql_fields_accumulator : 'c T.t list ref ; .. > as 'a","counters":[]},{"line":"          constraint","counters":[]},{"line":"            ('input_type, 'a, 'c, 'nullable) t =","counters":[]},{"line":"            ('input_type, 'a, 'c, 'nullable) Input.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      let add_field (type f input_type orig nullable c' nullable')","counters":[]},{"line":"          ~t_fields_annots :","counters":[]},{"line":"             (orig, 'a, f, nullable) Input.t","counters":[]},{"line":"          -> ([< `Read | `Set_and_create ], c', f) Fieldslib.Field.t_with_perm","counters":[]},{"line":"          -> (input_type, 'row2, c', nullable') Accumulator.t","counters":[]},{"line":"          -> (_ -> f) * (input_type, 'row2, c', nullable') Accumulator.t =","counters":[]},{"line":"       fun t_field field acc ->","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"        let annotations =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"            (Field.name field)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        in","counters":[]},{"line":"        let rest = !(acc#graphql_fields_accumulator) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        acc#graphql_fields_accumulator :=","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          { Accumulator.T.run =","counters":[]},{"line":"              (fun () ->","counters":[]},{"line":"                if annotations.skip || !(t_field#skip) then None","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"                else","counters":[]},{"line":"                  Schema.field","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"                    (Option.value annotations.name","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                       ~default:(Fields_derivers.name_under_to_camel field) )","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                    ~args:Schema.Arg.[]","counters":[]},{"line":"                    ?doc:annotations.doc","counters":[]},{"line":"                    ~deprecated:","counters":[]},{"line":"                      ( Option.map annotations.deprecated ~f:(fun msg ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                            Schema.Deprecated (Some msg) )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                      |> Option.value ~default:Schema.NotDeprecated )","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                    ~typ:(!(t_field#graphql_fields).Input.T.run ())","counters":[{"col_start":50,"col_end":50,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"                    ~resolve:(fun _ x ->","counters":[]},{"line":"                      !(t_field#contramap) (Field.get field x) )","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"                  |> Option.return )","counters":[]},{"line":"          }","counters":[]},{"line":"          :: rest ;","counters":[]},{"line":"        ((fun _ -> failwith \"Unused\"), acc)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"      let finish name ~t_toplevel_annots ((_creator, obj) : 'u * _ Accumulator.t)","counters":[]},{"line":"          : _ Input.t =","counters":[]},{"line":"        let annotations =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Fields_derivers.Annotations.Top.of_annots ~name t_toplevel_annots","counters":[]},{"line":"        in","counters":[]},{"line":"        let graphql_fields_accumulator = !(obj#graphql_fields_accumulator) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"        let graphql_fields =","counters":[]},{"line":"          { Input.T.run =","counters":[]},{"line":"              (fun () ->","counters":[]},{"line":"                Schema.obj annotations.name ?doc:annotations.doc","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"                  ~fields:(fun _ ->","counters":[]},{"line":"                    List.rev","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    @@ List.filter_map graphql_fields_accumulator ~f:(fun g ->","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           g.Accumulator.T.run () ) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                |> Schema.non_null )","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        let nullable_graphql_fields =","counters":[]},{"line":"          { Input.T.run =","counters":[]},{"line":"              (fun () ->","counters":[]},{"line":"                Schema.obj annotations.name ?doc:annotations.doc","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ~fields:(fun _ ->","counters":[]},{"line":"                    List.rev","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    @@ List.filter_map graphql_fields_accumulator ~f:(fun g ->","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           g.Accumulator.T.run () ) ) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        obj#graphql_fields := graphql_fields ;","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        obj#nullable_graphql_fields := nullable_graphql_fields ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        obj#contramap := Fn.id ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let skip obj =","counters":[]},{"line":"        (obj#graphql_fields :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"           Input.T.","counters":[]},{"line":"             { run =","counters":[]},{"line":"                 (fun () ->","counters":[]},{"line":"                   failwith","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     \"Unexpected: This obj#graphql_fields should be skipped\" )","counters":[]},{"line":"             } ) ;","counters":[]},{"line":"        obj#contramap := Fn.id ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(obj#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        (obj#nullable_graphql_fields :=","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           Input.T.","counters":[]},{"line":"             { run =","counters":[]},{"line":"                 (fun () ->","counters":[]},{"line":"                   failwith","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     \"Unexpected: This obj#nullable_graphql_fields should be \\","counters":[]},{"line":"                      skipped\" )","counters":[]},{"line":"             } ) ;","counters":[]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let int obj =","counters":[]},{"line":"        (obj#graphql_fields :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"           Input.T.{ run = (fun () -> Schema.(non_null int)) } ) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#contramap := Fn.id ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(obj#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        (obj#nullable_graphql_fields := Input.T.{ run = (fun () -> Schema.int) }) ;","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let string obj =","counters":[]},{"line":"        (obj#graphql_fields :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"           Input.T.{ run = (fun () -> Schema.(non_null string)) } ) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#contramap := Fn.id ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(obj#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        (obj#nullable_graphql_fields :=","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           Input.T.{ run = (fun () -> Schema.string) } ) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let bool obj =","counters":[]},{"line":"        (obj#graphql_fields :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"           Input.T.{ run = (fun () -> Schema.(non_null bool)) } ) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj#contramap := Fn.id ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(obj#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        (obj#nullable_graphql_fields :=","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           Input.T.{ run = (fun () -> Schema.bool) } ) ;","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let list x obj : ('input_type list, _, _, _) Input.t =","counters":[]},{"line":"        (obj#graphql_fields :=","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"           Input.T.","counters":[]},{"line":"             { run =","counters":[]},{"line":"                 (fun () ->","counters":[]},{"line":"                   Schema.(non_null (list (!(x#graphql_fields).run ()))) )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"             } ) ;","counters":[]},{"line":"        obj#contramap := List.map ~f:!(x#contramap) ;","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(x#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"        (obj#nullable_graphql_fields :=","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           Input.T.","counters":[]},{"line":"             { run = (fun () -> Schema.(list (!(x#graphql_fields).run ()))) } ) ;","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":64,"col_end":64,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let option (x : ('input_type, 'b, 'c, 'nullable) Input.t) obj :","counters":[]},{"line":"          ('input_type option, _, 'c option, _) Input.t =","counters":[]},{"line":"        obj#graphql_fields := !(x#nullable_graphql_fields) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        obj#nullable_graphql_fields := !(x#nullable_graphql_fields) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        obj#contramap := Option.map ~f:!(x#contramap) ;","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(x#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"      let contramap ~(f : 'd -> 'c)","counters":[]},{"line":"          (x : ('input_type, 'b, 'c, 'nullable) Input.t) obj :","counters":[]},{"line":"          ('input_type, _, 'd, _) Input.t =","counters":[]},{"line":"        obj#graphql_fields := !(x#graphql_fields) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        (obj#contramap := fun a -> !(x#contramap) (f a)) ;","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        obj#nullable_graphql_fields := !(x#nullable_graphql_fields) ;","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        obj#graphql_fields_accumulator := !(x#graphql_fields_accumulator) ;","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"        obj","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let rec arg_to_yojson_rec (arg : Graphql_parser.const_value) : Yojson.Safe.t","counters":[]},{"line":"        =","counters":[]},{"line":"      match arg with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Null ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Null","counters":[]},{"line":"      | `Int x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Int x","counters":[]},{"line":"      | `Float x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Float x","counters":[]},{"line":"      | `String x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String x","counters":[]},{"line":"      | `Bool x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Bool x","counters":[]},{"line":"      | `Enum x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `String x","counters":[]},{"line":"      | `List x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `List (List.map x ~f:arg_to_yojson_rec)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      | `Assoc x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            (List.map x ~f:(fun (key, value) -> (key, arg_to_yojson_rec value)))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"    let arg_to_yojson arg : (Yojson.Safe.t, string) result =","counters":[]},{"line":"      Ok (arg_to_yojson_rec arg)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Graphql_query = struct","counters":[]},{"line":"  module Input = struct","counters":[]},{"line":"    type 'a t = < graphql_query : string option ref ; .. > as 'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Accumulator = struct","counters":[]},{"line":"    type 'a t =","counters":[]},{"line":"      < graphql_query_accumulator : (string * string option) option list ref","counters":[]},{"line":"      ; .. >","counters":[]},{"line":"      as","counters":[]},{"line":"      'a","counters":[]},{"line":"      constraint 'a t = 'a Input.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let add_field ~t_fields_annots :","counters":[]},{"line":"      'a Input.t -> 'field -> 'obj -> 'creator * 'obj =","counters":[]},{"line":"   fun t_field field acc_obj ->","counters":[{"col_start":3,"col_end":3,"count":0}]},{"line":"    let annotations =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"        (Field.name field)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    in","counters":[]},{"line":"    let rest = !(acc_obj#graphql_query_accumulator) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    acc_obj#graphql_query_accumulator :=","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ( if annotations.skip || !(t_field#skip) then None","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      else","counters":[]},{"line":"        Some","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( Option.value annotations.name","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              ~default:(Fields_derivers.name_under_to_camel field)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"          , !(t_field#graphql_query) ) )","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      :: rest ;","counters":[]},{"line":"    ((fun _ -> failwith \"unused\"), acc_obj)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  let finish (_creator, obj) =","counters":[]},{"line":"    let graphql_query_accumulator = !(obj#graphql_query_accumulator) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"    obj#graphql_query :=","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      Some","counters":[]},{"line":"        (sprintf \"{\\n%s\\n}\"","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"           ( List.filter_map graphql_query_accumulator","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"               ~f:","counters":[]},{"line":"                 (Option.map ~f:(fun (k, v) ->","counters":[]},{"line":"                      match v with None -> k | Some v -> sprintf \"%s %s\" k v )","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                 )","counters":[]},{"line":"           |> List.rev |> String.concat ~sep:\"\\n\" ) ) ;","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let scalar obj =","counters":[]},{"line":"    obj#graphql_query := None ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let skip obj = scalar obj","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  let int obj = scalar obj","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"  let string obj = scalar obj","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  let bool obj = scalar obj","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  (* nullable and lists of things are projected to the inner thing ONLY IF inner","counters":[]},{"line":"   * projectable. *)","counters":[]},{"line":"  let wrapped x obj =","counters":[]},{"line":"    obj#graphql_query := !(x#graphql_query) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let option x obj = wrapped x obj","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let list x obj = wrapped x obj","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  let inner_query obj = !(obj#graphql_query)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module IO = struct","counters":[]},{"line":"  include Async_kernel.Deferred","counters":[]},{"line":"","counters":[]},{"line":"  let bind x f = bind x ~f","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  module Stream = struct","counters":[]},{"line":"    type 'a t = 'a Async_kernel.Pipe.Reader.t","counters":[]},{"line":"","counters":[]},{"line":"    let map t f =","counters":[]},{"line":"      Async_kernel.Pipe.map' t ~f:(fun q ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Async_kernel.Deferred.Queue.map q ~f )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    let iter t f = Async_kernel.Pipe.iter t ~f","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    let close = Async_kernel.Pipe.close_read","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Field_error = struct","counters":[]},{"line":"  type t = string","counters":[]},{"line":"","counters":[]},{"line":"  let message_of_field_error t = t","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let extensions_of_field_error _t = None","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Schema = Graphql_schema.Make (IO) (Field_error)","counters":[]},{"line":"module Graphql = Graphql_raw.Make (Schema)","counters":[]},{"line":"","counters":[]},{"line":"module Test = struct","counters":[]},{"line":"  let parse_query str =","counters":[]},{"line":"    match Graphql_parser.parse str with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok res ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        res","counters":[]},{"line":"    | Error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith err","counters":[]},{"line":"","counters":[]},{"line":"  let introspection_query () =","counters":[]},{"line":"    parse_query Fields_derivers.introspection_query_raw","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Test\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    (* Pure -- just like Graphql libraries functor application *)","counters":[]},{"line":"    module IO = struct","counters":[]},{"line":"      type +'a t = 'a","counters":[]},{"line":"","counters":[]},{"line":"      let bind t f = f t","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"      let return t = t","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"      module Stream = struct","counters":[]},{"line":"        type 'a t = 'a Seq.t","counters":[]},{"line":"","counters":[]},{"line":"        let map t f = Seq.map f t","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        let iter t f = Seq.iter f t","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        let close _t = ()","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Schema = Graphql_schema.Make (IO) (Field_error)","counters":[]},{"line":"    module Graphql = Graphql_raw.Make (Schema)","counters":[]},{"line":"    module Graphql_fields = Graphql.Fields","counters":[]},{"line":"    module Graphql_args = Graphql.Args","counters":[]},{"line":"","counters":[]},{"line":"    let deriver (type a b c d) () :","counters":[]},{"line":"        < contramap : (a -> b) ref","counters":[]},{"line":"        ; graphql_fields : c Graphql_fields.Input.T.t ref","counters":[]},{"line":"        ; nullable_graphql_fields : d Graphql_fields.Input.T.t ref","counters":[]},{"line":"        ; .. >","counters":[]},{"line":"        as","counters":[]},{"line":"        'row =","counters":[]},{"line":"      (* We have to declare these outside of the object, otherwise the method","counters":[]},{"line":"       * will create a new ref each time it is called. *)","counters":[]},{"line":"      let open Graphql_fields in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let graphql_fields =","counters":[]},{"line":"        ref Input.T.{ run = (fun () -> failwith \"unimplemented1\") }","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      in","counters":[]},{"line":"      let graphql_arg = ref (fun () -> failwith \"unimplemented2\") in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      let contramap = ref (fun _ -> failwith \"unimplemented3\") in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      let map = ref (fun _ -> failwith \"unimplemented4\") in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      let nullable_graphql_fields =","counters":[]},{"line":"        ref Input.T.{ run = (fun () -> failwith \"unimplemented5\") }","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      in","counters":[]},{"line":"      let nullable_graphql_arg = ref (fun () -> failwith \"unimplemented6\") in","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"      let graphql_fields_accumulator = ref [] in","counters":[]},{"line":"      let graphql_arg_accumulator = ref Graphql_args.Acc.T.Init in","counters":[]},{"line":"      let graphql_creator = ref (fun _ -> failwith \"unimplemented7\") in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      let graphql_query = ref None in","counters":[]},{"line":"      let graphql_query_accumulator = ref [] in","counters":[]},{"line":"      let skip = ref false in","counters":[]},{"line":"      object","counters":[]},{"line":"        method skip = skip","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_fields = graphql_fields","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_arg = graphql_arg","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"        method contramap = contramap","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        method map = map","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        method nullable_graphql_fields = nullable_graphql_fields","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        method nullable_graphql_arg = nullable_graphql_arg","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_fields_accumulator = graphql_fields_accumulator","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_arg_accumulator = graphql_arg_accumulator","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_creator = graphql_creator","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_query = graphql_query","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"        method graphql_query_accumulator = graphql_query_accumulator","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"    let o () = deriver ()","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"    let raw_server ?(print = false) q c =","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      let schema = Schema.(schema [ q ] ~mutations:[] ~subscriptions:[]) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      let res = Schema.execute schema () c in","counters":[]},{"line":"      match res with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Ok (`Response data) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if print then Yojson.Basic.pretty_print Format.std_formatter data ;","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          data |> Yojson.Basic.to_string","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Error err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwithf \"Unexpected error: %s\" (Yojson.Basic.to_string err) ()","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"Unexpected response\"","counters":[]},{"line":"","counters":[]},{"line":"    let query_schema typ v =","counters":[]},{"line":"      Schema.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        field \"query\" ~typ:(non_null typ)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          ~args:Arg.[]","counters":[]},{"line":"          ~doc:\"sample query\"","counters":[]},{"line":"          ~resolve:(fun _ _ -> v))","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"    let query_for_all typ v str =","counters":[]},{"line":"      raw_server (query_schema typ v) (Test.parse_query str)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"    let hit_server ?print q = raw_server ?print q (Test.introspection_query ())","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"    let hit_server_query (typ : _ Schema.typ) v =","counters":[]},{"line":"      hit_server (query_schema typ v)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let hit_server_args (arg_typ : 'a Schema.Arg.arg_typ) =","counters":[]},{"line":"      hit_server","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Schema.(","counters":[]},{"line":"          field \"args\" ~typ:(non_null int)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"            ~args:Arg.[ arg \"input\" ~typ:arg_typ ]","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"            ~doc:\"sample args query\"","counters":[]},{"line":"            ~resolve:(fun _ _ _ -> 0))","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"    module T1 = struct","counters":[]},{"line":"      (** T1 is foo *)","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        { foo_hello : int option","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        ; skipped : int [@skip]","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        ; bar : string list [@name \"bar1\"]","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, fields]","counters":[]},{"line":"","counters":[]},{"line":"      let _v = { foo_hello = Some 1; skipped = 0; bar = [ \"baz1\"; \"baz2\" ] }","counters":[]},{"line":"","counters":[]},{"line":"      let doc = \"T1 is foo\"","counters":[]},{"line":"","counters":[]},{"line":"      let manual_typ =","counters":[]},{"line":"        Schema.(","counters":[]},{"line":"          obj \"T1\" ~doc ~fields:(fun _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [ field \"fooHello\"","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"                  ~args:Arg.[]","counters":[]},{"line":"                  ~typ:int","counters":[]},{"line":"                  ~resolve:(fun _ t -> t.foo_hello)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              ; field \"bar1\"","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  ~args:Arg.[]","counters":[]},{"line":"                  ~typ:(non_null (list (non_null string)))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                  ~resolve:(fun _ t -> t.bar)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              ] ))","counters":[]},{"line":"","counters":[]},{"line":"      let derived init =","counters":[]},{"line":"        let open Graphql_fields in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let ( !. ) x fd acc = add_field ~t_fields_annots (x (o ())) fd acc in","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        Fields.make_creator init","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"          ~foo_hello:!.(option @@ int @@ o ())","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ~skipped:!.skip","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          ~bar:!.(list @@ string @@ o ())","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        |> finish \"T1\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"      module Args = struct","counters":[]},{"line":"        let manual_typ =","counters":[]},{"line":"          Schema.Arg.(","counters":[]},{"line":"            obj \"T1Input\" ~doc","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              ~fields:","counters":[]},{"line":"                [ arg \"bar1\" ~typ:(non_null (list (non_null string)))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"                ; arg \"fooHello\" ~typ:int","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                ]","counters":[]},{"line":"              ~coerce:(fun bar foo_hello -> { bar; skipped = 0; foo_hello }))","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        let derived init =","counters":[]},{"line":"          let open Graphql_args in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let ( !. ) ?skip_data x fd acc =","counters":[]},{"line":"            add_field ?skip_data ~t_fields_annots (x (o ())) fd acc","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          in","counters":[]},{"line":"          Fields.make_creator init","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            ~foo_hello:!.(option @@ int @@ o ())","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"            ~skipped:(( !. ) ~skip_data:0 skip)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"            ~bar:!.(list @@ string @@ o ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          |> finish \"T1\" ~t_toplevel_annots","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Query = struct","counters":[]},{"line":"        let derived init =","counters":[]},{"line":"          let open Graphql_query in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let ( !. ) x fd acc = add_field ~t_fields_annots (x (o ())) fd acc in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          Fields.make_creator init","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            ~foo_hello:!.(option @@ int @@ o ())","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"            ~skipped:!.skip","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"            ~bar:!.(list @@ string @@ o ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          |> finish","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Or_ignore_test = struct","counters":[]},{"line":"      type 'a t = Check of 'a | Ignore","counters":[]},{"line":"","counters":[]},{"line":"      let of_option = function None -> Ignore | Some x -> Check x","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"      let to_option = function Ignore -> None | Check x -> Some x","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"      let derived (x : ('input_type, 'b, 'c, _) Graphql_fields.Input.t) init :","counters":[]},{"line":"          (_, _, 'c t, _) Graphql_fields.Input.t =","counters":[]},{"line":"        let open Graphql_fields in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let opt = option x (o ()) in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        contramap ~f:to_option opt init","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"      module Args = struct","counters":[]},{"line":"        let derived (x : ('row1, 'c, 'input_type, _) Graphql_args.Input.t) init","counters":[]},{"line":"            : ('row2, 'c t, 'input_type option, _) Graphql_args.Input.t =","counters":[]},{"line":"          let open Graphql_args in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let opt = option x (o ()) in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          map ~f:of_option opt init","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Query = struct","counters":[]},{"line":"        let derived x init =","counters":[]},{"line":"          let open Graphql_query in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          option x init","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module T2 = struct","counters":[]},{"line":"      type t = { foo : T1.t Or_ignore_test.t } [@@deriving annot, fields]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"      let v1 =","counters":[]},{"line":"        { foo =","counters":[]},{"line":"            Check","counters":[]},{"line":"              { T1.foo_hello = Some 1; skipped = 0; bar = [ \"baz1\"; \"baz2\" ] }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"      let v2 = { foo = Ignore }","counters":[]},{"line":"","counters":[]},{"line":"      let manual_typ =","counters":[]},{"line":"        Schema.(","counters":[]},{"line":"          obj \"T2\" ?doc:None ~fields:(fun _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [ field \"foo\"","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"                  ~args:Arg.[]","counters":[]},{"line":"                  ~typ:T1.manual_typ","counters":[]},{"line":"                  ~resolve:(fun _ t -> Or_ignore_test.to_option t.foo)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              ] ))","counters":[]},{"line":"","counters":[]},{"line":"      let derived init =","counters":[]},{"line":"        let open Graphql_fields in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let ( !. ) x fd acc = add_field ~t_fields_annots (x (o ())) fd acc in","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        Fields.make_creator init","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"          ~foo:!.(Or_ignore_test.derived @@ T1.derived @@ o ())","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        |> finish \"T2\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"      module Args = struct","counters":[]},{"line":"        let manual_typ =","counters":[]},{"line":"          Schema.Arg.(","counters":[]},{"line":"            obj \"T2Input\" ?doc:None","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              ~fields:[ arg \"foo\" ~typ:T1.Args.manual_typ ]","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"              ~coerce:(fun foo -> Or_ignore_test.of_option foo))","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        let derived init =","counters":[]},{"line":"          let open Graphql_args in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let ( !. ) x fd acc = add_field ~t_fields_annots (x (o ())) fd acc in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          Fields.make_creator init","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            ~foo:!.(Or_ignore_test.Args.derived @@ T1.Args.derived @@ o ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":65,"col_end":65,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"          |> finish \"T2\" ~t_toplevel_annots","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Query = struct","counters":[]},{"line":"        let manual =","counters":[]},{"line":"          {|","counters":[]},{"line":"            {","counters":[]},{"line":"              foo {","counters":[]},{"line":"                fooHello","counters":[]},{"line":"                bar1","counters":[]},{"line":"              }","counters":[]},{"line":"            }","counters":[]},{"line":"          |}","counters":[]},{"line":"","counters":[]},{"line":"        let derived init =","counters":[]},{"line":"          let open Graphql_query in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let ( !. ) x fd acc = add_field ~t_fields_annots (x (o ())) fd acc in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          Fields.make_creator init","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            ~foo:!.(Or_ignore_test.Query.derived @@ T1.Query.derived @@ o ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"          |> finish","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"T2 fold\" =","counters":[]},{"line":"      let open Graphql_fields in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let generated_typ =","counters":[]},{"line":"        let typ_input = T2.(option @@ derived @@ o ()) (o ()) in","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        !(typ_input#graphql_fields).run ()","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"      in","counters":[]},{"line":"      [%test_eq: string]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (hit_server_query generated_typ T2.v1)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        (hit_server_query T2.manual_typ T2.v1) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      [%test_eq: string]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"        (hit_server_query generated_typ T2.v2)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        (hit_server_query T2.manual_typ T2.v2)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"T2 unfold\" =","counters":[]},{"line":"      let open Graphql_args in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let generated_arg_typ =","counters":[]},{"line":"        let obj = T2.(option @@ Args.derived @@ o ()) (o ()) in","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        !(obj#graphql_arg) ()","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      in","counters":[]},{"line":"      [%test_eq: string]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (hit_server_args generated_arg_typ)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        (hit_server_args T2.Args.manual_typ)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"T2 query expected & parses\" =","counters":[]},{"line":"      let open Graphql_fields in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let generated_typ =","counters":[]},{"line":"        let typ_input = T2.(option @@ derived @@ o ()) (o ()) in","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        !(typ_input#graphql_fields).run ()","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"      in","counters":[]},{"line":"      let open Graphql_query in","counters":[]},{"line":"      let generated_query =","counters":[]},{"line":"        T2.Query.(option @@ derived @@ o ()) (o ())","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        |> inner_query |> Option.value_exn","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      in","counters":[]},{"line":"      let prefix = \"query TestQuery { query\" in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let suffix = \"}\" in","counters":[]},{"line":"      [%test_eq: string]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (query_for_all generated_typ T2.v1 (prefix ^ generated_query ^ suffix))","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        (query_for_all generated_typ T2.v1 (prefix ^ T2.Query.manual ^ suffix))","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}