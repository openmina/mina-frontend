{"filename":"src/lib/work_selector/sequence.ml","lines":[{"line":"module Make","counters":[]},{"line":"    (Inputs : Intf.Inputs_intf)","counters":[]},{"line":"    (Lib : Intf.Lib_intf with module Inputs := Inputs) =","counters":[]},{"line":"struct","counters":[]},{"line":"  let work ~snark_pool ~fee ~logger (state : Lib.State.t) =","counters":[]},{"line":"    Lib.State.remove_old_assignments state ~logger ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let unseen_jobs = Lib.State.all_unseen_works state in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match Lib.get_expensive_work ~snark_pool ~fee unseen_jobs with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | x :: _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Lib.State.set state x ; Some x","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  let remove = Lib.State.remove","counters":[]},{"line":"","counters":[]},{"line":"  let pending_work_statements = Lib.pending_work_statements","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"test\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    module Test = Test.Make_test (Make)","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]}]}