{"filename":"src/lib/mina_net2/subscription.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"module Id = Libp2p_ipc.Subscription_id","counters":[]},{"line":"","counters":[]},{"line":"type 'a t =","counters":[]},{"line":"  { topic : string","counters":[]},{"line":"  ; id : Id.t","counters":[]},{"line":"  ; mutable closed : bool","counters":[]},{"line":"  ; validator :","counters":[]},{"line":"      'a Envelope.Incoming.t -> Validation_callback.t -> unit Deferred.t","counters":[]},{"line":"  ; encode : 'a -> string","counters":[]},{"line":"  ; on_decode_failure :","counters":[]},{"line":"      [ `Ignore | `Call of string Envelope.Incoming.t -> Error.t -> unit ]","counters":[]},{"line":"  ; decode : string -> 'a Or_error.t","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"type e = E : 'a t -> e","counters":[]},{"line":"","counters":[]},{"line":"let id { id; _ } = id","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let topic { topic; _ } = topic","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"let subscribe ~helper ~topic ~encode ~decode ~on_decode_failure ~validator =","counters":[]},{"line":"  let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let subscription_id = Id.create () in","counters":[]},{"line":"  let%map _ =","counters":[]},{"line":"    Libp2p_helper.do_rpc helper","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      (module Libp2p_ipc.Rpcs.Subscribe)","counters":[]},{"line":"      (Libp2p_ipc.Rpcs.Subscribe.create_request ~topic ~subscription_id)","counters":[]},{"line":"  in","counters":[]},{"line":"  { topic","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; id = subscription_id","counters":[]},{"line":"  ; closed = false","counters":[]},{"line":"  ; encode","counters":[]},{"line":"  ; on_decode_failure","counters":[]},{"line":"  ; decode","counters":[]},{"line":"  ; validator","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let unsubscribe ~helper sub =","counters":[]},{"line":"  let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  if not sub.closed then","counters":[]},{"line":"    let%map _ =","counters":[]},{"line":"      Libp2p_helper.do_rpc helper","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        (module Libp2p_ipc.Rpcs.Unsubscribe)","counters":[]},{"line":"        (Libp2p_ipc.Rpcs.Unsubscribe.create_request ~subscription_id:sub.id)","counters":[]},{"line":"    in","counters":[]},{"line":"    sub.closed <- true","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else Deferred.Or_error.error_string \"already unsubscribed\"","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let handle_and_validate sub ~validation_expiration ~(sender : Peer.t)","counters":[]},{"line":"    ~data:raw_data =","counters":[]},{"line":"  let open Libp2p_ipc.Reader.ValidationResult in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let wrap_message data =","counters":[]},{"line":"    if","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unix.Inet_addr.equal sender.host (Unix.Inet_addr.of_string \"127.0.0.1\")","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      && Int.equal sender.libp2p_port 0","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    then Envelope.Incoming.local data","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    else Envelope.Incoming.wrap_peer ~sender ~data","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"  in","counters":[]},{"line":"  match sub.decode raw_data with","counters":[]},{"line":"  | Ok data -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let validation_callback =","counters":[]},{"line":"        Validation_callback.create validation_expiration","counters":[]},{"line":"      in","counters":[]},{"line":"      let%bind () = sub.validator (wrap_message data) validation_callback in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      match%map Validation_callback.await validation_callback with","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      | Some `Accept ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Validation_result Accept","counters":[]},{"line":"      | Some `Reject ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Validation_result Reject","counters":[]},{"line":"      | Some `Ignore ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Validation_result Ignore","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Validation_timeout )","counters":[]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( match sub.on_decode_failure with","counters":[]},{"line":"      | `Ignore ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ()","counters":[]},{"line":"      | `Call f ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f (wrap_message raw_data) e ) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Network.gossip_messages_failed_to_decode) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      return (`Decoding_error e)","counters":[]},{"line":"","counters":[]},{"line":"let publish_raw ~logger ~helper ~topic data =","counters":[]},{"line":"  match%map","counters":[]},{"line":"    Libp2p_helper.do_rpc helper","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      (module Libp2p_ipc.Rpcs.Publish)","counters":[]},{"line":"      (Libp2p_ipc.Rpcs.Publish.create_request ~topic ~data)","counters":[]},{"line":"  with","counters":[]},{"line":"  | Ok _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ()","counters":[]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log' error logger] \"error while publishing message on $topic: $err\"","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          [ (\"topic\", `String topic); (\"err\", Error_json.error_to_yojson e) ]","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"let publish ~logger ~helper { topic; encode; _ } message =","counters":[]},{"line":"  publish_raw ~logger ~helper ~topic (encode message)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":52,"col_end":52,"count":2}]}]}