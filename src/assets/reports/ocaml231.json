{"filename":"src/lib/mina_state/protocol_state.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"module Wire_types = Mina_wire_types.Mina_state.Protocol_state","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S =","counters":[]},{"line":"    Protocol_state_intf.Full","counters":[]},{"line":"      with type ( 'state_hash","counters":[]},{"line":"                , 'blockchain_state","counters":[]},{"line":"                , 'consensus_state","counters":[]},{"line":"                , 'constants )","counters":[]},{"line":"                Body.Poly.Stable.V1.t =","counters":[]},{"line":"        ( 'state_hash","counters":[]},{"line":"        , 'blockchain_state","counters":[]},{"line":"        , 'consensus_state","counters":[]},{"line":"        , 'constants )","counters":[]},{"line":"        A.Body.Poly.V1.t","counters":[]},{"line":"       and type Body.Value.Stable.V2.t = A.Body.Value.V2.t","counters":[]},{"line":"       and type ('state_hash, 'body) Poly.Stable.V1.t =","counters":[]},{"line":"        ('state_hash, 'body) A.Poly.V1.t","counters":[]},{"line":"       and type Value.Stable.V2.t = A.Value.V2.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type ('state_hash, 'body) t = ('state_hash, 'body) A.Poly.V1.t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":34,"col_end":34,"count":5}]},{"line":"          { previous_state_hash : 'state_hash; body : 'body }","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        [@@deriving equal, ord, hash, sexp, yojson, hlist]","counters":[{"col_start":57,"col_end":57,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let hashes_abstract ~hash_body","counters":[]},{"line":"      ({ previous_state_hash; body } : (State_hash.t, _) Poly.t) =","counters":[]},{"line":"    let state_body_hash : State_body_hash.t = hash_body body in","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":54,"col_end":54,"count":4}]},{"line":"    let state_hash =","counters":[]},{"line":"      Random_oracle.hash ~init:Hash_prefix.protocol_state","counters":[]},{"line":"        [| (previous_state_hash :> Field.t); (state_body_hash :> Field.t) |]","counters":[]},{"line":"      |> State_hash.of_hash","counters":[{"col_start":9,"col_end":9,"count":4}]},{"line":"    in","counters":[]},{"line":"    { State_hash.State_hashes.state_hash","counters":[{"col_start":4,"col_end":4,"count":4}]},{"line":"    ; state_body_hash = Some state_body_hash","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  module Body = struct","counters":[]},{"line":"    module Poly = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        module V1 = struct","counters":[]},{"line":"          type ('state_hash, 'blockchain_state, 'consensus_state, 'constants) t =","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":78,"col_end":78,"count":7}]},{"line":"                ( 'state_hash","counters":[]},{"line":"                , 'blockchain_state","counters":[]},{"line":"                , 'consensus_state","counters":[]},{"line":"                , 'constants )","counters":[]},{"line":"                A.Body.Poly.V1.t =","counters":[]},{"line":"            { genesis_state_hash : 'state_hash","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"            ; blockchain_state : 'blockchain_state","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"            ; consensus_state : 'consensus_state","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"            ; constants : 'constants","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"            }","counters":[]},{"line":"          [@@deriving sexp, equal, compare, yojson, hash, version, hlist]","counters":[{"col_start":72,"col_end":72,"count":5}]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Value = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        module V2 = struct","counters":[]},{"line":"          type t =","counters":[{"col_start":10,"col_end":10,"count":3},{"col_start":15,"col_end":15,"count":2}]},{"line":"            ( State_hash.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Blockchain_state.Value.Stable.V2.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Consensus.Data.Consensus_state.Value.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Protocol_constants_checked.Value.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Poly.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          [@@deriving equal, ord, bin_io, hash, sexp, yojson, version]","counters":[{"col_start":69,"col_end":69,"count":9}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type ('state_hash, 'blockchain_state, 'consensus_state, 'constants) t =","counters":[]},{"line":"      ('state_hash, 'blockchain_state, 'consensus_state, 'constants) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"    type value = Value.t [@@deriving sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"    type var =","counters":[]},{"line":"      ( State_hash.var","counters":[]},{"line":"      , Blockchain_state.var","counters":[]},{"line":"      , Consensus.Data.Consensus_state.var","counters":[]},{"line":"      , Protocol_constants_checked.var )","counters":[]},{"line":"      Poly.t","counters":[]},{"line":"","counters":[]},{"line":"    let typ ~constraint_constants =","counters":[]},{"line":"      Typ.of_hlistable","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ State_hash.typ","counters":[]},{"line":"        ; Blockchain_state.typ","counters":[]},{"line":"        ; Consensus.Data.Consensus_state.typ ~constraint_constants","counters":[]},{"line":"        ; Protocol_constants_checked.typ","counters":[]},{"line":"        ]","counters":[]},{"line":"        ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"        ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        { Poly.genesis_state_hash : State_hash.t","counters":[]},{"line":"        ; blockchain_state","counters":[]},{"line":"        ; consensus_state","counters":[]},{"line":"        ; constants","counters":[]},{"line":"        } =","counters":[]},{"line":"      Random_oracle.Input.Chunked.(","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"        append","counters":[]},{"line":"          (Blockchain_state.to_input blockchain_state)","counters":[{"col_start":35,"col_end":35,"count":5}]},{"line":"          (Consensus.Data.Consensus_state.to_input consensus_state)","counters":[{"col_start":49,"col_end":49,"count":5}]},{"line":"        |> append (field (genesis_state_hash :> Field.t))","counters":[{"col_start":11,"col_end":11,"count":5},{"col_start":23,"col_end":23,"count":5}]},{"line":"        |> append (Protocol_constants_checked.to_input constants))","counters":[{"col_start":11,"col_end":11,"count":5},{"col_start":53,"col_end":53,"count":5}]},{"line":"","counters":[]},{"line":"    let var_to_input","counters":[]},{"line":"        { Poly.genesis_state_hash","counters":[]},{"line":"        ; blockchain_state","counters":[]},{"line":"        ; consensus_state","counters":[]},{"line":"        ; constants","counters":[]},{"line":"        } =","counters":[]},{"line":"      let blockchain_state = Blockchain_state.var_to_input blockchain_state in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let constants = Protocol_constants_checked.var_to_input constants in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let consensus_state =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Data.Consensus_state.var_to_input consensus_state","counters":[]},{"line":"      in","counters":[]},{"line":"      Random_oracle.Input.Chunked.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        append blockchain_state consensus_state","counters":[]},{"line":"        |> append (field (State_hash.var_to_hash_packed genesis_state_hash))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        |> append constants)","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"    let hash_checked (t : var) =","counters":[]},{"line":"      let input = var_to_input t in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      make_checked (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Random_oracle.Checked.(","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            hash ~init:Hash_prefix.protocol_state_body (pack_input input)","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"            |> State_body_hash.var_of_hash_packed) )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"    let consensus_state { Poly.consensus_state; _ } = consensus_state","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"    let view_checked (t : var) :","counters":[]},{"line":"        Zkapp_precondition.Protocol_state.View.Checked.t =","counters":[]},{"line":"      let module C = Consensus.Proof_of_stake.Exported.Consensus_state in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let cs : Consensus.Data.Consensus_state.var = t.consensus_state in","counters":[]},{"line":"      { snarked_ledger_hash = t.blockchain_state.registers.ledger","counters":[]},{"line":"      ; timestamp = t.blockchain_state.timestamp","counters":[]},{"line":"      ; blockchain_length = C.blockchain_length_var cs","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"      ; min_window_density = C.min_window_density_var cs","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; last_vrf_output = ()","counters":[]},{"line":"      ; total_currency = C.total_currency_var cs","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      ; global_slot_since_hard_fork = C.curr_global_slot_var cs","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"      ; global_slot_since_genesis = C.global_slot_since_genesis_var cs","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"      ; staking_epoch_data = C.staking_epoch_data_var cs","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; next_epoch_data = C.next_epoch_data_var cs","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"    let hash s =","counters":[]},{"line":"      Random_oracle.hash ~init:Hash_prefix.protocol_state_body","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"        (Random_oracle.pack_input (to_input s))","counters":[{"col_start":32,"col_end":32,"count":5},{"col_start":42,"col_end":42,"count":5}]},{"line":"      |> State_body_hash.of_hash","counters":[{"col_start":9,"col_end":9,"count":5}]},{"line":"","counters":[]},{"line":"    let view (t : Value.t) : Zkapp_precondition.Protocol_state.View.t =","counters":[]},{"line":"      let module C = Consensus.Proof_of_stake.Exported.Consensus_state in","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"      let cs = t.consensus_state in","counters":[]},{"line":"      { snarked_ledger_hash = t.blockchain_state.registers.ledger","counters":[]},{"line":"      ; timestamp = t.blockchain_state.timestamp","counters":[]},{"line":"      ; blockchain_length = C.blockchain_length cs","counters":[{"col_start":46,"col_end":46,"count":1}]},{"line":"      ; min_window_density = C.min_window_density cs","counters":[{"col_start":48,"col_end":48,"count":1}]},{"line":"      ; last_vrf_output = ()","counters":[]},{"line":"      ; total_currency = C.total_currency cs","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"      ; global_slot_since_hard_fork = C.curr_global_slot cs","counters":[{"col_start":55,"col_end":55,"count":1}]},{"line":"      ; global_slot_since_genesis = C.global_slot_since_genesis cs","counters":[{"col_start":62,"col_end":62,"count":1}]},{"line":"      ; staking_epoch_data = C.staking_epoch_data cs","counters":[{"col_start":48,"col_end":48,"count":1}]},{"line":"      ; next_epoch_data = C.next_epoch_data cs","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    module For_tests = struct","counters":[]},{"line":"      let with_consensus_state (t : Value.t) consensus_state =","counters":[]},{"line":"        { t with consensus_state }","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Value = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          (State_hash.Stable.V1.t, Body.Value.Stable.V2.t) Poly.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        [@@deriving sexp, hash, compare, equal, yojson]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    include Hashable.Make (Stable.Latest)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type value = Value.t [@@deriving sexp, yojson]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = (State_hash.var, Body.var) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  module Proof = Proof","counters":[]},{"line":"  module Hash = State_hash","counters":[]},{"line":"","counters":[]},{"line":"  let create ~previous_state_hash ~body =","counters":[]},{"line":"    { Poly.Stable.Latest.previous_state_hash; body }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let create' ~previous_state_hash ~genesis_state_hash ~blockchain_state","counters":[]},{"line":"      ~consensus_state ~constants =","counters":[]},{"line":"    { Poly.Stable.Latest.previous_state_hash","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"    ; body =","counters":[]},{"line":"        { Body.Poly.genesis_state_hash","counters":[]},{"line":"        ; blockchain_state","counters":[]},{"line":"        ; consensus_state","counters":[]},{"line":"        ; constants","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let create_value = create'","counters":[]},{"line":"","counters":[]},{"line":"  let body { Poly.Stable.Latest.body; _ } = body","counters":[{"col_start":44,"col_end":44,"count":1}]},{"line":"","counters":[]},{"line":"  let previous_state_hash { Poly.Stable.Latest.previous_state_hash; _ } =","counters":[]},{"line":"    previous_state_hash","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let blockchain_state","counters":[]},{"line":"      { Poly.Stable.Latest.body = { Body.Poly.blockchain_state; _ }; _ } =","counters":[]},{"line":"    blockchain_state","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let consensus_state","counters":[]},{"line":"      { Poly.Stable.Latest.body = { Body.Poly.consensus_state; _ }; _ } =","counters":[]},{"line":"    consensus_state","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let constants { Poly.Stable.Latest.body = { Body.Poly.constants; _ }; _ } =","counters":[]},{"line":"    constants","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  let create_var = create'","counters":[]},{"line":"","counters":[]},{"line":"  let typ ~constraint_constants =","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ State_hash.typ; Body.typ ~constraint_constants ]","counters":[]},{"line":"      ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"      ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let hash_checked ({ previous_state_hash; body } : var) =","counters":[]},{"line":"    let%bind body = Body.hash_checked body in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    let%map hash =","counters":[]},{"line":"      make_checked (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          Random_oracle.Checked.hash ~init:Hash_prefix.protocol_state","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [| Hash.var_to_hash_packed previous_state_hash","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             ; State_body_hash.var_to_hash_packed body","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"            |]","counters":[]},{"line":"          |> State_hash.var_of_hash_packed )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    in","counters":[]},{"line":"    (hash, body)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state_hash_checked ~state_hash state =","counters":[]},{"line":"    let%bind is_genesis =","counters":[]},{"line":"      (*if state is in global_slot = 0 then this is the genesis state*)","counters":[]},{"line":"      Consensus.Data.Consensus_state.is_genesis_state_var","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"        (consensus_state state)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    in","counters":[]},{"line":"    (*get the genesis state hash from this state unless the state itself is the","counters":[]},{"line":"      genesis state*)","counters":[]},{"line":"    State_hash.if_ is_genesis ~then_:state_hash","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~else_:state.body.genesis_state_hash","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  let hashes = hashes_abstract ~hash_body:Body.hash","counters":[]},{"line":"","counters":[]},{"line":"  let hashes_with_body t ~body_hash =","counters":[]},{"line":"    hashes_abstract ~hash_body:Fn.id","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { Poly.previous_state_hash = t.Poly.previous_state_hash","counters":[]},{"line":"      ; body = body_hash","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"  let genesis_state_hash ?(state_hash = None) state =","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    (*If this is the genesis state then simply return its hash","counters":[]},{"line":"      otherwise return its the genesis_state_hash*)","counters":[]},{"line":"    if Consensus.Data.Consensus_state.is_genesis_state (consensus_state state)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    then","counters":[]},{"line":"      match state_hash with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (hashes state).state_hash","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      | Some hash ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          hash","counters":[]},{"line":"    else state.body.genesis_state_hash","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  [%%if call_logger]","counters":[]},{"line":"","counters":[]},{"line":"  let hash s =","counters":[]},{"line":"    Mina_debug.Call_logger.record_call \"Protocol_state.hash\" ;","counters":[]},{"line":"    hash s","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  let negative_one ~genesis_ledger ~genesis_epoch_data ~constraint_constants","counters":[]},{"line":"      ~consensus_constants ~genesis_body_reference =","counters":[]},{"line":"    { Poly.Stable.Latest.previous_state_hash =","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"        State_hash.of_hash Outside_hash_image.t","counters":[{"col_start":25,"col_end":25,"count":2}]},{"line":"    ; body =","counters":[]},{"line":"        { Body.Poly.blockchain_state =","counters":[]},{"line":"            Blockchain_state.negative_one ~constraint_constants","counters":[]},{"line":"              ~consensus_constants","counters":[]},{"line":"              ~genesis_ledger_hash:","counters":[]},{"line":"                (Mina_ledger.Ledger.merkle_root (Lazy.force genesis_ledger))","counters":[{"col_start":46,"col_end":46,"count":2},{"col_start":58,"col_end":58,"count":2}]},{"line":"              ~genesis_body_reference","counters":[]},{"line":"        ; genesis_state_hash = State_hash.of_hash Outside_hash_image.t","counters":[{"col_start":48,"col_end":48,"count":2}]},{"line":"        ; consensus_state =","counters":[]},{"line":"            Consensus.Data.Consensus_state.negative_one ~genesis_ledger","counters":[]},{"line":"              ~genesis_epoch_data ~constants:consensus_constants","counters":[]},{"line":"              ~constraint_constants","counters":[]},{"line":"        ; constants =","counters":[]},{"line":"            Consensus.Constants.to_protocol_constants consensus_constants","counters":[{"col_start":52,"col_end":52,"count":2}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Wire_types.Make (Make_sig) (Make_str)","counters":[{"col_start":44,"col_end":44,"count":1}]}]}