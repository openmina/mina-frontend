{"filename":"src/lib/signature_lib/keypair.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { public_key : Public_key.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      ; private_key : Private_key.Stable.V1.t [@sexp.opaque]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving sexp]","counters":[{"col_start":20,"col_end":20,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson t = Public_key.Stable.V1.to_yojson t.public_key","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t = Stable.Latest.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { public_key : Public_key.t; private_key : Private_key.t [@sexp.opaque] }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  let compare { public_key = pk1; private_key = _ }","counters":[]},{"line":"      { public_key = pk2; private_key = _ } =","counters":[]},{"line":"    Public_key.compare pk1 pk2","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson = Stable.Latest.to_yojson","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"include Comparable.Make (T)","counters":[]},{"line":"","counters":[]},{"line":"let of_private_key_exn private_key =","counters":[]},{"line":"  let public_key = Public_key.of_private_key_exn private_key in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { public_key; private_key }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create () = of_private_key_exn (Private_key.create ())","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"let gen = Quickcheck.Generator.(map ~f:of_private_key_exn Private_key.gen)","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"module And_compressed_pk = struct","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type t = T.t * Public_key.Compressed.t [@@deriving sexp]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"    let compare ({ public_key = pk1; private_key = _ }, _)","counters":[]},{"line":"        ({ public_key = pk2; private_key = _ }, _) =","counters":[]},{"line":"      Public_key.compare pk1 pk2","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T","counters":[]},{"line":"  include Comparable.Make (T)","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}