{"filename":"src/lib/gadt_lib/vect.ml","lines":[{"line":"type ('el, 'n) t =","counters":[]},{"line":"  | [] : ('el, Peano.zero) t","counters":[]},{"line":"  | ( :: ) : 'el * ('el, 'n) t -> ('el, 'n Peano.succ) t","counters":[]},{"line":"","counters":[]},{"line":"let is_empty : type n. ('a, n) t -> bool = function","counters":[]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      true","counters":[]},{"line":"  | _ :: _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      false","counters":[]},{"line":"","counters":[]},{"line":"let rec to_list : type n. ('a, n) t -> 'a list = function","counters":[]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      []","counters":[]},{"line":"  | h :: t ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      h :: to_list t","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let rec map : type n. f:('a -> 'b) -> ('a, n) t -> ('b, n) t =","counters":[]},{"line":" fun ~f ls -> match ls with [] -> [] | h :: t -> f h :: map ~f t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"let rec map2 : type n. f:('a -> 'b -> 'c) -> ('a, n) t -> ('b, n) t -> ('c, n) t","counters":[]},{"line":"    =","counters":[]},{"line":" fun ~f ls_a ls_b ->","counters":[]},{"line":"  match (ls_a, ls_b) with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [], [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      []","counters":[]},{"line":"  | h_a :: t_a, h_b :: t_b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      f h_a h_b :: map2 ~f t_a t_b","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"let rec fold : type n. init:'b -> f:('b -> 'a -> 'b) -> ('a, n) t -> 'b =","counters":[]},{"line":" fun ~init ~f ls ->","counters":[]},{"line":"  match ls with [] -> init | h :: t -> fold ~init:(f init h) ~f t","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"let rec fold_map :","counters":[]},{"line":"    type n. init:'b -> f:('b -> 'a -> 'b * 'c) -> ('a, n) t -> 'b * ('c, n) t =","counters":[]},{"line":" fun ~init ~f ls ->","counters":[]},{"line":"  match ls with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (init, [])","counters":[]},{"line":"  | h :: t ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let init', h' = f init h in","counters":[]},{"line":"      let init'', t' = fold_map ~init:init' ~f t in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      (init'', h' :: t')","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"module Quickcheck_generator = struct","counters":[]},{"line":"  open Core_kernel.Quickcheck","counters":[]},{"line":"  open Generator.Let_syntax","counters":[]},{"line":"","counters":[]},{"line":"  let rec map :","counters":[]},{"line":"      type n. f:('a -> 'b Generator.t) -> ('a, n) t -> ('b, n) t Generator.t =","counters":[]},{"line":"   fun ~f ls ->","counters":[]},{"line":"    match ls with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return []","counters":[]},{"line":"    | h :: t ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind h' = f h in","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        let%map t' = map ~f t in","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        h' :: t'","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}