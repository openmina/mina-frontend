{"filename":"src/lib/pickles/dummy.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Backend","counters":[]},{"line":"open Composition_types","counters":[]},{"line":"open Common","counters":[]},{"line":"","counters":[]},{"line":"let wrap_domains = Common.wrap_domains","counters":[]},{"line":"","counters":[]},{"line":"let evals =","counters":[]},{"line":"  let open Plonk_types in","counters":[]},{"line":"  let e =","counters":[]},{"line":"    Evals.map (Evaluation_lengths.create ~of_int:Fn.id) ~f:(fun n ->","counters":[]},{"line":"        let a () = Array.create ~len:n (Ro.tock ()) in","counters":[{"col_start":8,"col_end":8,"count":24},{"col_start":19,"col_end":19,"count":48},{"col_start":46,"col_end":46,"count":48}]},{"line":"        (a (), a ()) )","counters":[{"col_start":9,"col_end":9,"count":24},{"col_start":15,"col_end":15,"count":24}]},{"line":"  in","counters":[]},{"line":"  let ex =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    { All_evals.With_public_input.evals = e","counters":[]},{"line":"    ; public_input = (Ro.tock (), Ro.tock ())","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":40,"col_end":40,"count":1}]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  { All_evals.ft_eval1 = Ro.tock (); evals = ex }","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"let evals_combined =","counters":[]},{"line":"  Plonk_types.All_evals.map evals ~f1:Fn.id","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"    ~f2:(Array.reduce_exn ~f:Backend.Tock.Field.( + ))","counters":[]},{"line":"","counters":[]},{"line":"module Ipa = struct","counters":[]},{"line":"  module Wrap = struct","counters":[]},{"line":"    let challenges =","counters":[]},{"line":"      Vector.init Tock.Rounds.n ~f:(fun _ ->","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"          let prechallenge = Ro.scalar_chal () in","counters":[{"col_start":10,"col_end":10,"count":15}]},{"line":"          { Bulletproof_challenge.prechallenge } )","counters":[{"col_start":10,"col_end":10,"count":15}]},{"line":"","counters":[]},{"line":"    let challenges_computed =","counters":[]},{"line":"      Vector.map challenges ~f:(fun { prechallenge } : Tock.Field.t ->","counters":[{"col_start":15,"col_end":15,"count":1}]},{"line":"          Ipa.Wrap.compute_challenge prechallenge )","counters":[{"col_start":10,"col_end":10,"count":15}]},{"line":"","counters":[]},{"line":"    let sg =","counters":[]},{"line":"      lazy (time \"dummy wrap sg\" (fun () -> Ipa.Wrap.compute_sg challenges))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Step = struct","counters":[]},{"line":"    let challenges =","counters":[]},{"line":"      Vector.init Tick.Rounds.n ~f:(fun _ ->","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"          let prechallenge = Ro.scalar_chal () in","counters":[{"col_start":10,"col_end":10,"count":16}]},{"line":"          { Bulletproof_challenge.prechallenge } )","counters":[{"col_start":10,"col_end":10,"count":16}]},{"line":"","counters":[]},{"line":"    let challenges_computed =","counters":[]},{"line":"      Vector.map challenges ~f:(fun { prechallenge } : Tick.Field.t ->","counters":[{"col_start":15,"col_end":15,"count":1}]},{"line":"          Ipa.Step.compute_challenge prechallenge )","counters":[{"col_start":10,"col_end":10,"count":16}]},{"line":"","counters":[]},{"line":"    let sg =","counters":[]},{"line":"      lazy (time \"dummy wrap sg\" (fun () -> Ipa.Step.compute_sg challenges))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}