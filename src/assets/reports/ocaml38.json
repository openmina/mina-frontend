{"filename":"src/lib/pickles/proof.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Import","counters":[]},{"line":"open Common","counters":[]},{"line":"open Backend","counters":[]},{"line":"","counters":[]},{"line":"let hash_fold_array = Pickles_types.Plonk_types.hash_fold_array","counters":[]},{"line":"","counters":[]},{"line":"module Base = struct","counters":[]},{"line":"  module Messages_for_next_proof_over_same_field =","counters":[]},{"line":"    Reduced_messages_for_next_proof_over_same_field","counters":[]},{"line":"","counters":[]},{"line":"  module Step = struct","counters":[]},{"line":"    type ( 's","counters":[]},{"line":"         , 'unfinalized_proofs","counters":[]},{"line":"         , 'sgs","counters":[]},{"line":"         , 'bp_chals","counters":[]},{"line":"         , 'messages_for_next_wrap_proof","counters":[]},{"line":"         , 'prev_evals )","counters":[]},{"line":"         t =","counters":[]},{"line":"      { statement :","counters":[]},{"line":"          ( 'unfinalized_proofs","counters":[]},{"line":"          , ('s, 'sgs, 'bp_chals) Messages_for_next_proof_over_same_field.Step.t","counters":[]},{"line":"          , 'messages_for_next_wrap_proof )","counters":[]},{"line":"          Types.Step.Statement.t","counters":[]},{"line":"      ; index : int","counters":[]},{"line":"      ; prev_evals : 'prev_evals","counters":[]},{"line":"      ; proof : Tick.Proof.t","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Double = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type 'a t = 'a * 'a [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":16,"col_end":16,"count":3},{"col_start":20,"col_end":20,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":74,"col_end":74,"count":1}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Wrap = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type ('messages_for_next_wrap_proof, 'messages_for_next_step_proof) t =","counters":[{"col_start":8,"col_end":8,"count":10},{"col_start":76,"col_end":76,"count":5}]},{"line":"              ( 'messages_for_next_wrap_proof","counters":[]},{"line":"              , 'messages_for_next_step_proof )","counters":[]},{"line":"              Mina_wire_types.Pickles.Concrete_.Proof.Base.Wrap.V2.t =","counters":[]},{"line":"          { statement :","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"              ( Limb_vector.Constant.Hex64.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"                Vector.Vector_2.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Limb_vector.Constant.Hex64.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Vector.Vector_2.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Scalar_challenge.Stable.V2.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Tick.Field.Stable.V1.t Shifted_value.Type1.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"              , 'messages_for_next_wrap_proof","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Digest.Constant.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , 'messages_for_next_step_proof","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Limb_vector.Constant.Hex64.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Vector.Vector_2.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Scalar_challenge.Stable.V2.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Bulletproof_challenge.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                Step_bp_vec.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Branch_data.Stable.V1.t )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              Types.Wrap.Statement.Minimal.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          ; prev_evals :","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"              ( Tick.Field.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Tick.Field.Stable.V1.t array )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"              Plonk_types.All_evals.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"          ; proof : Tock.Proof.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type ('messages_for_next_wrap_proof, 'messages_for_next_step_proof) t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"          ( 'messages_for_next_wrap_proof","counters":[]},{"line":"          , 'messages_for_next_step_proof )","counters":[]},{"line":"          Stable.Latest.t =","counters":[]},{"line":"      { statement :","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"          ( Challenge.Constant.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Challenge.Constant.t Scalar_challenge.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          , Tick.Field.t Shifted_value.Type1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"          , 'messages_for_next_wrap_proof","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Digest.Constant.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , 'messages_for_next_step_proof","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Challenge.Constant.t Scalar_challenge.t Bulletproof_challenge.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"            Step_bp_vec.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Branch_data.t )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          Types.Wrap.Statement.Minimal.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      ; prev_evals : (Tick.Field.t, Tick.Field.t array) Plonk_types.All_evals.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"      ; proof : Tock.Proof.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type ('s, 'mlmb, 'c) with_data =","counters":[]},{"line":"      ('s, 'mlmb, 'c) Mina_wire_types.Pickles.Concrete_.Proof.with_data =","counters":[]},{"line":"  | T :","counters":[]},{"line":"      ( 'mlmb Base.Messages_for_next_proof_over_same_field.Wrap.t","counters":[]},{"line":"      , ( 's","counters":[]},{"line":"        , (Tock.Curve.Affine.t, 'most_recent_width) Vector.t","counters":[]},{"line":"        , ( Challenge.Constant.t Scalar_challenge.Stable.Latest.t","counters":[]},{"line":"            Bulletproof_challenge.t","counters":[]},{"line":"            Step_bp_vec.t","counters":[]},{"line":"          , 'most_recent_width )","counters":[]},{"line":"          Vector.t )","counters":[]},{"line":"        Base.Messages_for_next_proof_over_same_field.Step.t )","counters":[]},{"line":"      Base.Wrap.t","counters":[]},{"line":"      -> ('s, 'mlmb, _) with_data","counters":[]},{"line":"","counters":[]},{"line":"module With_data = struct","counters":[]},{"line":"  type ('s, 'mlmb, 'w) t = ('s, 'mlmb, 'w) with_data","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type ('max_width, 'mlmb) t = (unit, 'mlmb, 'max_width) With_data.t","counters":[]},{"line":"","counters":[]},{"line":"let dummy (type w h r) (_w : w Nat.t) (h : h Nat.t)","counters":[]},{"line":"    (most_recent_width : r Nat.t) ~domain_log2 : (w, h) t =","counters":[]},{"line":"  let open Ro in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let g0 = Tock.Curve.(to_affine_exn one) in","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  let g len = Array.create ~len g0 in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  let tick_arr len = Array.init len ~f:(fun _ -> tick ()) in","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  let lengths = Commitment_lengths.create ~of_int:Fn.id in","counters":[]},{"line":"  T","counters":[]},{"line":"    { statement =","counters":[]},{"line":"        { proof_state =","counters":[]},{"line":"            { deferred_values =","counters":[]},{"line":"                { xi = scalar_chal ()","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                ; combined_inner_product = Shifted_value (tick ())","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                ; b = Shifted_value (tick ())","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                ; branch_data =","counters":[]},{"line":"                    { proofs_verified =","counters":[]},{"line":"                        ( match most_recent_width with","counters":[]},{"line":"                        | Z ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            N0","counters":[]},{"line":"                        | S Z ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            N1","counters":[]},{"line":"                        | S (S Z) ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            N2","counters":[]},{"line":"                        | _ ->","counters":[]},{"line":"                            assert false )","counters":[]},{"line":"                    ; domain_log2 =","counters":[]},{"line":"                        Branch_data.Domain_log2.of_int_exn domain_log2","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                    }","counters":[]},{"line":"                ; bulletproof_challenges = Dummy.Ipa.Step.challenges","counters":[]},{"line":"                ; plonk =","counters":[]},{"line":"                    { alpha = scalar_chal ()","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                    ; beta = chal ()","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                    ; gamma = chal ()","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                    ; zeta = scalar_chal ()","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                    ; joint_combiner = None","counters":[]},{"line":"                    }","counters":[]},{"line":"                }","counters":[]},{"line":"            ; sponge_digest_before_evaluations =","counters":[]},{"line":"                Digest.Constant.of_tock_field Tock.Field.zero","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"            ; messages_for_next_wrap_proof =","counters":[]},{"line":"                { challenge_polynomial_commitment = Lazy.force Dummy.Ipa.Step.sg","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                ; old_bulletproof_challenges =","counters":[]},{"line":"                    Vector.init h ~f:(fun _ -> Dummy.Ipa.Wrap.challenges)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        ; messages_for_next_step_proof =","counters":[]},{"line":"            { app_state = ()","counters":[]},{"line":"            ; old_bulletproof_challenges =","counters":[]},{"line":"                (* Not sure if this should be w or h honestly ...*)","counters":[]},{"line":"                Vector.init most_recent_width ~f:(fun _ ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                    Dummy.Ipa.Step.challenges )","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                (* TODO: Should this be wrap? *)","counters":[]},{"line":"            ; challenge_polynomial_commitments =","counters":[]},{"line":"                Vector.init most_recent_width ~f:(fun _ ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                    Lazy.force Dummy.Ipa.Wrap.sg )","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    ; proof =","counters":[]},{"line":"        { messages =","counters":[]},{"line":"            { w_comm = Vector.map lengths.w ~f:g","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"            ; z_comm = g lengths.z","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            ; t_comm = g lengths.t","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            ; lookup = None","counters":[]},{"line":"            }","counters":[]},{"line":"        ; openings =","counters":[]},{"line":"            { proof =","counters":[]},{"line":"                { lr =","counters":[]},{"line":"                    Array.init (Nat.to_int Tock.Rounds.n) ~f:(fun _ -> (g0, g0))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"                ; z_1 = Ro.tock ()","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                ; z_2 = Ro.tock ()","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                ; delta = g0","counters":[]},{"line":"                ; challenge_polynomial_commitment = g0","counters":[]},{"line":"                }","counters":[]},{"line":"            ; evals = Dummy.evals.evals.evals","counters":[]},{"line":"            ; ft_eval1 = Dummy.evals.ft_eval1","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    ; prev_evals =","counters":[]},{"line":"        (let e =","counters":[]},{"line":"           Plonk_types.Evals.map (Evaluation_lengths.create ~of_int:Fn.id)","counters":[]},{"line":"             ~f:(fun n -> (tick_arr n, tick_arr n))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"         in","counters":[]},{"line":"         let ex =","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           { Plonk_types.All_evals.With_public_input.public_input =","counters":[]},{"line":"               (tick (), tick ())","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"           ; evals = e","counters":[]},{"line":"           }","counters":[]},{"line":"         in","counters":[]},{"line":"         { ft_eval1 = tick (); evals = ex } )","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"module Make (W : Nat.Intf) (MLMB : Nat.Intf) = struct","counters":[]},{"line":"  module Max_proofs_verified_at_most = At_most.With_length (W)","counters":[]},{"line":"  module MLMB_vec = Nvector (MLMB)","counters":[]},{"line":"","counters":[]},{"line":"  module Repr = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( ( Tock.Inner_curve.Affine.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Reduced_messages_for_next_proof_over_same_field.Wrap.Challenges_vector","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          .t","counters":[]},{"line":"          MLMB_vec.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Types.Wrap.Proof_state.Messages_for_next_wrap_proof.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , ( unit","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Tock.Curve.Affine.t Max_proofs_verified_at_most.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"        , Challenge.Constant.t Scalar_challenge.t Bulletproof_challenge.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          Step_bp_vec.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Max_proofs_verified_at_most.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Base.Messages_for_next_proof_over_same_field.Step.t )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Base.Wrap.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type nonrec t = (W.n, MLMB.n) t","counters":[]},{"line":"","counters":[]},{"line":"  let to_repr (T t) : Repr.t =","counters":[]},{"line":"    let lte =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Nat.lte_exn","counters":[]},{"line":"        (Vector.length","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"           t.statement.messages_for_next_step_proof","counters":[]},{"line":"             .challenge_polynomial_commitments )","counters":[]},{"line":"        W.n","counters":[]},{"line":"    in","counters":[]},{"line":"    { t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      statement =","counters":[]},{"line":"        { t.statement with","counters":[]},{"line":"          messages_for_next_step_proof =","counters":[]},{"line":"            { t.statement.messages_for_next_step_proof with","counters":[]},{"line":"              challenge_polynomial_commitments =","counters":[]},{"line":"                At_most.of_vector","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                  t.statement.messages_for_next_step_proof","counters":[]},{"line":"                    .challenge_polynomial_commitments lte","counters":[]},{"line":"            ; old_bulletproof_challenges =","counters":[]},{"line":"                At_most.of_vector","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                  t.statement.messages_for_next_step_proof","counters":[]},{"line":"                    .old_bulletproof_challenges lte","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let of_repr (r : Repr.t) : t =","counters":[]},{"line":"    let (Vector.T challenge_polynomial_commitments) =","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      At_most.to_vector","counters":[]},{"line":"        r.statement.messages_for_next_step_proof","counters":[]},{"line":"          .challenge_polynomial_commitments","counters":[]},{"line":"    in","counters":[]},{"line":"    let (Vector.T old_bulletproof_challenges) =","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      At_most.to_vector","counters":[]},{"line":"        r.statement.messages_for_next_step_proof.old_bulletproof_challenges","counters":[]},{"line":"    in","counters":[]},{"line":"    let T =","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      Nat.eq_exn","counters":[]},{"line":"        (Vector.length challenge_polynomial_commitments)","counters":[{"col_start":21,"col_end":21,"count":2}]},{"line":"        (Vector.length old_bulletproof_challenges)","counters":[{"col_start":21,"col_end":21,"count":2}]},{"line":"    in","counters":[]},{"line":"    T","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      { r with","counters":[]},{"line":"        statement =","counters":[]},{"line":"          { r.statement with","counters":[]},{"line":"            messages_for_next_step_proof =","counters":[]},{"line":"              { r.statement.messages_for_next_step_proof with","counters":[]},{"line":"                challenge_polynomial_commitments","counters":[]},{"line":"              ; old_bulletproof_challenges","counters":[]},{"line":"              }","counters":[]},{"line":"          }","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"  let compare t1 t2 = Repr.compare (to_repr t1) (to_repr t2)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let equal t1 t2 = Repr.equal (to_repr t1) (to_repr t2)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let hash_fold_t s t = Repr.hash_fold_t s (to_repr t)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let hash t = Repr.hash (to_repr t)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  include","counters":[]},{"line":"    Sexpable.Of_sexpable","counters":[]},{"line":"      (Repr)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"        let to_sexpable = to_repr","counters":[]},{"line":"","counters":[]},{"line":"        let of_sexpable = of_repr","counters":[]},{"line":"      end)","counters":[]},{"line":"","counters":[]},{"line":"  let to_base64 t =","counters":[]},{"line":"    (* assume call to Nat.lte_exn does not raise with a valid instance of t *)","counters":[]},{"line":"    let sexp = sexp_of_t t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* raises only on invalid optional arguments *)","counters":[]},{"line":"    Base64.encode_exn (Sexp.to_string sexp)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let of_base64 b64 =","counters":[]},{"line":"    match Base64.decode b64 with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok t -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        try Ok (t_of_sexp (Sexp.of_string t))","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        with exn -> Error (Exn.to_string exn) )","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"    | Error (`Msg s) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error s","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson_full x = Repr.to_yojson (to_repr x)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson x = `String (to_base64 x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson = function","counters":[]},{"line":"    | `String x ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        of_base64 x","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error \"Invalid json for proof. Expecting base64 encoded string\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Proofs_verified_2 = struct","counters":[]},{"line":"  module T = Make (Nat.N2) (Nat.N2)","counters":[]},{"line":"","counters":[]},{"line":"  module Repr = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":4},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( ( Tock.Inner_curve.Affine.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Reduced_messages_for_next_proof_over_same_field.Wrap","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              .Challenges_vector","counters":[]},{"line":"              .Stable","counters":[]},{"line":"              .V2","counters":[]},{"line":"              .t","counters":[]},{"line":"              Vector.Vector_2.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Types.Wrap.Proof_state.Messages_for_next_wrap_proof.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , ( unit","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Tock.Curve.Affine.t At_most.At_most_2.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"            , Limb_vector.Constant.Hex64.Stable.V1.t Vector.Vector_2.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"              Scalar_challenge.Stable.V2.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Bulletproof_challenge.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Step_bp_vec.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              At_most.At_most_2.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Base.Messages_for_next_proof_over_same_field.Step.Stable.V1.t )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          Base.Wrap.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    include T.Repr","counters":[]},{"line":"","counters":[]},{"line":"    (* Force the typechecker to verify that these types are equal. *)","counters":[]},{"line":"    let () =","counters":[]},{"line":"      let _f : unit -> (t, Stable.Latest.t) Type_equal.t =","counters":[]},{"line":"       fun () -> Type_equal.T","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      ()","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = T.t","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":17,"col_end":17,"count":1}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      include (T : module type of T with type t := t with module Repr := T.Repr)","counters":[]},{"line":"","counters":[]},{"line":"      include","counters":[]},{"line":"        Binable.Of_binable","counters":[]},{"line":"          (Repr.Stable.V2)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"            let to_binable = to_repr","counters":[]},{"line":"","counters":[]},{"line":"            let of_binable = of_repr","counters":[]},{"line":"          end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  include (T : module type of T with module Repr := T.Repr)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Proofs_verified_max = struct","counters":[]},{"line":"  module T =","counters":[]},{"line":"    Make","counters":[]},{"line":"      (Side_loaded_verification_key.Width.Max)","counters":[]},{"line":"      (Side_loaded_verification_key.Width.Max)","counters":[]},{"line":"","counters":[]},{"line":"  module Repr = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( ( Tock.Inner_curve.Affine.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Reduced_messages_for_next_proof_over_same_field.Wrap","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              .Challenges_vector","counters":[]},{"line":"              .Stable","counters":[]},{"line":"              .V2","counters":[]},{"line":"              .t","counters":[]},{"line":"              Side_loaded_verification_key.Width.Max_vector.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Types.Wrap.Proof_state.Messages_for_next_wrap_proof.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , ( unit","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Tock.Curve.Affine.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Side_loaded_verification_key.Width.Max_at_most.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Limb_vector.Constant.Hex64.Stable.V1.t Vector.Vector_2.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"              Scalar_challenge.Stable.V2.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Bulletproof_challenge.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Step_bp_vec.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Side_loaded_verification_key.Width.Max_at_most.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Base.Messages_for_next_proof_over_same_field.Step.Stable.V1.t )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          Base.Wrap.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    include T.Repr","counters":[]},{"line":"","counters":[]},{"line":"    (* Force the typechecker to verify that these types are equal. *)","counters":[]},{"line":"    let () =","counters":[]},{"line":"      let _f : unit -> (t, Stable.Latest.t) Type_equal.t =","counters":[]},{"line":"       fun () -> Type_equal.T","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      ()","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = T.t","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":17,"col_end":17,"count":1}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      include (T : module type of T with type t := t with module Repr := T.Repr)","counters":[]},{"line":"","counters":[]},{"line":"      include","counters":[]},{"line":"        Binable.Of_binable","counters":[]},{"line":"          (Repr.Stable.V2)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"            let to_binable = to_repr","counters":[]},{"line":"","counters":[]},{"line":"            let of_binable = of_repr","counters":[]},{"line":"          end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  include (T : module type of T with module Repr := T.Repr)","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}