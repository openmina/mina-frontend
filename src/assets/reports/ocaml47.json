{"filename":"src/app/transaction_fuzzer/transaction_fuzzer.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_transaction","counters":[]},{"line":"module Rust = Mina_tree.Rust","counters":[]},{"line":"module Fp = Kimchi_pasta.Basic.Fp","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"module Length = Mina_numbers.Length","counters":[]},{"line":"module Global_slot = Mina_numbers.Global_slot","counters":[]},{"line":"","counters":[]},{"line":"(* let constraint_constants = Genesis_constants.Constraint_constants.compiled *)","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"let constraint_constants: Genesis_constants.Constraint_constants.t = {","counters":[]},{"line":"  sub_windows_per_window = 11","counters":[]},{"line":"  ; ledger_depth = 35","counters":[]},{"line":"  ; work_delay = 2","counters":[]},{"line":"  ; block_window_duration_ms = 180000","counters":[]},{"line":"  ; transaction_capacity_log_2 = 7","counters":[]},{"line":"  ; pending_coinbase_depth = 5","counters":[]},{"line":"  ; coinbase_amount =","counters":[]},{"line":"      Currency.Amount.of_int 720000000000","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"  ; supercharged_coinbase_factor = 2","counters":[]},{"line":"  ; account_creation_fee =","counters":[]},{"line":"      Currency.Fee.of_int 1000000000","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"  ; fork = None","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"let txn_state_view: Zkapp_precondition.Protocol_state.View.t = {","counters":[]},{"line":"  snarked_ledger_hash = Fp.of_string(\"19095410909873291354237217869735884756874834695933531743203428046904386166496\")","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"  ; timestamp = Block_time.of_int64(1600251300000L)","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"  ; blockchain_length = Length.of_int(1)","counters":[{"col_start":36,"col_end":36,"count":1}]},{"line":"  ; last_vrf_output = ()","counters":[]},{"line":"  ; min_window_density = Length.of_int(77)","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"  ; total_currency = Currency.Amount.of_int(10016100000000000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"  ; global_slot_since_hard_fork = Global_slot.of_int(0)","counters":[{"col_start":51,"col_end":51,"count":1}]},{"line":"  ; global_slot_since_genesis = Global_slot.of_int(0)","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"  ; staking_epoch_data = {","counters":[]},{"line":"    ledger = {","counters":[]},{"line":"        hash = Fp.of_string(\"19095410909873291354237217869735884756874834695933531743203428046904386166496\")","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; total_currency = Currency.Amount.of_int(10016100000000000)","counters":[{"col_start":48,"col_end":48,"count":1}]},{"line":"    }","counters":[]},{"line":"    ; seed = Mina_base.Epoch_seed.of_decimal_string(\"0\")","counters":[{"col_start":50,"col_end":50,"count":1}]},{"line":"    ; start_checkpoint = State_hash.zero","counters":[]},{"line":"    ; lock_checkpoint = State_hash.zero","counters":[]},{"line":"    ; epoch_length = Length.of_int(1)","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    }","counters":[]},{"line":"  ; next_epoch_data = {","counters":[]},{"line":"    ledger = {","counters":[]},{"line":"        hash = Fp.of_string(\"19095410909873291354237217869735884756874834695933531743203428046904386166496\")","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; total_currency = Currency.Amount.of_int(10016100000000000)","counters":[{"col_start":48,"col_end":48,"count":1}]},{"line":"    }","counters":[]},{"line":"    ; seed = Fp.of_string(\"18512313064034685696641580142878809378857342939026666126913761777372978255172\")","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"    ; start_checkpoint = State_hash.zero","counters":[]},{"line":"    ; lock_checkpoint = Fp.of_string(\"9196091926153144288494889289330016873963015481670968646275122329689722912273\")","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; epoch_length = Length.of_int(2)","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    }","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let create_initial_accounts accounts =","counters":[]},{"line":"  let packed =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    Genesis_ledger_helper.Ledger.packed_genesis_ledger_of_accounts","counters":[]},{"line":"      ~depth:constraint_constants.ledger_depth (lazy (List.map ~f:(fun a -> (None, a)) accounts))","counters":[{"col_start":53,"col_end":53,"count":1},{"col_start":76,"col_end":76,"count":10}]},{"line":"  in","counters":[]},{"line":"  Lazy.force (Genesis_ledger.Packed.t packed)","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":36,"col_end":36,"count":1}]},{"line":"","counters":[]},{"line":"let deserialize_accounts accounts_bytes =","counters":[]},{"line":"  Bin_prot.Reader.of_bytes [%bin_reader: Account.Stable.Latest.t list] accounts_bytes","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"","counters":[]},{"line":"let ledger: (Ledger.t option) ref = ref None","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"let set_initial_accounts accounts_bytes =","counters":[]},{"line":"  let ledger_ = create_initial_accounts (deserialize_accounts accounts_bytes) in","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":60,"col_end":60,"count":1}]},{"line":"    ledger := Some ledger_;","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let ledger_hash = Ledger.merkle_root ledger_ in","counters":[]},{"line":"    Bin_prot.Writer.to_bytes [%bin_writer: Fp.t] ledger_hash","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"","counters":[]},{"line":"let apply_tx user_command_bytes =","counters":[]},{"line":"  try","counters":[{"col_start":2,"col_end":2,"count":1800}]},{"line":"    let command = Bin_prot.Reader.of_bytes [%bin_reader: User_command.Stable.Latest.t] user_command_bytes in","counters":[]},{"line":"    (*Core_kernel.printf !\"%{sexp:User_command.t}\\n%!\" command;*)","counters":[]},{"line":"    let tx = Transaction.Command command in","counters":[{"col_start":4,"col_end":4,"count":1800}]},{"line":"    let ledger = match !ledger with","counters":[]},{"line":"      | Some(ledger) -> ledger","counters":[{"col_start":8,"col_end":8,"count":1800}]},{"line":"      | None -> failwith \"ledger not initialized\"","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    in","counters":[]},{"line":"    let applied = Ledger.apply_transaction ~constraint_constants ~txn_state_view ledger tx in","counters":[]},{"line":"    Core_kernel.printf !\"%{sexp:Ledger.Transaction_applied.t Or_error.t}\\n%!\" applied;","counters":[{"col_start":4,"col_end":4,"count":1800},{"col_start":24,"col_end":24,"count":1800}]},{"line":"    let ledger_hash = Ledger.merkle_root ledger in","counters":[{"col_start":4,"col_end":4,"count":1800}]},{"line":"    Bin_prot.Writer.to_bytes [%bin_writer: Fp.t] ledger_hash","counters":[{"col_start":4,"col_end":4,"count":1800},{"col_start":27,"col_end":27,"count":1800}]},{"line":"  with","counters":[]},{"line":"    e -> let msg = Exn.to_string e in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let bt = Printexc.get_backtrace () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Core_kernel.printf !\"except: %s\\n%s\\n%!\" msg bt;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    raise e","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"let get_coverage _ =","counters":[]},{"line":"  List.map (Bisect.Runtime.get_coverage_flattened ()) ~f:(","counters":[{"col_start":2,"col_end":2,"count":19},{"col_start":48,"col_end":48,"count":19}]},{"line":"    fun {filename; points; counts} -> (","counters":[{"col_start":38,"col_end":38,"count":11244}]},{"line":"      filename,","counters":[]},{"line":"      Array.fold_right points ~f:(fun x acc -> (Int64.of_int x) :: acc) ~init:[],","counters":[{"col_start":21,"col_end":21,"count":11243},{"col_start":47,"col_end":47,"count":1397757},{"col_start":59,"col_end":59,"count":1397757}]},{"line":"      Array.fold_right counts ~f:(fun x acc -> (Int64.of_int x) :: acc) ~init:[]","counters":[{"col_start":21,"col_end":21,"count":11243},{"col_start":47,"col_end":47,"count":1397763},{"col_start":59,"col_end":59,"count":1397764}]},{"line":"    )","counters":[]},{"line":"  )","counters":[]},{"line":"","counters":[]},{"line":"let () =","counters":[]},{"line":"Printexc.record_backtrace true;","counters":[]},{"line":"Core_kernel.printf !\"starting...\\n%!\";","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"(*","counters":[]},{"line":"let x = Bisect.Runtime.get_coverage_flattened () in","counters":[]},{"line":"Core_kernel.printf !\"bisect num info %{sexp:int}\\n%!\" (List.length x);","counters":[]},{"line":"List.iter x ~f:(fun {filename; points; counts} -> Core_kernel.printf !\"bisect %s %{sexp:int array} %{sexp:int array}\\n%!\" filename points counts );","counters":[]},{"line":"*)","counters":[]},{"line":"Rust.transaction_fuzzer set_initial_accounts apply_tx get_coverage","counters":[{"col_start":0,"col_end":0,"count":1},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"","counters":[]}]}