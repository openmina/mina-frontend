{"filename":"src/lib/mina_base/token_permissions.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":512},{"col_start":9,"col_end":9,"count":4}]},{"line":"      | Token_owned of { disable_new_accounts : bool }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      | Not_owned of { account_disabled : bool }","counters":[{"col_start":6,"col_end":6,"count":312},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let default = Not_owned { account_disabled = false }","counters":[]},{"line":"","counters":[]},{"line":"let to_input t =","counters":[]},{"line":"  let bs =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    match t with","counters":[]},{"line":"    | Token_owned { disable_new_accounts } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ true; disable_new_accounts ]","counters":[]},{"line":"    | Not_owned { account_disabled } ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        [ false; account_disabled ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Random_oracle.Input.Chunked.packed (Field.project bs, List.length bs)","counters":[{"col_start":50,"col_end":50,"count":1},{"col_start":66,"col_end":66,"count":1}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"type var = { token_owner : Boolean.var; token_locked : Boolean.var }","counters":[]},{"line":"","counters":[]},{"line":"let var_of_t = function","counters":[]},{"line":"  | Token_owned { disable_new_accounts } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { token_owner = Boolean.true_","counters":[]},{"line":"      ; token_locked = Boolean.var_of_value disable_new_accounts","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      }","counters":[]},{"line":"  | Not_owned { account_disabled } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { token_owner = Boolean.false_","counters":[]},{"line":"      ; token_locked = Boolean.var_of_value account_disabled","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"let typ : (var, t) Typ.t =","counters":[]},{"line":"  let open Typ in","counters":[]},{"line":"  Boolean.typ * Boolean.typ","counters":[]},{"line":"  |> Typ.transport_var","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"       ~back:(fun (token_owner, token_locked) -> { token_owner; token_locked })","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"       ~there:(fun { token_owner; token_locked } -> (token_owner, token_locked))","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"  |> Typ.transport","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"       ~there:(function","counters":[]},{"line":"         | Token_owned { disable_new_accounts } ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             (true, disable_new_accounts)","counters":[]},{"line":"         | Not_owned { account_disabled } ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             (false, account_disabled) )","counters":[]},{"line":"       ~back:(fun (token_owner, token_locked) ->","counters":[]},{"line":"         if token_owner then Token_owned { disable_new_accounts = token_locked }","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"         else Not_owned { account_disabled = token_locked } )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let var_to_input { token_owner; token_locked } =","counters":[]},{"line":"  let bs = [ token_owner; token_locked ] in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Random_oracle.Input.Chunked.packed (Field.Var.project bs, List.length bs)","counters":[{"col_start":54,"col_end":54,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"  let%bind token_owner = Quickcheck.Generator.bool in","counters":[]},{"line":"  let%map token_locked = Quickcheck.Generator.bool in","counters":[]},{"line":"  if token_owner then Token_owned { disable_new_accounts = token_locked }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"  else Not_owned { account_disabled = token_locked }","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":51,"col_end":51,"count":1}]}]}