{"filename":"src/lib/protocol_version/protocol_version_intf.ml","lines":[{"line":"module type Full = sig","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      type t [@@deriving compare, sexp, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  val major : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val minor : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val patch : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val create_exn : major:int -> minor:int -> patch:int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val create_opt : major:int -> minor:int -> patch:int -> t option","counters":[]},{"line":"","counters":[]},{"line":"  val get_current : unit -> t","counters":[]},{"line":"","counters":[]},{"line":"  val set_current : t -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val get_proposed_opt : unit -> t option","counters":[]},{"line":"","counters":[]},{"line":"  val set_proposed_opt : t option -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val zero : t","counters":[]},{"line":"","counters":[]},{"line":"  (** a daemon can accept blocks or RPC responses with compatible protocol versions *)","counters":[]},{"line":"  val compatible_with_daemon : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val to_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val of_string_exn : string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_string_opt : string -> t option","counters":[]},{"line":"","counters":[]},{"line":"  (** useful when deserializing, could contain negative integers *)","counters":[]},{"line":"  val is_valid : t -> bool","counters":[]},{"line":"end","counters":[]}]}