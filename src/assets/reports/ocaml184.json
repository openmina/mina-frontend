{"filename":"src/lib/network_peer/envelope.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"module Sender = struct","counters":[]},{"line":"  type t = Local | Remote of Peer.t [@@deriving sexp, compare]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  let of_peer (p : Peer.t) = Remote p","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let equal sender1 sender2 = Int.equal (compare sender1 sender2) 0","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson t : Yojson.Safe.t =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Local ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `String \"Local\"","counters":[]},{"line":"    | Remote p ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Assoc [ (\"Remote\", Peer.to_yojson p) ]","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson (json : Yojson.Safe.t) : (t, string) Result.t =","counters":[]},{"line":"    match json with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `String \"Local\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Local","counters":[]},{"line":"    | `Assoc [ (\"Remote\", peer_json) ] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let open Result.Let_syntax in","counters":[]},{"line":"        let%map peer = Peer.of_yojson peer_json in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        Remote peer","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error \"Expected JSON representing envelope sender\"","counters":[]},{"line":"","counters":[]},{"line":"  let remote_exn = function","counters":[]},{"line":"    | Local ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Sender.remote_exn of Local sender\"","counters":[]},{"line":"    | Remote x ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        x","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let%bind ip =","counters":[]},{"line":"      match%map","counters":[]},{"line":"        Quickcheck.Generator.(","counters":[]},{"line":"          variant2","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"            (list_with_length 4 (Int.gen_incl 0 255))","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"            (list_with_length 8 (Int.gen_incl 0 65535)))","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"      with","counters":[]},{"line":"      | `A octets ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          String.concat ~sep:\".\" (List.map ~f:Int.to_string octets)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      | `B segments ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          String.concat ~sep:\":\" (List.map ~f:(Printf.sprintf \"%x\") segments)","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"    in","counters":[]},{"line":"    let remote =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let inet = Unix.Inet_addr.of_string ip in","counters":[]},{"line":"      let%bind peer_id = String.gen_nonempty in","counters":[]},{"line":"      let%map libp2p_port = Int.gen_uniform_incl 1025 49151 in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"      Peer.create inet ~peer_id ~libp2p_port","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    match%map Option.quickcheck_generator remote with","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Local","counters":[]},{"line":"    | Some remote ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Remote remote","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Incoming = struct","counters":[]},{"line":"  let time_to_yojson tm = `String (Time.to_string tm)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"  let time_of_yojson = function","counters":[]},{"line":"    | `String s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok (Time.of_string s)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error \"time_of_yojson: Expected string\"","counters":[]},{"line":"","counters":[]},{"line":"  type 'a t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { data : 'a","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    ; sender : Sender.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; received_at : Time.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"          [@to_yojson time_to_yojson] [@of_yojson time_of_yojson]","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving equal, sexp, yojson, compare]","counters":[]},{"line":"","counters":[]},{"line":"  let sender t = t.sender","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  let data t = t.data","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  let received_at t = t.received_at","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let wrap ~data ~sender =","counters":[]},{"line":"    let received_at = Time.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { data; sender; received_at }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let wrap_peer ~data ~sender =","counters":[]},{"line":"    let received_at = Time.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { data; sender = Sender.of_peer sender; received_at }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let map ~f t = { t with data = f t.data }","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let local data =","counters":[]},{"line":"    let received_at = Time.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let sender = Sender.Local in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { data; sender; received_at }","counters":[]},{"line":"","counters":[]},{"line":"  let remote_sender_exn t =","counters":[]},{"line":"    match t.sender with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Local ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Incoming.sender_sender_exn of Local envelope\"","counters":[]},{"line":"    | Remote x ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        x","counters":[]},{"line":"","counters":[]},{"line":"  let gen gen_a =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind data = gen_a in","counters":[]},{"line":"    let%map sender = Sender.gen in","counters":[]},{"line":"    let received_at = Time.now () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { data; sender; received_at }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}