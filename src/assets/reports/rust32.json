{"filename":"src/scan_state/fee_excess.rs","lines":[{"line":"//! Fee excesses associated with transactions or transitions.","counters":[]},{"line":"//!","counters":[]},{"line":"//! These are represented as a 'left' and 'right' excess, which describe the","counters":[]},{"line":"//! unresolved fee excesses in the fee tokens of the first (or leftmost) and","counters":[]},{"line":"//! last (or rightmost) transactions in the transition.","counters":[]},{"line":"//!","counters":[]},{"line":"//! Assumptions:","counters":[]},{"line":"//! * Transactions are grouped by their fee token.","counters":[]},{"line":"//! * The 'fee transfer' transaction to dispense those fees is part of this","counters":[]},{"line":"//!   group.","counters":[]},{"line":"//! * The fee excess for each token is 0 across the group.","counters":[]},{"line":"//! * No transactions with fees paid in another token are executed while the","counters":[]},{"line":"//!   previous fee token's excess is non-zero.","counters":[]},{"line":"//!","counters":[]},{"line":"//! By maintaining these assumptions, we can ensure that the un-settled fee","counters":[]},{"line":"//! excesses can be represented by excesses in (at most) 2 tokens.","counters":[]},{"line":"//! Consider, for example, any consecutive subsequence of the transactions","counters":[]},{"line":"//!","counters":[]},{"line":"//! ..[txn@2][ft@2][txn@3][txn@3][ft@3][txn@4][ft@4][txn@5][txn@5][ft@5][txn@6][ft@6]..","counters":[]},{"line":"//!","counters":[]},{"line":"//! where [txn@i] and [ft@i] are transactions and fee transfers respectively","counters":[]},{"line":"//! paid in token i.","counters":[]},{"line":"//! The only groups which may have non-zero fee excesses are those which","counters":[]},{"line":"//! contain the start and end of the subsequence.","counters":[]},{"line":"//!","counters":[]},{"line":"//! The code below also defines a canonical representation where fewer than 2","counters":[]},{"line":"//! tokens have non-zero excesses. See [rebalance] below for details and the","counters":[]},{"line":"//! implementation.","counters":[]},{"line":"//!","counters":[]},{"line":"//!","counters":[]},{"line":"//! Port of the implementation from:","counters":[]},{"line":"//! https://github.com/MinaProtocol/mina/blob/2ee6e004ba8c6a0541056076aab22ea162f7eb3a/src/lib/mina_base/fee_excess.ml#L1","counters":[]},{"line":"","counters":[]},{"line":"use crate::TokenId;","counters":[]},{"line":"","counters":[]},{"line":"use super::{","counters":[]},{"line":"    currency::{Fee, Magnitude, Signed},","counters":[]},{"line":"    scan_state::transaction_snark::OneOrTwo,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":24,"count":7514},{"col_start":31,"col_end":32,"count":3640}]},{"line":"pub struct FeeExcess {","counters":[]},{"line":"    pub(super) fee_token_l: TokenId,","counters":[]},{"line":"    pub(super) fee_excess_l: Signed<Fee>,","counters":[]},{"line":"    pub(super) fee_token_r: TokenId,","counters":[]},{"line":"    pub(super) fee_excess_r: Signed<Fee>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FeeExcess {","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_token_l: TokenId::default(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            fee_excess_l: Signed::<Fee>::zero(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            fee_token_r: TokenId::default(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            fee_excess_r: Signed::<Fee>::zero(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn is_zero(&self) -> bool {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        let Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            fee_token_l,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_l,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            fee_token_r,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_r,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        } = self;","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"        fee_token_l.is_default()","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            && fee_token_r.is_default()","counters":[{"col_start":15,"col_end":39,"count":0}]},{"line":"            && fee_excess_l.is_zero()","counters":[{"col_start":15,"col_end":37,"count":0}]},{"line":"            && fee_excess_r.is_zero()","counters":[{"col_start":15,"col_end":37,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/e5183ca1dde1c085b4c5d37d1d9987e24c294c32/src/lib/mina_base/fee_excess.ml#L536","counters":[]},{"line":"    pub fn of_one_or_two(excesses: OneOrTwo<(TokenId, Signed<Fee>)>) -> Result<Self, String> {","counters":[{"col_start":4,"col_end":94,"count":0}]},{"line":"        match excesses {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            OneOrTwo::One((fee_token_l, fee_excess_l)) => Self {","counters":[{"col_start":27,"col_end":64,"count":0}]},{"line":"                fee_token_l,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                fee_excess_l,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                fee_token_r: TokenId::default(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                fee_excess_r: Signed::<Fee>::zero(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            OneOrTwo::Two(((fee_token_l, fee_excess_l), (fee_token_r, fee_excess_r))) => Self {","counters":[{"col_start":28,"col_end":95,"count":0}]},{"line":"                fee_token_l,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                fee_excess_l,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                fee_token_r,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                fee_excess_r,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"        .rebalance()","counters":[{"col_start":9,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/e5183ca1dde1c085b4c5d37d1d9987e24c294c32/src/lib/mina_base/fee_excess.ml#L526","counters":[]},{"line":"    pub fn of_single((fee_token_l, fee_excess_l): (TokenId, Signed<Fee>)) -> Self {","counters":[{"col_start":4,"col_end":83,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_token_l,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_l,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            fee_token_r: TokenId::default(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            fee_excess_r: Signed::<Fee>::zero(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// 'Rebalance' to a canonical form, where","counters":[]},{"line":"    /// - if there is only 1 nonzero excess, it is to the left","counters":[]},{"line":"    /// - any zero fee excess has the default token","counters":[]},{"line":"    /// - if the fee tokens are the same, the excesses are combined","counters":[]},{"line":"    ///","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/2ee6e004ba8c6a0541056076aab22ea162f7eb3a/src/lib/mina_base/fee_excess.ml#L301","counters":[]},{"line":"    fn rebalance(&self) -> Result<Self, String> {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        let Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            fee_token_l,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_l,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            fee_token_r,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_r,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        } = self;","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"        // Use the same token for both if [fee_excess_l] is zero.","counters":[]},{"line":"        let fee_token_l = if fee_excess_l.magnitude.is_zero() {","counters":[{"col_start":12,"col_end":23,"count":0},{"col_start":29,"col_end":61,"count":0}]},{"line":"            fee_token_r","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            fee_token_l","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        // Rebalancing.","counters":[]},{"line":"        let (fee_excess_l, fee_excess_r) = if fee_token_l == fee_token_r {","counters":[{"col_start":13,"col_end":39,"count":0},{"col_start":46,"col_end":72,"count":0}]},{"line":"            match fee_excess_l.add(fee_excess_r) {","counters":[{"col_start":18,"col_end":48,"count":0}]},{"line":"                Some(fee_excess_l) => (fee_excess_l, Signed::<Fee>::zero()),","counters":[{"col_start":21,"col_end":75,"count":0}]},{"line":"                None => return Err(\"Error adding fees: overflow\".to_string()),","counters":[{"col_start":31,"col_end":77,"count":0}]},{"line":"            }","counters":[]},{"line":"        } else {","counters":[]},{"line":"            (*fee_excess_l, *fee_excess_r)","counters":[{"col_start":12,"col_end":42,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        // Use the default token if the excess is zero.","counters":[]},{"line":"        // This allows [verify_complete_merge] to verify a proof without knowledge of","counters":[]},{"line":"        // the particular fee tokens used.","counters":[]},{"line":"","counters":[]},{"line":"        let fee_token_l = if fee_excess_l.magnitude.is_zero() {","counters":[{"col_start":12,"col_end":23,"count":0},{"col_start":29,"col_end":61,"count":0}]},{"line":"            TokenId::default()","counters":[{"col_start":12,"col_end":30,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            fee_token_l.clone()","counters":[{"col_start":12,"col_end":31,"count":0}]},{"line":"        };","counters":[]},{"line":"        let fee_token_r = if fee_excess_r.magnitude.is_zero() {","counters":[{"col_start":12,"col_end":23,"count":0},{"col_start":29,"col_end":61,"count":0}]},{"line":"            TokenId::default()","counters":[{"col_start":12,"col_end":30,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            fee_token_r.clone()","counters":[{"col_start":12,"col_end":31,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        Ok(Self {","counters":[{"col_start":8,"col_end":17,"count":0}]},{"line":"            fee_token_l,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_l,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            fee_token_r,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            fee_excess_r,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// Combine the fee excesses from two transitions.","counters":[]},{"line":"    ///","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/2ee6e004ba8c6a0541056076aab22ea162f7eb3a/src/lib/mina_base/fee_excess.ml#L380","counters":[]},{"line":"    pub fn combine(","counters":[]},{"line":"        Self {","counters":[]},{"line":"            fee_token_l: fee_token1_l,","counters":[]},{"line":"            fee_excess_l: fee_excess1_l,","counters":[]},{"line":"            fee_token_r: fee_token1_r,","counters":[]},{"line":"            fee_excess_r: fee_excess1_r,","counters":[]},{"line":"        }: &Self,","counters":[]},{"line":"        Self {","counters":[]},{"line":"            fee_token_l: fee_token2_l,","counters":[]},{"line":"            fee_excess_l: fee_excess2_l,","counters":[]},{"line":"            fee_token_r: fee_token2_r,","counters":[]},{"line":"            fee_excess_r: fee_excess2_r,","counters":[]},{"line":"        }: &Self,","counters":[]},{"line":"    ) -> Result<Self, String> {","counters":[]},{"line":"        // Eliminate fee_excess1_r.","counters":[]},{"line":"        // [1l; 1r; 2l; 2r] -> [1l; 2l; 2r]","counters":[]},{"line":"        let ((fee_token1_l, fee_excess1_l), (fee_token2_l, fee_excess2_l)) = eliminate_fee_excess(","counters":[{"col_start":14,"col_end":72,"count":0},{"col_start":77,"col_end":98,"count":0}]},{"line":"            (fee_token1_l, fee_excess1_l),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            (fee_token1_r, fee_excess1_r),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            (fee_token2_l, fee_excess2_l),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // Eliminate fee_excess2_l.","counters":[]},{"line":"        // [1l; 2l; 2r] -> [1l; 2r]","counters":[]},{"line":"        let ((fee_token1_l, fee_excess1_l), (fee_token2_r, fee_excess2_r)) = eliminate_fee_excess(","counters":[{"col_start":14,"col_end":72,"count":0},{"col_start":77,"col_end":98,"count":0}]},{"line":"            (fee_token1_l, &fee_excess1_l),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            (fee_token2_l, &fee_excess2_l),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            (fee_token2_r, fee_excess2_r),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"            fee_token_l: fee_token1_l.clone(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            fee_excess_l: fee_excess1_l,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            fee_token_r: fee_token2_r.clone(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            fee_excess_r: fee_excess2_r,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        .rebalance()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Eliminate a fee excess, either by combining it with one to the left/right,","counters":[]},{"line":"/// or by checking that it is zero.","counters":[]},{"line":"///","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/2ee6e004ba8c6a0541056076aab22ea162f7eb3a/src/lib/mina_base/fee_excess.ml#L200","counters":[]},{"line":"fn eliminate_fee_excess<'a>(","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    (fee_token_l, fee_excess_l): (&'a TokenId, &'a Signed<Fee>),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"    (fee_token_m, fee_excess_m): (&'a TokenId, &'a Signed<Fee>),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"    (fee_token_r, fee_excess_r): (&'a TokenId, &'a Signed<Fee>),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":") -> Result<((&'a TokenId, Signed<Fee>), (&'a TokenId, Signed<Fee>)), String> {","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"    let add_err = |x: &Signed<Fee>, y: &Signed<Fee>| -> Result<Signed<Fee>, String> {","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"        x.add(y)","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            .ok_or_else(|| \"Error adding fees: Overflow\".to_string())","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    if fee_token_l == fee_token_m || fee_excess_l.magnitude.is_zero() {","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":37,"col_end":69,"count":0}]},{"line":"        let fee_excess_l = add_err(fee_excess_l, fee_excess_m)?;","counters":[{"col_start":12,"col_end":24,"count":0},{"col_start":27,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"        Ok(((fee_token_m, fee_excess_l), (fee_token_r, *fee_excess_r)))","counters":[{"col_start":8,"col_end":71,"count":0}]},{"line":"    } else if fee_token_r == fee_token_m || fee_excess_r.magnitude.is_zero() {","counters":[{"col_start":14,"col_end":40,"count":0},{"col_start":44,"col_end":76,"count":0}]},{"line":"        let fee_excess_r = add_err(fee_excess_r, fee_excess_m)?;","counters":[{"col_start":12,"col_end":24,"count":0},{"col_start":27,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"        Ok(((fee_token_l, *fee_excess_l), (fee_token_m, fee_excess_r)))","counters":[{"col_start":8,"col_end":71,"count":0}]},{"line":"    } else if fee_excess_m.magnitude.is_zero() {","counters":[{"col_start":14,"col_end":46,"count":0}]},{"line":"        Ok(((fee_token_l, *fee_excess_l), (fee_token_r, *fee_excess_r)))","counters":[{"col_start":8,"col_end":72,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        Err(format!(","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"            \"Error eliminating fee excess: Excess for token {:?} \\","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"             {:?} was nonzero\",","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            fee_token_m, fee_excess_m","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]}]}