{"filename":"src/generators/zkapp_command.rs","lines":[{"line":"use std::{","counters":[]},{"line":"    collections::{","counters":[]},{"line":"        hash_map::Entry::{Occupied, Vacant},","counters":[]},{"line":"        HashMap, HashSet,","counters":[]},{"line":"    },","counters":[]},{"line":"    marker::PhantomData,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::{UniformRand, Zero};","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::{CompressedPubKey, Keypair, Signature};","counters":[]},{"line":"use rand::{","counters":[]},{"line":"    rngs::ThreadRng,","counters":[]},{"line":"    seq::{IteratorRandom, SliceRandom},","counters":[]},{"line":"    Rng,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    gen_compressed, gen_keypair,","counters":[]},{"line":"    generators::{","counters":[]},{"line":"        zkapp_command_builder, ACCOUNT_CREATION_FEE, MAX_ACCOUNT_UPDATES, MAX_TOKEN_UPDATES,","counters":[]},{"line":"    },","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{","counters":[]},{"line":"            Amount, Balance, BlockTime, BlockTimeSpan, Fee, Index, Length, Magnitude, Nonce, Sgn,","counters":[]},{"line":"            Signed, Slot,","counters":[]},{"line":"        },","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            cons_zkapp_command_commitment,","counters":[]},{"line":"            protocol_state::{self, ProtocolStateView},","counters":[]},{"line":"            zkapp_command::{","counters":[]},{"line":"                self, AccountPreconditions, AccountUpdateSimple, AuthorizationKind, CallForest,","counters":[]},{"line":"                ClosedInterval, Control, FeePayer, FeePayerBody, Numeric, OrIgnore, Preconditions,","counters":[]},{"line":"                SetOrKeep, Update, WithHash, WithStackHash, ZkAppCommand, ZkAppPreconditions,","counters":[]},{"line":"            },","counters":[]},{"line":"            Memo,","counters":[]},{"line":"        },","counters":[]},{"line":"        zkapp_logic::{self, ZkAppCommandElt},","counters":[]},{"line":"    },","counters":[]},{"line":"    staged_ledger::pre_diff_info::HashableCompressedPubKey,","counters":[]},{"line":"    Account, AccountId, AuthRequired, BaseLedger, ControlTag, Mask, MyCowMut, Permissions,","counters":[]},{"line":"    ReceiptChainHash, TokenId, VerificationKey, VotingFor, ZkAppAccount,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use mina_p2p_messages::v2::MinaBaseAccountUpdateCallTypeStableV1 as CallType;","counters":[]},{"line":"","counters":[]},{"line":"use super::{Failure, NotPermitedOf, Role};","counters":[]},{"line":"","counters":[]},{"line":"/// Value when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"//const ACCOUNT_CREATION_FEE: Fee = Fee::from_u64(1000000000);","counters":[]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/d7d4aa4d650eb34b45a42b29276554802683ce15/src/lib/mina_generators/zkapp_command_generators.ml#L443","counters":[]},{"line":"fn gen_invalid_protocol_state_precondition(psv: &ProtocolStateView) -> ZkAppPreconditions {","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"    enum Tamperable {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        Timestamp,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        BlockchainLength,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        MinWindowDensity,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        TotalCurrency,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        GlobalSlotSinceHardFork,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        GlobalSlotSinceGenesis,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let mut protocol_state_precondition = ZkAppPreconditions::accept();","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"    let lower = rng.gen::<bool>();","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"    match [","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"        Tamperable::Timestamp,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        Tamperable::BlockchainLength,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        Tamperable::MinWindowDensity,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        Tamperable::TotalCurrency,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        Tamperable::GlobalSlotSinceHardFork,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        Tamperable::GlobalSlotSinceGenesis,","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    ]","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    .choose(&mut rng)","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    .unwrap()","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"    {","counters":[]},{"line":"        Tamperable::Timestamp => {","counters":[{"col_start":33,"col_end":34,"count":0}]},{"line":"            let timestamp: ClosedInterval<BlockTime> = {","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                // TODO: Ocaml uses 1_000_000L 60_000_000L, not sure what are those `L`","counters":[]},{"line":"                let epsilon = rng.gen_range(1_000_000..60_000_000);","counters":[{"col_start":20,"col_end":67,"count":-9379532}]},{"line":"                let epsilon = BlockTimeSpan::of_ms(epsilon);","counters":[{"col_start":0,"col_end":60,"count":-9379532}]},{"line":"","counters":[]},{"line":"                if lower || psv.timestamp > (BlockTime::zero().add(epsilon)) {","counters":[{"col_start":0,"col_end":24,"count":-9379532},{"col_start":28,"col_end":76,"count":-9379532}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: BlockTime::zero(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                        upper: psv.timestamp.sub(epsilon),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv.timestamp.add(epsilon),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                        upper: BlockTime::max(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"            protocol_state_precondition.timestamp = OrIgnore::Check(timestamp);","counters":[{"col_start":12,"col_end":78,"count":0}]},{"line":"        }","counters":[]},{"line":"        Tamperable::BlockchainLength => {","counters":[{"col_start":40,"col_end":41,"count":0}]},{"line":"            let blockchain_length = {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                let epsilon = Length::from_u32(rng.gen_range(1..10));","counters":[{"col_start":20,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"                if lower || psv.blockchain_length > epsilon {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":59,"count":-9379532}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: Length::zero(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        upper: psv","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            .blockchain_length","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                            .checked_sub(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                            .unwrap_or_else(Length::zero),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv.blockchain_length.checked_add(&epsilon).unwrap(),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                        upper: Length::max(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            protocol_state_precondition.blockchain_length = OrIgnore::Check(blockchain_length);","counters":[{"col_start":12,"col_end":94,"count":0}]},{"line":"        }","counters":[]},{"line":"        Tamperable::MinWindowDensity => {","counters":[{"col_start":40,"col_end":41,"count":0}]},{"line":"            let min_window_density = {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                let epsilon = Length::from_u32(rng.gen_range(1..10));","counters":[{"col_start":20,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"                if lower || psv.min_window_density > epsilon {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":60,"count":0}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: Length::zero(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        upper: psv","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            .min_window_density","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                            .checked_sub(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                            .unwrap_or_else(Length::zero),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    // TODO: This should be `psv.min_window_density` here","counters":[]},{"line":"                    //       Should open PR on mina repo","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv.blockchain_length.checked_add(&epsilon).unwrap(),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                        upper: Length::max(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            protocol_state_precondition.min_window_density = OrIgnore::Check(min_window_density);","counters":[{"col_start":12,"col_end":96,"count":0}]},{"line":"        }","counters":[]},{"line":"        Tamperable::TotalCurrency => {","counters":[{"col_start":37,"col_end":38,"count":0}]},{"line":"            let total_currency = {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                let epsilon = Amount::from_u64(rng.gen_range(1_000..1_000_000_000));","counters":[{"col_start":20,"col_end":84,"count":9379532}]},{"line":"","counters":[]},{"line":"                if lower || psv.total_currency > epsilon {","counters":[{"col_start":0,"col_end":24,"count":9379532},{"col_start":28,"col_end":56,"count":9379532}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: Amount::zero(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        upper: psv","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            .total_currency","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                            .checked_sub(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                            .unwrap_or_else(Amount::zero),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv.total_currency.checked_add(&epsilon).unwrap(),","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                        upper: Amount::max(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            protocol_state_precondition.total_currency = OrIgnore::Check(total_currency);","counters":[{"col_start":12,"col_end":88,"count":0}]},{"line":"        }","counters":[]},{"line":"        Tamperable::GlobalSlotSinceHardFork => {","counters":[{"col_start":47,"col_end":48,"count":22384}]},{"line":"            let global_slot_since_hard_fork = {","counters":[{"col_start":0,"col_end":43,"count":22384}]},{"line":"                let epsilon = Slot::from_u32(rng.gen_range(1..10));","counters":[{"col_start":20,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"                if lower || psv.global_slot_since_hard_fork > epsilon {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":69,"count":-8599}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":22384}]},{"line":"                        lower: Slot::zero(),","counters":[{"col_start":0,"col_end":44,"count":22384}]},{"line":"                        upper: psv","counters":[{"col_start":0,"col_end":34,"count":22384}]},{"line":"                            .global_slot_since_hard_fork","counters":[{"col_start":0,"col_end":56,"count":22384}]},{"line":"                            .checked_sub(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":22384}]},{"line":"                            .unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":56,"count":22384}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":22384}]},{"line":"                } else {","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            .global_slot_since_hard_fork","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            .checked_add(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                            .unwrap(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        upper: Slot::max(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            protocol_state_precondition.global_slot_since_hard_fork =","counters":[{"col_start":12,"col_end":69,"count":22384}]},{"line":"                OrIgnore::Check(global_slot_since_hard_fork);","counters":[{"col_start":0,"col_end":60,"count":22384}]},{"line":"        }","counters":[]},{"line":"        Tamperable::GlobalSlotSinceGenesis => {","counters":[{"col_start":46,"col_end":47,"count":1801}]},{"line":"            let global_slot_since_genesis = {","counters":[{"col_start":0,"col_end":41,"count":1801}]},{"line":"                let epsilon = Slot::from_u32(rng.gen_range(1..10));","counters":[{"col_start":20,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"                if lower || psv.global_slot_since_genesis > epsilon {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":67,"count":0}]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":1801}]},{"line":"                        lower: Slot::zero(),","counters":[{"col_start":0,"col_end":44,"count":1801}]},{"line":"                        upper: psv","counters":[{"col_start":0,"col_end":34,"count":1801}]},{"line":"                            .global_slot_since_genesis","counters":[{"col_start":0,"col_end":54,"count":1801}]},{"line":"                            .checked_sub(&epsilon)","counters":[{"col_start":0,"col_end":50,"count":1801}]},{"line":"                            .unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":56,"count":1801}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":1801}]},{"line":"                } else {","counters":[]},{"line":"                    ClosedInterval {","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"                        lower: psv.global_slot_since_genesis.checked_add(&epsilon).unwrap(),","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"                        upper: Slot::max(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            protocol_state_precondition.global_slot_since_genesis =","counters":[{"col_start":12,"col_end":67,"count":1801}]},{"line":"                OrIgnore::Check(global_slot_since_genesis);","counters":[{"col_start":0,"col_end":58,"count":1801}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    protocol_state_precondition","counters":[{"col_start":4,"col_end":31,"count":24185}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":24185}]},{"line":"","counters":[]},{"line":"fn closed_interval_exact<T: Copy>(value: T) -> ClosedInterval<T> {","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"    ClosedInterval {","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        lower: value,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        upper: value,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/d7d4aa4d650eb34b45a42b29276554802683ce15/src/lib/mina_generators/zkapp_command_generators.ml#L319","counters":[]},{"line":"fn gen_epoch_data_predicate(epoch_data: &protocol_state::EpochData) -> zkapp_command::EpochData {","counters":[{"col_start":0,"col_end":97,"count":0}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let ledger = {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        let hash = OrIgnore::gen(|| epoch_data.ledger.hash);","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":36,"col_end":58,"count":0},{"col_start":58,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        let total_currency =","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            OrIgnore::gen(|| closed_interval_exact(epoch_data.ledger.total_currency));","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":29,"col_end":84,"count":0},{"col_start":84,"col_end":86,"count":0}]},{"line":"","counters":[]},{"line":"        zkapp_command::EpochLedger {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            hash,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            total_currency,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let seed = OrIgnore::gen(|| epoch_data.seed);","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":32,"col_end":47,"count":0},{"col_start":47,"col_end":49,"count":0}]},{"line":"    let start_checkpoint = OrIgnore::gen(|| epoch_data.start_checkpoint);","counters":[{"col_start":0,"col_end":41,"count":0},{"col_start":44,"col_end":71,"count":0},{"col_start":71,"col_end":73,"count":0}]},{"line":"    let lock_checkpoint = OrIgnore::gen(|| epoch_data.lock_checkpoint);","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":43,"col_end":69,"count":0},{"col_start":69,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"    let epoch_length = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":37,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"        let mut gen = || Length::from_u32(rng.gen_range(0..10));","counters":[{"col_start":0,"col_end":19,"count":0},{"col_start":25,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":0}]},{"line":"            lower: epoch_data","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                .epoch_length","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .unwrap_or_else(Length::zero),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            upper: epoch_data.epoch_length.checked_add(&gen()).unwrap(),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    zkapp_command::EpochData {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        ledger,","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        seed,","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        start_checkpoint,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        lock_checkpoint,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        epoch_length,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/d7d4aa4d650eb34b45a42b29276554802683ce15/src/lib/mina_generators/zkapp_command_generators.ml#L367","counters":[]},{"line":"fn gen_protocol_state_precondition(psv: &ProtocolStateView) -> ZkAppPreconditions {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let snarked_ledger_hash = OrIgnore::gen(|| psv.snarked_ledger_hash);","counters":[{"col_start":0,"col_end":44,"count":0},{"col_start":47,"col_end":70,"count":0},{"col_start":70,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"    let timestamp = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":37,"col_end":38,"count":0}]},{"line":"        let mut gen = || rng.gen_range(0..60_000_000);","counters":[{"col_start":0,"col_end":22,"count":0},{"col_start":25,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":0}]},{"line":"            lower: psv.timestamp.sub(BlockTimeSpan::of_ms(gen())),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"            upper: psv.timestamp.add(BlockTimeSpan::of_ms(gen())),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let blockchain_length = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":42,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"        let mut gen = || Length::from_u32(rng.gen_range(0..10));","counters":[{"col_start":0,"col_end":19,"count":0},{"col_start":25,"col_end":63,"count":943649}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":0}]},{"line":"            lower: psv","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                .blockchain_length","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .unwrap_or_else(Length::zero),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            upper: psv.blockchain_length.checked_add(&gen()).unwrap(),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let min_window_density = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":46,"col_end":47,"count":5400}]},{"line":"        let mut gen = || Length::from_u32(rng.gen_range(0..10));","counters":[{"col_start":0,"col_end":19,"count":5400},{"col_start":25,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":5400}]},{"line":"            lower: psv","counters":[{"col_start":0,"col_end":22,"count":5400}]},{"line":"                .min_window_density","counters":[{"col_start":0,"col_end":35,"count":5400}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":5400}]},{"line":"                .unwrap_or_else(Length::zero),","counters":[{"col_start":0,"col_end":46,"count":5400}]},{"line":"            upper: psv.min_window_density.checked_add(&gen()).unwrap(),","counters":[{"col_start":0,"col_end":71,"count":5400}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":5400}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":5400},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let total_currency = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":42,"col_end":43,"count":0}]},{"line":"        let mut gen = || Amount::from_u64(rng.gen_range(0..1_000_000_000));","counters":[{"col_start":0,"col_end":19,"count":0},{"col_start":25,"col_end":74,"count":58182}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":0}]},{"line":"            lower: psv","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                .total_currency","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .unwrap_or_else(Amount::zero),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            upper: psv","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                .total_currency","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                .checked_add(&gen())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .unwrap_or(psv.total_currency),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let global_slot_since_hard_fork = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":52,"count":0},{"col_start":55,"col_end":56,"count":88333}]},{"line":"        let mut gen = || Slot::from_u32(rng.gen_range(0..10));","counters":[{"col_start":0,"col_end":19,"count":88333},{"col_start":25,"col_end":61,"count":1287}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":88333}]},{"line":"            lower: psv","counters":[{"col_start":0,"col_end":22,"count":88333}]},{"line":"                .global_slot_since_hard_fork","counters":[{"col_start":0,"col_end":44,"count":88333}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":88333}]},{"line":"                .unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":44,"count":88333}]},{"line":"            upper: psv.global_slot_since_hard_fork.checked_add(&gen()).unwrap(),","counters":[{"col_start":0,"col_end":80,"count":88333}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":88333}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":88333},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let global_slot_since_genesis = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":50,"count":0},{"col_start":53,"col_end":54,"count":622}]},{"line":"        let mut gen = || Slot::from_u32(rng.gen_range(0..10));","counters":[{"col_start":0,"col_end":19,"count":622},{"col_start":25,"col_end":61,"count":622}]},{"line":"","counters":[]},{"line":"        ClosedInterval {","counters":[{"col_start":8,"col_end":24,"count":622}]},{"line":"            lower: psv","counters":[{"col_start":0,"col_end":22,"count":622}]},{"line":"                .global_slot_since_genesis","counters":[{"col_start":0,"col_end":42,"count":622}]},{"line":"                .checked_sub(&gen())","counters":[{"col_start":0,"col_end":36,"count":622}]},{"line":"                .unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":44,"count":622}]},{"line":"            upper: psv.global_slot_since_genesis.checked_add(&gen()).unwrap(),","counters":[{"col_start":0,"col_end":78,"count":622}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":622}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":622},{"col_start":5,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    let staking_epoch_data = gen_epoch_data_predicate(&psv.staking_epoch_data);","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"    let next_epoch_data = gen_epoch_data_predicate(&psv.next_epoch_data);","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"    ZkAppPreconditions {","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        snarked_ledger_hash,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        timestamp,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        blockchain_length,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        min_window_density,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        last_vrf_output: (),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        total_currency,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        global_slot_since_hard_fork,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        global_slot_since_genesis,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        staking_epoch_data,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        next_epoch_data,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"fn gen_account_precondition_from_account(","counters":[{"col_start":0,"col_end":41,"count":30994}]},{"line":"    failure: Option<Failure>,","counters":[{"col_start":0,"col_end":29,"count":30994}]},{"line":"    first_use_of_account: bool,","counters":[{"col_start":0,"col_end":31,"count":30994}]},{"line":"    account: &Account,","counters":[{"col_start":0,"col_end":22,"count":30994}]},{"line":") -> AccountPreconditions {","counters":[{"col_start":0,"col_end":27,"count":30994}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":30994}]},{"line":"","counters":[]},{"line":"    let Account {","counters":[{"col_start":0,"col_end":17,"count":30994}]},{"line":"        balance,","counters":[{"col_start":0,"col_end":16,"count":30994}]},{"line":"        nonce,","counters":[{"col_start":0,"col_end":14,"count":30994}]},{"line":"        receipt_chain_hash,","counters":[{"col_start":0,"col_end":27,"count":30994}]},{"line":"        delegate,","counters":[{"col_start":0,"col_end":17,"count":30994}]},{"line":"        zkapp,","counters":[{"col_start":0,"col_end":14,"count":30994}]},{"line":"        ..","counters":[{"col_start":0,"col_end":10,"count":30994}]},{"line":"    } = account;","counters":[{"col_start":0,"col_end":16,"count":30994}]},{"line":"","counters":[]},{"line":"    // choose constructor","counters":[{"col_start":0,"col_end":25,"count":30994}]},{"line":"    if rng.gen() {","counters":[{"col_start":0,"col_end":16,"count":30994}]},{"line":"        // Full","counters":[]},{"line":"","counters":[]},{"line":"        let balance = OrIgnore::gen(|| {","counters":[{"col_start":12,"col_end":36,"count":0},{"col_start":39,"col_end":40,"count":3608}]},{"line":"            let balance_change_int = rng.gen_range(1..10_000_000);","counters":[{"col_start":0,"col_end":66,"count":3608}]},{"line":"            let balance_change = Balance::from_u64(balance_change_int);","counters":[{"col_start":0,"col_end":71,"count":3608}]},{"line":"","counters":[]},{"line":"            let lower = balance","counters":[{"col_start":0,"col_end":31,"count":3608}]},{"line":"                .checked_sub(&balance_change)","counters":[{"col_start":0,"col_end":45,"count":3608}]},{"line":"                .unwrap_or_else(Balance::zero);","counters":[{"col_start":0,"col_end":47,"count":3608}]},{"line":"            let upper = balance","counters":[{"col_start":0,"col_end":31,"count":3608}]},{"line":"                .checked_add(&balance_change)","counters":[{"col_start":0,"col_end":45,"count":3608}]},{"line":"                .unwrap_or_else(Balance::max);","counters":[{"col_start":0,"col_end":46,"count":3608}]},{"line":"","counters":[]},{"line":"            ClosedInterval { lower, upper }","counters":[{"col_start":0,"col_end":43,"count":3608}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":3608},{"col_start":9,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        let nonce = OrIgnore::gen(|| {","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":37,"col_end":38,"count":10698}]},{"line":"            let nonce_change_int = rng.gen_range(1..10);","counters":[{"col_start":0,"col_end":56,"count":10698}]},{"line":"            let nonce_change = Nonce::from_u32(nonce_change_int);","counters":[{"col_start":0,"col_end":65,"count":10698}]},{"line":"","counters":[]},{"line":"            let lower = nonce.checked_sub(&nonce_change).unwrap_or_else(Nonce::zero);","counters":[{"col_start":0,"col_end":85,"count":10698}]},{"line":"            let upper = nonce.checked_add(&nonce_change).unwrap_or_else(Nonce::max);","counters":[{"col_start":0,"col_end":84,"count":10698}]},{"line":"","counters":[]},{"line":"            ClosedInterval { lower, upper }","counters":[{"col_start":0,"col_end":43,"count":10698}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":10698},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let receipt_chain_hash = if first_use_of_account {","counters":[{"col_start":12,"col_end":30,"count":0},{"col_start":36,"col_end":56,"count":0}]},{"line":"            OrIgnore::Check(receipt_chain_hash.clone())","counters":[{"col_start":12,"col_end":55,"count":1}]},{"line":"        } else {","counters":[]},{"line":"            OrIgnore::Ignore","counters":[{"col_start":12,"col_end":28,"count":-1}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let delegate = match delegate {","counters":[{"col_start":12,"col_end":20,"count":0},{"col_start":29,"col_end":37,"count":0}]},{"line":"            Some(delegate) => OrIgnore::gen(|| delegate.clone()),","counters":[{"col_start":17,"col_end":44,"count":0},{"col_start":47,"col_end":63,"count":10698},{"col_start":63,"col_end":64,"count":0}]},{"line":"            None => OrIgnore::Ignore,","counters":[{"col_start":20,"col_end":36,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let (state, sequence_state, proved_state, is_new) = match zkapp {","counters":[{"col_start":13,"col_end":56,"count":0},{"col_start":66,"col_end":71,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                // let len = Pickles_types.Nat.to_int Zkapp_state.Max_state_size.n","counters":[]},{"line":"","counters":[]},{"line":"                let state = std::array::from_fn(|_| OrIgnore::Ignore);","counters":[{"col_start":20,"col_end":48,"count":-5},{"col_start":52,"col_end":68,"count":0},{"col_start":68,"col_end":70,"count":-5}]},{"line":"                let sequence_state = OrIgnore::Ignore;","counters":[{"col_start":0,"col_end":54,"count":-5}]},{"line":"                let proved_state = OrIgnore::Ignore;","counters":[{"col_start":0,"col_end":52,"count":-5}]},{"line":"                let is_new = OrIgnore::Ignore;","counters":[{"col_start":0,"col_end":46,"count":-5}]},{"line":"","counters":[]},{"line":"                (state, sequence_state, proved_state, is_new)","counters":[{"col_start":0,"col_end":61,"count":-5}]},{"line":"            }","counters":[]},{"line":"            Some(ZkAppAccount {","counters":[]},{"line":"                app_state,","counters":[{"col_start":16,"col_end":26,"count":5}]},{"line":"                sequence_state,","counters":[{"col_start":0,"col_end":31,"count":5}]},{"line":"                proved_state,","counters":[{"col_start":0,"col_end":29,"count":5}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":5}]},{"line":"            }) => {","counters":[{"col_start":0,"col_end":19,"count":5}]},{"line":"                let state = std::array::from_fn(|i| OrIgnore::gen(|| app_state[i]));","counters":[{"col_start":0,"col_end":48,"count":5},{"col_start":52,"col_end":66,"count":0},{"col_start":69,"col_end":81,"count":0},{"col_start":81,"col_end":82,"count":0},{"col_start":82,"col_end":84,"count":5}]},{"line":"","counters":[]},{"line":"                let sequence_state = {","counters":[{"col_start":0,"col_end":38,"count":5}]},{"line":"                    // choose a value from account sequence state","counters":[{"col_start":0,"col_end":65,"count":5}]},{"line":"                    OrIgnore::Check(sequence_state.choose(&mut rng).copied().unwrap())","counters":[{"col_start":0,"col_end":86,"count":5}]},{"line":"                };","counters":[{"col_start":0,"col_end":18,"count":5}]},{"line":"","counters":[]},{"line":"                let proved_state = OrIgnore::Check(*proved_state);","counters":[{"col_start":0,"col_end":66,"count":5}]},{"line":"","counters":[]},{"line":"                // when we apply the generated Zkapp_command.t, the account","counters":[{"col_start":0,"col_end":75,"count":5}]},{"line":"                // is always in the ledger","counters":[{"col_start":0,"col_end":42,"count":5}]},{"line":"                let is_new = OrIgnore::Check(false);","counters":[{"col_start":0,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"                (state, sequence_state, proved_state, is_new)","counters":[{"col_start":0,"col_end":61,"count":5}]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let mut predicate_account = zkapp_command::Account {","counters":[{"col_start":12,"col_end":60,"count":0}]},{"line":"            balance,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            nonce,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            receipt_chain_hash: receipt_chain_hash.map(|a| a.0),","counters":[{"col_start":0,"col_end":55,"count":0},{"col_start":59,"col_end":62,"count":0},{"col_start":62,"col_end":64,"count":0}]},{"line":"            delegate,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            state,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            sequence_state,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            proved_state,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            is_new,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let Account { balance, nonce, .. } = account;","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(Failure::InvalidAccountPrecondition) = failure {","counters":[{"col_start":15,"col_end":56,"count":0},{"col_start":59,"col_end":66,"count":0}]},{"line":"            #[derive(Clone, Copy)]","counters":[]},{"line":"            enum Tamperable {","counters":[]},{"line":"                Balance,","counters":[]},{"line":"                Nonce,","counters":[]},{"line":"                ReceiptChainHash,","counters":[]},{"line":"                Delegate,","counters":[]},{"line":"                State,","counters":[]},{"line":"                SequenceState,","counters":[]},{"line":"                ProvedState,","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            // tamper with account using randomly chosen item","counters":[]},{"line":"            match [","counters":[{"col_start":18,"col_end":19,"count":-18}]},{"line":"                Tamperable::Balance,","counters":[{"col_start":0,"col_end":36,"count":-18}]},{"line":"                Tamperable::Nonce,","counters":[{"col_start":0,"col_end":34,"count":-18}]},{"line":"                Tamperable::ReceiptChainHash,","counters":[{"col_start":0,"col_end":45,"count":-18}]},{"line":"                Tamperable::Delegate,","counters":[{"col_start":0,"col_end":37,"count":-18}]},{"line":"                Tamperable::State,","counters":[{"col_start":0,"col_end":34,"count":-18}]},{"line":"                Tamperable::SequenceState,","counters":[{"col_start":0,"col_end":42,"count":-18}]},{"line":"                Tamperable::ProvedState,","counters":[{"col_start":0,"col_end":40,"count":-18}]},{"line":"            ]","counters":[{"col_start":0,"col_end":13,"count":-18}]},{"line":"            .choose(&mut rng)","counters":[{"col_start":0,"col_end":29,"count":-18}]},{"line":"            .copied()","counters":[{"col_start":0,"col_end":21,"count":-18}]},{"line":"            .unwrap()","counters":[{"col_start":0,"col_end":21,"count":-18}]},{"line":"            {","counters":[]},{"line":"                Tamperable::Balance => {","counters":[{"col_start":39,"col_end":40,"count":10}]},{"line":"                    let new_balance = if balance.is_zero() {","counters":[{"col_start":0,"col_end":35,"count":10},{"col_start":41,"col_end":58,"count":-1819}]},{"line":"                        Balance::max()","counters":[{"col_start":24,"col_end":38,"count":0}]},{"line":"                    } else {","counters":[]},{"line":"                        Balance::zero()","counters":[{"col_start":24,"col_end":39,"count":10}]},{"line":"                    };","counters":[]},{"line":"","counters":[]},{"line":"                    let balance = OrIgnore::Check(ClosedInterval {","counters":[{"col_start":24,"col_end":66,"count":10}]},{"line":"                        lower: new_balance,","counters":[{"col_start":0,"col_end":43,"count":10}]},{"line":"                        upper: new_balance,","counters":[{"col_start":0,"col_end":43,"count":10}]},{"line":"                    });","counters":[{"col_start":0,"col_end":23,"count":10}]},{"line":"","counters":[]},{"line":"                    predicate_account.balance = balance;","counters":[{"col_start":0,"col_end":55,"count":10}]},{"line":"                }","counters":[]},{"line":"                Tamperable::Nonce => {","counters":[{"col_start":37,"col_end":38,"count":10}]},{"line":"                    let new_nonce = if nonce.is_zero() {","counters":[{"col_start":0,"col_end":33,"count":10},{"col_start":39,"col_end":54,"count":0}]},{"line":"                        Nonce::max()","counters":[{"col_start":24,"col_end":36,"count":0}]},{"line":"                    } else {","counters":[]},{"line":"                        Nonce::zero()","counters":[{"col_start":24,"col_end":37,"count":10}]},{"line":"                    };","counters":[]},{"line":"","counters":[]},{"line":"                    let nonce = Numeric::gen(|| ClosedInterval::gen(|| new_nonce));","counters":[{"col_start":24,"col_end":45,"count":10},{"col_start":48,"col_end":68,"count":55988},{"col_start":71,"col_end":80,"count":55988},{"col_start":80,"col_end":81,"count":55988},{"col_start":81,"col_end":83,"count":10}]},{"line":"","counters":[]},{"line":"                    predicate_account.nonce = nonce;","counters":[{"col_start":0,"col_end":51,"count":10}]},{"line":"                }","counters":[]},{"line":"                Tamperable::ReceiptChainHash => {","counters":[{"col_start":48,"col_end":49,"count":0}]},{"line":"                    let receipt_chain_hash = OrIgnore::gen(ReceiptChainHash::gen);","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"","counters":[]},{"line":"                    predicate_account.receipt_chain_hash = receipt_chain_hash.map(|v| v.0);","counters":[{"col_start":0,"col_end":82,"count":0},{"col_start":86,"col_end":89,"count":0},{"col_start":89,"col_end":91,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                Tamperable::Delegate => {","counters":[{"col_start":40,"col_end":41,"count":0}]},{"line":"                    let delegate = OrIgnore::gen(|| gen_keypair().public.into_compressed());","counters":[{"col_start":0,"col_end":49,"count":0},{"col_start":52,"col_end":90,"count":0},{"col_start":90,"col_end":92,"count":0}]},{"line":"","counters":[]},{"line":"                    predicate_account.delegate = delegate;","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                Tamperable::State => {","counters":[{"col_start":37,"col_end":38,"count":1800}]},{"line":"                    let field = predicate_account.state.choose_mut(&mut rng).unwrap();","counters":[{"col_start":0,"col_end":86,"count":1800}]},{"line":"                    *field = OrIgnore::Check(Fp::rand(&mut rng));","counters":[{"col_start":0,"col_end":65,"count":1800}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":1800}]},{"line":"                Tamperable::SequenceState => {","counters":[{"col_start":45,"col_end":46,"count":0}]},{"line":"                    predicate_account.sequence_state = OrIgnore::Check(Fp::rand(&mut rng));","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                Tamperable::ProvedState => {","counters":[{"col_start":43,"col_end":44,"count":1}]},{"line":"                    let proved_state = match predicate_account.proved_state {","counters":[{"col_start":0,"col_end":36,"count":1},{"col_start":45,"col_end":75,"count":1}]},{"line":"                        OrIgnore::Check(b) => OrIgnore::Check(!b),","counters":[{"col_start":40,"col_end":65,"count":1}]},{"line":"                        OrIgnore::Ignore => OrIgnore::Check(true),","counters":[{"col_start":44,"col_end":65,"count":0}]},{"line":"                    };","counters":[]},{"line":"","counters":[]},{"line":"                    predicate_account.proved_state = proved_state;","counters":[{"col_start":20,"col_end":65,"count":1}]},{"line":"                }","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            AccountPreconditions::Full(Box::new(predicate_account))","counters":[{"col_start":12,"col_end":67,"count":1821}]},{"line":"        } else {","counters":[]},{"line":"            AccountPreconditions::Full(Box::new(predicate_account))","counters":[{"col_start":12,"col_end":67,"count":18}]},{"line":"        }","counters":[]},{"line":"    } else {","counters":[]},{"line":"        // Nonce","counters":[]},{"line":"        let Account { nonce, .. } = account;","counters":[{"col_start":22,"col_end":27,"count":30994}]},{"line":"","counters":[]},{"line":"        match failure {","counters":[{"col_start":14,"col_end":21,"count":30994}]},{"line":"            Some(Failure::InvalidAccountPrecondition) => AccountPreconditions::Nonce(nonce.succ()),","counters":[{"col_start":57,"col_end":98,"count":0}]},{"line":"            _ => AccountPreconditions::Nonce(*nonce),","counters":[{"col_start":17,"col_end":52,"count":927140}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":928979}]},{"line":"","counters":[]},{"line":"struct AccountUpdateBodyComponents<A, B, C, D> {","counters":[]},{"line":"    public_key: CompressedPubKey,","counters":[]},{"line":"    update: Update,","counters":[]},{"line":"    token_id: C,","counters":[]},{"line":"    balance_change: A,","counters":[]},{"line":"    increment_nonce: B,","counters":[]},{"line":"    events: zkapp_command::Events,","counters":[]},{"line":"    sequence_events: zkapp_command::SequenceEvents,","counters":[]},{"line":"    call_data: Fp,","counters":[]},{"line":"    call_depth: usize,","counters":[]},{"line":"    protocol_state_precondition: ZkAppPreconditions,","counters":[]},{"line":"    account_precondition: D,","counters":[]},{"line":"    use_full_commitment: B,","counters":[]},{"line":"    caller: CallType,","counters":[]},{"line":"    authorization_kind: AuthorizationKind,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<B, C> AccountUpdateBodyComponents<Fee, B, C, Nonce> {","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/d7d4aa4d650eb34b45a42b29276554802683ce15/src/lib/mina_generators/zkapp_command_generators.ml#L576","counters":[]},{"line":"    fn to_fee_payer(&self) -> FeePayerBody {","counters":[{"col_start":4,"col_end":44,"count":1}]},{"line":"        FeePayerBody {","counters":[{"col_start":0,"col_end":22,"count":1}]},{"line":"            public_key: self.public_key.clone(),","counters":[{"col_start":0,"col_end":48,"count":1}]},{"line":"            fee: self.balance_change,","counters":[{"col_start":0,"col_end":37,"count":1}]},{"line":"            valid_until: match self.protocol_state_precondition.global_slot_since_genesis {","counters":[{"col_start":0,"col_end":89,"count":1}]},{"line":"                OrIgnore::Ignore => None,","counters":[{"col_start":36,"col_end":40,"count":1}]},{"line":"                OrIgnore::Check(ClosedInterval { lower: _, upper }) => Some(upper),","counters":[{"col_start":59,"col_end":82,"count":0}]},{"line":"            },","counters":[]},{"line":"            nonce: self.account_precondition,","counters":[{"col_start":19,"col_end":45,"count":1}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":1}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl AccountUpdateBodyComponents<Signed<Amount>, bool, TokenId, AccountPreconditions> {","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/d7d4aa4d650eb34b45a42b29276554802683ce15/src/lib/mina_generators/zkapp_command_generators.ml#L592","counters":[]},{"line":"    fn to_typical_account_update(self) -> zkapp_command::BodySimple {","counters":[{"col_start":4,"col_end":69,"count":0}]},{"line":"        zkapp_command::BodySimple {","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            public_key: self.public_key,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            token_id: self.token_id,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            update: self.update,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            balance_change: self.balance_change,","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            increment_nonce: self.increment_nonce,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            events: self.events,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            sequence_events: self.sequence_events,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            call_data: self.call_data,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            call_depth: self.call_depth,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            preconditions: {","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                Preconditions {","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                    network: self.protocol_state_precondition,","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    account: self.account_precondition,","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            use_full_commitment: self.use_full_commitment,","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            caller: self.caller,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            authorization_kind: self.authorization_kind,","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"struct BodyComponentsParams<'a, A, B, C, D> {","counters":[]},{"line":"    update: Option<Update>,","counters":[]},{"line":"    account_id: Option<AccountId>,","counters":[]},{"line":"    token_id: Option<TokenId>,","counters":[]},{"line":"    caller: Option<CallType>,","counters":[]},{"line":"    account_ids_seen: Option<&'a mut HashSet<AccountId>>,","counters":[]},{"line":"    account_state_tbl: &'a mut HashMap<AccountId, (Account, Role)>,","counters":[]},{"line":"    vk: Option<&'a WithHash<VerificationKey>>,","counters":[]},{"line":"    failure: Option<&'a Failure>,","counters":[]},{"line":"    new_account: Option<bool>,","counters":[]},{"line":"    zkapp_account: Option<bool>,","counters":[]},{"line":"    is_fee_payer: Option<bool>,","counters":[]},{"line":"    available_public_keys: Option<&'a mut HashSet<HashableCompressedPubKey>>,","counters":[]},{"line":"    permissions_auth: Option<ControlTag>,","counters":[]},{"line":"    required_balance_change: Option<A>,","counters":[]},{"line":"    protocol_state_view: Option<&'a ProtocolStateView>,","counters":[]},{"line":"    zkapp_account_ids: &'a [AccountId],","counters":[]},{"line":"    increment_nonce: (B, bool),","counters":[]},{"line":"    authorization_tag: ControlTag,","counters":[]},{"line":"    _phantom: PhantomData<(C, D)>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// The type `a` is associated with the `delta` field, which is an unsigned fee","counters":[]},{"line":"/// for the fee payer, and a signed amount for other zkapp_command.","counters":[]},{"line":"/// The type `b` is associated with the `use_full_commitment` field, which is","counters":[]},{"line":"/// `unit` for the fee payer, and `bool` for other zkapp_command.","counters":[]},{"line":"/// The type `c` is associated with the `token_id` field, which is `unit` for the","counters":[]},{"line":"/// fee payer, and `Token_id.t` for other zkapp_command.","counters":[]},{"line":"/// The type `d` is associated with the `account_precondition` field, which is","counters":[]},{"line":"/// a nonce for the fee payer, and `Account_precondition.t` for other zkapp_command","counters":[]},{"line":"fn gen_account_update_body_components<A, B, C, D>(","counters":[{"col_start":0,"col_end":50,"count":20584}]},{"line":"    params: BodyComponentsParams<A, B, C, D>,","counters":[{"col_start":0,"col_end":45,"count":20584}]},{"line":"    gen_balance_change: impl Fn(&Account) -> A,","counters":[{"col_start":0,"col_end":47,"count":20584}]},{"line":"    gen_use_full_commitment: impl Fn(&AccountPreconditions) -> B,","counters":[{"col_start":0,"col_end":65,"count":20584}]},{"line":"    f_balance_change: impl Fn(&A) -> Signed<Amount>,","counters":[{"col_start":0,"col_end":52,"count":20584}]},{"line":"    f_token_id: impl Fn(&TokenId) -> C,","counters":[{"col_start":0,"col_end":39,"count":20584}]},{"line":"    f_account_precondition: impl Fn(bool, &Account) -> D,","counters":[{"col_start":0,"col_end":57,"count":20584}]},{"line":"    f_account_update_account_precondition: impl Fn(&D) -> AccountPreconditions,","counters":[{"col_start":0,"col_end":79,"count":20584}]},{"line":") -> AccountUpdateBodyComponents<A, B, C, D> {","counters":[{"col_start":0,"col_end":46,"count":20584}]},{"line":"    let BodyComponentsParams {","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"        update,","counters":[{"col_start":0,"col_end":15,"count":20584}]},{"line":"        account_id,","counters":[{"col_start":0,"col_end":19,"count":20584}]},{"line":"        token_id,","counters":[{"col_start":0,"col_end":17,"count":20584}]},{"line":"        caller,","counters":[{"col_start":0,"col_end":15,"count":20584}]},{"line":"        account_ids_seen,","counters":[{"col_start":0,"col_end":25,"count":20584}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":20584}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":11,"count":20584}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":20584}]},{"line":"        new_account,","counters":[{"col_start":0,"col_end":20,"count":20584}]},{"line":"        zkapp_account,","counters":[{"col_start":0,"col_end":22,"count":20584}]},{"line":"        is_fee_payer,","counters":[{"col_start":0,"col_end":21,"count":20584}]},{"line":"        available_public_keys,","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"        permissions_auth,","counters":[{"col_start":0,"col_end":25,"count":20584}]},{"line":"        required_balance_change,","counters":[{"col_start":0,"col_end":32,"count":20584}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":20584}]},{"line":"        zkapp_account_ids,","counters":[{"col_start":0,"col_end":26,"count":20584}]},{"line":"        increment_nonce,","counters":[{"col_start":0,"col_end":24,"count":20584}]},{"line":"        authorization_tag,","counters":[{"col_start":0,"col_end":26,"count":20584}]},{"line":"        _phantom,","counters":[{"col_start":0,"col_end":17,"count":20584}]},{"line":"    } = params;","counters":[{"col_start":0,"col_end":15,"count":20584}]},{"line":"","counters":[]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":20584}]},{"line":"","counters":[]},{"line":"    let new_account = new_account.unwrap_or(false);","counters":[{"col_start":0,"col_end":51,"count":20584}]},{"line":"    let zkapp_account = zkapp_account.unwrap_or(false);","counters":[{"col_start":0,"col_end":55,"count":20584}]},{"line":"    let is_fee_payer = is_fee_payer.unwrap_or(false);","counters":[{"col_start":0,"col_end":52,"count":20584}]},{"line":"","counters":[]},{"line":"    // fee payers have to be in the ledger","counters":[]},{"line":"    assert!(!(is_fee_payer && new_account));","counters":[{"col_start":4,"col_end":11,"count":20584},{"col_start":14,"col_end":26,"count":20584},{"col_start":30,"col_end":41,"count":18534}]},{"line":"","counters":[]},{"line":"    let token_account = token_id.is_some();","counters":[{"col_start":8,"col_end":42,"count":20584}]},{"line":"","counters":[]},{"line":"    let mut update = match update {","counters":[{"col_start":8,"col_end":18,"count":20584},{"col_start":27,"col_end":33,"count":20584}]},{"line":"        None => Update::gen(","counters":[{"col_start":16,"col_end":28,"count":-1231}]},{"line":"            Some(token_account),","counters":[{"col_start":0,"col_end":32,"count":-1231}]},{"line":"            Some(zkapp_account),","counters":[{"col_start":0,"col_end":32,"count":-1231}]},{"line":"            vk,","counters":[{"col_start":0,"col_end":15,"count":-1231}]},{"line":"            permissions_auth,","counters":[{"col_start":0,"col_end":29,"count":-1231}]},{"line":"        ),","counters":[{"col_start":0,"col_end":9,"count":-1231}]},{"line":"        Some(update) => update,","counters":[{"col_start":13,"col_end":30,"count":82336}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    // account_update_increment_nonce for fee payer is unit and increment_nonce is true","counters":[]},{"line":"    let (account_update_increment_nonce, increment_nonce) = increment_nonce;","counters":[{"col_start":9,"col_end":56,"count":20584}]},{"line":"","counters":[]},{"line":"    let verification_key = match vk {","counters":[{"col_start":8,"col_end":24,"count":20584},{"col_start":33,"col_end":35,"count":20584}]},{"line":"        Some(vk) => vk.clone(),","counters":[{"col_start":13,"col_end":30,"count":74093}]},{"line":"        None => {","counters":[]},{"line":"            let dummy = VerificationKey::dummy();","counters":[{"col_start":16,"col_end":49,"count":-627}]},{"line":"            let hash = dummy.digest();","counters":[{"col_start":0,"col_end":38,"count":-627}]},{"line":"            WithHash { data: dummy, hash }","counters":[{"col_start":0,"col_end":42,"count":-627}]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let mut account = if new_account {","counters":[{"col_start":8,"col_end":19,"count":19734},{"col_start":25,"col_end":36,"count":20584}]},{"line":"        assert!(","counters":[{"col_start":8,"col_end":16,"count":689}]},{"line":"            account_id.is_none(),","counters":[{"col_start":0,"col_end":32,"count":689}]},{"line":"            \"gen_account_update_body: new account_update is true, but an account \\","counters":[{"col_start":12,"col_end":82,"count":18536}]},{"line":"             id, presumably from an existing account, was supplied\"","counters":[{"col_start":0,"col_end":67,"count":18536}]},{"line":"        );","counters":[]},{"line":"        let available_pks = match available_public_keys {","counters":[{"col_start":12,"col_end":25,"count":37008},{"col_start":34,"col_end":55,"count":689}]},{"line":"            None => panic!(","counters":[{"col_start":20,"col_end":27,"count":689}]},{"line":"                \"gen_account_update_body: new_account is true, but \\","counters":[{"col_start":0,"col_end":68,"count":689}]},{"line":"                 available_public_keys not provided\"","counters":[{"col_start":0,"col_end":52,"count":689}]},{"line":"            ),","counters":[{"col_start":0,"col_end":13,"count":689}]},{"line":"            Some(available_pks) => available_pks,","counters":[{"col_start":17,"col_end":49,"count":37008}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":37008}]},{"line":"","counters":[]},{"line":"        let available_pk = available_pks","counters":[{"col_start":0,"col_end":40,"count":37008}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":37008}]},{"line":"            .choose(&mut rng)","counters":[{"col_start":0,"col_end":29,"count":37008}]},{"line":"            .cloned()","counters":[{"col_start":0,"col_end":21,"count":37008}]},{"line":"            .expect(\"gen_account_update_body: no available public keys\");","counters":[{"col_start":0,"col_end":73,"count":37008}]},{"line":"","counters":[]},{"line":"        // available public key no longer available","counters":[{"col_start":0,"col_end":51,"count":37008}]},{"line":"        available_pks.remove(&available_pk);","counters":[{"col_start":0,"col_end":43,"count":37008}]},{"line":"","counters":[]},{"line":"        let account_id = match token_id {","counters":[{"col_start":12,"col_end":22,"count":37008},{"col_start":31,"col_end":39,"count":37008}]},{"line":"            Some(custom_token_id) => AccountId::create(available_pk.0, custom_token_id),","counters":[{"col_start":17,"col_end":87,"count":6812}]},{"line":"            None => AccountId::create(available_pk.0, TokenId::default()),","counters":[{"col_start":20,"col_end":73,"count":30196}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let mut account_with_pk = Account::create_with(account_id, Balance::from_u64(0));","counters":[{"col_start":12,"col_end":89,"count":37008}]},{"line":"","counters":[]},{"line":"        if zkapp_account {","counters":[{"col_start":0,"col_end":24,"count":37008},{"col_start":25,"col_end":26,"count":6812}]},{"line":"            account_with_pk.zkapp = Some(ZkAppAccount {","counters":[{"col_start":0,"col_end":55,"count":6812}]},{"line":"                verification_key: Some(verification_key.data.clone()),","counters":[{"col_start":0,"col_end":70,"count":6812}]},{"line":"                ..ZkAppAccount::default()","counters":[{"col_start":0,"col_end":41,"count":6812}]},{"line":"            });","counters":[{"col_start":0,"col_end":15,"count":6812}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":6812},{"col_start":9,"col_end":10,"count":6110}]},{"line":"","counters":[]},{"line":"        account_with_pk","counters":[{"col_start":8,"col_end":23,"count":12922}]},{"line":"    } else {","counters":[]},{"line":"        match account_id {","counters":[{"col_start":14,"col_end":24,"count":20584}]},{"line":"            None => {","counters":[]},{"line":"                if zkapp_account {","counters":[{"col_start":19,"col_end":32,"count":0}]},{"line":"                    let zkapp_account_id = zkapp_account_ids.choose(&mut rng).cloned().unwrap();","counters":[{"col_start":24,"col_end":96,"count":674}]},{"line":"                    match account_state_tbl.get(&zkapp_account_id) {","counters":[{"col_start":0,"col_end":66,"count":674}]},{"line":"                        None => panic!(\"gen_account_update_body: fail to find zkapp account\"),","counters":[{"col_start":32,"col_end":93,"count":0}]},{"line":"                        Some((_, Role::FeePayer | Role::NewAccount | Role::NewTokenAccount)) => {","counters":[]},{"line":"                            panic!(","counters":[{"col_start":28,"col_end":35,"count":259510}]},{"line":"                                \"gen_account_update_body: all zkapp accounts were new \\","counters":[{"col_start":0,"col_end":87,"count":259510}]},{"line":"                             accounts or used as fee_payer accounts\"","counters":[{"col_start":0,"col_end":68,"count":259510}]},{"line":"                            )","counters":[{"col_start":0,"col_end":29,"count":259510}]},{"line":"                        }","counters":[]},{"line":"                        Some((account, Role::OrdinaryParticipant)) => account.clone(),","counters":[{"col_start":30,"col_end":85,"count":6812}]},{"line":"                    }","counters":[]},{"line":"                } else {","counters":[]},{"line":"                    account_state_tbl","counters":[{"col_start":20,"col_end":37,"count":0}]},{"line":"                        .values()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        .filter(|(_, role)| {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                            match (&authorization_tag, role) {","counters":[{"col_start":35,"col_end":59,"count":20584}]},{"line":"                                (_, Role::FeePayer) => false,","counters":[{"col_start":55,"col_end":60,"count":-39084}]},{"line":"                                (ControlTag::Proof, Role::NewAccount) => false,","counters":[{"col_start":73,"col_end":78,"count":18544}]},{"line":"                                (_, Role::NewTokenAccount) => false,","counters":[{"col_start":62,"col_end":67,"count":164672}]},{"line":"                                (_, Role::NewAccount) => {","counters":[]},{"line":"                                    // `required_balance_change` is only for balancing account_update.","counters":[]},{"line":"                                    // Newly created account should not be used in balancing account_update","counters":[]},{"line":"                                    required_balance_change.is_none()","counters":[{"col_start":36,"col_end":69,"count":148349}]},{"line":"                                }","counters":[]},{"line":"                                (_, Role::OrdinaryParticipant) => true,","counters":[{"col_start":66,"col_end":70,"count":18500}]},{"line":"                            }","counters":[]},{"line":"                        })","counters":[{"col_start":24,"col_end":25,"count":150371},{"col_start":25,"col_end":26,"count":0}]},{"line":"                        .choose(&mut rng)","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        .cloned()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        .unwrap()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        .0","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            Some(account_id) => {","counters":[{"col_start":17,"col_end":33,"count":20584}]},{"line":"                // get the latest state of the account","counters":[{"col_start":0,"col_end":54,"count":20584}]},{"line":"                let (account, _) = account_state_tbl.get(&account_id).unwrap();","counters":[{"col_start":0,"col_end":79,"count":20584}]},{"line":"","counters":[]},{"line":"                if zkapp_account && account.zkapp.is_none() {","counters":[{"col_start":0,"col_end":32,"count":20584},{"col_start":36,"col_end":59,"count":41168}]},{"line":"                    panic!(\"gen_account_update_body: provided account has no zkapp field\");","counters":[{"col_start":20,"col_end":90,"count":6799}]},{"line":"                }","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":17,"col_end":17,"count":6799}]},{"line":"","counters":[]},{"line":"                account.clone()","counters":[{"col_start":0,"col_end":31,"count":6799}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let public_key = account.public_key.clone();","counters":[{"col_start":8,"col_end":48,"count":19734}]},{"line":"    let token_id = account.token_id.clone();","counters":[{"col_start":0,"col_end":43,"count":19734}]},{"line":"    let balance_change = match required_balance_change {","counters":[{"col_start":8,"col_end":22,"count":19734},{"col_start":31,"col_end":54,"count":19734}]},{"line":"        Some(bal_change) => bal_change,","counters":[{"col_start":13,"col_end":38,"count":6122}]},{"line":"        None => gen_balance_change(&account),","counters":[{"col_start":16,"col_end":44,"count":16472}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let mut field_array_list_gen = |max_array_len: usize, max_list_len: usize| {","counters":[{"col_start":8,"col_end":32,"count":19734},{"col_start":79,"col_end":80,"count":0}]},{"line":"        let array_gen = |rng: &mut ThreadRng| -> zkapp_command::Event {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":70,"col_end":71,"count":1}]},{"line":"            let array_len = rng.gen_range(0..max_array_len);","counters":[{"col_start":0,"col_end":60,"count":1}]},{"line":"            zkapp_command::Event((0..array_len).map(|_| Fp::rand(rng)).collect())","counters":[{"col_start":0,"col_end":52,"count":1},{"col_start":56,"col_end":69,"count":1},{"col_start":69,"col_end":81,"count":1}]},{"line":"        };","counters":[{"col_start":0,"col_end":9,"count":1}]},{"line":"        let list_len = rng.gen_range(0..max_list_len);","counters":[{"col_start":12,"col_end":54,"count":0}]},{"line":"        (0..list_len)","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .map(|_| array_gen(&mut rng))","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":40,"count":1},{"col_start":40,"col_end":41,"count":0}]},{"line":"            .collect::<Vec<_>>()","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let events = zkapp_command::Events(field_array_list_gen(2, 1));","counters":[{"col_start":8,"col_end":67,"count":19734}]},{"line":"    let sequence_events = zkapp_command::SequenceEvents(field_array_list_gen(2, 1));","counters":[{"col_start":0,"col_end":84,"count":19734}]},{"line":"","counters":[]},{"line":"    let call_data = Fp::rand(&mut rng);","counters":[{"col_start":0,"col_end":38,"count":19734}]},{"line":"","counters":[]},{"line":"    let first_use_of_account = {","counters":[{"col_start":8,"col_end":28,"count":19734}]},{"line":"        let account_id = AccountId::create(public_key.clone(), token_id.clone());","counters":[{"col_start":12,"col_end":81,"count":19734}]},{"line":"        match account_ids_seen {","counters":[{"col_start":0,"col_end":30,"count":19734}]},{"line":"            None => {","counters":[]},{"line":"                // fee payer","counters":[]},{"line":"                true","counters":[{"col_start":16,"col_end":20,"count":16472}]},{"line":"            }","counters":[]},{"line":"            Some(hash_set) => {","counters":[{"col_start":17,"col_end":31,"count":228233}]},{"line":"                // other account_updates","counters":[{"col_start":0,"col_end":40,"count":228233}]},{"line":"                !hash_set.contains(&account_id)","counters":[{"col_start":0,"col_end":47,"count":228233}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let account_precondition = f_account_precondition(first_use_of_account, &account);","counters":[{"col_start":8,"col_end":86,"count":19734}]},{"line":"","counters":[]},{"line":"    // update the depth when generating `account_updates` in Zkapp_command.t","counters":[{"col_start":0,"col_end":76,"count":19734}]},{"line":"    let call_depth: usize = 0;","counters":[{"col_start":0,"col_end":30,"count":19734}]},{"line":"","counters":[]},{"line":"    let use_full_commitment = {","counters":[{"col_start":0,"col_end":31,"count":19734}]},{"line":"        let full_account_precondition =","counters":[{"col_start":0,"col_end":39,"count":19734}]},{"line":"            f_account_update_account_precondition(&account_precondition);","counters":[{"col_start":0,"col_end":73,"count":19734}]},{"line":"        gen_use_full_commitment(&full_account_precondition)","counters":[{"col_start":0,"col_end":59,"count":19734}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let protocol_state_precondition = match protocol_state_view {","counters":[{"col_start":8,"col_end":35,"count":58759},{"col_start":44,"col_end":63,"count":19734}]},{"line":"        Some(psv) => match failure {","counters":[{"col_start":13,"col_end":16,"count":1800},{"col_start":27,"col_end":34,"count":181}]},{"line":"            Some(Failure::InvalidProtocolStatePrecondition) => {","counters":[]},{"line":"                gen_invalid_protocol_state_precondition(psv)","counters":[{"col_start":16,"col_end":60,"count":6812}]},{"line":"            }","counters":[]},{"line":"            _ => gen_protocol_state_precondition(psv),","counters":[{"col_start":17,"col_end":53,"count":39025}]},{"line":"        },","counters":[]},{"line":"        None => ZkAppPreconditions::accept(),","counters":[{"col_start":16,"col_end":44,"count":19734}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let caller = match caller {","counters":[{"col_start":8,"col_end":14,"count":58759},{"col_start":23,"col_end":29,"count":58759}]},{"line":"        None => {","counters":[]},{"line":"            // This match is just to make compilation fail if `CallType`","counters":[]},{"line":"            // change (new variant)","counters":[]},{"line":"            match CallType::Call {","counters":[{"col_start":18,"col_end":32,"count":38175}]},{"line":"                CallType::Call => {}","counters":[{"col_start":34,"col_end":36,"count":19681}]},{"line":"                CallType::DelegateCall => {}","counters":[]},{"line":"            };","counters":[{"col_start":12,"col_end":14,"count":38175}]},{"line":"            [CallType::Call, CallType::DelegateCall]","counters":[{"col_start":0,"col_end":52,"count":38175}]},{"line":"                .choose(&mut rng)","counters":[{"col_start":0,"col_end":33,"count":38175}]},{"line":"                .cloned()","counters":[{"col_start":0,"col_end":25,"count":38175}]},{"line":"                .unwrap()","counters":[]},{"line":"        }","counters":[{"col_start":13,"col_end":30,"count":20584}]},{"line":"        Some(caller) => caller,","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let token_id = f_token_id(&token_id);","counters":[]},{"line":"","counters":[]},{"line":"    let authorization_kind = match authorization_tag {","counters":[{"col_start":33,"col_end":61,"count":20584}]},{"line":"        ControlTag::NoneGiven => AuthorizationKind::NoneGiven,","counters":[{"col_start":33,"col_end":61,"count":6812}]},{"line":"        ControlTag::Signature => AuthorizationKind::Signature,","counters":[{"col_start":29,"col_end":53,"count":38175}]},{"line":"        ControlTag::Proof => AuthorizationKind::Proof,","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    // update account state table with all the changes","counters":[{"col_start":8,"col_end":38,"count":58759}]},{"line":"    let add_balance_and_balance_change =","counters":[]},{"line":"        |balance: Balance, balance_change: Signed<Amount>| match balance_change.sgn {","counters":[{"col_start":59,"col_end":83,"count":8243}]},{"line":"            Sgn::Pos => balance","counters":[{"col_start":24,"col_end":31,"count":8243}]},{"line":"                .add_amount(balance_change.magnitude)","counters":[{"col_start":0,"col_end":53,"count":8243}]},{"line":"                .expect(\"add_balance_and_balance_change: overflow for sum\"),","counters":[{"col_start":0,"col_end":75,"count":8243}]},{"line":"            Sgn::Neg => balance","counters":[{"col_start":24,"col_end":31,"count":2050}]},{"line":"                .sub_amount(balance_change.magnitude)","counters":[{"col_start":0,"col_end":53,"count":2050}]},{"line":"                .expect(\"add_balance_and_balance_change: underflow for difference\"),","counters":[{"col_start":0,"col_end":83,"count":2050}]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":8243}]},{"line":"","counters":[]},{"line":"    let balance_change_original = balance_change;","counters":[{"col_start":0,"col_end":49,"count":58759}]},{"line":"    let balance_change = f_balance_change(&balance_change_original);","counters":[{"col_start":0,"col_end":21,"count":58759}]},{"line":"    let nonce_incr = |n: Nonce| if increment_nonce { n.succ() } else { n };","counters":[{"col_start":32,"col_end":50,"count":6812},{"col_start":53,"col_end":61,"count":4160},{"col_start":71,"col_end":72,"count":6812},{"col_start":73,"col_end":74,"count":6812}]},{"line":"","counters":[]},{"line":"    fn value_to_be_updated<T: Clone>(c: &SetOrKeep<T>, default: &T) -> T {","counters":[{"col_start":4,"col_end":74,"count":20584}]},{"line":"        match c {","counters":[{"col_start":0,"col_end":15,"count":20584}]},{"line":"            SetOrKeep::Set(x) => x.clone(),","counters":[{"col_start":27,"col_end":42,"count":20584}]},{"line":"            SetOrKeep::Keep => default.clone(),","counters":[{"col_start":31,"col_end":46,"count":41168}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":20584}]},{"line":"","counters":[]},{"line":"    let delegate = |account: &Account| {","counters":[{"col_start":39,"col_end":40,"count":41168}]},{"line":"        if is_fee_payer {","counters":[{"col_start":0,"col_end":23,"count":41168}]},{"line":"            account.delegate.clone()","counters":[{"col_start":12,"col_end":36,"count":20584}]},{"line":"        } else {","counters":[]},{"line":"            account","counters":[{"col_start":12,"col_end":19,"count":41168}]},{"line":"                .delegate","counters":[{"col_start":0,"col_end":25,"count":41168}]},{"line":"                .as_ref()","counters":[{"col_start":0,"col_end":25,"count":41168}]},{"line":"                .map(|delegate| value_to_be_updated(&update.delegate, delegate))","counters":[{"col_start":0,"col_end":21,"count":41168},{"col_start":32,"col_end":79,"count":0},{"col_start":79,"col_end":80,"count":41168}]},{"line":"        }","counters":[]},{"line":"    };","counters":[{"col_start":4,"col_end":5,"count":41168}]},{"line":"","counters":[]},{"line":"    let zkapp = |account: &Account| {","counters":[{"col_start":36,"col_end":37,"count":0}]},{"line":"        if is_fee_payer {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            return account.zkapp.clone();","counters":[{"col_start":19,"col_end":40,"count":2050}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":-1472}]},{"line":"","counters":[]},{"line":"        let zk = match account.zkapp.as_ref() {","counters":[{"col_start":12,"col_end":14,"count":-1472},{"col_start":23,"col_end":45,"count":-1472}]},{"line":"            None => return None,","counters":[{"col_start":27,"col_end":31,"count":0}]},{"line":"            Some(zkapp) => zkapp,","counters":[{"col_start":17,"col_end":33,"count":-1472}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":-1472}]},{"line":"","counters":[]},{"line":"        let app_state: [Fp; 8] = {","counters":[{"col_start":0,"col_end":34,"count":-1472}]},{"line":"            let account_app_state = &zk.app_state;","counters":[{"col_start":0,"col_end":50,"count":-1472}]},{"line":"","counters":[]},{"line":"            update","counters":[{"col_start":0,"col_end":18,"count":-1472}]},{"line":"                .app_state","counters":[{"col_start":0,"col_end":26,"count":-1472}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":-1472}]},{"line":"                .zip(account_app_state)","counters":[{"col_start":0,"col_end":39,"count":-1472}]},{"line":"                .map(|(to_be_updated, current)| value_to_be_updated(to_be_updated, current))","counters":[{"col_start":0,"col_end":21,"count":-1472},{"col_start":48,"col_end":91,"count":0},{"col_start":91,"col_end":92,"count":-1472}]},{"line":"                .collect::<Vec<_>>()","counters":[{"col_start":0,"col_end":36,"count":-1472}]},{"line":"                .try_into()","counters":[{"col_start":0,"col_end":27,"count":-1472}]},{"line":"                .unwrap()","counters":[{"col_start":0,"col_end":25,"count":-1472}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let sequence_state = {","counters":[{"col_start":12,"col_end":26,"count":-1472}]},{"line":"            let last_sequence_slot = zk.last_sequence_slot;","counters":[{"col_start":16,"col_end":58,"count":-1472}]},{"line":"            let txn_global_slot = match protocol_state_view {","counters":[{"col_start":16,"col_end":31,"count":-1472},{"col_start":40,"col_end":59,"count":-1472}]},{"line":"                None => last_sequence_slot,","counters":[{"col_start":24,"col_end":42,"count":-6210}]},{"line":"                Some(ps) => ps.global_slot_since_genesis,","counters":[{"col_start":21,"col_end":56,"count":16486}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            let (sequence_state, _last_sequence_slot) = zkapp_logic::update_sequence_state(","counters":[{"col_start":17,"col_end":91,"count":-1472}]},{"line":"                zk.sequence_state,","counters":[{"col_start":0,"col_end":34,"count":-1472}]},{"line":"                sequence_events.clone(),","counters":[{"col_start":0,"col_end":40,"count":-1472}]},{"line":"                txn_global_slot,","counters":[{"col_start":0,"col_end":32,"count":-1472}]},{"line":"                last_sequence_slot,","counters":[{"col_start":0,"col_end":35,"count":-1472}]},{"line":"            );","counters":[{"col_start":0,"col_end":14,"count":-1472}]},{"line":"","counters":[]},{"line":"            sequence_state","counters":[{"col_start":0,"col_end":26,"count":-1472}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let proved_state = {","counters":[{"col_start":12,"col_end":24,"count":12356}]},{"line":"            let keeping_app_state = update.app_state.iter().all(|v| v.is_keep());","counters":[{"col_start":16,"col_end":64,"count":-1472},{"col_start":68,"col_end":79,"count":0},{"col_start":79,"col_end":81,"count":-1472}]},{"line":"            let changing_entire_app_state = update.app_state.iter().all(|v| v.is_set());","counters":[{"col_start":0,"col_end":72,"count":-1472},{"col_start":76,"col_end":86,"count":12787},{"col_start":86,"col_end":87,"count":-1472}]},{"line":"","counters":[]},{"line":"            let proof_verifies = matches!(authorization_tag, ControlTag::Proof);","counters":[{"col_start":16,"col_end":30,"count":-1472},{"col_start":33,"col_end":41,"count":0},{"col_start":42,"col_end":59,"count":-1472}]},{"line":"","counters":[]},{"line":"            if keeping_app_state {","counters":[{"col_start":15,"col_end":32,"count":-1472}]},{"line":"                zk.proved_state","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"            } else if proof_verifies {","counters":[{"col_start":22,"col_end":36,"count":-1472}]},{"line":"                if changing_entire_app_state {","counters":[{"col_start":19,"col_end":44,"count":-4098}]},{"line":"                    true","counters":[{"col_start":20,"col_end":24,"count":8256}]},{"line":"                } else {","counters":[]},{"line":"                    zk.proved_state","counters":[{"col_start":20,"col_end":35,"count":0}]},{"line":"                }","counters":[]},{"line":"            } else {","counters":[]},{"line":"                false","counters":[{"col_start":16,"col_end":21,"count":4100}]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        Some(ZkAppAccount {","counters":[{"col_start":8,"col_end":27,"count":12356}]},{"line":"            app_state,","counters":[{"col_start":0,"col_end":22,"count":12356}]},{"line":"            sequence_state,","counters":[{"col_start":0,"col_end":27,"count":12356}]},{"line":"            proved_state,","counters":[{"col_start":0,"col_end":25,"count":12356}]},{"line":"            ..zk.clone()","counters":[{"col_start":0,"col_end":24,"count":12356}]},{"line":"        })","counters":[{"col_start":0,"col_end":10,"count":12356}]},{"line":"    };","counters":[{"col_start":4,"col_end":5,"count":13828}]},{"line":"","counters":[]},{"line":"    match account_state_tbl.entry(account.id()) {","counters":[{"col_start":15,"col_end":49,"count":18544}]},{"line":"        Vacant(entry) => {","counters":[{"col_start":0,"col_end":26,"count":18544}]},{"line":"            // new entry in table","counters":[{"col_start":0,"col_end":33,"count":18544}]},{"line":"            account.balance = add_balance_and_balance_change(account.balance, balance_change);","counters":[{"col_start":0,"col_end":94,"count":18544}]},{"line":"            account.nonce = nonce_incr(account.nonce);","counters":[{"col_start":0,"col_end":54,"count":18544}]},{"line":"            account.delegate = delegate(&account);","counters":[{"col_start":0,"col_end":43,"count":18544}]},{"line":"            account.zkapp = zkapp(&account);","counters":[]},{"line":"","counters":[]},{"line":"            let role = if token_account {","counters":[{"col_start":16,"col_end":37,"count":41168}]},{"line":"                Role::NewTokenAccount","counters":[]},{"line":"            } else {","counters":[{"col_start":16,"col_end":32,"count":18544}]},{"line":"                Role::NewAccount","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            entry.insert((account, role));","counters":[]},{"line":"        }","counters":[{"col_start":17,"col_end":17,"count":40215},{"col_start":17,"col_end":17,"count":23103}]},{"line":"        Occupied(mut entry) => {","counters":[{"col_start":0,"col_end":32,"count":40215}]},{"line":"            std::mem::drop(account); // just making sure we work on `updated_account`","counters":[{"col_start":0,"col_end":85,"count":40215}]},{"line":"","counters":[]},{"line":"            // update entry in table","counters":[{"col_start":0,"col_end":36,"count":40215}]},{"line":"            let (updated_account, _role) = entry.get_mut();","counters":[{"col_start":0,"col_end":59,"count":40215}]},{"line":"","counters":[]},{"line":"            updated_account.balance =","counters":[{"col_start":0,"col_end":37,"count":40215}]},{"line":"                add_balance_and_balance_change(updated_account.balance, balance_change);","counters":[{"col_start":0,"col_end":88,"count":40215}]},{"line":"            updated_account.nonce = nonce_incr(updated_account.nonce);","counters":[{"col_start":0,"col_end":70,"count":40215}]},{"line":"            updated_account.delegate = delegate(updated_account);","counters":[{"col_start":0,"col_end":65,"count":40215}]},{"line":"            updated_account.zkapp = zkapp(updated_account);","counters":[{"col_start":0,"col_end":9,"count":40215}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    AccountUpdateBodyComponents {","counters":[{"col_start":8,"col_end":33,"count":58759}]},{"line":"        public_key,","counters":[{"col_start":0,"col_end":30,"count":58759}]},{"line":"        update: if new_account {","counters":[{"col_start":12,"col_end":32,"count":37040}]},{"line":"            update.verification_key = SetOrKeep::Set(verification_key);","counters":[{"col_start":0,"col_end":18,"count":37040}]},{"line":"            update","counters":[]},{"line":"        } else {","counters":[{"col_start":12,"col_end":18,"count":38175}]},{"line":"            update","counters":[]},{"line":"        },","counters":[{"col_start":8,"col_end":10,"count":58759}]},{"line":"        token_id,","counters":[{"col_start":0,"col_end":17,"count":58759}]},{"line":"        balance_change: balance_change_original,","counters":[{"col_start":0,"col_end":48,"count":58759}]},{"line":"        increment_nonce: account_update_increment_nonce,","counters":[{"col_start":0,"col_end":56,"count":58759}]},{"line":"        events,","counters":[{"col_start":0,"col_end":15,"count":58759}]},{"line":"        sequence_events,","counters":[{"col_start":0,"col_end":24,"count":58759}]},{"line":"        call_data,","counters":[{"col_start":0,"col_end":18,"count":58759}]},{"line":"        call_depth,","counters":[{"col_start":0,"col_end":19,"count":58759}]},{"line":"        protocol_state_precondition,","counters":[{"col_start":0,"col_end":36,"count":58759}]},{"line":"        account_precondition,","counters":[{"col_start":0,"col_end":29,"count":58759}]},{"line":"        use_full_commitment,","counters":[{"col_start":0,"col_end":28,"count":58759}]},{"line":"        caller,","counters":[{"col_start":0,"col_end":15,"count":58759}]},{"line":"        authorization_kind,","counters":[{"col_start":0,"col_end":27,"count":58759}]},{"line":"    }","counters":[{"col_start":0,"col_end":1,"count":58759}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// struct BodyComponentsParams<'a, A, B, C, D> {","counters":[]},{"line":"//     update: Option<Update>,","counters":[]},{"line":"//     account_id: Option<AccountId>,","counters":[]},{"line":"//     token_id: Option<TokenId>,","counters":[]},{"line":"//     caller: Option<CallType>,","counters":[]},{"line":"//     account_ids_seen: Option<HashSet<AccountId>>,","counters":[]},{"line":"//     account_state_tbl: &'a mut HashMap<AccountId, (Account, Role)>,","counters":[]},{"line":"//     vk: Option<WithHash<VerificationKey>>,","counters":[]},{"line":"//     failure: Option<Failure>,","counters":[]},{"line":"//     new_account: Option<bool>,","counters":[]},{"line":"//     zkapp_account: Option<bool>,","counters":[]},{"line":"//     is_fee_payer: Option<bool>,","counters":[]},{"line":"//     available_public_keys: Option<HashSet<HashableCompressedPubKey>>,","counters":[]},{"line":"//     permissions_auth: Option<ControlTag>,","counters":[]},{"line":"//     required_balance_change: Option<A>,","counters":[]},{"line":"//     protocol_state_view: Option<&'a ProtocolStateView>,","counters":[]},{"line":"//     zkapp_account_ids: Vec<AccountId>,","counters":[]},{"line":"//     increment_nonce: (B, bool),","counters":[]},{"line":"//     authorization_tag: ControlTag,","counters":[]},{"line":"//     _phantom: PhantomData<(C, D)>,","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"fn gen_balance_change(","counters":[{"col_start":0,"col_end":22,"count":25152}]},{"line":"    permissions_auth: Option<ControlTag>,","counters":[{"col_start":0,"col_end":41,"count":25152}]},{"line":"    account: &Account,","counters":[{"col_start":0,"col_end":22,"count":25152}]},{"line":"    failure: Option<&Failure>,","counters":[{"col_start":0,"col_end":30,"count":25152}]},{"line":"    new_account: bool,","counters":[{"col_start":0,"col_end":22,"count":25152}]},{"line":") -> Signed<Amount> {","counters":[{"col_start":0,"col_end":21,"count":25152}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":36,"count":25152}]},{"line":"","counters":[]},{"line":"    let sgn = if new_account {","counters":[{"col_start":8,"col_end":11,"count":70978},{"col_start":17,"col_end":28,"count":25152}]},{"line":"        Sgn::Pos","counters":[{"col_start":8,"col_end":16,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        match (failure, permissions_auth) {","counters":[{"col_start":15,"col_end":40,"count":25152}]},{"line":"            (Some(Failure::UpdateNotPermitted(NotPermitedOf::Send)), _) => Sgn::Neg,","counters":[{"col_start":75,"col_end":83,"count":10053}]},{"line":"            (Some(Failure::UpdateNotPermitted(NotPermitedOf::Receive)), _) => Sgn::Pos,","counters":[{"col_start":78,"col_end":86,"count":38541}]},{"line":"            (_, Some(auth)) => match auth {","counters":[{"col_start":21,"col_end":41,"count":0}]},{"line":"                ControlTag::NoneGiven => Sgn::Pos,","counters":[{"col_start":41,"col_end":49,"count":22384}]},{"line":"                _ => [Sgn::Pos, Sgn::Neg].choose(&mut rng).copied().unwrap(),","counters":[{"col_start":21,"col_end":76,"count":0}]},{"line":"            },","counters":[]},{"line":"            (_, None) => [Sgn::Pos, Sgn::Neg].choose(&mut rng).copied().unwrap(),","counters":[{"col_start":25,"col_end":80,"count":0}]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"    // if negative, magnitude constrained to balance in account","counters":[]},{"line":"    // the effective balance is what's in the account state table","counters":[]},{"line":"","counters":[]},{"line":"    let effective_balance = account.balance;","counters":[{"col_start":8,"col_end":43,"count":70978}]},{"line":"    let small_balance_change = {","counters":[{"col_start":8,"col_end":28,"count":3485}]},{"line":"        // make small transfers to allow generating large number of zkapp_command","counters":[]},{"line":"        // without an overflow","counters":[]},{"line":"        if effective_balance < Balance::of_formatted_string(\"1.0\") && !new_account {","counters":[{"col_start":11,"col_end":66,"count":70978},{"col_start":70,"col_end":82,"count":0}]},{"line":"            panic!(\"account has low balance\");","counters":[{"col_start":12,"col_end":45,"count":6086}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":3485}]},{"line":"","counters":[]},{"line":"        Balance::of_formatted_string(\"0.000001\")","counters":[{"col_start":0,"col_end":48,"count":3485}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let magnitude = if new_account {","counters":[{"col_start":8,"col_end":17,"count":3485},{"col_start":23,"col_end":34,"count":3485}]},{"line":"        let min = Amount::of_formatted_string(\"50.0\");","counters":[{"col_start":12,"col_end":54,"count":0}]},{"line":"        let max = Amount::of_formatted_string(\"100.0\");","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        Amount::from_u64(rng.gen_range(min.as_u64()..max.as_u64()))","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        Amount::from_u64(rng.gen_range(0..small_balance_change.as_u64()))","counters":[{"col_start":8,"col_end":73,"count":3485}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    Signed::<Amount> { magnitude, sgn }","counters":[{"col_start":4,"col_end":39,"count":3485}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":3485}]},{"line":"","counters":[]},{"line":"fn gen_use_full_commitment(","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    increment_nonce: bool,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    account_precondition: &AccountPreconditions,","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    authorization: &zkapp_command::Control,","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":") -> bool {","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    // check conditions to avoid replays","counters":[]},{"line":"    let incr_nonce_and_constrains_nonce =","counters":[{"col_start":8,"col_end":39,"count":0}]},{"line":"        increment_nonce && account_precondition.to_full().nonce.is_constant();","counters":[{"col_start":8,"col_end":23,"count":0},{"col_start":27,"col_end":77,"count":1800}]},{"line":"","counters":[]},{"line":"    let does_not_use_a_signature = !matches!(authorization.tag(), ControlTag::Signature);","counters":[{"col_start":8,"col_end":32,"count":0},{"col_start":36,"col_end":44,"count":0},{"col_start":45,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"    if incr_nonce_and_constrains_nonce || does_not_use_a_signature {","counters":[{"col_start":7,"col_end":38,"count":0},{"col_start":42,"col_end":66,"count":-104840}]},{"line":"        rand::thread_rng().gen()","counters":[{"col_start":8,"col_end":32,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        true","counters":[{"col_start":8,"col_end":12,"count":544975}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":544975}]},{"line":"","counters":[]},{"line":"struct AccountUpdateParams<'a> {","counters":[]},{"line":"    update: Option<Update>,","counters":[]},{"line":"    failure: Option<&'a Failure>,","counters":[]},{"line":"    new_account: Option<bool>,","counters":[]},{"line":"    zkapp_account: Option<bool>,","counters":[]},{"line":"    account_id: Option<AccountId>,","counters":[]},{"line":"    token_id: Option<TokenId>,","counters":[]},{"line":"    caller: Option<CallType>,","counters":[]},{"line":"    permissions_auth: Option<ControlTag>,","counters":[]},{"line":"    required_balance_change: Option<Signed<Amount>>,","counters":[]},{"line":"    zkapp_account_ids: &'a [AccountId],","counters":[]},{"line":"    authorization: zkapp_command::Control,","counters":[]},{"line":"    account_ids_seen: &'a mut HashSet<AccountId>,","counters":[]},{"line":"    available_public_keys: &'a mut HashSet<HashableCompressedPubKey>,","counters":[]},{"line":"    account_state_tbl: &'a mut HashMap<AccountId, (Account, Role)>,","counters":[]},{"line":"    protocol_state_view: Option<&'a ProtocolStateView>,","counters":[]},{"line":"    vk: Option<&'a WithHash<VerificationKey>>,","counters":[]},{"line":"    // is_fee_payer: Option<bool>,","counters":[]},{"line":"    // increment_nonce: (B, bool),","counters":[]},{"line":"    // authorization_tag: ControlTag,","counters":[]},{"line":"    // _phantom: PhantomData<(C, D)>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn gen_account_update_from(params: AccountUpdateParams) -> AccountUpdateSimple {","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"    let AccountUpdateParams {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        update,","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"        new_account,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        zkapp_account,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        account_id,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"        token_id,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        caller,","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        permissions_auth,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        required_balance_change,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        zkapp_account_ids,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        authorization,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        account_ids_seen,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        available_public_keys,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    } = params;","counters":[]},{"line":"","counters":[]},{"line":"    // permissions_auth is used to generate updated permissions consistent with a","counters":[]},{"line":"    // contemplated authorization;","counters":[]},{"line":"    // allow incrementing the nonce only if we know the authorization will be Signature","counters":[]},{"line":"    let increment_nonce = match params.permissions_auth {","counters":[{"col_start":8,"col_end":23,"count":56517},{"col_start":32,"col_end":55,"count":0}]},{"line":"        Some(tag) => match tag {","counters":[{"col_start":13,"col_end":30,"count":6799}]},{"line":"            ControlTag::Signature => true,","counters":[{"col_start":37,"col_end":41,"count":56616}]},{"line":"            ControlTag::Proof | ControlTag::NoneGiven => false,","counters":[{"col_start":57,"col_end":62,"count":6700}]},{"line":"        },","counters":[]},{"line":"        None => false,","counters":[{"col_start":16,"col_end":21,"count":-6799}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let new_account = new_account.unwrap_or(false);","counters":[{"col_start":8,"col_end":51,"count":56517}]},{"line":"    let zkapp_account = zkapp_account.unwrap_or(false);","counters":[{"col_start":0,"col_end":55,"count":56517}]},{"line":"","counters":[]},{"line":"    let params = BodyComponentsParams {","counters":[{"col_start":0,"col_end":39,"count":56517}]},{"line":"        update,","counters":[{"col_start":0,"col_end":15,"count":56517}]},{"line":"        account_id,","counters":[{"col_start":0,"col_end":19,"count":56517}]},{"line":"        token_id,","counters":[{"col_start":0,"col_end":17,"count":56517}]},{"line":"        caller,","counters":[{"col_start":0,"col_end":15,"count":56517}]},{"line":"        account_ids_seen: Some(account_ids_seen),","counters":[{"col_start":0,"col_end":49,"count":56517}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":56517}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":11,"count":56517}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":56517}]},{"line":"        new_account: Some(new_account),","counters":[{"col_start":0,"col_end":39,"count":56517}]},{"line":"        zkapp_account: Some(zkapp_account),","counters":[{"col_start":0,"col_end":43,"count":56517}]},{"line":"        is_fee_payer: None,","counters":[{"col_start":0,"col_end":27,"count":56517}]},{"line":"        available_public_keys: Some(available_public_keys),","counters":[{"col_start":0,"col_end":59,"count":56517}]},{"line":"        permissions_auth,","counters":[{"col_start":0,"col_end":25,"count":56517}]},{"line":"        required_balance_change,","counters":[{"col_start":0,"col_end":32,"count":56517}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":56517}]},{"line":"        zkapp_account_ids,","counters":[{"col_start":0,"col_end":26,"count":56517}]},{"line":"        increment_nonce: (increment_nonce, increment_nonce),","counters":[{"col_start":0,"col_end":60,"count":56517}]},{"line":"        authorization_tag: authorization.tag(),","counters":[{"col_start":0,"col_end":47,"count":56517}]},{"line":"        _phantom: PhantomData,","counters":[{"col_start":0,"col_end":30,"count":56517}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":56517}]},{"line":"","counters":[]},{"line":"    let body_components = gen_account_update_body_components(","counters":[{"col_start":0,"col_end":61,"count":56517}]},{"line":"        params,","counters":[{"col_start":0,"col_end":15,"count":56517}]},{"line":"        // gen_balance_change,","counters":[{"col_start":0,"col_end":30,"count":56517}]},{"line":"        |account| gen_balance_change(permissions_auth, account, failure, new_account),","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":18,"col_end":85,"count":2022},{"col_start":85,"col_end":86,"count":56517}]},{"line":"        // gen_use_full_commitment,","counters":[{"col_start":0,"col_end":35,"count":56517}]},{"line":"        |account_precondition| {","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":31,"col_end":32,"count":2022}]},{"line":"            gen_use_full_commitment(increment_nonce, account_precondition, &authorization)","counters":[{"col_start":0,"col_end":90,"count":2022}]},{"line":"        },","counters":[{"col_start":0,"col_end":9,"count":2022},{"col_start":9,"col_end":10,"count":56517}]},{"line":"        // f_balance_change,","counters":[{"col_start":0,"col_end":28,"count":56517}]},{"line":"        |balance| *balance,","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":18,"col_end":26,"count":22924},{"col_start":26,"col_end":27,"count":56517}]},{"line":"        // f_token_id,","counters":[{"col_start":0,"col_end":22,"count":56517}]},{"line":"        |token_id| token_id.clone(),","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":19,"col_end":35,"count":2084},{"col_start":35,"col_end":36,"count":56517}]},{"line":"        // f_account_precondition,","counters":[{"col_start":0,"col_end":34,"count":56517}]},{"line":"        |first_use_of_account, account| {","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":40,"col_end":41,"count":2040}]},{"line":"            gen_account_precondition_from_account(None, first_use_of_account, account)","counters":[{"col_start":0,"col_end":86,"count":2040}]},{"line":"        },","counters":[{"col_start":0,"col_end":9,"count":2040},{"col_start":9,"col_end":10,"count":56517}]},{"line":"        // f_account_update_account_precondition","counters":[{"col_start":0,"col_end":48,"count":56517}]},{"line":"        |a| a.clone(),","counters":[{"col_start":0,"col_end":8,"count":56517},{"col_start":12,"col_end":21,"count":2040},{"col_start":21,"col_end":22,"count":56517}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":56517}]},{"line":"","counters":[]},{"line":"    let body = body_components.to_typical_account_update();","counters":[{"col_start":0,"col_end":59,"count":56517}]},{"line":"    let account_id = AccountId::create(body.public_key.clone(), body.token_id.clone());","counters":[{"col_start":0,"col_end":87,"count":56517}]},{"line":"    account_ids_seen.insert(account_id);","counters":[{"col_start":0,"col_end":40,"count":56517}]},{"line":"","counters":[]},{"line":"    AccountUpdateSimple {","counters":[{"col_start":0,"col_end":25,"count":56517}]},{"line":"        body,","counters":[{"col_start":0,"col_end":13,"count":56517}]},{"line":"        authorization,","counters":[{"col_start":0,"col_end":22,"count":56517}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":56517}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":56517}]},{"line":"","counters":[]},{"line":"/// Value of `Mina_compile_config.minimum_user_command_fee` when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"const MINIMUM_USER_COMMAND_FEE: Fee = Fee::from_u64(1000000);","counters":[]},{"line":"","counters":[]},{"line":"fn gen_fee(account: &Account) -> Fee {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let balance = account.balance;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    let lo_fee = MINIMUM_USER_COMMAND_FEE;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    let hi_fee = MINIMUM_USER_COMMAND_FEE.scale(2).unwrap();","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"    assert!(hi_fee <= (Fee::from_u64(balance.as_u64())));","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"    Fee::from_u64(rng.gen_range(lo_fee.as_u64()..hi_fee.as_u64()))","counters":[{"col_start":4,"col_end":66,"count":-2143}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":-2143}]},{"line":"","counters":[]},{"line":"/// Fee payer balance change is Neg","counters":[]},{"line":"fn fee_to_amt(fee: &Fee) -> Signed<Amount> {","counters":[{"col_start":0,"col_end":44,"count":1996}]},{"line":"    Signed::<Amount>::of_unsigned(Amount::from_u64(fee.as_u64())).negate()","counters":[{"col_start":0,"col_end":74,"count":1996}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":1996}]},{"line":"","counters":[]},{"line":"/// takes an account id, if we want to sign this data","counters":[]},{"line":"///","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_generators/zkapp_command_generators.ml#L1063","counters":[]},{"line":"fn gen_account_update_body_fee_payer(","counters":[{"col_start":0,"col_end":37,"count":20584}]},{"line":"    failure: Option<&Failure>,","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"    permissions_auth: Option<ControlTag>,","counters":[{"col_start":0,"col_end":41,"count":20584}]},{"line":"    account_id: AccountId,","counters":[{"col_start":0,"col_end":26,"count":20584}]},{"line":"    vk: Option<&WithHash<VerificationKey>>,","counters":[{"col_start":0,"col_end":43,"count":20584}]},{"line":"    protocol_state_view: Option<&ProtocolStateView>,","counters":[{"col_start":0,"col_end":52,"count":20584}]},{"line":"    account_state_tbl: &mut HashMap<AccountId, (Account, Role)>,","counters":[{"col_start":0,"col_end":64,"count":20584}]},{"line":") -> FeePayerBody {","counters":[{"col_start":0,"col_end":19,"count":20584}]},{"line":"    let account_precondition_gen = |account: &Account| account.nonce;","counters":[{"col_start":0,"col_end":32,"count":20584},{"col_start":55,"col_end":68,"count":2143}]},{"line":"","counters":[]},{"line":"    let body_components = gen_account_update_body_components(","counters":[{"col_start":8,"col_end":61,"count":20584}]},{"line":"        BodyComponentsParams {","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"            update: None,","counters":[{"col_start":0,"col_end":25,"count":20584}]},{"line":"            account_id: Some(account_id),","counters":[{"col_start":0,"col_end":41,"count":20584}]},{"line":"            token_id: None,","counters":[{"col_start":0,"col_end":27,"count":20584}]},{"line":"            caller: None,","counters":[{"col_start":0,"col_end":25,"count":20584}]},{"line":"            account_ids_seen: None,","counters":[{"col_start":0,"col_end":35,"count":20584}]},{"line":"            account_state_tbl,","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"            vk,","counters":[{"col_start":0,"col_end":15,"count":20584}]},{"line":"            failure,","counters":[{"col_start":0,"col_end":20,"count":20584}]},{"line":"            new_account: None,","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"            zkapp_account: None,","counters":[{"col_start":0,"col_end":32,"count":20584}]},{"line":"            is_fee_payer: Some(true),","counters":[{"col_start":0,"col_end":37,"count":20584}]},{"line":"            available_public_keys: None,","counters":[{"col_start":0,"col_end":40,"count":20584}]},{"line":"            permissions_auth,","counters":[{"col_start":0,"col_end":29,"count":20584}]},{"line":"            required_balance_change: None,","counters":[{"col_start":0,"col_end":42,"count":20584}]},{"line":"            protocol_state_view,","counters":[{"col_start":0,"col_end":32,"count":20584}]},{"line":"            zkapp_account_ids: &[],","counters":[{"col_start":0,"col_end":35,"count":20584}]},{"line":"            increment_nonce: ((), true),","counters":[{"col_start":0,"col_end":40,"count":20584}]},{"line":"            authorization_tag: ControlTag::Signature,","counters":[{"col_start":0,"col_end":53,"count":20584}]},{"line":"            _phantom: PhantomData,","counters":[{"col_start":0,"col_end":34,"count":20584}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":20584}]},{"line":"        // gen_balance_change","counters":[{"col_start":0,"col_end":29,"count":20584}]},{"line":"        gen_fee,","counters":[{"col_start":0,"col_end":16,"count":20584}]},{"line":"        // gen_use_full_commitment","counters":[{"col_start":0,"col_end":34,"count":20584}]},{"line":"        |_account_precondition| {},","counters":[{"col_start":0,"col_end":8,"count":20584},{"col_start":32,"col_end":34,"count":20584},{"col_start":34,"col_end":35,"count":20584}]},{"line":"        // f_balance_change","counters":[{"col_start":0,"col_end":27,"count":20584}]},{"line":"        fee_to_amt,","counters":[{"col_start":0,"col_end":19,"count":20584}]},{"line":"        // f_token_id","counters":[{"col_start":0,"col_end":21,"count":20584}]},{"line":"        |token_id| {","counters":[{"col_start":0,"col_end":8,"count":20584},{"col_start":19,"col_end":20,"count":20584}]},{"line":"            // make sure the fee payer's token id is the default,","counters":[{"col_start":0,"col_end":65,"count":20584}]},{"line":"            // which is represented by the unit value in the body","counters":[{"col_start":0,"col_end":65,"count":20584}]},{"line":"            assert!(token_id.is_default());","counters":[{"col_start":0,"col_end":42,"count":20584}]},{"line":"            // return unit","counters":[]},{"line":"        },","counters":[{"col_start":8,"col_end":9,"count":20584},{"col_start":9,"col_end":10,"count":20584}]},{"line":"        // f_account_precondition,","counters":[{"col_start":0,"col_end":34,"count":20584}]},{"line":"        |_, account| account_precondition_gen(account),","counters":[{"col_start":0,"col_end":8,"count":20584},{"col_start":21,"col_end":54,"count":0},{"col_start":54,"col_end":55,"count":20584}]},{"line":"        // f_account_update_account_precondition,","counters":[{"col_start":0,"col_end":49,"count":20584}]},{"line":"        |nonce| AccountPreconditions::Nonce(*nonce),","counters":[{"col_start":0,"col_end":8,"count":20584},{"col_start":16,"col_end":51,"count":0},{"col_start":51,"col_end":52,"count":20584}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":20584}]},{"line":"","counters":[]},{"line":"    body_components.to_fee_payer()","counters":[{"col_start":0,"col_end":34,"count":20584}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":20584}]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_generators/zkapp_command_generators.ml#L1089","counters":[]},{"line":"fn gen_fee_payer(","counters":[{"col_start":0,"col_end":17,"count":7489}]},{"line":"    failure: Option<&Failure>,","counters":[{"col_start":0,"col_end":30,"count":7489}]},{"line":"    permissions_auth: Option<ControlTag>,","counters":[{"col_start":0,"col_end":41,"count":7489}]},{"line":"    account_id: AccountId,","counters":[{"col_start":0,"col_end":26,"count":7489}]},{"line":"    protocol_state_view: Option<&ProtocolStateView>,","counters":[{"col_start":0,"col_end":52,"count":7489}]},{"line":"    vk: Option<&WithHash<VerificationKey>>,","counters":[{"col_start":0,"col_end":43,"count":7489}]},{"line":"    account_state_tbl: &mut HashMap<AccountId, (Account, Role)>,","counters":[{"col_start":0,"col_end":64,"count":7489}]},{"line":") -> FeePayer {","counters":[{"col_start":0,"col_end":15,"count":7489}]},{"line":"    let body = gen_account_update_body_fee_payer(","counters":[{"col_start":0,"col_end":49,"count":7489}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":7489}]},{"line":"        permissions_auth,","counters":[{"col_start":0,"col_end":25,"count":7489}]},{"line":"        account_id,","counters":[{"col_start":0,"col_end":19,"count":7489}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":11,"count":7489}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":7489}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":7489}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":7489}]},{"line":"","counters":[]},{"line":"    // real signature to be added when this data inserted into a Zkapp_command.t","counters":[{"col_start":0,"col_end":80,"count":7489}]},{"line":"    let authorization = Signature::dummy();","counters":[{"col_start":0,"col_end":43,"count":7489}]},{"line":"","counters":[]},{"line":"    FeePayer {","counters":[{"col_start":0,"col_end":14,"count":7489}]},{"line":"        body,","counters":[{"col_start":0,"col_end":13,"count":7489}]},{"line":"        authorization,","counters":[{"col_start":0,"col_end":22,"count":7489}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":7489}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":7489}]},{"line":"","counters":[]},{"line":"pub struct GenZkappCommandParams<'a> {","counters":[]},{"line":"    pub failure: Option<&'a Failure>,","counters":[]},{"line":"    pub max_account_updates: Option<usize>,","counters":[]},{"line":"    pub max_token_updates: Option<usize>,","counters":[]},{"line":"    pub fee_payer_keypair: &'a Keypair,","counters":[]},{"line":"    pub keymap: &'a HashMap<HashableCompressedPubKey, Keypair>,","counters":[]},{"line":"    pub account_state_tbl: Option<&'a mut HashMap<AccountId, (Account, Role)>>,","counters":[]},{"line":"    pub ledger: Mask,","counters":[]},{"line":"    pub protocol_state_view: Option<&'a ProtocolStateView>,","counters":[]},{"line":"    pub vk: Option<&'a WithHash<VerificationKey>>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// `gen_zkapp_command_from` generates a zkapp_command and record the change of accounts accordingly","counters":[]},{"line":"/// in `account_state_tbl`. Note that `account_state_tbl` is optional. If it's not provided","counters":[]},{"line":"/// then it would be computed from the ledger. If you plan to generate several zkapp_command,","counters":[]},{"line":"/// then please manually pass `account_state_tbl` to `gen_zkapp_command_from` function.","counters":[]},{"line":"/// If you are generating several zkapp_command, it's better to pre-compute the","counters":[]},{"line":"/// `account_state_tbl` before you call this function. This way you can manually set the","counters":[]},{"line":"/// role of fee payer accounts to be `Fee_payer` in `account_state_tbl` which would prevent","counters":[]},{"line":"/// those accounts being used as ordinary participants in other zkapp_command.","counters":[]},{"line":"///","counters":[]},{"line":"/// Generated zkapp_command uses dummy signatures and dummy proofs.","counters":[]},{"line":"pub fn gen_zkapp_command_from(params: GenZkappCommandParams) -> ZkAppCommand {","counters":[{"col_start":0,"col_end":78,"count":41168}]},{"line":"    let GenZkappCommandParams {","counters":[{"col_start":0,"col_end":31,"count":41168}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":41168}]},{"line":"        max_account_updates,","counters":[{"col_start":0,"col_end":28,"count":41168}]},{"line":"        max_token_updates,","counters":[{"col_start":0,"col_end":26,"count":41168}]},{"line":"        fee_payer_keypair,","counters":[{"col_start":0,"col_end":26,"count":41168}]},{"line":"        keymap,","counters":[{"col_start":0,"col_end":15,"count":41168}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":41168}]},{"line":"        ledger,","counters":[{"col_start":0,"col_end":15,"count":41168}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":41168}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":11,"count":41168}]},{"line":"    } = params;","counters":[{"col_start":0,"col_end":15,"count":41168}]},{"line":"","counters":[]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":41168}]},{"line":"","counters":[]},{"line":"    let max_account_updates = max_account_updates.unwrap_or(MAX_ACCOUNT_UPDATES);","counters":[{"col_start":0,"col_end":81,"count":41168}]},{"line":"    let max_token_updates = max_token_updates.unwrap_or(MAX_TOKEN_UPDATES);","counters":[{"col_start":0,"col_end":75,"count":41168}]},{"line":"","counters":[]},{"line":"    let fee_payer_pk = fee_payer_keypair.public.into_compressed();","counters":[{"col_start":0,"col_end":66,"count":41168}]},{"line":"    let fee_payer_account_id = AccountId::create(fee_payer_pk, TokenId::default());","counters":[{"col_start":0,"col_end":83,"count":41168}]},{"line":"","counters":[]},{"line":"    let ledger_accounts = ledger.to_list();","counters":[{"col_start":0,"col_end":42,"count":41168}]},{"line":"","counters":[]},{"line":"    // table of public keys to accounts, updated when generating each account_update","counters":[]},{"line":"    // a Map would be more principled, but threading that map through the code","counters":[]},{"line":"    // adds complexity","counters":[]},{"line":"","counters":[]},{"line":"    let mut account_state_tbl = match account_state_tbl {","counters":[{"col_start":8,"col_end":29,"count":41168},{"col_start":38,"col_end":55,"count":41168}]},{"line":"        Some(account_state_tbl) => MyCowMut::Borrow(account_state_tbl),","counters":[{"col_start":13,"col_end":70,"count":0}]},{"line":"        None => MyCowMut::Own(HashMap::new()),","counters":[{"col_start":16,"col_end":45,"count":41168}]},{"line":"    };","counters":[]},{"line":"    let account_state_tbl = &mut account_state_tbl;","counters":[{"col_start":8,"col_end":50,"count":41168}]},{"line":"","counters":[]},{"line":"    // make sure all ledger keys are in the keymap","counters":[]},{"line":"    for account in ledger_accounts.into_iter() {","counters":[{"col_start":8,"col_end":15,"count":20584},{"col_start":19,"col_end":46,"count":41168}]},{"line":"        let id = account.id();","counters":[{"col_start":12,"col_end":30,"count":20584}]},{"line":"        let pk = id.public_key.clone();","counters":[{"col_start":0,"col_end":38,"count":20584}]},{"line":"","counters":[]},{"line":"        // Initialize account states","counters":[]},{"line":"        if let Vacant(entry) = account_state_tbl.entry(id.clone()) {","counters":[{"col_start":22,"col_end":27,"count":20584},{"col_start":31,"col_end":66,"count":20584}]},{"line":"            entry.insert(if id == fee_payer_account_id {","counters":[{"col_start":12,"col_end":54,"count":20584}]},{"line":"                (account, Role::FeePayer)","counters":[{"col_start":16,"col_end":41,"count":1342}]},{"line":"            } else {","counters":[]},{"line":"                (account, Role::OrdinaryParticipant)","counters":[{"col_start":16,"col_end":52,"count":19242}]},{"line":"            });","counters":[]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        if keymap.get(&HashableCompressedPubKey(pk.clone())).is_none() {","counters":[{"col_start":11,"col_end":70,"count":20584}]},{"line":"            panic!(","counters":[{"col_start":12,"col_end":19,"count":0}]},{"line":"                \"gen_zkapp_command_from: public key {:?} is in ledger, but not keymap\",","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                pk","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            );","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":20584}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // table of public keys not in the ledger, to be used for new zkapp_command","counters":[]},{"line":"    // we have the corresponding private keys, so we can create signatures for those","counters":[]},{"line":"    // new zkapp_command","counters":[]},{"line":"    let ledger_account_list: Vec<AccountId> = ledger","counters":[{"col_start":8,"col_end":52,"count":8256}]},{"line":"        .accounts()","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        .chain(account_state_tbl.keys())","counters":[{"col_start":0,"col_end":40,"count":8256}]},{"line":"        .collect::<HashSet<&AccountId>>() // deduplicate","counters":[{"col_start":0,"col_end":56,"count":8256}]},{"line":"        .into_iter()","counters":[{"col_start":0,"col_end":20,"count":8256}]},{"line":"        .cloned()","counters":[{"col_start":0,"col_end":17,"count":8256}]},{"line":"        .collect(); // TODO: Not sure if it matches ocaml","counters":[{"col_start":0,"col_end":57,"count":8256}]},{"line":"","counters":[]},{"line":"    let ledger_pk_list: Vec<CompressedPubKey> = ledger_account_list","counters":[{"col_start":0,"col_end":67,"count":8256}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        .map(|id| id.public_key.clone())","counters":[{"col_start":0,"col_end":13,"count":8256},{"col_start":18,"col_end":39,"count":1},{"col_start":39,"col_end":40,"count":8256}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"    let ledger_pk_set: HashSet<HashableCompressedPubKey> = ledger_pk_list","counters":[{"col_start":0,"col_end":73,"count":8256}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        .map(|pk| HashableCompressedPubKey(pk.clone()))","counters":[{"col_start":0,"col_end":13,"count":8256},{"col_start":18,"col_end":54,"count":0},{"col_start":54,"col_end":55,"count":8256}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"","counters":[]},{"line":"    let mut available_public_keys: HashSet<HashableCompressedPubKey> = keymap","counters":[{"col_start":0,"col_end":77,"count":8256}]},{"line":"        .keys()","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        .filter(|pk| !ledger_pk_set.contains(pk))","counters":[{"col_start":0,"col_end":16,"count":8256},{"col_start":21,"col_end":48,"count":0},{"col_start":48,"col_end":49,"count":8256}]},{"line":"        .cloned()","counters":[{"col_start":0,"col_end":17,"count":8256}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"    let available_public_keys = &mut available_public_keys;","counters":[{"col_start":0,"col_end":59,"count":8256}]},{"line":"","counters":[]},{"line":"    // account ids seen, to generate receipt chain hash precondition only if","counters":[{"col_start":0,"col_end":76,"count":8256}]},{"line":"    // a account_update with a given account id has not been encountered before","counters":[{"col_start":0,"col_end":79,"count":8256}]},{"line":"    let mut account_ids_seen = HashSet::<AccountId>::new();","counters":[{"col_start":0,"col_end":59,"count":8256}]},{"line":"    let account_ids_seen = &mut account_ids_seen;","counters":[{"col_start":0,"col_end":49,"count":8256}]},{"line":"","counters":[]},{"line":"    let fee_payer = gen_fee_payer(","counters":[{"col_start":0,"col_end":34,"count":8256}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":8256}]},{"line":"        Some(ControlTag::Signature),","counters":[{"col_start":0,"col_end":36,"count":8256}]},{"line":"        fee_payer_account_id.clone(),","counters":[{"col_start":0,"col_end":37,"count":8256}]},{"line":"        protocol_state_view,","counters":[{"col_start":0,"col_end":28,"count":8256}]},{"line":"        vk,","counters":[{"col_start":0,"col_end":11,"count":8256}]},{"line":"        account_state_tbl,","counters":[{"col_start":0,"col_end":26,"count":8256}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":8256}]},{"line":"","counters":[]},{"line":"    let zkapp_account_ids: Vec<AccountId> = account_state_tbl","counters":[{"col_start":0,"col_end":61,"count":8256}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        .filter(|(_, (a, role))| match role {","counters":[{"col_start":0,"col_end":16,"count":8256},{"col_start":33,"col_end":43,"count":0}]},{"line":"            Role::FeePayer | Role::NewAccount | Role::NewTokenAccount => false,","counters":[{"col_start":73,"col_end":78,"count":0}]},{"line":"            Role::OrdinaryParticipant => a.zkapp.is_some(),","counters":[{"col_start":41,"col_end":58,"count":0}]},{"line":"        })","counters":[{"col_start":8,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":8256}]},{"line":"        .map(|(id, _)| id.clone())","counters":[{"col_start":0,"col_end":13,"count":8256},{"col_start":23,"col_end":33,"count":20584},{"col_start":33,"col_end":34,"count":8256}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"    let zkapp_account_ids = zkapp_account_ids.as_slice();","counters":[{"col_start":0,"col_end":57,"count":8256}]},{"line":"","counters":[]},{"line":"    account_ids_seen.insert(fee_payer_account_id.clone());","counters":[{"col_start":0,"col_end":58,"count":8256}]},{"line":"","counters":[]},{"line":"    fn mk_forest(","counters":[{"col_start":0,"col_end":4,"count":8256},{"col_start":4,"col_end":17,"count":6812}]},{"line":"        ps: Vec<zkapp_command::Tree<AccountUpdateSimple>>,","counters":[{"col_start":0,"col_end":58,"count":8256}]},{"line":"    ) -> CallForest<AccountUpdateSimple> {","counters":[{"col_start":0,"col_end":42,"count":8256}]},{"line":"        CallForest(","counters":[{"col_start":0,"col_end":19,"count":8256}]},{"line":"            ps.into_iter()","counters":[{"col_start":0,"col_end":26,"count":8256}]},{"line":"                .map(|v| {","counters":[{"col_start":0,"col_end":0,"count":6812},{"col_start":0,"col_end":25,"count":8256},{"col_start":25,"col_end":26,"count":0}]},{"line":"                    WithStackHash {","counters":[{"col_start":0,"col_end":35,"count":8256}]},{"line":"                        elt: v,","counters":[{"col_start":0,"col_end":31,"count":8256}]},{"line":"                        stack_hash: Fp::zero(), // TODO: OCaml uses `()`","counters":[{"col_start":0,"col_end":72,"count":8256}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":8256}]},{"line":"                })","counters":[{"col_start":0,"col_end":17,"count":8256},{"col_start":17,"col_end":18,"count":6812}]},{"line":"                .collect(),","counters":[{"col_start":0,"col_end":27,"count":8256}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":8256}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":8256}]},{"line":"","counters":[]},{"line":"    fn mk_node(","counters":[{"col_start":0,"col_end":4,"count":8256},{"col_start":4,"col_end":15,"count":20584}]},{"line":"        p: AccountUpdateSimple,","counters":[{"col_start":0,"col_end":31,"count":20584}]},{"line":"        calls: Vec<zkapp_command::Tree<AccountUpdateSimple>>,","counters":[{"col_start":0,"col_end":61,"count":20584}]},{"line":"    ) -> zkapp_command::Tree<AccountUpdateSimple> {","counters":[{"col_start":0,"col_end":51,"count":20584}]},{"line":"        zkapp_command::Tree {","counters":[{"col_start":0,"col_end":29,"count":20584}]},{"line":"            account_update: p,","counters":[{"col_start":0,"col_end":30,"count":20584}]},{"line":"            account_update_digest: Fp::zero(), // TODO: OCaml uses `()`","counters":[{"col_start":0,"col_end":71,"count":20584}]},{"line":"            calls: mk_forest(calls),","counters":[{"col_start":0,"col_end":36,"count":20584}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":20584}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":20584}]},{"line":"","counters":[]},{"line":"    let mut gen_zkapp_command_with_dynamic_balance =","counters":[{"col_start":0,"col_end":52,"count":8256}]},{"line":"        |new_account: bool, num_zkapp_command: usize| {","counters":[{"col_start":0,"col_end":8,"count":8256},{"col_start":54,"col_end":55,"count":20584}]},{"line":"            let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":45,"count":20584}]},{"line":"            let mut commands = Vec::with_capacity(num_zkapp_command);","counters":[{"col_start":0,"col_end":69,"count":20584}]},{"line":"","counters":[]},{"line":"            for _ in 0..num_zkapp_command {","counters":[{"col_start":0,"col_end":41,"count":20584}]},{"line":"                // choose a random authorization","counters":[]},{"line":"                // first Account_update.t updates the permissions, using the Signature authorization,","counters":[]},{"line":"                //  according the random authorization","counters":[]},{"line":"                // second Account_update.t uses the random authorization","counters":[]},{"line":"","counters":[]},{"line":"                let (permissions_auth, update) = match failure {","counters":[{"col_start":21,"col_end":45,"count":8310},{"col_start":55,"col_end":62,"count":442591}]},{"line":"                    Some(Failure::UpdateNotPermitted(ref update_type)) => {","counters":[{"col_start":53,"col_end":75,"count":442591}]},{"line":"                        let is_proof = rng.gen::<bool>();","counters":[{"col_start":0,"col_end":56,"count":442591}]},{"line":"","counters":[]},{"line":"                        let auth_tag = if is_proof {","counters":[{"col_start":28,"col_end":36,"count":442591},{"col_start":42,"col_end":50,"count":442591}]},{"line":"                            ControlTag::Proof","counters":[{"col_start":28,"col_end":45,"count":656}]},{"line":"                        } else {","counters":[]},{"line":"                            ControlTag::Signature","counters":[{"col_start":28,"col_end":49,"count":441935}]},{"line":"                        };","counters":[]},{"line":"","counters":[]},{"line":"                        let mut perm = Permissions::gen(auth_tag);","counters":[{"col_start":28,"col_end":66,"count":442591}]},{"line":"","counters":[]},{"line":"                        match &update_type {","counters":[{"col_start":0,"col_end":42,"count":442591}]},{"line":"                            NotPermitedOf::Delegate => {","counters":[{"col_start":55,"col_end":56,"count":82}]},{"line":"                                perm.set_delegate = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":81,"count":82}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":82}]},{"line":"                            NotPermitedOf::AppState => {","counters":[{"col_start":55,"col_end":56,"count":0}]},{"line":"                                perm.edit_state = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                            NotPermitedOf::VerificationKey => {","counters":[{"col_start":62,"col_end":63,"count":0}]},{"line":"                                perm.set_verification_key = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                            NotPermitedOf::ZkappUri => {","counters":[{"col_start":55,"col_end":56,"count":68}]},{"line":"                                perm.set_zkapp_uri = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":82,"count":68}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":68}]},{"line":"                            NotPermitedOf::TokenSymbol => {","counters":[{"col_start":58,"col_end":59,"count":0}]},{"line":"                                perm.set_token_symbol = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                            NotPermitedOf::VotingFor => {","counters":[{"col_start":56,"col_end":57,"count":689}]},{"line":"                                perm.set_voting_for = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":83,"count":689}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":689}]},{"line":"                            NotPermitedOf::Send => {","counters":[{"col_start":51,"col_end":52,"count":672}]},{"line":"                                perm.send = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":73,"count":672}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":672}]},{"line":"                            NotPermitedOf::Receive => {","counters":[{"col_start":54,"col_end":55,"count":0}]},{"line":"                                perm.receive = AuthRequired::from(auth_tag);","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        };","counters":[]},{"line":"","counters":[]},{"line":"                        (","counters":[{"col_start":24,"col_end":25,"count":1511}]},{"line":"                            auth_tag,","counters":[{"col_start":0,"col_end":37,"count":1511}]},{"line":"                            Some(Update {","counters":[{"col_start":0,"col_end":41,"count":1511}]},{"line":"                                permissions: SetOrKeep::Set(perm),","counters":[{"col_start":0,"col_end":66,"count":1511}]},{"line":"                                ..Update::dummy()","counters":[{"col_start":0,"col_end":49,"count":1511}]},{"line":"                            }),","counters":[{"col_start":0,"col_end":31,"count":1511}]},{"line":"                        )","counters":[{"col_start":0,"col_end":25,"count":1511}]},{"line":"                    }","counters":[]},{"line":"                    _ => {","counters":[]},{"line":"                        let tag = if new_account {","counters":[{"col_start":28,"col_end":31,"count":6799},{"col_start":37,"col_end":48,"count":6799}]},{"line":"                            [ControlTag::Signature, ControlTag::NoneGiven]","counters":[{"col_start":28,"col_end":74,"count":0}]},{"line":"                                .choose(&mut rng)","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                .cloned()","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                                .unwrap()","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        } else {","counters":[]},{"line":"                            ControlTag::gen(&mut rng)","counters":[{"col_start":28,"col_end":53,"count":6799}]},{"line":"                        };","counters":[]},{"line":"","counters":[]},{"line":"                        (tag, None)","counters":[{"col_start":24,"col_end":35,"count":6799}]},{"line":"                    }","counters":[]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                let zkapp_account = match permissions_auth {","counters":[{"col_start":20,"col_end":33,"count":8310},{"col_start":42,"col_end":58,"count":8310}]},{"line":"                    ControlTag::Proof => true,","counters":[{"col_start":41,"col_end":45,"count":7636}]},{"line":"                    ControlTag::Signature | ControlTag::NoneGiven => false,","counters":[{"col_start":69,"col_end":74,"count":674}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                // Signature authorization to start","counters":[]},{"line":"                let account_update0 = {","counters":[{"col_start":20,"col_end":39,"count":8310}]},{"line":"                    let authorization = zkapp_command::Control::Signature(Signature::dummy());","counters":[{"col_start":0,"col_end":94,"count":8310}]},{"line":"                    gen_account_update_from(AccountUpdateParams {","counters":[{"col_start":0,"col_end":65,"count":8310}]},{"line":"                        update,","counters":[{"col_start":0,"col_end":31,"count":8310}]},{"line":"                        failure,","counters":[{"col_start":0,"col_end":32,"count":8310}]},{"line":"                        new_account: Some(new_account),","counters":[{"col_start":0,"col_end":55,"count":8310}]},{"line":"                        zkapp_account: Some(zkapp_account),","counters":[{"col_start":0,"col_end":59,"count":8310}]},{"line":"                        account_id: None,","counters":[{"col_start":0,"col_end":41,"count":8310}]},{"line":"                        token_id: None,","counters":[{"col_start":0,"col_end":39,"count":8310}]},{"line":"                        caller: None,","counters":[{"col_start":0,"col_end":37,"count":8310}]},{"line":"                        permissions_auth: Some(permissions_auth),","counters":[{"col_start":0,"col_end":65,"count":8310}]},{"line":"                        required_balance_change: None,","counters":[{"col_start":0,"col_end":54,"count":8310}]},{"line":"                        zkapp_account_ids,","counters":[{"col_start":0,"col_end":42,"count":8310}]},{"line":"                        authorization,","counters":[{"col_start":0,"col_end":38,"count":8310}]},{"line":"                        account_ids_seen,","counters":[{"col_start":0,"col_end":41,"count":8310}]},{"line":"                        available_public_keys,","counters":[{"col_start":0,"col_end":46,"count":8310}]},{"line":"                        account_state_tbl,","counters":[{"col_start":0,"col_end":42,"count":8310}]},{"line":"                        protocol_state_view,","counters":[{"col_start":0,"col_end":44,"count":8310}]},{"line":"                        vk,","counters":[{"col_start":0,"col_end":27,"count":8310}]},{"line":"                    })","counters":[{"col_start":0,"col_end":22,"count":8310}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                let account_update = {","counters":[{"col_start":20,"col_end":38,"count":144187}]},{"line":"                    // authorization according to chosen permissions auth","counters":[{"col_start":0,"col_end":73,"count":144187}]},{"line":"                    let (authorization, update) = match failure {","counters":[{"col_start":0,"col_end":46,"count":144187},{"col_start":56,"col_end":63,"count":8310}]},{"line":"                        Some(Failure::UpdateNotPermitted(update_type)) => {","counters":[{"col_start":57,"col_end":68,"count":8246}]},{"line":"                            let auth = match permissions_auth {","counters":[{"col_start":32,"col_end":36,"count":8246},{"col_start":45,"col_end":61,"count":8246}]},{"line":"                                ControlTag::Proof => Control::dummy_of_tag(ControlTag::Signature),","counters":[{"col_start":53,"col_end":97,"count":7574}]},{"line":"                                ControlTag::Signature => Control::dummy_of_tag(ControlTag::Proof),","counters":[{"col_start":57,"col_end":97,"count":0}]},{"line":"                                _ => Control::dummy_of_tag(ControlTag::NoneGiven),","counters":[{"col_start":37,"col_end":81,"count":672}]},{"line":"                            };","counters":[]},{"line":"","counters":[]},{"line":"                            let mut update = Update::dummy();","counters":[{"col_start":32,"col_end":61,"count":8246}]},{"line":"","counters":[]},{"line":"                            match update_type {","counters":[{"col_start":0,"col_end":45,"count":8246}]},{"line":"                                NotPermitedOf::Delegate => {","counters":[{"col_start":59,"col_end":60,"count":672}]},{"line":"                                    update.delegate = SetOrKeep::Set(gen_compressed());","counters":[{"col_start":0,"col_end":87,"count":672}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":672}]},{"line":"                                NotPermitedOf::AppState => {","counters":[{"col_start":59,"col_end":60,"count":0}]},{"line":"                                    update.app_state =","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                        std::array::from_fn(|_| SetOrKeep::Set(Fp::rand(&mut rng)));","counters":[{"col_start":0,"col_end":60,"count":0},{"col_start":64,"col_end":98,"count":0},{"col_start":98,"col_end":100,"count":0}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                                NotPermitedOf::VerificationKey => {","counters":[{"col_start":66,"col_end":67,"count":0}]},{"line":"                                    let data = VerificationKey::dummy();","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                                    let hash = data.digest();","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                                    update.verification_key =","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                                        SetOrKeep::Set(WithHash { data, hash });","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                                NotPermitedOf::ZkappUri => {","counters":[{"col_start":59,"col_end":60,"count":40794}]},{"line":"                                    update.zkapp_uri =","counters":[{"col_start":0,"col_end":54,"count":40794}]},{"line":"                                        SetOrKeep::Set(\"https://o1labs.org\".to_string().into());","counters":[{"col_start":0,"col_end":96,"count":40794}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":40794}]},{"line":"                                NotPermitedOf::TokenSymbol => {","counters":[{"col_start":62,"col_end":63,"count":0}]},{"line":"                                    update.token_symbol = SetOrKeep::Set(\"CODA\".to_string().into());","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                                NotPermitedOf::VotingFor => {","counters":[{"col_start":60,"col_end":61,"count":672}]},{"line":"                                    update.voting_for =","counters":[{"col_start":0,"col_end":55,"count":672}]},{"line":"                                        SetOrKeep::Set(VotingFor(Fp::rand(&mut rng)));","counters":[{"col_start":0,"col_end":86,"count":672}]},{"line":"                                }","counters":[{"col_start":0,"col_end":33,"count":672}]},{"line":"                                NotPermitedOf::Send | NotPermitedOf::Receive => {}","counters":[{"col_start":80,"col_end":82,"count":101985}]},{"line":"                            };","counters":[]},{"line":"","counters":[]},{"line":"                            let new_perm = Permissions::gen(ControlTag::Signature);","counters":[{"col_start":32,"col_end":83,"count":144123}]},{"line":"                            update.permissions = SetOrKeep::Set(new_perm);","counters":[{"col_start":0,"col_end":74,"count":144123}]},{"line":"","counters":[]},{"line":"                            (auth, Some(update))","counters":[{"col_start":0,"col_end":48,"count":144123}]},{"line":"                        }","counters":[]},{"line":"                        _ => {","counters":[]},{"line":"                            let auth = Control::dummy_of_tag(permissions_auth);","counters":[{"col_start":32,"col_end":79,"count":64}]},{"line":"                            (auth, None)","counters":[{"col_start":0,"col_end":40,"count":64}]},{"line":"                        }","counters":[]},{"line":"                    };","counters":[]},{"line":"","counters":[]},{"line":"                    let account_id = AccountId::create(","counters":[{"col_start":24,"col_end":55,"count":144187}]},{"line":"                        account_update0.body.public_key.clone(),","counters":[{"col_start":0,"col_end":64,"count":144187}]},{"line":"                        account_update0.body.token_id.clone(),","counters":[{"col_start":0,"col_end":62,"count":144187}]},{"line":"                    );","counters":[{"col_start":0,"col_end":22,"count":144187}]},{"line":"","counters":[]},{"line":"                    let permissions_auth = ControlTag::Signature;","counters":[{"col_start":0,"col_end":65,"count":144187}]},{"line":"","counters":[]},{"line":"                    gen_account_update_from(AccountUpdateParams {","counters":[{"col_start":0,"col_end":65,"count":144187}]},{"line":"                        update,","counters":[{"col_start":0,"col_end":31,"count":144187}]},{"line":"                        failure,","counters":[{"col_start":0,"col_end":32,"count":144187}]},{"line":"                        new_account: None,","counters":[{"col_start":0,"col_end":42,"count":144187}]},{"line":"                        zkapp_account: None,","counters":[{"col_start":0,"col_end":44,"count":144187}]},{"line":"                        account_id: Some(account_id),","counters":[{"col_start":0,"col_end":53,"count":144187}]},{"line":"                        token_id: None,","counters":[{"col_start":0,"col_end":39,"count":144187}]},{"line":"                        caller: None,","counters":[{"col_start":0,"col_end":37,"count":144187}]},{"line":"                        permissions_auth: Some(permissions_auth),","counters":[{"col_start":0,"col_end":65,"count":144187}]},{"line":"                        required_balance_change: None,","counters":[{"col_start":0,"col_end":54,"count":144187}]},{"line":"                        zkapp_account_ids,","counters":[{"col_start":0,"col_end":42,"count":144187}]},{"line":"                        authorization,","counters":[{"col_start":0,"col_end":38,"count":144187}]},{"line":"                        account_ids_seen,","counters":[{"col_start":0,"col_end":41,"count":144187}]},{"line":"                        available_public_keys,","counters":[{"col_start":0,"col_end":46,"count":144187}]},{"line":"                        account_state_tbl,","counters":[{"col_start":0,"col_end":42,"count":144187}]},{"line":"                        protocol_state_view,","counters":[{"col_start":0,"col_end":44,"count":144187}]},{"line":"                        vk,","counters":[{"col_start":0,"col_end":27,"count":144187}]},{"line":"                    })","counters":[{"col_start":0,"col_end":22,"count":144187}]},{"line":"                };","counters":[{"col_start":0,"col_end":18,"count":144187}]},{"line":"","counters":[]},{"line":"                commands.push(mk_node(account_update0, vec![]));","counters":[{"col_start":0,"col_end":64,"count":144187}]},{"line":"                commands.push(mk_node(account_update, vec![]));","counters":[{"col_start":0,"col_end":62,"count":144187}]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            commands","counters":[{"col_start":12,"col_end":20,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"    // at least 1 account_update","counters":[]},{"line":"    let num_zkapp_command = rng.gen_range(1..max_account_updates);","counters":[{"col_start":8,"col_end":66,"count":8256}]},{"line":"    let num_new_accounts = rng.gen_range(0..num_zkapp_command);","counters":[{"col_start":0,"col_end":63,"count":8256}]},{"line":"    let num_old_zkapp_command = num_zkapp_command - num_new_accounts;","counters":[{"col_start":0,"col_end":69,"count":8256}]},{"line":"","counters":[]},{"line":"    let mut old_zkapp_command =","counters":[{"col_start":0,"col_end":31,"count":8256}]},{"line":"        gen_zkapp_command_with_dynamic_balance(false, num_old_zkapp_command);","counters":[{"col_start":0,"col_end":77,"count":8256}]},{"line":"    let mut new_zkapp_command = gen_zkapp_command_with_dynamic_balance(true, num_new_accounts);","counters":[{"col_start":0,"col_end":95,"count":8256}]},{"line":"","counters":[]},{"line":"    let account_updates0: Vec<_> = {","counters":[{"col_start":0,"col_end":36,"count":8256}]},{"line":"        old_zkapp_command.append(&mut new_zkapp_command);","counters":[{"col_start":0,"col_end":57,"count":8256}]},{"line":"        old_zkapp_command","counters":[{"col_start":0,"col_end":25,"count":8256}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let balance_change_sum = account_updates0.iter().fold(","counters":[{"col_start":8,"col_end":26,"count":8256},{"col_start":29,"col_end":58,"count":8256}]},{"line":"        // init","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        if num_new_accounts == 0 {","counters":[{"col_start":0,"col_end":32,"count":8256}]},{"line":"            Signed::<Amount>::zero()","counters":[{"col_start":12,"col_end":36,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            let amount = Amount::from_u64(ACCOUNT_CREATION_FEE.as_u64());","counters":[{"col_start":16,"col_end":73,"count":8256}]},{"line":"            let amount = amount.scale(num_new_accounts as u64).unwrap();","counters":[{"col_start":0,"col_end":72,"count":8256}]},{"line":"            Signed::of_unsigned(amount)","counters":[{"col_start":0,"col_end":39,"count":8256}]},{"line":"        },","counters":[]},{"line":"        |accum, node| {","counters":[{"col_start":22,"col_end":23,"count":101985}]},{"line":"            accum","counters":[{"col_start":0,"col_end":17,"count":101985}]},{"line":"                .add(&node.account_update.body.balance_change)","counters":[{"col_start":0,"col_end":62,"count":101985}]},{"line":"                .expect(\"Overflow adding other zkapp_command balances\")","counters":[{"col_start":0,"col_end":71,"count":101985}]},{"line":"        },","counters":[{"col_start":0,"col_end":9,"count":101985}]},{"line":"    );","counters":[]},{"line":"","counters":[]},{"line":"    // modify the balancing account_update with balance change to yield a zero sum","counters":[]},{"line":"    // balancing account_update is created immediately after the fee payer","counters":[]},{"line":"    // account_update is created. This is because the preconditions generation","counters":[]},{"line":"    // is sensitive to the order of account_update generation.","counters":[]},{"line":"","counters":[]},{"line":"    let balance_change = balance_change_sum.negate();","counters":[{"col_start":8,"col_end":53,"count":8256}]},{"line":"","counters":[]},{"line":"    let balancing_account_update = {","counters":[{"col_start":0,"col_end":36,"count":8256}]},{"line":"        let authorization = Control::Signature(Signature::dummy());","counters":[{"col_start":0,"col_end":67,"count":8256}]},{"line":"        gen_account_update_from(AccountUpdateParams {","counters":[{"col_start":0,"col_end":53,"count":8256}]},{"line":"            update: None,","counters":[{"col_start":0,"col_end":25,"count":8256}]},{"line":"            failure,","counters":[{"col_start":0,"col_end":20,"count":8256}]},{"line":"            new_account: Some(false),","counters":[{"col_start":0,"col_end":37,"count":8256}]},{"line":"            zkapp_account: None,","counters":[{"col_start":0,"col_end":32,"count":8256}]},{"line":"            account_id: None,","counters":[{"col_start":0,"col_end":29,"count":8256}]},{"line":"            token_id: None,","counters":[{"col_start":0,"col_end":27,"count":8256}]},{"line":"            caller: None,","counters":[{"col_start":0,"col_end":25,"count":8256}]},{"line":"            permissions_auth: Some(ControlTag::Signature),","counters":[{"col_start":0,"col_end":58,"count":8256}]},{"line":"            required_balance_change: Some(balance_change),","counters":[{"col_start":0,"col_end":58,"count":8256}]},{"line":"            zkapp_account_ids,","counters":[{"col_start":0,"col_end":30,"count":8256}]},{"line":"            authorization,","counters":[{"col_start":0,"col_end":26,"count":8256}]},{"line":"            account_ids_seen,","counters":[{"col_start":0,"col_end":29,"count":8256}]},{"line":"            available_public_keys,","counters":[{"col_start":0,"col_end":34,"count":8256}]},{"line":"            account_state_tbl,","counters":[{"col_start":0,"col_end":30,"count":8256}]},{"line":"            protocol_state_view,","counters":[{"col_start":0,"col_end":32,"count":8256}]},{"line":"            vk,","counters":[{"col_start":0,"col_end":15,"count":8256}]},{"line":"        })","counters":[{"col_start":0,"col_end":10,"count":8256}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":8256}]},{"line":"","counters":[]},{"line":"    let mut gen_zkapp_command_with_token_accounts = |num_zkapp_command: usize| {","counters":[{"col_start":0,"col_end":52,"count":8256},{"col_start":79,"col_end":80,"count":689}]},{"line":"        let authorization = Control::Signature(Signature::dummy());","counters":[{"col_start":0,"col_end":67,"count":689}]},{"line":"        let permissions_auth = ControlTag::Signature;","counters":[{"col_start":0,"col_end":53,"count":689}]},{"line":"        let caller = CallType::Call;","counters":[{"col_start":0,"col_end":36,"count":689}]},{"line":"","counters":[]},{"line":"        (0..num_zkapp_command)","counters":[{"col_start":0,"col_end":30,"count":689}]},{"line":"            .map(|_| {","counters":[{"col_start":0,"col_end":17,"count":689},{"col_start":21,"col_end":22,"count":1}]},{"line":"                let parent = {","counters":[{"col_start":0,"col_end":30,"count":1}]},{"line":"                    let required_balance_change = {","counters":[{"col_start":0,"col_end":51,"count":1}]},{"line":"                        let amount = Amount::from_u64(ACCOUNT_CREATION_FEE.as_u64());","counters":[{"col_start":0,"col_end":85,"count":1}]},{"line":"                        Some(Signed::of_unsigned(amount).negate())","counters":[{"col_start":0,"col_end":66,"count":1}]},{"line":"                    };","counters":[{"col_start":0,"col_end":22,"count":1}]},{"line":"","counters":[]},{"line":"                    gen_account_update_from(AccountUpdateParams {","counters":[{"col_start":0,"col_end":65,"count":1}]},{"line":"                        update: None,","counters":[{"col_start":0,"col_end":37,"count":1}]},{"line":"                        failure,","counters":[{"col_start":0,"col_end":32,"count":1}]},{"line":"                        new_account: None,","counters":[{"col_start":0,"col_end":42,"count":1}]},{"line":"                        zkapp_account: None,","counters":[{"col_start":0,"col_end":44,"count":1}]},{"line":"                        account_id: None,","counters":[{"col_start":0,"col_end":41,"count":1}]},{"line":"                        token_id: None,","counters":[{"col_start":0,"col_end":39,"count":1}]},{"line":"                        caller: Some(caller.clone()),","counters":[{"col_start":0,"col_end":53,"count":1}]},{"line":"                        permissions_auth: Some(permissions_auth),","counters":[{"col_start":0,"col_end":65,"count":1}]},{"line":"                        required_balance_change,","counters":[{"col_start":0,"col_end":48,"count":1}]},{"line":"                        zkapp_account_ids,","counters":[{"col_start":0,"col_end":42,"count":1}]},{"line":"                        authorization: authorization.clone(),","counters":[{"col_start":0,"col_end":61,"count":1}]},{"line":"                        account_ids_seen,","counters":[{"col_start":0,"col_end":41,"count":1}]},{"line":"                        available_public_keys,","counters":[{"col_start":0,"col_end":46,"count":1}]},{"line":"                        account_state_tbl,","counters":[{"col_start":0,"col_end":42,"count":1}]},{"line":"                        protocol_state_view,","counters":[{"col_start":0,"col_end":44,"count":1}]},{"line":"                        vk,","counters":[{"col_start":0,"col_end":27,"count":1}]},{"line":"                    })","counters":[{"col_start":0,"col_end":22,"count":1}]},{"line":"                };","counters":[{"col_start":0,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"                let token_id = Some(","counters":[{"col_start":0,"col_end":36,"count":1}]},{"line":"                    AccountId::create(parent.body.public_key.clone(), parent.body.token_id.clone())","counters":[{"col_start":0,"col_end":99,"count":1}]},{"line":"                        .derive_token_id(),","counters":[{"col_start":0,"col_end":43,"count":1}]},{"line":"                );","counters":[{"col_start":0,"col_end":18,"count":1}]},{"line":"","counters":[]},{"line":"                let child = gen_account_update_from(AccountUpdateParams {","counters":[{"col_start":0,"col_end":73,"count":1}]},{"line":"                    update: None,","counters":[{"col_start":0,"col_end":33,"count":1}]},{"line":"                    failure,","counters":[{"col_start":0,"col_end":28,"count":1}]},{"line":"                    new_account: Some(true),","counters":[{"col_start":0,"col_end":44,"count":1}]},{"line":"                    zkapp_account: None,","counters":[{"col_start":0,"col_end":40,"count":1}]},{"line":"                    account_id: None,","counters":[{"col_start":0,"col_end":37,"count":1}]},{"line":"                    token_id,","counters":[{"col_start":0,"col_end":29,"count":1}]},{"line":"                    caller: Some(caller.clone()),","counters":[{"col_start":0,"col_end":49,"count":1}]},{"line":"                    permissions_auth: Some(permissions_auth),","counters":[{"col_start":0,"col_end":61,"count":1}]},{"line":"                    required_balance_change: None,","counters":[{"col_start":0,"col_end":50,"count":1}]},{"line":"                    zkapp_account_ids,","counters":[{"col_start":0,"col_end":38,"count":1}]},{"line":"                    authorization: authorization.clone(),","counters":[{"col_start":0,"col_end":57,"count":1}]},{"line":"                    account_ids_seen,","counters":[{"col_start":0,"col_end":37,"count":1}]},{"line":"                    available_public_keys,","counters":[{"col_start":0,"col_end":42,"count":1}]},{"line":"                    account_state_tbl,","counters":[{"col_start":0,"col_end":38,"count":1}]},{"line":"                    protocol_state_view,","counters":[{"col_start":0,"col_end":40,"count":1}]},{"line":"                    vk,","counters":[{"col_start":0,"col_end":23,"count":1}]},{"line":"                });","counters":[{"col_start":0,"col_end":19,"count":1}]},{"line":"","counters":[]},{"line":"                mk_node(parent, vec![mk_node(child, vec![])])","counters":[{"col_start":0,"col_end":61,"count":1}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":1},{"col_start":13,"col_end":14,"count":689}]},{"line":"            .collect::<Vec<_>>()","counters":[{"col_start":0,"col_end":32,"count":689}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":689}]},{"line":"","counters":[]},{"line":"    let num_new_token_zkapp_command = rng.gen_range(0..max_token_updates);","counters":[{"col_start":8,"col_end":74,"count":8256}]},{"line":"    let new_token_zkapp_command =","counters":[{"col_start":0,"col_end":33,"count":8256}]},{"line":"        gen_zkapp_command_with_token_accounts(num_new_token_zkapp_command);","counters":[{"col_start":0,"col_end":75,"count":8256}]},{"line":"","counters":[]},{"line":"    let account_updates = mk_forest(","counters":[{"col_start":0,"col_end":36,"count":8256}]},{"line":"        account_updates0","counters":[{"col_start":0,"col_end":24,"count":8256}]},{"line":"            .into_iter()","counters":[{"col_start":0,"col_end":24,"count":8256}]},{"line":"            .chain([mk_node(balancing_account_update, vec![])])","counters":[{"col_start":0,"col_end":63,"count":8256}]},{"line":"            .chain(new_token_zkapp_command)","counters":[{"col_start":0,"col_end":43,"count":8256}]},{"line":"            .collect(),","counters":[{"col_start":0,"col_end":23,"count":8256}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":8256}]},{"line":"","counters":[]},{"line":"    let memo = Memo::gen();","counters":[{"col_start":0,"col_end":27,"count":8256}]},{"line":"    let zkapp_command_dummy_authorizations = ZkAppCommand {","counters":[{"col_start":0,"col_end":59,"count":8256}]},{"line":"        fee_payer,","counters":[{"col_start":0,"col_end":18,"count":8256}]},{"line":"        account_updates: {","counters":[{"col_start":0,"col_end":26,"count":8256}]},{"line":"            let mut account_updates = account_updates.into_add_callers_simple();","counters":[{"col_start":0,"col_end":80,"count":8256}]},{"line":"            account_updates.accumulate_hashes_predicated();","counters":[{"col_start":0,"col_end":59,"count":8256}]},{"line":"            account_updates","counters":[{"col_start":0,"col_end":27,"count":8256}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":8256}]},{"line":"        memo,","counters":[{"col_start":0,"col_end":13,"count":8256}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":8256}]},{"line":"","counters":[]},{"line":"    // update receipt chain hashes in accounts table","counters":[{"col_start":0,"col_end":52,"count":8256}]},{"line":"    let receipt_elt = {","counters":[{"col_start":0,"col_end":23,"count":8256}]},{"line":"        let (_txn_commitment, full_txn_commitment) =","counters":[{"col_start":0,"col_end":52,"count":8256}]},{"line":"            zkapp_command_builder::get_transaction_commitments(&zkapp_command_dummy_authorizations);","counters":[{"col_start":0,"col_end":100,"count":8256}]},{"line":"","counters":[]},{"line":"        ZkAppCommandElt::ZkAppCommandCommitment(ReceiptChainHash(full_txn_commitment.0))","counters":[{"col_start":0,"col_end":88,"count":8256}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":8256}]},{"line":"","counters":[]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":8256}]},{"line":"        let (account, role) = account_state_tbl","counters":[{"col_start":0,"col_end":47,"count":8256}]},{"line":"            .get_mut(&fee_payer_account_id)","counters":[{"col_start":0,"col_end":43,"count":8256}]},{"line":"            .expect(\"Expected fee payer account id to be in table\");","counters":[{"col_start":0,"col_end":68,"count":8256}]},{"line":"","counters":[]},{"line":"        let receipt_chain_hash = cons_zkapp_command_commitment(","counters":[{"col_start":0,"col_end":63,"count":8256}]},{"line":"            Index::zero(),","counters":[{"col_start":0,"col_end":26,"count":8256}]},{"line":"            receipt_elt.clone(),","counters":[{"col_start":0,"col_end":32,"count":8256}]},{"line":"            &account.receipt_chain_hash,","counters":[{"col_start":0,"col_end":40,"count":8256}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":8256}]},{"line":"","counters":[]},{"line":"        account.receipt_chain_hash = receipt_chain_hash;","counters":[{"col_start":0,"col_end":56,"count":8256}]},{"line":"        *role = Role::FeePayer;","counters":[{"col_start":0,"col_end":31,"count":8256}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":8256}]},{"line":"","counters":[]},{"line":"    let account_updates = zkapp_command_dummy_authorizations","counters":[{"col_start":0,"col_end":60,"count":8256}]},{"line":"        .account_updates","counters":[{"col_start":0,"col_end":24,"count":8256}]},{"line":"        .to_account_updates();","counters":[{"col_start":0,"col_end":29,"count":8256}]},{"line":"","counters":[]},{"line":"    for (index, account_update) in account_updates.iter().enumerate() {","counters":[{"col_start":9,"col_end":30,"count":0},{"col_start":35,"col_end":69,"count":8256}]},{"line":"        match account_update.authorization {","counters":[{"col_start":14,"col_end":42,"count":0}]},{"line":"            Control::Proof(_) | Control::Signature(_) => {}","counters":[{"col_start":57,"col_end":59,"count":6812}]},{"line":"            Control::NoneGiven => continue,","counters":[{"col_start":34,"col_end":42,"count":-6812}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let acct_id = account_update.account_id();","counters":[{"col_start":12,"col_end":50,"count":6812}]},{"line":"        let (account, _role) = account_state_tbl","counters":[{"col_start":0,"col_end":48,"count":6812}]},{"line":"            .get_mut(&acct_id)","counters":[{"col_start":0,"col_end":30,"count":6812}]},{"line":"            .expect(\"Expected other account_update account id to be in table\");","counters":[{"col_start":0,"col_end":79,"count":6812}]},{"line":"","counters":[]},{"line":"        let account_update_index = Index::from_u32((index + 1).try_into().unwrap());","counters":[{"col_start":0,"col_end":84,"count":6812}]},{"line":"","counters":[]},{"line":"        let receipt_chain_hash = cons_zkapp_command_commitment(","counters":[{"col_start":0,"col_end":63,"count":6812}]},{"line":"            account_update_index,","counters":[{"col_start":0,"col_end":33,"count":6812}]},{"line":"            receipt_elt.clone(),","counters":[{"col_start":0,"col_end":32,"count":6812}]},{"line":"            &account.receipt_chain_hash,","counters":[{"col_start":0,"col_end":40,"count":6812}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":6812}]},{"line":"","counters":[]},{"line":"        account.receipt_chain_hash = receipt_chain_hash;","counters":[{"col_start":0,"col_end":55,"count":6812}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    zkapp_command_dummy_authorizations","counters":[{"col_start":4,"col_end":38,"count":4100}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":4100}]}]}