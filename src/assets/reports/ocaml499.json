{"filename":"src/lib/mina_base/state_hash.ml","lines":[{"line":"(* state_hash.ml *)","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"module T = Data_hash_lib.State_hash","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"module State_hashes = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { mutable state_body_hash : State_body_hash.Stable.V1.t option","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":64,"col_end":64,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"        ; state_hash : T.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving equal, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let state_hash { state_hash; _ } = state_hash","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let state_body_hash t ~compute_hashes =","counters":[]},{"line":"    match t.state_body_hash with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Some state_body_hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        state_body_hash","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let { state_hash; state_body_hash } = compute_hashes () in","counters":[]},{"line":"        assert (T.equal state_hash t.state_hash) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"        assert (Option.is_some state_body_hash) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        t.state_body_hash <- state_body_hash ;","counters":[]},{"line":"        Option.value_exn state_body_hash","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module With_state_hashes = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type 'a t = ('a, State_hashes.Stable.V1.t) With_hash.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":3},{"col_start":14,"col_end":14,"count":3},{"col_start":18,"col_end":18,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      [@@deriving equal, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":7}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type 'a t = ('a, State_hashes.t) With_hash.t","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  [@@deriving equal, sexp, to_yojson]","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  open With_hash","counters":[]},{"line":"  open State_hashes.Stable.Latest","counters":[]},{"line":"","counters":[]},{"line":"  let data { data; _ } = data","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let hashes { hash = hashes; _ } = hashes","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let state_hash { hash = { state_hash; _ }; _ } = state_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let state_body_hash { hash; data } ~compute_hashes =","counters":[]},{"line":"    State_hashes.state_body_hash hash ~compute_hashes:(fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        compute_hashes data )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}