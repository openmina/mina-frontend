{"filename":"src/lib/transition_frontier/extensions/snark_pool_refcount.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"module Work = Transaction_snark_work.Statement","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type view =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { removed : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    ; refcount_table : int Work.Table.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          (** Tracks the number of blocks that have each work statement in","counters":[]},{"line":"              their scan state.","counters":[]},{"line":"              Work is included iff it is a member of some block scan state.","counters":[]},{"line":"          *)","counters":[]},{"line":"    ; best_tip_table : Work.Hash_set.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          (** The set of all snark work statements present in the scan state","counters":[]},{"line":"              for the last 10 blocks in the best chain.","counters":[]},{"line":"          *)","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { refcount_table : int Work.Table.t","counters":[]},{"line":"          (** Tracks the number of blocks that have each work statement in","counters":[]},{"line":"              their scan state.","counters":[]},{"line":"              Work is included iff it is a member of some block scan state.","counters":[]},{"line":"          *)","counters":[]},{"line":"    ; best_tip_table : Work.Hash_set.t","counters":[]},{"line":"          (** The set of all snark work statements present in the scan state","counters":[]},{"line":"              for the last 10 blocks in the best chain.","counters":[]},{"line":"          *)","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let get_work = Staged_ledger.Scan_state.all_work_statements_exn","counters":[]},{"line":"","counters":[]},{"line":"  (** Returns true if this update changed which elements are in the table","counters":[]},{"line":"      (but not if the same elements exist with a different reference count) *)","counters":[]},{"line":"  let add_to_table ~get_work ~get_statement table t : bool =","counters":[]},{"line":"    let res = ref false in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.iter (get_work t) ~f:(fun work ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        Work.Table.update table (get_statement work) ~f:(function","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"          | Some count ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              count + 1","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              res := true ;","counters":[]},{"line":"              1 ) ) ;","counters":[]},{"line":"    !res","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (** Returns true if this update changed which elements are in the table","counters":[]},{"line":"      (but not if the same elements exist with a different reference count) *)","counters":[]},{"line":"  let remove_from_table ~get_work ~get_statement table t : bool =","counters":[]},{"line":"    let res = ref false in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.iter (get_work t) ~f:(fun work ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        Work.Table.change table (get_statement work) ~f:(function","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"          | Some 1 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              res := true ;","counters":[]},{"line":"              None","counters":[]},{"line":"          | Some count ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Some (count - 1)","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith \"Removed a breadcrumb we didn't know about\" ) ) ;","counters":[]},{"line":"    !res","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let add_scan_state_to_ref_table table scan_state : bool =","counters":[]},{"line":"    add_to_table ~get_work ~get_statement:Fn.id table scan_state","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let remove_scan_state_from_ref_table table scan_state : bool =","counters":[]},{"line":"    remove_from_table ~get_work ~get_statement:Fn.id table scan_state","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let create ~logger:_ frontier =","counters":[]},{"line":"    let t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { refcount_table = Work.Table.create ()","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      ; best_tip_table = Work.Hash_set.create ()","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let () =","counters":[]},{"line":"      let breadcrumb = Full_frontier.root frontier in","counters":[]},{"line":"      let scan_state =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Breadcrumb.staged_ledger breadcrumb |> Staged_ledger.scan_state","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      in","counters":[]},{"line":"      ignore (add_scan_state_to_ref_table t.refcount_table scan_state : bool)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    in","counters":[]},{"line":"    ( t","counters":[]},{"line":"    , { removed = 0","counters":[]},{"line":"      ; refcount_table = t.refcount_table","counters":[]},{"line":"      ; best_tip_table = t.best_tip_table","counters":[]},{"line":"      } )","counters":[]},{"line":"","counters":[]},{"line":"  type diff_update = { num_removed : int; is_added : bool }","counters":[]},{"line":"","counters":[]},{"line":"  let handle_diffs t frontier diffs_with_mutants =","counters":[]},{"line":"    let open Diff.Full.With_mutant in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let { num_removed; is_added } =","counters":[]},{"line":"      List.fold diffs_with_mutants ~init:{ num_removed = 0; is_added = false }","counters":[]},{"line":"        ~f:(fun { num_removed; is_added } -> function","counters":[]},{"line":"        | E (New_node (Full breadcrumb), _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let scan_state =","counters":[]},{"line":"              Breadcrumb.staged_ledger breadcrumb |> Staged_ledger.scan_state","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            in","counters":[]},{"line":"            let added_scan_state =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              add_scan_state_to_ref_table t.refcount_table scan_state","counters":[]},{"line":"            in","counters":[]},{"line":"            { num_removed; is_added = is_added || added_scan_state }","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"        | E","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ( Root_transitioned { new_root = _; garbage = Full garbage_nodes; _ }","counters":[]},{"line":"            , _ ) ->","counters":[]},{"line":"            let open Diff.Node_list in","counters":[]},{"line":"            let extra_num_removed =","counters":[]},{"line":"              List.fold garbage_nodes ~init:0 ~f:(fun acc node ->","counters":[]},{"line":"                  let delta =","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    if","counters":[]},{"line":"                      remove_scan_state_from_ref_table t.refcount_table","counters":[]},{"line":"                        node.scan_state","counters":[]},{"line":"                    then 1","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                    else 0","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  acc + delta )","counters":[]},{"line":"            in","counters":[]},{"line":"            { num_removed = num_removed + extra_num_removed; is_added }","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | E (Best_tip_changed new_best_tip_hash, _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let rec update_best_tip_table blocks_remaining state_hash =","counters":[]},{"line":"              match Full_frontier.find frontier state_hash with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ()","counters":[]},{"line":"              | Some breadcrumb ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  let statements =","counters":[]},{"line":"                    try","counters":[]},{"line":"                      Breadcrumb.staged_ledger breadcrumb","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                      |> Staged_ledger.all_work_statements_exn","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                    with _ -> []","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  List.iter ~f:(Hash_set.add t.best_tip_table) statements ;","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                  if blocks_remaining > 0 then","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    update_best_tip_table (blocks_remaining - 1)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      (Breadcrumb.parent_hash breadcrumb)","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"            in","counters":[]},{"line":"            let num_blocks_to_include = 3 in","counters":[]},{"line":"            Hash_set.clear t.best_tip_table ;","counters":[]},{"line":"            update_best_tip_table num_blocks_to_include new_best_tip_hash ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            { num_removed; is_added = true } )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    in","counters":[]},{"line":"    if num_removed > 0 || is_added then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      Some","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { removed = num_removed","counters":[]},{"line":"        ; refcount_table = t.refcount_table","counters":[]},{"line":"        ; best_tip_table = t.best_tip_table","counters":[]},{"line":"        }","counters":[]},{"line":"    else None","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"module Broadcasted = Functor.Make_broadcasted (T)","counters":[{"col_start":48,"col_end":48,"count":2}]}]}