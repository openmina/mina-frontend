{"filename":"src/lib/mina_state/registers.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Impl = Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type ('ledger, 'pending_coinbase_stack, 'local_state) t =","counters":[{"col_start":4,"col_end":4,"count":3},{"col_start":58,"col_end":58,"count":6}]},{"line":"          ( 'ledger","counters":[]},{"line":"          , 'pending_coinbase_stack","counters":[]},{"line":"          , 'local_state )","counters":[]},{"line":"          Mina_wire_types.Mina_state.Registers.V1.t =","counters":[]},{"line":"      { ledger : 'ledger","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"      ; pending_coinbase_stack : 'pending_coinbase_stack","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"      ; local_state : 'local_state","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving compare, equal, hash, sexp, yojson, hlist, fields]","counters":[{"col_start":65,"col_end":65,"count":7}]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"  let%map ledger = Frozen_ledger_hash.gen","counters":[]},{"line":"  and pending_coinbase_stack = Pending_coinbase.Stack.gen","counters":[]},{"line":"  and local_state = Local_state.gen in","counters":[]},{"line":"  { ledger; pending_coinbase_stack; local_state }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let to_input { ledger; pending_coinbase_stack; local_state } =","counters":[]},{"line":"  Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [| Frozen_ledger_hash.to_input ledger","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"     ; Pending_coinbase.Stack.to_input pending_coinbase_stack","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"     ; Local_state.to_input local_state","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"let typ spec =","counters":[]},{"line":"  Impl.Typ.of_hlistable spec ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"module Value = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Frozen_ledger_hash.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":6,"col_end":6,"count":0}]},{"line":"    , Pending_coinbase.Stack.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    , Local_state.t )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    Stable.Latest.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  [@@deriving compare, equal, sexp, yojson, hash]","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"  let connected t t' =","counters":[]},{"line":"    let module Without_pending_coinbase_stack = struct","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      type t = (Frozen_ledger_hash.t, unit, Local_state.t) Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      [@@deriving compare, equal, sexp, yojson, hash]","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    end in","counters":[]},{"line":"    Without_pending_coinbase_stack.equal","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      { t with pending_coinbase_stack = () }","counters":[]},{"line":"      { t' with pending_coinbase_stack = () }","counters":[]},{"line":"    && Pending_coinbase.Stack.connected ~first:t.pending_coinbase_stack","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"         ~second:t'.pending_coinbase_stack ()","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  type nonrec t =","counters":[]},{"line":"    (Ledger_hash.var, Pending_coinbase.Stack.var, Local_state.Checked.t) t","counters":[]},{"line":"","counters":[]},{"line":"  let to_input { ledger; pending_coinbase_stack; local_state } =","counters":[]},{"line":"    Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [| Frozen_ledger_hash.var_to_input ledger","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"       ; Pending_coinbase.Stack.var_to_input pending_coinbase_stack","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"       ; Local_state.Checked.to_input local_state","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      |]","counters":[]},{"line":"","counters":[]},{"line":"  let equal t1 t2 =","counters":[]},{"line":"    let ( ! ) eq x1 x2 = Impl.run_checked (eq x1 x2) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"    let f eq acc field = eq (Field.get field t1) (Field.get field t2) :: acc in","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    Fields.fold ~init:[] ~ledger:(f !Frozen_ledger_hash.equal_var)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      ~pending_coinbase_stack:(f !Pending_coinbase.Stack.equal_var)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ~local_state:(fun acc f ->","counters":[]},{"line":"        Local_state.Checked.equal' (Field.get f t1) (Field.get f t2) @ acc )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    |> Impl.Boolean.all","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}