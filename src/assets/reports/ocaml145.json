{"filename":"src/lib/mina_block/mina_block.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"module Body = Staged_ledger_diff.Body","counters":[]},{"line":"module Header = Header","counters":[]},{"line":"module Validation = Validation","counters":[]},{"line":"module Validated = Validated_block","counters":[]},{"line":"module Precomputed = Precomputed_block","counters":[]},{"line":"module Internal_transition = Internal_transition","counters":[]},{"line":"","counters":[]},{"line":"type fully_invalid_block = Validation.fully_invalid_with_block","counters":[]},{"line":"","counters":[]},{"line":"type initial_valid_block = Validation.initial_valid_with_block","counters":[]},{"line":"","counters":[]},{"line":"type almost_valid_block = Validation.almost_valid_with_block","counters":[]},{"line":"","counters":[]},{"line":"type fully_valid_block = Validation.fully_valid_with_block","counters":[]},{"line":"","counters":[]},{"line":"let genesis ~precomputed_values : Block.with_hash * Validation.fully_valid =","counters":[]},{"line":"  let genesis_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Precomputed_values.genesis_state_with_hashes precomputed_values","counters":[]},{"line":"  in","counters":[]},{"line":"  let protocol_state = With_hash.data genesis_state in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let block_with_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let body = Staged_ledger_diff.Body.create Staged_ledger_diff.empty_diff in","counters":[]},{"line":"    let header =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Header.create ~protocol_state ~protocol_state_proof:Proof.blockchain_dummy","counters":[]},{"line":"        ~delta_block_chain_proof:","counters":[]},{"line":"          (Protocol_state.previous_state_hash protocol_state, [])","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"        ()","counters":[]},{"line":"    in","counters":[]},{"line":"    let block = Block.create ~header ~body in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    With_hash.map genesis_state ~f:(Fn.const block)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let validation =","counters":[]},{"line":"    ( (`Time_received, Truth.True ())","counters":[]},{"line":"    , (`Genesis_state, Truth.True ())","counters":[]},{"line":"    , (`Proof, Truth.True ())","counters":[]},{"line":"    , ( `Delta_block_chain","counters":[]},{"line":"      , Truth.True","counters":[]},{"line":"          ( Non_empty_list.singleton","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          @@ Protocol_state.previous_state_hash protocol_state ) )","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"    , (`Frontier_dependencies, Truth.True ())","counters":[]},{"line":"    , (`Staged_ledger_diff, Truth.True ())","counters":[]},{"line":"    , (`Protocol_versions, Truth.True ()) )","counters":[]},{"line":"  in","counters":[]},{"line":"  (block_with_hash, validation)","counters":[]},{"line":"","counters":[]},{"line":"let handle_dropped_transition ?pipe_name ?valid_cb ~logger block =","counters":[]},{"line":"  [%log warn] \"Dropping state_hash $state_hash from $pipe transition pipe\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ (\"state_hash\", State_hash.(to_yojson (State_hashes.state_hash block)))","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      ; (\"pipe\", `String (Option.value pipe_name ~default:\"an unknown\"))","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"      ] ;","counters":[]},{"line":"  Option.iter","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:(Fn.flip Mina_net2.Validation_callback.fire_if_not_already_fired `Reject)","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    valid_cb","counters":[]},{"line":"","counters":[]},{"line":"let blockchain_length block =","counters":[]},{"line":"  block |> Block.header |> Header.protocol_state","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"  |> Mina_state.Protocol_state.consensus_state","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  |> Consensus.Data.Consensus_state.blockchain_length","counters":[]},{"line":"","counters":[]},{"line":"let consensus_state =","counters":[]},{"line":"  Fn.compose Protocol_state.consensus_state","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"    (Fn.compose Header.protocol_state Block.header)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"include Block","counters":[{"col_start":12,"col_end":12,"count":2}]}]}