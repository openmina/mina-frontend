{"filename":"src/lib/snark_params/snark_util.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Make (Impl : Snarky_backendless.Snark_intf.S) = struct","counters":[]},{"line":"  open Impl","counters":[]},{"line":"  open Let_syntax","counters":[]},{"line":"","counters":[]},{"line":"  let pack_int bs =","counters":[]},{"line":"    assert (List.length bs < 62) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    let rec go pt acc = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          acc","counters":[]},{"line":"      | b :: bs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if b then go (2 * pt) (pt + acc) bs else go (2 * pt) acc bs","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"    in","counters":[]},{"line":"    go 1 0 bs","counters":[]},{"line":"","counters":[]},{"line":"  let boolean_assert_lte (x : Boolean.var) (y : Boolean.var) =","counters":[]},{"line":"    (*","counters":[]},{"line":"      x <= y","counters":[]},{"line":"      y == 1 or x = 0","counters":[]},{"line":"      (y - 1) * x = 0","counters":[]},{"line":"    *)","counters":[]},{"line":"    assert_r1cs","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Field.Var.(sub (y :> Field.Var.t) (constant Field.one))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      (x :> Field.Var.t)","counters":[]},{"line":"      (Field.Var.constant Field.zero)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"  let assert_decreasing : Boolean.var list -> unit Checked.t =","counters":[]},{"line":"    let rec go prev (bs0 : Boolean.var list) =","counters":[]},{"line":"      match bs0 with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return ()","counters":[]},{"line":"      | b :: bs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%bind () = boolean_assert_lte b prev in","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          go b bs","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    function [] -> return () | b :: bs -> go b bs","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let nth_bit x ~n = (x lsr n) land 1 = 1","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let apply_mask mask bs = Checked.all (List.map2_exn mask bs ~f:Boolean.( && ))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"  let pack_unsafe (bs0 : Boolean.var list) =","counters":[]},{"line":"    let n = List.length bs0 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    assert (n <= Field.size_in_bits) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    let rec go acc two_to_the_i = function","counters":[]},{"line":"      | b :: bs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          go","counters":[]},{"line":"            (Field.Var.add acc (Field.Var.scale b two_to_the_i))","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"            (Field.add two_to_the_i two_to_the_i)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            bs","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          acc","counters":[]},{"line":"    in","counters":[]},{"line":"    go (Field.Var.constant Field.zero) Field.one (bs0 :> Field.Var.t list)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  type _ Snarky_backendless.Request.t +=","counters":[]},{"line":"    | N_ones : bool list Snarky_backendless.Request.t","counters":[]},{"line":"","counters":[]},{"line":"  let n_ones ~total_length n =","counters":[]},{"line":"    let%bind bs =","counters":[]},{"line":"      exists","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        (Typ.list ~length:total_length Boolean.typ)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        ~request:(As_prover.return N_ones)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ~compute:","counters":[]},{"line":"          As_prover.(","counters":[]},{"line":"            map (read_var n) ~f:(fun n ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"                List.init total_length ~f:(fun i ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                    Bigint.(","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      compare (of_field (Field.of_int i)) (of_field n) < 0) ) ))","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      Field.Checked.Assert.equal","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        (Field.Var.sum (bs :> Field.Var.t list))","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        (* This can't overflow since the field is huge *)","counters":[]},{"line":"        n","counters":[]},{"line":"    and () = assert_decreasing bs in","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    bs","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let assert_num_bits_upper_bound bs u =","counters":[]},{"line":"    let total_length = List.length bs in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    assert (total_length < Field.size_in_bits) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    let%bind mask = n_ones ~total_length u in","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    let%bind masked = apply_mask mask bs in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    with_label __LOC__ (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Field.Checked.Assert.equal (pack_unsafe masked) (pack_unsafe bs) )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let num_bits_int =","counters":[]},{"line":"    let rec go acc n = if n = 0 then acc else go (1 + acc) (n lsr 1) in","counters":[{"col_start":23,"col_end":23,"count":9},{"col_start":37,"col_end":37,"count":1},{"col_start":46,"col_end":46,"count":8}]},{"line":"    go 0","counters":[{"col_start":5,"col_end":5,"count":1}]},{"line":"","counters":[]},{"line":"  let size_in_bits_size_in_bits = num_bits_int Field.size_in_bits","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"  type _ Snarky_backendless.Request.t +=","counters":[]},{"line":"    | Num_bits_upper_bound : Field.t Snarky_backendless.Request.t","counters":[]},{"line":"","counters":[]},{"line":"  let num_bits_upper_bound_unchecked x =","counters":[]},{"line":"    let num_bits =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match","counters":[]},{"line":"        List.find_mapi","counters":[]},{"line":"          (List.rev (Field.unpack x))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          ~f:(fun i x -> if x then Some i else None)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Some leading_zeroes ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Field.size_in_bits - leading_zeroes","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          0","counters":[]},{"line":"    in","counters":[]},{"line":"    num_bits","counters":[]},{"line":"","counters":[]},{"line":"  (* Someday: this could definitely be made more efficient *)","counters":[]},{"line":"  let num_bits_upper_bound_unpacked : Boolean.var list -> Field.Var.t Checked.t","counters":[]},{"line":"      =","counters":[]},{"line":"   fun x_unpacked ->","counters":[]},{"line":"    let%bind res =","counters":[]},{"line":"      exists Typ.field","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        ~request:(As_prover.return Num_bits_upper_bound)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ~compute:","counters":[]},{"line":"          As_prover.(","counters":[]},{"line":"            map","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              (read_var (Field.Var.project x_unpacked))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"              ~f:(fun x -> Field.of_int (num_bits_upper_bound_unchecked x)))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%map () = assert_num_bits_upper_bound x_unpacked res in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    res","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let num_bits_upper_bound ~max_length (x : Field.Var.t) : Field.Var.t Checked.t","counters":[]},{"line":"      =","counters":[]},{"line":"    Field.Checked.unpack x ~length:max_length >>= num_bits_upper_bound_unpacked","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_module \"Snark_util\" =","counters":[]},{"line":"    ( module struct","counters":[]},{"line":"      let () = Random.init 123456789","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      let random_bitstring length =","counters":[]},{"line":"        List.init length ~f:(fun _ -> Random.bool ())","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"      let random_n_bit_field_elt n = Field.project (random_bitstring n)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"      let%test_unit \"compare\" =","counters":[]},{"line":"        let bit_length = Field.size_in_bits - 2 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let random () = random_n_bit_field_elt bit_length in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        let test () =","counters":[]},{"line":"          let x = random () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let y = random () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let less, less_or_equal =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            run_and_check","counters":[]},{"line":"              (let%map { less; less_or_equal } =","counters":[]},{"line":"                 Field.Checked.compare ~bit_length (Field.Var.constant x)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"                   (Field.Var.constant y)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"               in","counters":[]},{"line":"               As_prover.(","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 map2 (read Boolean.typ less)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                   (read Boolean.typ less_or_equal)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                   ~f:Tuple2.create) )","counters":[]},{"line":"            |> Or_error.ok_exn","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          in","counters":[]},{"line":"          let r = Bigint.(compare (of_field x) (of_field y)) in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          assert (Bool.equal less (r < 0)) ;","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          assert (Bool.equal less_or_equal (r <= 0))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        in","counters":[]},{"line":"        for _i = 0 to 100 do","counters":[]},{"line":"          test ()","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"        done","counters":[]},{"line":"","counters":[]},{"line":"      let%test_unit \"boolean_assert_lte\" =","counters":[]},{"line":"        Or_error.ok_exn","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (check","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"             (Checked.all_unit","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                [ boolean_assert_lte Boolean.false_ Boolean.false_","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                ; boolean_assert_lte Boolean.false_ Boolean.true_","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                ; boolean_assert_lte Boolean.true_ Boolean.true_","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                ] ) ) ;","counters":[]},{"line":"        assert (","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          Or_error.is_error","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"            (check (boolean_assert_lte Boolean.true_ Boolean.false_)) )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"      let%test_unit \"assert_decreasing\" =","counters":[]},{"line":"        let decreasing bs =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          check (assert_decreasing (List.map ~f:Boolean.var_of_value bs))","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        in","counters":[]},{"line":"        Or_error.ok_exn (decreasing [ true; true; true; false ]) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        Or_error.ok_exn (decreasing [ true; true; false; false ]) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        assert (Or_error.is_error (decreasing [ true; true; false; true ]))","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"      let%test_unit \"n_ones\" =","counters":[]},{"line":"        let total_length = 6 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test n =","counters":[]},{"line":"          let t () =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            n_ones ~total_length (Field.Var.constant (Field.of_int n))","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"          in","counters":[]},{"line":"          let handle_with (resp : bool list) =","counters":[]},{"line":"            handle t (fun (With { request; respond }) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                match request with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | N_ones ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    respond (Provide resp)","counters":[]},{"line":"                | _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    unhandled )","counters":[]},{"line":"          in","counters":[]},{"line":"          let correct = Int.pow 2 n - 1 in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          let to_bits k =","counters":[]},{"line":"            List.init total_length ~f:(fun i -> (k lsr i) land 1 = 1)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          in","counters":[]},{"line":"          for i = 0 to Int.pow 2 total_length - 1 do","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            if i = correct then","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Or_error.ok_exn (check (handle_with (to_bits i)))","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"            else assert (Or_error.is_error (check (handle_with (to_bits i))))","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"          done","counters":[]},{"line":"        in","counters":[]},{"line":"        for n = 0 to total_length do","counters":[]},{"line":"          test n","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"        done","counters":[]},{"line":"","counters":[]},{"line":"      let%test_unit \"num_bits_int\" =","counters":[]},{"line":"        assert (num_bits_int 1 = 1) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        assert (num_bits_int 5 = 3) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        assert (num_bits_int 17 = 5)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"      let%test_unit \"num_bits_upper_bound_unchecked\" =","counters":[]},{"line":"        let f k bs =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          assert (num_bits_upper_bound_unchecked (Field.project bs) = k)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"        in","counters":[]},{"line":"        f 3 [ true; true; true; false; false ] ;","counters":[]},{"line":"        f 4 [ true; true; true; true; false ] ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        f 3 [ true; false; true; false; false ] ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        f 5 [ true; false; true; false; true ]","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"      (*let%test_unit \"num_bits_upper_bound\" =","counters":[]},{"line":"        let max_length = Field.size_in_bits - 1 in","counters":[]},{"line":"        let test x =","counters":[]},{"line":"          let handle_with resp =","counters":[]},{"line":"            handle","counters":[]},{"line":"              (num_bits_upper_bound ~max_length (Field.Var.constant x))","counters":[]},{"line":"              (fun (With {request; respond}) ->","counters":[]},{"line":"                match request with","counters":[]},{"line":"                | Num_bits_upper_bound -> respond (Field.of_int resp)","counters":[]},{"line":"                | _ -> unhandled)","counters":[]},{"line":"          in","counters":[]},{"line":"          let true_answer = num_bits_upper_bound_unchecked x in","counters":[]},{"line":"          for i = 0 to true_answer - 1 do","counters":[]},{"line":"            if check (handle_with i) ()","counters":[]},{"line":"            then begin","counters":[]},{"line":"              let n = Bigint.of_field x in","counters":[]},{"line":"              failwithf !\"Shouldn't have passed: x=%s, i=%d\"","counters":[]},{"line":"                (String.init max_length ~f:(fun j -> if Bigint.test_bit n j then '1' else '0'))","counters":[]},{"line":"                i ();","counters":[]},{"line":"            end;","counters":[]},{"line":"          done;","counters":[]},{"line":"          assert (check (handle_with true_answer) ())","counters":[]},{"line":"        in","counters":[]},{"line":"        test (random_n_bit_field_elt max_length)*)","counters":[]},{"line":"    end )","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}