{"filename":"src/lib/staged_ledger/diff_creation_log.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"type count_and_fee = int * Currency.Fee.t [@@deriving sexp, to_yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"module Fee_Summable = struct","counters":[]},{"line":"  open Currency","counters":[]},{"line":"","counters":[]},{"line":"  type t = Fee.t","counters":[]},{"line":"","counters":[]},{"line":"  let zero = Fee.zero","counters":[]},{"line":"","counters":[]},{"line":"  let ( + ) (x : Fee.t) (x' : Fee.t) = Fee.add x x' |> Option.value_exn","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Summary = struct","counters":[]},{"line":"  type resources =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { completed_work : count_and_fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; commands : count_and_fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; coinbase_work_fees : Currency.Fee.t Staged_ledger_diff.At_most_two.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, to_yojson, lens]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  type command_constraints =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { insufficient_work : int; insufficient_space : int }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"  [@@deriving sexp, to_yojson, lens]","counters":[]},{"line":"","counters":[]},{"line":"  type completed_work_constraints =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { insufficient_fees : int; extra_work : int }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  [@@deriving sexp, to_yojson, lens]","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { partition : [ `First | `Second ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    ; start_resources : resources","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; available_slots : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; required_work_count : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    ; discarded_commands : command_constraints","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; discarded_completed_work : completed_work_constraints","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    ; end_resources : resources","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, to_yojson, lens]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  let coinbase_fees","counters":[]},{"line":"      (coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t) =","counters":[]},{"line":"    match coinbase with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | One (Some x) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Staged_ledger_diff.At_most_two.One (Some x.fee)","counters":[]},{"line":"    | Two (Some (x, None)) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Two (Some (x.fee, None))","counters":[]},{"line":"    | Two (Some (x, Some x')) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Two (Some (x.fee, Some x'.fee))","counters":[]},{"line":"    | Zero ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Zero","counters":[]},{"line":"    | One None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        One None","counters":[]},{"line":"    | Two None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Two None","counters":[]},{"line":"","counters":[]},{"line":"  let init_resources","counters":[]},{"line":"      ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"      ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"      ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t) =","counters":[]},{"line":"    let completed_work =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Sequence.length completed_work","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      , Sequence.sum","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          (module Fee_Summable)","counters":[]},{"line":"          completed_work ~f:Transaction_snark_work.fee )","counters":[]},{"line":"    in","counters":[]},{"line":"    let commands =","counters":[]},{"line":"      ( Sequence.length commands","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      , Sequence.sum","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          (module Fee_Summable)","counters":[]},{"line":"          commands","counters":[]},{"line":"          ~f:(fun cmd -> User_command.fee (User_command.forget_check cmd.data))","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"      )","counters":[]},{"line":"    in","counters":[]},{"line":"    let coinbase_work_fees = coinbase_fees coinbase in","counters":[]},{"line":"    { completed_work; commands; coinbase_work_fees }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let init ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"      ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"      ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t)","counters":[]},{"line":"      ~partition ~available_slots ~required_work_count =","counters":[]},{"line":"    let start_resources = init_resources ~completed_work ~commands ~coinbase in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let discarded_commands =","counters":[]},{"line":"      { insufficient_work = 0; insufficient_space = 0 }","counters":[]},{"line":"    in","counters":[]},{"line":"    let discarded_completed_work = { insufficient_fees = 0; extra_work = 0 } in","counters":[]},{"line":"    let end_resources =","counters":[]},{"line":"      { completed_work = (0, Currency.Fee.zero)","counters":[]},{"line":"      ; commands = (0, Currency.Fee.zero)","counters":[]},{"line":"      ; coinbase_work_fees = Staged_ledger_diff.At_most_two.Zero","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    { partition","counters":[]},{"line":"    ; available_slots","counters":[]},{"line":"    ; required_work_count","counters":[]},{"line":"    ; start_resources","counters":[]},{"line":"    ; discarded_completed_work","counters":[]},{"line":"    ; discarded_commands","counters":[]},{"line":"    ; end_resources","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let end_log t ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"      ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"      ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t) =","counters":[]},{"line":"    end_resources.set (init_resources ~completed_work ~commands ~coinbase) t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let incr (top : ('a, 'b) Lens.t) (nested : ('b, int) Lens.t) (t : 'a) =","counters":[]},{"line":"    let nested_field = top.get t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    top.set (nested.set (nested.get nested_field + 1) nested_field) t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let discard_command (why : [> `No_work | `No_space ]) t =","counters":[]},{"line":"    match why with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `No_work ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        incr discarded_commands command_constraints_insufficient_work t","counters":[]},{"line":"    | `No_space ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        incr discarded_commands command_constraints_insufficient_space t","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        t","counters":[]},{"line":"","counters":[]},{"line":"  let discard_completed_work (why : [> `Insufficient_fees | `Extra_work ]) t =","counters":[]},{"line":"    match why with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `Insufficient_fees ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        incr discarded_completed_work","counters":[]},{"line":"          completed_work_constraints_insufficient_fees t","counters":[]},{"line":"    | `Extra_work ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        incr discarded_completed_work completed_work_constraints_extra_work t","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Detail = struct","counters":[]},{"line":"  type line =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { reason :","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        [ `No_space","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | `No_work","counters":[]},{"line":"        | `Insufficient_fees","counters":[]},{"line":"        | `Extra_work","counters":[]},{"line":"        | `Init","counters":[]},{"line":"        | `End ]","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    ; commands : count_and_fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; completed_work : count_and_fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; coinbase : Currency.Fee.t Staged_ledger_diff.At_most_two.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, to_yojson, lens]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  type t = line list [@@deriving sexp, to_yojson]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  let init ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"      ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"      ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t) =","counters":[]},{"line":"    let init = Summary.init_resources ~completed_work ~commands ~coinbase in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [ { reason = `Init","counters":[]},{"line":"      ; commands = init.commands","counters":[]},{"line":"      ; completed_work = init.completed_work","counters":[]},{"line":"      ; coinbase = init.coinbase_work_fees","counters":[]},{"line":"      }","counters":[]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"  let discard_command (why : [> `No_work | `No_space ]) command = function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Log not initialized\"","counters":[]},{"line":"    | x :: xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let new_line =","counters":[]},{"line":"          { x with","counters":[]},{"line":"            reason = why","counters":[]},{"line":"          ; commands =","counters":[]},{"line":"              ( fst x.commands - 1","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              , Currency.Fee.sub (snd x.commands) (User_command.fee command)","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"                |> Option.value_exn )","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        new_line :: x :: xs","counters":[]},{"line":"","counters":[]},{"line":"  let discard_completed_work (why : [> `Insufficient_fees | `Extra_work ])","counters":[]},{"line":"      completed_work = function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Log not initialized\"","counters":[]},{"line":"    | x :: xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let new_line =","counters":[]},{"line":"          { x with","counters":[]},{"line":"            reason = why","counters":[]},{"line":"          ; completed_work =","counters":[]},{"line":"              ( fst x.completed_work - 1","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              , Currency.Fee.sub (snd x.completed_work)","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"                  (Transaction_snark_work.fee completed_work)","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"                |> Option.value_exn )","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        new_line :: x :: xs","counters":[]},{"line":"","counters":[]},{"line":"  let end_log coinbase = function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Log not initialized\"","counters":[]},{"line":"    | x :: xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (*Because coinbase could be updated ooutside of the check_constraints_and_update function*)","counters":[]},{"line":"        { x with reason = `End; coinbase = Summary.coinbase_fees coinbase }","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"        :: x :: xs","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t = Summary.t * Detail.t [@@deriving sexp, to_yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"type log_list = t list [@@deriving sexp, to_yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"type summary_list = Summary.t list [@@deriving sexp, to_yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"type detail_list = Detail.t list [@@deriving sexp, to_yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"let init ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"    ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"    ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t)","counters":[]},{"line":"    ~partition ~available_slots ~required_work_count =","counters":[]},{"line":"  let summary =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Summary.init ~completed_work ~commands ~coinbase ~partition ~available_slots","counters":[]},{"line":"      ~required_work_count","counters":[]},{"line":"  in","counters":[]},{"line":"  let detailed = Detail.init ~completed_work ~commands ~coinbase in","counters":[]},{"line":"  (summary, detailed)","counters":[]},{"line":"","counters":[]},{"line":"let discard_command why command t =","counters":[]},{"line":"  let detailed = Detail.discard_command why command (snd t) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  let summary = Summary.discard_command why (fst t) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"  (summary, detailed)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let discard_completed_work why completed_work t =","counters":[]},{"line":"  let detailed = Detail.discard_completed_work why completed_work (snd t) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"  let summary = Summary.discard_completed_work why (fst t) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"  (summary, detailed)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let end_log ~(completed_work : Transaction_snark_work.Checked.t Sequence.t)","counters":[]},{"line":"    ~(commands : User_command.Valid.t With_status.t Sequence.t)","counters":[]},{"line":"    ~(coinbase : Coinbase.Fee_transfer.t Staged_ledger_diff.At_most_two.t) t =","counters":[]},{"line":"  let summary = Summary.end_log (fst t) ~completed_work ~commands ~coinbase in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  let detailed = Detail.end_log coinbase (snd t) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  (summary, detailed)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":20,"col_end":20,"count":1}]}]}