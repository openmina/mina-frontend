{"filename":"src/lib/transition_frontier/extensions/ledger_table.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"","counters":[]},{"line":"(* WARNING: don't use this code until @nholland has landed a PR that","counters":[]},{"line":"   synchronize the read/write of transition frontier","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  (* a pair of hash tables","counters":[]},{"line":"     the first maps ledger hashes to ledgers","counters":[]},{"line":"     the second maps ledger hashes to reference counts","counters":[]},{"line":"  *)","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { ledgers : Mina_ledger.Ledger.t Ledger_hash.Table.t","counters":[]},{"line":"    ; counts : int Ledger_hash.Table.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  type view = unit","counters":[]},{"line":"","counters":[]},{"line":"  let add_entry t ~ledger_hash ~ledger =","counters":[]},{"line":"    (* add ledger, increment ref count *)","counters":[]},{"line":"    ignore","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Hashtbl.add t.ledgers ~key:ledger_hash ~data:ledger","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        : [ `Duplicate | `Ok ] ) ;","counters":[]},{"line":"    ignore (Hashtbl.incr t.counts ledger_hash : view)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let remove_entry t ~ledger_hash =","counters":[]},{"line":"    (* decrement ref count, remove ledger if count is 0 *)","counters":[]},{"line":"    Hashtbl.decr t.counts ledger_hash ~remove_if_zero:true ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    if not (Hashtbl.mem t.counts ledger_hash) then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"      Hashtbl.remove t.ledgers ledger_hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"  let create ~logger:_ frontier =","counters":[]},{"line":"    (* populate ledger table from breadcrumbs *)","counters":[]},{"line":"    let t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { ledgers = Ledger_hash.Table.create ()","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      ; counts = Ledger_hash.Table.create ()","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let breadcrumbs = Full_frontier.all_breadcrumbs frontier in","counters":[]},{"line":"    List.iter breadcrumbs ~f:(fun bc ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let ledger = Staged_ledger.ledger @@ Breadcrumb.staged_ledger bc in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        let ledger_hash = Mina_ledger.Ledger.merkle_root ledger in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        add_entry t ~ledger_hash ~ledger ) ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    (t, ())","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let lookup t ledger_hash = Ledger_hash.Table.find t.ledgers ledger_hash","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let handle_diffs t _frontier diffs_with_mutants =","counters":[]},{"line":"    let open Diff.Full.With_mutant in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.iter diffs_with_mutants ~f:(function","counters":[]},{"line":"      | E (New_node (Full breadcrumb), _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let ledger =","counters":[]},{"line":"            Staged_ledger.ledger @@ Breadcrumb.staged_ledger breadcrumb","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"          in","counters":[]},{"line":"          let ledger_hash = Mina_ledger.Ledger.merkle_root ledger in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          add_entry t ~ledger_hash ~ledger","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | E (Root_transitioned transition, _) -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match transition.garbage with","counters":[]},{"line":"          | Full nodes ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let open Mina_state in","counters":[]},{"line":"              List.iter nodes ~f:(fun node ->","counters":[]},{"line":"                  let blockchain_state =","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Protocol_state.blockchain_state","counters":[]},{"line":"                    @@ Mina_block.(","counters":[]},{"line":"                         Header.protocol_state","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                         @@ Validated.header node.transition)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  let staged_ledger =","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Blockchain_state.staged_ledger_hash blockchain_state","counters":[]},{"line":"                  in","counters":[]},{"line":"                  let ledger_hash =","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Staged_ledger_hash.ledger_hash staged_ledger","counters":[]},{"line":"                  in","counters":[]},{"line":"                  remove_entry t ~ledger_hash ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      | E (Best_tip_changed _, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          () ) ;","counters":[]},{"line":"    None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Broadcasted = Functor.Make_broadcasted (T)","counters":[]},{"line":"include T","counters":[{"col_start":8,"col_end":8,"count":2}]}]}