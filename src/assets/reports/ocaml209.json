{"filename":"src/lib/key_cache/sync/key_cache_sync.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Key_cache","counters":[]},{"line":"include T (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"let on_disk to_string read write prefix =","counters":[]},{"line":"  let path k = prefix ^/ to_string k in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  let read k =","counters":[]},{"line":"    let p = path k in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match Sys.file_exists p with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `No | `Unknown ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"        Or_error.errorf \"file %s does not exist or cannot be read\" p","counters":[]},{"line":"    | `Yes ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        read k ~path:p","counters":[]},{"line":"  in","counters":[]},{"line":"  let write key v =","counters":[]},{"line":"    match Sys.is_directory prefix with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `No | `Unknown ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"        Or_error.errorf \"directory %s does not exist or cannot be read\" prefix","counters":[]},{"line":"    | `Yes ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        write key v (path key)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  in","counters":[]},{"line":"  { read; write }","counters":[]},{"line":"","counters":[]},{"line":"let s3 to_string read ~bucket_prefix ~install_path =","counters":[]},{"line":"  let read k =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let logger = Logger.create () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let label = to_string k in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let uri_string = bucket_prefix ^/ label in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let file_path = install_path ^/ label in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [%log trace] \"Downloading key to key cache\"","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"url\", `String uri_string); (\"local_file_path\", `String file_path) ] ;","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Result.map_error","counters":[]},{"line":"        (ksprintf Unix.system","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"           \"curl --fail --silent --show-error -o \\\"%s\\\" \\\"%s\\\"\" file_path","counters":[]},{"line":"           uri_string ) ~f:(function","counters":[]},{"line":"        | `Exit_non_zero _ as e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error.of_string (Unix.Exit.to_string_hum (Error e))","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"        | `Signal s ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error.createf \"died after receiving %s (signal number %d)\"","counters":[]},{"line":"              (Signal.to_string s) (Signal.to_system_int s) )","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"      |> Result.map_error ~f:(fun err ->","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"             [%log trace] \"Could not download key to key cache\"","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"               ~metadata:","counters":[]},{"line":"                 [ (\"url\", `String uri_string)","counters":[]},{"line":"                 ; (\"local_file_path\", `String file_path)","counters":[]},{"line":"                 ] ;","counters":[]},{"line":"             err )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    in","counters":[]},{"line":"    [%log trace] \"Downloaded key to key cache\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"url\", `String uri_string); (\"local_file_path\", `String file_path) ] ;","counters":[]},{"line":"    read k ~path:file_path","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let write _ _ = Or_error.return () in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  { read; write }","counters":[]},{"line":"","counters":[]},{"line":"module Disk_storable = struct","counters":[]},{"line":"  include Disk_storable (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  let of_binable to_string m =","counters":[]},{"line":"    (* TODO: Make more efficient *)","counters":[]},{"line":"    let read _ ~path =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Or_error.try_with (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Binable.of_string m (In_channel.read_all path) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"    in","counters":[]},{"line":"    let write _k t path =","counters":[]},{"line":"      Or_error.try_with (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Out_channel.write_all path ~data:(Binable.to_string m t) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"    in","counters":[]},{"line":"    { to_string; read; write }","counters":[]},{"line":"","counters":[]},{"line":"  let simple to_string read write =","counters":[]},{"line":"    { to_string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; read = (fun k ~path -> read k ~path)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; write = (fun k v s -> write k v s)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let read spec { Disk_storable.to_string; read = r; write = w } k =","counters":[]},{"line":"  Or_error.find_map_ok spec ~f:(fun s ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let res, cache_hit =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match s with","counters":[]},{"line":"        | Spec.On_disk { directory; should_write } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ( (on_disk to_string r w directory).read k","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"            , if should_write then `Locally_generated else `Cache_hit )","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        | S3 _ when not (may_download ()) ->","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"            (Or_error.errorf \"Downloading from S3 is disabled\", `Cache_hit)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        | S3 { bucket_prefix; install_path } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Unix.mkdir_p install_path ;","counters":[]},{"line":"            ((s3 to_string r ~bucket_prefix ~install_path).read k, `Cache_hit)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%map.Or_error res = res in","counters":[]},{"line":"      (res, cache_hit) )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let write spec { Disk_storable.to_string; read = r; write = w } k v =","counters":[]},{"line":"  let errs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.filter_map spec ~f:(fun s ->","counters":[]},{"line":"        let res =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match s with","counters":[]},{"line":"          | Spec.On_disk { directory; should_write } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              if should_write then (","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                Unix.mkdir_p directory ;","counters":[]},{"line":"                (on_disk to_string r w directory).write k v )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"              else Or_error.return ()","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          | S3 { bucket_prefix = _; install_path = _ } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Or_error.return ()","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        in","counters":[]},{"line":"        match res with Error e -> Some e | Ok () -> None )","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  match errs with [] -> Ok () | errs -> Error (Error.of_list errs)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":59,"col_end":59,"count":0}]}]}