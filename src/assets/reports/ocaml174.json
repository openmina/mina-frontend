{"filename":"src/lib/crypto/kimchi_bindings/stubs/pasta_bindings.ml","lines":[{"line":"(* This file is generated automatically with ocaml_gen. *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"module BigInt256 = struct","counters":[]},{"line":"  type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"  external of_numeral : string -> int -> int -> t = \"caml_bigint_256_of_numeral\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_decimal_string : string -> t = \"caml_bigint_256_of_decimal_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external num_limbs : unit -> int = \"caml_bigint_256_num_limbs\"","counters":[]},{"line":"","counters":[]},{"line":"  external bytes_per_limb : unit -> int = \"caml_bigint_256_bytes_per_limb\"","counters":[]},{"line":"","counters":[]},{"line":"  external div : t -> t -> t = \"caml_bigint_256_div\"","counters":[]},{"line":"","counters":[]},{"line":"  external compare : t -> t -> int = \"caml_bigint_256_compare\"","counters":[]},{"line":"","counters":[]},{"line":"  external print : t -> unit = \"caml_bigint_256_print\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_string : t -> string = \"caml_bigint_256_to_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external test_bit : t -> int -> bool = \"caml_bigint_256_test_bit\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_bytes : t -> bytes = \"caml_bigint_256_to_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_bytes : bytes -> t = \"caml_bigint_256_of_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external deep_copy : t -> t = \"caml_bigint_256_deep_copy\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Fp = struct","counters":[]},{"line":"  type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"  external size_in_bits : unit -> int = \"caml_pasta_fp_size_in_bits\"","counters":[]},{"line":"","counters":[]},{"line":"  external size : unit -> BigInt256.t = \"caml_pasta_fp_size\"","counters":[]},{"line":"","counters":[]},{"line":"  external add : t -> t -> t = \"caml_pasta_fp_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external sub : t -> t -> t = \"caml_pasta_fp_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external negate : t -> t = \"caml_pasta_fp_negate\"","counters":[]},{"line":"","counters":[]},{"line":"  external mul : t -> t -> t = \"caml_pasta_fp_mul\"","counters":[]},{"line":"","counters":[]},{"line":"  external div : t -> t -> t = \"caml_pasta_fp_div\"","counters":[]},{"line":"","counters":[]},{"line":"  external inv : t -> t option = \"caml_pasta_fp_inv\"","counters":[]},{"line":"","counters":[]},{"line":"  external square : t -> t = \"caml_pasta_fp_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external is_square : t -> bool = \"caml_pasta_fp_is_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external sqrt : t -> t option = \"caml_pasta_fp_sqrt\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_int : int -> t = \"caml_pasta_fp_of_int\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_string : t -> string = \"caml_pasta_fp_to_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_string : string -> t = \"caml_pasta_fp_of_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external print : t -> unit = \"caml_pasta_fp_print\"","counters":[]},{"line":"","counters":[]},{"line":"  external copy : t -> t -> unit = \"caml_pasta_fp_copy\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_add : t -> t -> unit = \"caml_pasta_fp_mut_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_sub : t -> t -> unit = \"caml_pasta_fp_mut_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_mul : t -> t -> unit = \"caml_pasta_fp_mut_mul\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_square : t -> unit = \"caml_pasta_fp_mut_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external compare : t -> t -> int = \"caml_pasta_fp_compare\"","counters":[]},{"line":"","counters":[]},{"line":"  external equal : t -> t -> bool = \"caml_pasta_fp_equal\"","counters":[]},{"line":"","counters":[]},{"line":"  external random : unit -> t = \"caml_pasta_fp_random\"","counters":[]},{"line":"","counters":[]},{"line":"  external rng : int -> t = \"caml_pasta_fp_rng\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_bigint : t -> BigInt256.t = \"caml_pasta_fp_to_bigint\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_bigint : BigInt256.t -> t = \"caml_pasta_fp_of_bigint\"","counters":[]},{"line":"","counters":[]},{"line":"  external two_adic_root_of_unity : unit -> t","counters":[]},{"line":"    = \"caml_pasta_fp_two_adic_root_of_unity\"","counters":[]},{"line":"","counters":[]},{"line":"  external domain_generator : int -> t = \"caml_pasta_fp_domain_generator\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_bytes : t -> bytes = \"caml_pasta_fp_to_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_bytes : bytes -> t = \"caml_pasta_fp_of_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external deep_copy : t -> t = \"caml_pasta_fp_deep_copy\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Fq = struct","counters":[]},{"line":"  type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"  external size_in_bits : unit -> int = \"caml_pasta_fq_size_in_bits\"","counters":[]},{"line":"","counters":[]},{"line":"  external size : unit -> BigInt256.t = \"caml_pasta_fq_size\"","counters":[]},{"line":"","counters":[]},{"line":"  external add : t -> t -> t = \"caml_pasta_fq_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external sub : t -> t -> t = \"caml_pasta_fq_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external negate : t -> t = \"caml_pasta_fq_negate\"","counters":[]},{"line":"","counters":[]},{"line":"  external mul : t -> t -> t = \"caml_pasta_fq_mul\"","counters":[]},{"line":"","counters":[]},{"line":"  external div : t -> t -> t = \"caml_pasta_fq_div\"","counters":[]},{"line":"","counters":[]},{"line":"  external inv : t -> t option = \"caml_pasta_fq_inv\"","counters":[]},{"line":"","counters":[]},{"line":"  external square : t -> t = \"caml_pasta_fq_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external is_square : t -> bool = \"caml_pasta_fq_is_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external sqrt : t -> t option = \"caml_pasta_fq_sqrt\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_int : int -> t = \"caml_pasta_fq_of_int\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_string : t -> string = \"caml_pasta_fq_to_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_string : string -> t = \"caml_pasta_fq_of_string\"","counters":[]},{"line":"","counters":[]},{"line":"  external print : t -> unit = \"caml_pasta_fq_print\"","counters":[]},{"line":"","counters":[]},{"line":"  external copy : t -> t -> unit = \"caml_pasta_fq_copy\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_add : t -> t -> unit = \"caml_pasta_fq_mut_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_sub : t -> t -> unit = \"caml_pasta_fq_mut_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_mul : t -> t -> unit = \"caml_pasta_fq_mut_mul\"","counters":[]},{"line":"","counters":[]},{"line":"  external mut_square : t -> unit = \"caml_pasta_fq_mut_square\"","counters":[]},{"line":"","counters":[]},{"line":"  external compare : t -> t -> int = \"caml_pasta_fq_compare\"","counters":[]},{"line":"","counters":[]},{"line":"  external equal : t -> t -> bool = \"caml_pasta_fq_equal\"","counters":[]},{"line":"","counters":[]},{"line":"  external random : unit -> t = \"caml_pasta_fq_random\"","counters":[]},{"line":"","counters":[]},{"line":"  external rng : int -> t = \"caml_pasta_fq_rng\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_bigint : t -> BigInt256.t = \"caml_pasta_fq_to_bigint\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_bigint : BigInt256.t -> t = \"caml_pasta_fq_of_bigint\"","counters":[]},{"line":"","counters":[]},{"line":"  external two_adic_root_of_unity : unit -> t","counters":[]},{"line":"    = \"caml_pasta_fq_two_adic_root_of_unity\"","counters":[]},{"line":"","counters":[]},{"line":"  external domain_generator : int -> t = \"caml_pasta_fq_domain_generator\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_bytes : t -> bytes = \"caml_pasta_fq_to_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_bytes : bytes -> t = \"caml_pasta_fq_of_bytes\"","counters":[]},{"line":"","counters":[]},{"line":"  external deep_copy : t -> t = \"caml_pasta_fq_deep_copy\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Vesta = struct","counters":[]},{"line":"  module BaseField = struct","counters":[]},{"line":"    type nonrec t = Fq.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module ScalarField = struct","counters":[]},{"line":"    type nonrec t = Fp.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Affine = struct","counters":[]},{"line":"    type nonrec t = Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"  external one : unit -> t = \"caml_vesta_one\"","counters":[]},{"line":"","counters":[]},{"line":"  external add : t -> t -> t = \"caml_vesta_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external sub : t -> t -> t = \"caml_vesta_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external negate : t -> t = \"caml_vesta_negate\"","counters":[]},{"line":"","counters":[]},{"line":"  external double : t -> t = \"caml_vesta_double\"","counters":[]},{"line":"","counters":[]},{"line":"  external scale : t -> Fp.t -> t = \"caml_vesta_scale\"","counters":[]},{"line":"","counters":[]},{"line":"  external random : unit -> t = \"caml_vesta_random\"","counters":[]},{"line":"","counters":[]},{"line":"  external rng : int -> t = \"caml_vesta_rng\"","counters":[]},{"line":"","counters":[]},{"line":"  external endo_base : unit -> Fq.t = \"caml_vesta_endo_base\"","counters":[]},{"line":"","counters":[]},{"line":"  external endo_scalar : unit -> Fp.t = \"caml_vesta_endo_scalar\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_affine : t -> Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"    = \"caml_vesta_to_affine\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_affine : Fq.t Kimchi_types.or_infinity -> t","counters":[]},{"line":"    = \"caml_vesta_of_affine\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_affine_coordinates : Fq.t -> Fq.t -> t","counters":[]},{"line":"    = \"caml_vesta_of_affine_coordinates\"","counters":[]},{"line":"","counters":[]},{"line":"  external deep_copy :","counters":[]},{"line":"    Fq.t Kimchi_types.or_infinity -> Fq.t Kimchi_types.or_infinity","counters":[]},{"line":"    = \"caml_vesta_affine_deep_copy\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Pallas = struct","counters":[]},{"line":"  module BaseField = struct","counters":[]},{"line":"    type nonrec t = Fp.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module ScalarField = struct","counters":[]},{"line":"    type nonrec t = Fq.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Affine = struct","counters":[]},{"line":"    type nonrec t = Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type nonrec t","counters":[]},{"line":"","counters":[]},{"line":"  external one : unit -> t = \"caml_pallas_one\"","counters":[]},{"line":"","counters":[]},{"line":"  external add : t -> t -> t = \"caml_pallas_add\"","counters":[]},{"line":"","counters":[]},{"line":"  external sub : t -> t -> t = \"caml_pallas_sub\"","counters":[]},{"line":"","counters":[]},{"line":"  external negate : t -> t = \"caml_pallas_negate\"","counters":[]},{"line":"","counters":[]},{"line":"  external double : t -> t = \"caml_pallas_double\"","counters":[]},{"line":"","counters":[]},{"line":"  external scale : t -> Fq.t -> t = \"caml_pallas_scale\"","counters":[]},{"line":"","counters":[]},{"line":"  external random : unit -> t = \"caml_pallas_random\"","counters":[]},{"line":"","counters":[]},{"line":"  external rng : int -> t = \"caml_pallas_rng\"","counters":[]},{"line":"","counters":[]},{"line":"  external endo_base : unit -> Fp.t = \"caml_pallas_endo_base\"","counters":[]},{"line":"","counters":[]},{"line":"  external endo_scalar : unit -> Fq.t = \"caml_pallas_endo_scalar\"","counters":[]},{"line":"","counters":[]},{"line":"  external to_affine : t -> Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"    = \"caml_pallas_to_affine\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_affine : Fp.t Kimchi_types.or_infinity -> t","counters":[]},{"line":"    = \"caml_pallas_of_affine\"","counters":[]},{"line":"","counters":[]},{"line":"  external of_affine_coordinates : Fp.t -> Fp.t -> t","counters":[]},{"line":"    = \"caml_pallas_of_affine_coordinates\"","counters":[]},{"line":"","counters":[]},{"line":"  external deep_copy :","counters":[]},{"line":"    Fp.t Kimchi_types.or_infinity -> Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"    = \"caml_pallas_affine_deep_copy\"","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}