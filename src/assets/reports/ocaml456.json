{"filename":"src/lib/mina_lib/archive_client.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"let dispatch ?(max_tries = 5) ~logger","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    (archive_location : Host_and_port.t Cli_lib.Flag.Types.with_name) diff =","counters":[]},{"line":"  let rec go tries_left errs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if Int.( <= ) tries_left 0 then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let e = Error.of_list (List.rev errs) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      return","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Error","counters":[]},{"line":"           (Error.tag_arg e","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              (sprintf","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                 \"Could not send archive diff data to archive process after %d \\","counters":[]},{"line":"                  tries. The process may not be running, please check the \\","counters":[]},{"line":"                  daemon-argument\"","counters":[]},{"line":"                 max_tries )","counters":[]},{"line":"              ( (\"host_and_port\", archive_location.value)","counters":[]},{"line":"              , (\"daemon-argument\", archive_location.name) )","counters":[]},{"line":"              [%sexp_of: (string * Host_and_port.t) * (string * string)] ) )","counters":[]},{"line":"    else","counters":[]},{"line":"      match%bind","counters":[]},{"line":"        Daemon_rpcs.Client.dispatch Archive_lib.Rpc.t diff","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          archive_location.value","counters":[]},{"line":"      with","counters":[]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return (Ok ())","counters":[]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log error]","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            \"Error sending data to the archive process $error. Retrying...\"","counters":[]},{"line":"            ~metadata:[ (\"error\", `String (Error.to_string_hum e)) ] ;","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"          go (tries_left - 1) (e :: errs)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  in","counters":[]},{"line":"  go max_tries []","counters":[]},{"line":"","counters":[]},{"line":"let make_dispatch_block rpc ?(max_tries = 5)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    (archive_location : Host_and_port.t Cli_lib.Flag.Types.with_name) block =","counters":[]},{"line":"  let rec go tries_left errs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if Int.( <= ) tries_left 0 then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let e = Error.of_list (List.rev errs) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      return","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Error","counters":[]},{"line":"           (Error.tag_arg e","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              (sprintf","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                 \"Could not send block data to archive process after %d tries. \\","counters":[]},{"line":"                  The process may not be running, please check the \\","counters":[]},{"line":"                  daemon-argument\"","counters":[]},{"line":"                 max_tries )","counters":[]},{"line":"              ( (\"host_and_port\", archive_location.value)","counters":[]},{"line":"              , (\"daemon-argument\", archive_location.name) )","counters":[]},{"line":"              [%sexp_of: (string * Host_and_port.t) * (string * string)] ) )","counters":[]},{"line":"    else","counters":[]},{"line":"      match%bind","counters":[]},{"line":"        Daemon_rpcs.Client.dispatch rpc block archive_location.value","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return (Ok ())","counters":[]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          go (tries_left - 1) (e :: errs)","counters":[]},{"line":"  in","counters":[]},{"line":"  go max_tries []","counters":[]},{"line":"","counters":[]},{"line":"let dispatch_precomputed_block =","counters":[]},{"line":"  make_dispatch_block Archive_lib.Rpc.precomputed_block","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"let dispatch_extensional_block =","counters":[]},{"line":"  make_dispatch_block Archive_lib.Rpc.extensional_block","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"let transfer ~logger ~precomputed_values ~archive_location","counters":[]},{"line":"    (breadcrumb_reader :","counters":[]},{"line":"      Transition_frontier.Extensions.New_breadcrumbs.view","counters":[]},{"line":"      Broadcast_pipe.Reader.t ) =","counters":[]},{"line":"  Broadcast_pipe.Reader.iter breadcrumb_reader ~f:(fun breadcrumbs ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Deferred.List.iter breadcrumbs ~f:(fun breadcrumb ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let start = Time.now () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let diff =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Archive_lib.Diff.Builder.breadcrumb_added ~precomputed_values","counters":[]},{"line":"              ~logger breadcrumb","counters":[]},{"line":"          in","counters":[]},{"line":"          let diff_time = Time.now () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          [%log debug] \"Archive data generation for $state_hash took $time ms\"","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ ( \"state_hash\"","counters":[]},{"line":"                , Mina_base.State_hash.to_yojson","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                    (Transition_frontier.Breadcrumb.state_hash breadcrumb) )","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"              ; (\"time\", `Float (Time.Span.to_ms (Time.diff diff_time start)))","counters":[{"col_start":47,"col_end":47,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"              ] ;","counters":[]},{"line":"          match%map","counters":[]},{"line":"            dispatch archive_location ~logger (Transition_frontier diff)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          with","counters":[]},{"line":"          | Ok () ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [%log debug]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                \"Dispatched archive data for $state_hash, took $time ms\"","counters":[]},{"line":"                ~metadata:","counters":[]},{"line":"                  [ ( \"state_hash\"","counters":[]},{"line":"                    , Mina_base.State_hash.to_yojson","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                        (Transition_frontier.Breadcrumb.state_hash breadcrumb)","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                    )","counters":[]},{"line":"                  ; ( \"time\"","counters":[]},{"line":"                    , `Float","counters":[]},{"line":"                        (Time.Span.to_ms (Time.diff (Time.now ()) diff_time)) )","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"                  ] ;","counters":[]},{"line":"              ()","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          | Error e ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [%log warn]","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                ~metadata:","counters":[]},{"line":"                  [ (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                  ; ( \"breadcrumb\"","counters":[]},{"line":"                    , Transition_frontier.Breadcrumb.to_yojson breadcrumb )","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                  ]","counters":[]},{"line":"                \"Could not send breadcrumb to archive: $error\" ) )","counters":[]},{"line":"","counters":[]},{"line":"let run ~logger ~precomputed_values","counters":[]},{"line":"    ~(frontier_broadcast_pipe :","counters":[]},{"line":"       Transition_frontier.t option Broadcast_pipe.Reader.t ) archive_location =","counters":[]},{"line":"  O1trace.background_thread \"send_diffs_to_archiver\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Broadcast_pipe.Reader.iter frontier_broadcast_pipe","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:","counters":[]},{"line":"          (Option.value_map ~default:Deferred.unit","counters":[]},{"line":"             ~f:(fun transition_frontier ->","counters":[]},{"line":"               let extensions =","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 Transition_frontier.extensions transition_frontier","counters":[]},{"line":"               in","counters":[]},{"line":"               let breadcrumb_reader =","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 Transition_frontier.Extensions.get_view_pipe extensions","counters":[]},{"line":"                   Transition_frontier.Extensions.New_breadcrumbs","counters":[]},{"line":"               in","counters":[]},{"line":"               transfer ~logger ~precomputed_values ~archive_location","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 breadcrumb_reader ) ) )","counters":[{"col_start":39,"col_end":39,"count":2}]}]}