{"filename":"src/lib/gossip_net/any.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  module Rpc_intf : Network_peer.Rpc_intf.Rpc_interface_intf","counters":[]},{"line":"","counters":[]},{"line":"  module type Implementation_intf =","counters":[]},{"line":"    Intf.Gossip_net_intf with module Rpc_intf := Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"  type 't implementation = (module Implementation_intf with type t = 't)","counters":[]},{"line":"","counters":[]},{"line":"  type t = Any : 't implementation * 't -> t","counters":[]},{"line":"","counters":[]},{"line":"  include Intf.Gossip_net_intf with module Rpc_intf := Rpc_intf and type t := t","counters":[]},{"line":"","counters":[]},{"line":"  type 't creator = Rpc_intf.rpc_handler list -> Message.sinks -> 't Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  type creatable = Creatable : 't implementation * 't creator -> creatable","counters":[]},{"line":"","counters":[]},{"line":"  val create : creatable -> t creator","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Rpc_intf : Network_peer.Rpc_intf.Rpc_interface_intf) :","counters":[]},{"line":"  S with module Rpc_intf := Rpc_intf = struct","counters":[]},{"line":"  open Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"  module type Implementation_intf =","counters":[]},{"line":"    Intf.Gossip_net_intf with module Rpc_intf := Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"  type 't implementation = (module Implementation_intf with type t = 't)","counters":[]},{"line":"","counters":[]},{"line":"  type t = Any : 't implementation * 't -> t","counters":[]},{"line":"","counters":[]},{"line":"  type 't creator = rpc_handler list -> Message.sinks -> 't Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  type creatable = Creatable : 't implementation * 't creator -> creatable","counters":[]},{"line":"","counters":[]},{"line":"  let create (Creatable ((module M), creator)) impls sinks =","counters":[]},{"line":"    let%map gossip_net = creator impls sinks in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    Any ((module M), gossip_net)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let peers (Any ((module M), t)) = M.peers t","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let bandwidth_info (Any ((module M), t)) = M.bandwidth_info t","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let set_node_status (Any ((module M), t)) = M.set_node_status t","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let get_peer_node_status (Any ((module M), t)) = M.get_peer_node_status t","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let add_peer (Any ((module M), t)) xs = M.add_peer t xs","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"  let initial_peers (Any ((module M), t)) = M.initial_peers t","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"  let random_peers (Any ((module M), t)) = M.random_peers t","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let random_peers_except (Any ((module M), t)) = M.random_peers_except t","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let query_peer ?heartbeat_timeout ?timeout (Any ((module M), t)) =","counters":[]},{"line":"    M.query_peer ?heartbeat_timeout ?timeout t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let query_peer' ?how ?heartbeat_timeout ?timeout (Any ((module M), t)) =","counters":[]},{"line":"    M.query_peer' ?how ?heartbeat_timeout ?timeout t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let query_random_peers (Any ((module M), t)) = M.query_random_peers t","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let broadcast_state ?origin_topic (Any ((module M), t)) =","counters":[]},{"line":"    M.broadcast_state ?origin_topic t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let broadcast_transaction_pool_diff ?origin_topic (Any ((module M), t)) =","counters":[]},{"line":"    M.broadcast_transaction_pool_diff ?origin_topic t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let broadcast_snark_pool_diff ?origin_topic (Any ((module M), t)) =","counters":[]},{"line":"    M.broadcast_snark_pool_diff ?origin_topic t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let on_first_connect (Any ((module M), t)) = M.on_first_connect t","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let on_first_high_connectivity (Any ((module M), t)) =","counters":[]},{"line":"    M.on_first_high_connectivity t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let ban_notification_reader (Any ((module M), t)) =","counters":[]},{"line":"    M.ban_notification_reader t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let connection_gating (Any ((module M), t)) = M.connection_gating t","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"  let set_connection_gating (Any ((module M), t)) config =","counters":[]},{"line":"    M.set_connection_gating t config","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let restart_helper (Any ((module M), t)) = M.restart_helper t","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}