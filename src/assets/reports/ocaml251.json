{"filename":"src/lib/crypto_params/crypto_params.ml","lines":[{"line":"let () = Pickles.Backend.Tock.Keypair.set_urs_info Cache_dir.cache","counters":[{"col_start":48,"col_end":48,"count":1}]},{"line":"","counters":[]},{"line":"let () = Pickles.Backend.Tick.Keypair.set_urs_info Cache_dir.cache","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"","counters":[]},{"line":"module Tock = struct","counters":[]},{"line":"  module Full = Pickles.Impls.Wrap","counters":[]},{"line":"  module Run = Pickles.Impls.Wrap","counters":[]},{"line":"","counters":[]},{"line":"  let group_map_params () = Lazy.force Group_map_params.params","counters":[{"col_start":28,"col_end":28,"count":2}]},{"line":"","counters":[]},{"line":"  include Full.Internal_Basic","counters":[]},{"line":"  module Number = Snarky_backendless.Number.Make (Full.Internal_Basic)","counters":[]},{"line":"  module Enumerable = Snarky_backendless.Enumerable.Make (Full.Internal_Basic)","counters":[]},{"line":"  module Inner_curve = Pickles.Backend.Tock.Inner_curve","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Tick = struct","counters":[]},{"line":"  module Full = Pickles.Impls.Step","counters":[]},{"line":"  module Run = Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"  let group_map_params =","counters":[]},{"line":"    Group_map.Params.create","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"      (module Pickles.Backend.Tock.Field)","counters":[]},{"line":"      Pickles.Backend.Tock.Inner_curve.Params.{ a; b }","counters":[]},{"line":"","counters":[]},{"line":"  include Full.Internal_Basic","counters":[]},{"line":"  module Number = Snarky_backendless.Number.Make (Full.Internal_Basic)","counters":[]},{"line":"  module Enumerable = Snarky_backendless.Enumerable.Make (Full.Internal_Basic)","counters":[]},{"line":"  module Inner_curve = Pickles.Backend.Tick.Inner_curve","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}