{"filename":"src/lib/node_status_service/node_status_service.ml","lines":[{"line":"open Async","counters":[]},{"line":"open Core","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"type catchup_job_states = Transition_frontier.Full_catchup_tree.job_states =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { finished : int","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  ; failed : int","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  ; to_download : int","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"  ; to_initial_validate : int","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  ; wait_for_parent : int","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"  ; to_verify : int","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"  ; to_build_breadcrumb : int","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"type rpc_count =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { get_some_initial_peers : int","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  ; get_staged_ledger_aux_and_pending_coinbases_at_hash : int","counters":[{"col_start":58,"col_end":58,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"  ; answer_sync_ledger_query : int","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  ; get_transition_chain : int","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; get_transition_knowledge : int","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  ; get_transition_chain_proof : int","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; get_node_status : int","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"  ; get_ancestry : int","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; ban_notify : int","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"  ; get_best_tip : int","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; get_epoch_ledger : int","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"type gossip_count =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { new_state : int; transaction_pool_diff : int; snark_pool_diff : int }","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":68,"col_end":68,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"type block =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { hash : Mina_base.State_hash.t","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"  ; sender : Network_peer.Envelope.Sender.t","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  ; received_at : string","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; is_valid : bool","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"  ; reason_for_rejection :","counters":[]},{"line":"      [ `Invalid_proof","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Invalid_delta_transition_chain_proof","counters":[]},{"line":"      | `Too_early","counters":[]},{"line":"      | `Too_late","counters":[]},{"line":"      | `Invalid_genesis_protocol_state","counters":[]},{"line":"      | `Invalid_protocol_version","counters":[]},{"line":"      | `Mismatched_protocol_version ]","counters":[]},{"line":"      option","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"type node_status_data =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { version : int","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; block_height_at_best_tip : int","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  ; max_observed_block_height : int","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; max_observed_unvalidated_block_height : int","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  ; catchup_job_states : catchup_job_states option","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  ; sync_status : Sync_status.t","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  ; libp2p_input_bandwidth : float","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  ; libp2p_output_bandwidth : float","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; libp2p_cpu_usage : float","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; commit_hash : string","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; git_branch : string","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"  ; peer_id : string","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"  ; ip_address : string","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"  ; timestamp : string","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; uptime_of_node : float","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"  ; peer_count : int","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"  ; rpc_received : rpc_count","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; rpc_sent : rpc_count","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; pubsub_msg_received : gossip_count","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  ; pubsub_msg_broadcasted : gossip_count","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"  ; received_blocks : block list","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"let send_node_status_data ~logger ~url node_status_data =","counters":[]},{"line":"  let node_status_json = node_status_data_to_yojson node_status_data in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let json = `Assoc [ (\"data\", node_status_json) ] in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let headers =","counters":[]},{"line":"    Cohttp.Header.of_list [ (\"Content-Type\", \"application/json\") ]","counters":[]},{"line":"  in","counters":[]},{"line":"  match%map","counters":[]},{"line":"    Async.try_with (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        Cohttp_async.Client.post ~headers","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~body:(Yojson.Safe.to_string json |> Cohttp_async.Body.of_string)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"          url )","counters":[]},{"line":"  with","counters":[]},{"line":"  | Ok ({ status; _ }, body) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let metadata =","counters":[]},{"line":"        [ (\"data\", node_status_json); (\"url\", `String (Uri.to_string url)) ]","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"      in","counters":[]},{"line":"      if Cohttp.Code.code_of_status status = 200 then","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        [%log info] \"Sent node status data to URL $url\" ~metadata","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      else","counters":[]},{"line":"        let extra_metadata =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match body with","counters":[]},{"line":"          | `String s ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [ (\"error\", `String s) ]","counters":[]},{"line":"          | `Strings ss ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              [ (\"error\", `List (List.map ss ~f:(fun s -> `String s))) ]","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          | `Empty | `Pipe _ ->","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"              []","counters":[]},{"line":"        in","counters":[]},{"line":"        [%log error] \"Failed to send node status data to URL $url\"","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          ~metadata:(metadata @ extra_metadata)","counters":[]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log error] \"Failed to send node status data to URL $url\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          [ (\"error\", `String (Exn.to_string e))","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"          ; (\"url\", `String (Uri.to_string url))","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          ]","counters":[]},{"line":"","counters":[]},{"line":"let reset_gauges () =","counters":[]},{"line":"  let gauges =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let open Mina_metrics.Network in","counters":[]},{"line":"    [ new_state_received","counters":[]},{"line":"    ; new_state_broadcasted","counters":[]},{"line":"    ; transaction_pool_diff_received","counters":[]},{"line":"    ; transaction_pool_diff_broadcasted","counters":[]},{"line":"    ; snark_pool_diff_received","counters":[]},{"line":"    ; snark_pool_diff_broadcasted","counters":[]},{"line":"    ]","counters":[]},{"line":"    @ List.map ~f:snd","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"        [ get_some_initial_peers_rpcs_sent","counters":[]},{"line":"        ; get_some_initial_peers_rpcs_received","counters":[]},{"line":"        ; get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_sent","counters":[]},{"line":"        ; get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_received","counters":[]},{"line":"        ; answer_sync_ledger_query_rpcs_sent","counters":[]},{"line":"        ; answer_sync_ledger_query_rpcs_received","counters":[]},{"line":"        ; get_transition_chain_rpcs_sent","counters":[]},{"line":"        ; get_transition_chain_rpcs_received","counters":[]},{"line":"        ; get_transition_knowledge_rpcs_sent","counters":[]},{"line":"        ; get_transition_knowledge_rpcs_received","counters":[]},{"line":"        ; get_transition_chain_proof_rpcs_sent","counters":[]},{"line":"        ; get_transition_chain_proof_rpcs_received","counters":[]},{"line":"        ; get_node_status_rpcs_sent","counters":[]},{"line":"        ; get_node_status_rpcs_received","counters":[]},{"line":"        ; get_ancestry_rpcs_sent","counters":[]},{"line":"        ; get_ancestry_rpcs_received","counters":[]},{"line":"        ; ban_notify_rpcs_sent","counters":[]},{"line":"        ; ban_notify_rpcs_received","counters":[]},{"line":"        ; get_best_tip_rpcs_sent","counters":[]},{"line":"        ; get_best_tip_rpcs_received","counters":[]},{"line":"        ; get_epoch_ledger_rpcs_sent","counters":[]},{"line":"        ; get_epoch_ledger_rpcs_received","counters":[]},{"line":"        ]","counters":[]},{"line":"  in","counters":[]},{"line":"  List.iter ~f:(fun gauge -> Mina_metrics.Gauge.set gauge 0.) gauges ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  Queue.clear Transition_frontier.validated_blocks ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Queue.clear Transition_frontier.rejected_blocks","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let start ~logger ~node_status_url ~transition_frontier ~sync_status ~network","counters":[]},{"line":"    ~addrs_and_ports ~start_time ~slot_duration =","counters":[]},{"line":"  [%log info] \"Starting node status service using URL $url\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    ~metadata:[ (\"url\", `String node_status_url) ] ;","counters":[]},{"line":"  let five_slots = Time.Span.scale slot_duration 5. in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  reset_gauges () ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  every ~start:(after five_slots) ~continue_on_error:true five_slots","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"  @@ fun () ->","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@","counters":[]},{"line":"  match Broadcast_pipe.Reader.peek transition_frontier with","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log info] \"Transition frontier not available for node status service\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Some tf -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let catchup_job_states =","counters":[]},{"line":"        match Transition_frontier.catchup_tree tf with","counters":[]},{"line":"        | Full catchup_tree ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              (Transition_frontier.Full_catchup_tree.to_node_status_report","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                 catchup_tree )","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"      in","counters":[]},{"line":"      let sync_status =","counters":[]},{"line":"        sync_status |> Mina_incremental.Status.Observer.value_exn","counters":[]},{"line":"      in","counters":[]},{"line":"      [%log info] \"About to send bandwidth request to libp2p\" ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      match%bind Mina_networking.bandwidth_info network with","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      | Ok","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( `Input libp2p_input_bandwidth","counters":[]},{"line":"          , `Output libp2p_output_bandwidth","counters":[]},{"line":"          , `Cpu_usage libp2p_cpu_usage ) ->","counters":[]},{"line":"          let%bind peers = Mina_networking.peers network in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          let node_status_data =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { version = 1","counters":[]},{"line":"            ; block_height_at_best_tip =","counters":[]},{"line":"                Transition_frontier.best_tip tf","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                |> Transition_frontier.Breadcrumb.consensus_state","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                |> Consensus.Data.Consensus_state.blockchain_length","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"                |> Mina_numbers.Length.to_uint32 |> Unsigned.UInt32.to_int","counters":[{"col_start":47,"col_end":47,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"            ; max_observed_block_height =","counters":[]},{"line":"                !Mina_metrics.Transition_frontier.max_blocklength_observed","counters":[]},{"line":"            ; max_observed_unvalidated_block_height =","counters":[]},{"line":"                !Mina_metrics.Transition_frontier","counters":[]},{"line":"                 .max_unvalidated_blocklength_observed","counters":[]},{"line":"            ; catchup_job_states","counters":[]},{"line":"            ; sync_status","counters":[]},{"line":"            ; libp2p_input_bandwidth","counters":[]},{"line":"            ; libp2p_output_bandwidth","counters":[]},{"line":"            ; libp2p_cpu_usage","counters":[]},{"line":"            ; commit_hash = Mina_version.commit_id","counters":[]},{"line":"            ; git_branch = Mina_version.branch","counters":[]},{"line":"            ; peer_id =","counters":[]},{"line":"                (Node_addrs_and_ports.to_peer_exn addrs_and_ports).peer_id","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"            ; ip_address =","counters":[]},{"line":"                Node_addrs_and_ports.external_ip addrs_and_ports","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                |> Core.Unix.Inet_addr.to_string","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"            ; timestamp = Rfc3339_time.get_rfc3339_time ()","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"            ; uptime_of_node =","counters":[]},{"line":"                Time.Span.to_sec @@ Time.diff (Time.now ()) start_time","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"            ; peer_count = List.length peers","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            ; rpc_sent =","counters":[]},{"line":"                { get_some_initial_peers =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_some_initial_peers_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_staged_ledger_aux_and_pending_coinbases_at_hash =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_sent","counters":[]},{"line":"                ; answer_sync_ledger_query =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network.answer_sync_ledger_query_rpcs_sent","counters":[]},{"line":"                ; get_transition_chain =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_transition_chain_proof_rpcs_sent","counters":[]},{"line":"                ; get_transition_knowledge =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network.get_transition_knowledge_rpcs_sent","counters":[]},{"line":"                ; get_transition_chain_proof =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_transition_chain_proof_rpcs_sent","counters":[]},{"line":"                ; get_node_status =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_node_status_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_ancestry =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_ancestry_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; ban_notify =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.ban_notify_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_best_tip =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_best_tip_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_epoch_ledger =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_epoch_ledger_rpcs_sent","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                }","counters":[]},{"line":"            ; rpc_received =","counters":[]},{"line":"                { get_some_initial_peers =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_some_initial_peers_rpcs_received","counters":[]},{"line":"                ; get_staged_ledger_aux_and_pending_coinbases_at_hash =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_received","counters":[]},{"line":"                ; answer_sync_ledger_query =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .answer_sync_ledger_query_rpcs_received","counters":[]},{"line":"                ; get_transition_chain =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_transition_chain_proof_rpcs_received","counters":[]},{"line":"                ; get_transition_knowledge =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_transition_knowledge_rpcs_received","counters":[]},{"line":"                ; get_transition_chain_proof =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                         Mina_metrics.Network","counters":[]},{"line":"                         .get_transition_chain_proof_rpcs_received","counters":[]},{"line":"                ; get_node_status =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_node_status_rpcs_received","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_ancestry =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_ancestry_rpcs_received","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; ban_notify =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.ban_notify_rpcs_received","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_best_tip =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_best_tip_rpcs_received","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ; get_epoch_ledger =","counters":[]},{"line":"                    Float.to_int @@ Mina_metrics.Gauge.value","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                    @@ snd Mina_metrics.Network.get_epoch_ledger_rpcs_received","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                }","counters":[]},{"line":"            ; pubsub_msg_received =","counters":[]},{"line":"                { new_state =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.new_state_received","counters":[]},{"line":"                ; transaction_pool_diff =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.transaction_pool_diff_received","counters":[]},{"line":"                ; snark_pool_diff =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.snark_pool_diff_received","counters":[]},{"line":"                }","counters":[]},{"line":"            ; pubsub_msg_broadcasted =","counters":[]},{"line":"                { new_state =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.new_state_broadcasted","counters":[]},{"line":"                ; transaction_pool_diff =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.transaction_pool_diff_broadcasted","counters":[]},{"line":"                ; snark_pool_diff =","counters":[]},{"line":"                    Float.to_int","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                    @@ Mina_metrics.Gauge.value","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                         Mina_metrics.Network.snark_pool_diff_broadcasted","counters":[]},{"line":"                }","counters":[]},{"line":"            ; received_blocks =","counters":[]},{"line":"                List.map (Queue.to_list Transition_frontier.rejected_blocks)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"                  ~f:(fun (hash, sender, received_at, reason_for_rejection) ->","counters":[]},{"line":"                    { hash","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    ; sender","counters":[]},{"line":"                    ; received_at =","counters":[]},{"line":"                        Time.to_string (Block_time.to_time_exn received_at)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"                    ; is_valid = false","counters":[]},{"line":"                    ; reason_for_rejection = Some reason_for_rejection","counters":[]},{"line":"                    } )","counters":[]},{"line":"                @ List.map (Queue.to_list Transition_frontier.validated_blocks)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"                    ~f:(fun (hash, sender, received_at) ->","counters":[]},{"line":"                      { hash","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      ; sender","counters":[]},{"line":"                      ; received_at =","counters":[]},{"line":"                          Time.to_string (Block_time.to_time_exn received_at)","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"                      ; is_valid = true","counters":[]},{"line":"                      ; reason_for_rejection = None","counters":[]},{"line":"                      } )","counters":[]},{"line":"            }","counters":[]},{"line":"          in","counters":[]},{"line":"          reset_gauges () ;","counters":[]},{"line":"          send_node_status_data ~logger","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~url:(Uri.of_string node_status_url)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"            node_status_data","counters":[]},{"line":"      | Error e ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log info]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~metadata:[ (\"error\", `String (Error.to_string_hum e)) ]","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"            \"Failed to get bandwidth info from libp2p\" ;","counters":[]},{"line":"          Deferred.unit )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":2}]}]}