{"filename":"src/lib/o1trace/o1trace.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async","counters":[]},{"line":"module Execution_timer = Execution_timer","counters":[]},{"line":"module Plugins = Plugins","counters":[]},{"line":"module Thread = Thread","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: this should probably go somewhere else (mina_cli_entrypoint or coda_run) *)","counters":[]},{"line":"let () = Plugins.enable_plugin (module Execution_timer)","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"let on_job_enter' (fiber : Thread.Fiber.t) =","counters":[]},{"line":"  Plugins.dispatch (fun (module Plugin : Plugins.Plugin_intf) ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Plugin.on_job_enter fiber )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let on_job_exit' fiber elapsed_time =","counters":[]},{"line":"  Plugins.dispatch (fun (module Plugin : Plugins.Plugin_intf) ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Plugin.on_job_exit fiber elapsed_time )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let on_job_enter ctx =","counters":[]},{"line":"  Option.iter (Thread.Fiber.of_context ctx) ~f:on_job_enter'","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"let on_job_exit ctx elapsed_time =","counters":[]},{"line":"  Option.iter (Thread.Fiber.of_context ctx) ~f:(fun thread ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      on_job_exit' thread elapsed_time )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let current_sync_fiber = ref None","counters":[]},{"line":"","counters":[]},{"line":"(* grabs the parent fiber, returning the fiber (if available) and a reset function to call after exiting the child fiber *)","counters":[]},{"line":"let grab_parent_fiber () =","counters":[]},{"line":"  let ctx = Scheduler.current_execution_context () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match !current_sync_fiber with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Execution_context.find_local ctx Thread.Fiber.ctx_id","counters":[]},{"line":"  | Some fiber ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      current_sync_fiber := None ;","counters":[]},{"line":"      Some fiber","counters":[]},{"line":"","counters":[]},{"line":"(* look through a fiber stack to find a recursive fiber call *)","counters":[]},{"line":"let rec find_recursive_fiber thread_name parent_thread_name","counters":[]},{"line":"    (fiber : Thread.Fiber.t) =","counters":[]},{"line":"  let thread_matches = String.equal fiber.thread.name thread_name in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let parent_thread_matches =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.equal String.equal","counters":[]},{"line":"      (Option.map fiber.parent ~f:(fun p -> p.thread.name))","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      parent_thread_name","counters":[]},{"line":"  in","counters":[]},{"line":"  if thread_matches && parent_thread_matches then Some fiber","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  else","counters":[]},{"line":"    Option.bind fiber.parent","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(find_recursive_fiber thread_name parent_thread_name)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"let exec_thread ~exec_same_thread ~exec_new_thread name =","counters":[]},{"line":"  let sync_fiber = !current_sync_fiber in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let parent = grab_parent_fiber () in","counters":[]},{"line":"  let parent_name = Option.map parent ~f:(fun p -> p.thread.name) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  let result =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if","counters":[]},{"line":"      Option.value_map parent ~default:false ~f:(fun p ->","counters":[]},{"line":"          String.equal p.thread.name name )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    then exec_same_thread ()","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    else","counters":[]},{"line":"      let fiber =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match Option.bind parent ~f:(find_recursive_fiber name parent_name) with","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"        | Some fiber ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fiber","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Thread.Fiber.register name parent","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      in","counters":[]},{"line":"      exec_new_thread fiber","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  in","counters":[]},{"line":"  current_sync_fiber := sync_fiber ;","counters":[]},{"line":"  result","counters":[]},{"line":"","counters":[]},{"line":"let thread name f =","counters":[]},{"line":"  exec_thread name ~exec_same_thread:f ~exec_new_thread:(fun fiber ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let ctx = Scheduler.current_execution_context () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ctx = Thread.Fiber.apply_to_context fiber ctx in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      match Scheduler.within_context ctx f with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Error () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwithf","counters":[]},{"line":"            \"timing task `%s` failed, exception reported to parent monitor\" name","counters":[]},{"line":"            ()","counters":[]},{"line":"      | Ok x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x )","counters":[]},{"line":"","counters":[]},{"line":"let background_thread name f = don't_wait_for (thread name f)","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"(* it is unsafe to call into the scheduler directly within a `sync_thread` *)","counters":[]},{"line":"let sync_thread name f =","counters":[]},{"line":"  exec_thread name ~exec_same_thread:f ~exec_new_thread:(fun fiber ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      current_sync_fiber := Some fiber ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      on_job_enter' fiber ;","counters":[]},{"line":"      let start_time = Time_ns.now () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let result = f () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let elapsed_time = Time_ns.abs_diff (Time_ns.now ()) start_time in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      on_job_exit' fiber elapsed_time ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      result )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let () = Stdlib.(Async_kernel.Tracing.fns := { on_job_enter; on_job_exit })","counters":[]},{"line":"","counters":[]},{"line":"(*","counters":[]},{"line":"let () =","counters":[]},{"line":"  Scheduler.Expert.set_on_end_of_cycle (fun () ->","counters":[]},{"line":"    Option.iter (Thread.current_thread ()) ~f:(fun thread ->","counters":[]},{"line":"      dispatch_plugins thread (fun (module Plugin) state -> Plugin.on_cycle_end thread.name state)) ;","counters":[]},{"line":"    (* this line should probably live inside Async_kernel *)","counters":[]},{"line":"    sch.cycle_started <- true)","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"thread tests\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let child_of n =","counters":[]},{"line":"      match","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let prev_sync_fiber = !current_sync_fiber in","counters":[]},{"line":"        let%bind.Option fiber = grab_parent_fiber () in","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"        current_sync_fiber := prev_sync_fiber ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        fiber.parent","counters":[]},{"line":"      with","counters":[]},{"line":"      | Some parent ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          String.equal parent.thread.name n","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"","counters":[]},{"line":"    let test' f =","counters":[]},{"line":"      Hashtbl.clear Thread.threads ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let s = Ivar.create () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          f (Ivar.fill s) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          let%bind () = Ivar.read s in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"          Writer.(flushed (Lazy.force stdout)) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    let test f = test' (fun s -> don't_wait_for (f s))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"thread > thread > thread\" =","counters":[]},{"line":"      test (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  thread \"c\" (fun () ->","counters":[]},{"line":"                      assert (child_of \"b\") ;","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                      stop () ;","counters":[]},{"line":"                      Deferred.unit ) ) ) )","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"thread > background_thread > thread\" =","counters":[]},{"line":"      test (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              background_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  thread \"c\" (fun () ->","counters":[]},{"line":"                      assert (child_of \"b\") ;","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                      stop () ;","counters":[]},{"line":"                      Deferred.unit ) ) ;","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"              Deferred.unit ) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"thread > sync_thread\" =","counters":[]},{"line":"      test (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              sync_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  stop () ) ;","counters":[]},{"line":"              Deferred.unit ) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"sync_thread > sync_thread\" =","counters":[]},{"line":"      test' (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          sync_thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              sync_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  stop () ) ) )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"sync_thread > background_thread\" =","counters":[]},{"line":"      test (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          sync_thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              background_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  stop () ;","counters":[]},{"line":"                  Deferred.unit ) ) ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          Deferred.unit )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"sync_thread > background_thread\" =","counters":[]},{"line":"      test' (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          sync_thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              background_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  stop () ;","counters":[]},{"line":"                  Deferred.unit ) ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"sync_thread > background_thread > sync_thread > thread\" =","counters":[]},{"line":"      test' (fun stop ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          sync_thread \"a\" (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              background_thread \"b\" (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (child_of \"a\") ;","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                  sync_thread \"c\" (fun () ->","counters":[]},{"line":"                      assert (child_of \"b\") ;","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                      don't_wait_for","counters":[]},{"line":"                        (thread \"d\" (fun () ->","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                             assert (child_of \"c\") ;","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"                             stop () ;","counters":[]},{"line":"                             Deferred.unit ) ) ) ;","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                  Deferred.unit ) ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"    (* TODO: recursion tests *)","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}