{"filename":"src/lib/staged_ledger_diff/bitswap_block.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"let or_error_list_bind ls ~f =","counters":[]},{"line":"  let open Or_error.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let rec loop ls acc =","counters":[]},{"line":"    let%bind acc' = acc in","counters":[]},{"line":"    match ls with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return acc'","counters":[]},{"line":"    | h :: t ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind r = f h in","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        loop t (return (r :: acc'))","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"  in","counters":[]},{"line":"  loop ls (return []) >>| List.rev >>| List.concat","counters":[{"col_start":5,"col_end":5,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"type link = Blake2.t","counters":[]},{"line":"","counters":[]},{"line":"let link_size = Blake2.digest_size_in_bytes","counters":[]},{"line":"","counters":[]},{"line":"let absolute_max_links_per_block = Stdint.Uint16.(to_int max_int)","counters":[{"col_start":55,"col_end":55,"count":1}]},{"line":"","counters":[]},{"line":"(** A bitswap block schema consists of a series of branch-blocks and leaf-blocks.","counters":[]},{"line":" *  A branch-block contains both links to successive blocks, as well as data. A","counters":[]},{"line":" *  leaf-block contains only data, and no links. Of the branch-blocks, there will","counters":[]},{"line":" *  be either 0 or 1 block that has less links than the rest of the branch-blocks.","counters":[]},{"line":" *  We refer to this block as the partial-branch-block, and the other branch-blocks","counters":[]},{"line":" *  ar referred to as full-branch-blocks.","counters":[]},{"line":" *)","counters":[]},{"line":"type schema =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { num_total_blocks : int  (** the total number of blocks *)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; num_full_branch_blocks : int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        (** the number of link-blocks which contain the maximum number of links *)","counters":[]},{"line":"  ; num_links_in_partial_branch_block : int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        (** the number of links in the non-full link block (if it is 0, there is no non-full link block *)","counters":[]},{"line":"  ; last_leaf_block_data_size : int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        (** the size of data (in bytes) contained in the last block *)","counters":[]},{"line":"  ; max_block_data_size : int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        (** the maximum data size (in bytes) that a block contains *)","counters":[]},{"line":"  ; max_links_per_block : int","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"        (** the maximum number of links that can be stored in a block (all link-blocks except the non-full-link-block will have this number of links) *)","counters":[]},{"line":"  }","counters":[]},{"line":"[@@deriving compare, eq, sexp]","counters":[]},{"line":"","counters":[]},{"line":"let required_bitswap_block_count ~max_block_size data_length =","counters":[]},{"line":"  if data_length <= max_block_size - 2 then 1","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"  else","counters":[]},{"line":"    let n1 = data_length - link_size in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let n2 = max_block_size - link_size - 2 in","counters":[]},{"line":"    (n1 + n2 - 1) / n2","counters":[]},{"line":"","counters":[]},{"line":"let max_links_per_block ~max_block_size =","counters":[]},{"line":"  let links_per_block = (max_block_size - 2) / link_size in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  min links_per_block absolute_max_links_per_block","counters":[]},{"line":"","counters":[]},{"line":"let create_schema ~max_block_size data_length =","counters":[]},{"line":"  let num_total_blocks =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    required_bitswap_block_count ~max_block_size data_length","counters":[]},{"line":"  in","counters":[]},{"line":"  let last_leaf_block_data_size =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    data_length - ((max_block_size - link_size - 2) * (num_total_blocks - 1))","counters":[]},{"line":"  in","counters":[]},{"line":"  let max_links_per_block = max_links_per_block ~max_block_size in","counters":[]},{"line":"  let num_full_branch_blocks = (num_total_blocks - 1) / max_links_per_block in","counters":[]},{"line":"  let num_links_in_partial_branch_block =","counters":[]},{"line":"    num_total_blocks - 1 - (num_full_branch_blocks * max_links_per_block)","counters":[]},{"line":"  in","counters":[]},{"line":"  { num_total_blocks","counters":[]},{"line":"  ; num_full_branch_blocks","counters":[]},{"line":"  ; last_leaf_block_data_size","counters":[]},{"line":"  ; num_links_in_partial_branch_block","counters":[]},{"line":"  ; max_block_data_size = max_block_size","counters":[]},{"line":"  ; max_links_per_block","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let create_schema_length_prefixed ~max_block_size data_length =","counters":[]},{"line":"  create_schema ~max_block_size (data_length + 4)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let blocks_of_data ~max_block_size data =","counters":[]},{"line":"  if max_block_size <= 2 + link_size then failwith \"Max block size too small\" ;","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":42,"col_end":42,"count":0}]},{"line":"  let max_data_chunk_size = max_block_size - 2 in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let data_length = Bigstring.length data in","counters":[]},{"line":"  let schema = create_schema ~max_block_size data_length in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let remaining_data = ref data_length in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let blocks = Blake2.Table.create () in","counters":[]},{"line":"  let link_queue = Queue.create () in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let dequeue_chunk chunk_size =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    assert (!remaining_data >= chunk_size) ;","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":11,"col_end":11,"count":1}]},{"line":"    let chunk =","counters":[]},{"line":"      Bigstring.sub_shared data","counters":[]},{"line":"        ~pos:(!remaining_data - chunk_size)","counters":[]},{"line":"        ~len:chunk_size","counters":[]},{"line":"    in","counters":[]},{"line":"    remaining_data := !remaining_data - chunk_size ;","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    chunk","counters":[]},{"line":"  in","counters":[]},{"line":"  let dequeue_links num_links =","counters":[]},{"line":"    assert (Queue.length link_queue >= num_links) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    let links = ref [] in","counters":[]},{"line":"    for _ = 1 to num_links do","counters":[]},{"line":"      links := Queue.dequeue_exn link_queue :: !links","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    done ;","counters":[]},{"line":"    !links","counters":[]},{"line":"  in","counters":[]},{"line":"  let create_block links chunk_size =","counters":[]},{"line":"    let chunk = dequeue_chunk chunk_size in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let num_links = List.length links in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let size = 2 + (num_links * link_size) + chunk_size in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    if num_links > absolute_max_links_per_block || size > max_block_size then","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"      failwith \"invalid block produced\" ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    let block = Bigstring.create size in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    Bigstring.set_uint16_le_exn block ~pos:0 num_links ;","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    List.iteri links ~f:(fun i link ->","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"        let link_buf = Bigstring.of_string (Blake2.to_raw_string link) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        Bigstring.blit ~src:link_buf ~src_pos:0 ~dst:block","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~dst_pos:(2 + (i * link_size))","counters":[]},{"line":"          ~len:link_size ) ;","counters":[]},{"line":"    Bigstring.blit ~src:chunk ~src_pos:0 ~dst:block","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      ~dst_pos:(2 + (num_links * link_size))","counters":[]},{"line":"      ~len:chunk_size ;","counters":[]},{"line":"    let hash = Blake2.digest_bigstring block in","counters":[]},{"line":"    Hashtbl.set blocks ~key:hash ~data:block ;","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    Queue.enqueue link_queue hash","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"  in","counters":[]},{"line":"  (* create the last block *)","counters":[]},{"line":"  create_block [] schema.last_leaf_block_data_size ;","counters":[]},{"line":"  if schema.num_total_blocks > 1 then (","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":38,"col_end":38,"count":0}]},{"line":"    (* create the data-only blocks *)","counters":[]},{"line":"    let num_data_only_blocks =","counters":[]},{"line":"      schema.num_total_blocks - schema.num_full_branch_blocks - 1","counters":[]},{"line":"      - if schema.num_links_in_partial_branch_block > 0 then 1 else 0","counters":[{"col_start":61,"col_end":61,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"    in","counters":[]},{"line":"    for _ = 1 to num_data_only_blocks do","counters":[]},{"line":"      create_block [] max_data_chunk_size","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    done ;","counters":[]},{"line":"    (* create the non max link block, if there is one *)","counters":[]},{"line":"    ( if schema.num_links_in_partial_branch_block > 0 then","counters":[]},{"line":"      let chunk_size =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        max_block_size - 2","counters":[]},{"line":"        - (schema.num_links_in_partial_branch_block * link_size)","counters":[]},{"line":"      in","counters":[]},{"line":"      create_block","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (dequeue_links schema.num_links_in_partial_branch_block)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        chunk_size ) ;","counters":[]},{"line":"    (* create the max link blocks *)","counters":[]},{"line":"    let full_link_chunk_size =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      max_block_size - 2 - (schema.max_links_per_block * link_size)","counters":[]},{"line":"    in","counters":[]},{"line":"    for _ = 1 to schema.num_full_branch_blocks do","counters":[]},{"line":"      create_block","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"        (dequeue_links schema.max_links_per_block)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        full_link_chunk_size","counters":[]},{"line":"    done ) ;","counters":[]},{"line":"  assert (!remaining_data = 0) ;","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":9,"col_end":9,"count":1}]},{"line":"  assert (Queue.length link_queue = 1) ;","counters":[{"col_start":9,"col_end":9,"count":1},{"col_start":21,"col_end":21,"count":1}]},{"line":"  ( Blake2.Map.of_alist_exn (Hashtbl.to_alist blocks)","counters":[{"col_start":26,"col_end":26,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"  , Queue.dequeue_exn link_queue )","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"let parse_block ~hash block =","counters":[]},{"line":"  let error =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Fn.compose Or_error.error_string","counters":[]},{"line":"    @@ sprintf \"parsing block %s: %s\" (Blake2.to_hex hash)","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  in","counters":[]},{"line":"  if Bigstring.length block < 2 then error \"block too short\"","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  else","counters":[]},{"line":"    let num_links = Bigstring.get_uint16_le block ~pos:0 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    if Bigstring.length block < 2 + (num_links * link_size) then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"      error \"block has invalid number of links\"","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    else","counters":[]},{"line":"      let links =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        List.init num_links ~f:(fun i ->","counters":[]},{"line":"            block","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            |> Bigstring.sub_shared ~pos:(2 + (i * link_size)) ~len:link_size","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"            |> Bigstring.to_string |> Blake2.of_raw_string )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      in","counters":[]},{"line":"      let data =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Bigstring.sub_shared block ~pos:(2 + (num_links * link_size))","counters":[]},{"line":"      in","counters":[]},{"line":"      Ok (links, data)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let iter_links ~find_block ~report_chunk link_queue =","counters":[]},{"line":"  with_return (fun { return } ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      while Queue.length link_queue > 0 do","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        let hash = Queue.dequeue_exn link_queue in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let block =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match find_block hash with","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                ( Or_error.error_string","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                @@ sprintf \"required block %s not found\"","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                @@ Blake2.to_hex hash )","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          | Some data ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              data","counters":[]},{"line":"        in","counters":[]},{"line":"        let successive_links, chunk =","counters":[]},{"line":"          match parse_block ~hash block with","counters":[]},{"line":"          | Error error ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return (Error error)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          | Ok x ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              x","counters":[]},{"line":"        in","counters":[]},{"line":"        Queue.enqueue_all link_queue successive_links ;","counters":[]},{"line":"        report_chunk chunk","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      done ;","counters":[]},{"line":"      Ok () )","counters":[]},{"line":"","counters":[]},{"line":"let data_of_blocks blocks root_hash =","counters":[]},{"line":"  let links = Queue.of_list [ root_hash ] in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let chunks = Queue.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map.Or_error () =","counters":[]},{"line":"    iter_links links ~report_chunk:(Queue.enqueue chunks)","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      ~find_block:(Map.find blocks)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  in","counters":[]},{"line":"  let total_data_size = Queue.sum (module Int) chunks ~f:Bigstring.length in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let data = Bigstring.create total_data_size in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ignore","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Queue.fold chunks ~init:0 ~f:(fun dst_pos chunk ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          Bigstring.blit ~src:chunk ~src_pos:0 ~dst:data ~dst_pos","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~len:(Bigstring.length chunk) ;","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          dst_pos + Bigstring.length chunk )","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      : int ) ;","counters":[]},{"line":"  data","counters":[]},{"line":"","counters":[]},{"line":"module For_tests = struct","counters":[]},{"line":"  let gen =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let%bind max_block_size = Int.gen_uniform_incl 256 1024 in","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"    let%bind data_length = Int.gen_log_uniform_incl 1 (Int.pow 1024 2) in","counters":[{"col_start":50,"col_end":50,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    let%map data =","counters":[]},{"line":"      String.gen_with_length data_length Char.quickcheck_generator","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      >>| Bigstring.of_string","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    in","counters":[]},{"line":"    (max_block_size, data)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"bitswap blocks\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let schema_of_blocks ~max_block_size blocks root_hash =","counters":[]},{"line":"      let num_total_blocks = Map.length blocks in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let num_full_branch_blocks = ref 0 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let num_links_in_partial_branch_block = ref None in","counters":[]},{"line":"      let last_leaf_block_data_size = ref 0 in","counters":[]},{"line":"      let max_links_per_block = max_links_per_block ~max_block_size in","counters":[]},{"line":"      let rec crawl hash =","counters":[]},{"line":"        let block = Map.find_exn blocks hash in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let links, chunk = Or_error.ok_exn (parse_block ~hash block) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        ( match List.length links with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | 0 ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let size = Bigstring.length chunk in","counters":[]},{"line":"            last_leaf_block_data_size :=","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              if !last_leaf_block_data_size = 0 then size","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"              else min !last_leaf_block_data_size size","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"        | n when n = max_links_per_block ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            incr num_full_branch_blocks","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"        | n -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match !num_links_in_partial_branch_block with","counters":[]},{"line":"            | Some _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                failwith","counters":[]},{"line":"                  \"invalid blocks: only expected one outlying block with \\","counters":[]},{"line":"                   differing number of links\"","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                num_links_in_partial_branch_block := Some n ) ) ;","counters":[]},{"line":"        List.iter links ~f:crawl","counters":[]},{"line":"      in","counters":[]},{"line":"      crawl root_hash ;","counters":[]},{"line":"      { num_total_blocks","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ; num_full_branch_blocks = !num_full_branch_blocks","counters":[]},{"line":"      ; num_links_in_partial_branch_block =","counters":[]},{"line":"          Option.value !num_links_in_partial_branch_block ~default:0","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      ; last_leaf_block_data_size = !last_leaf_block_data_size","counters":[]},{"line":"      ; max_block_data_size = max_block_size","counters":[]},{"line":"      ; max_links_per_block","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"forall x: data_of_blocks (blocks_of_data x) = x\" =","counters":[]},{"line":"      Quickcheck.test For_tests.gen ~trials:100","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun (max_block_size, data) ->","counters":[]},{"line":"          let blocks, root_block_hash = blocks_of_data ~max_block_size data in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let result =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Or_error.ok_exn (data_of_blocks blocks root_block_hash)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          in","counters":[]},{"line":"          [%test_eq: Bigstring.t] data result )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"forall x: schema_of_blocks (blocks_of_data x) = \\","counters":[]},{"line":"                   create_schema x\" =","counters":[]},{"line":"      Quickcheck.test For_tests.gen ~trials:100","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun (max_block_size, data) ->","counters":[]},{"line":"          let schema = create_schema ~max_block_size (Bigstring.length data) in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"          let blocks, root_block_hash = blocks_of_data ~max_block_size data in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          [%test_eq: schema] schema","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            (schema_of_blocks ~max_block_size blocks root_block_hash) )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"when x is aligned (has no partial branch block): \\","counters":[]},{"line":"                   data_of_blocks (blocks_of_data x) = x\" =","counters":[]},{"line":"      let max_block_size = 100 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let data_length = max_block_size * 10 in","counters":[]},{"line":"      let data =","counters":[]},{"line":"        Quickcheck.Generator.generate ~size:1","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          ~random:(Splittable_random.State.of_int 0)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          (String.gen_with_length data_length Char.quickcheck_generator)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        |> Bigstring.of_string","counters":[]},{"line":"      in","counters":[]},{"line":"      assert (Bigstring.length data = data_length) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      let blocks, root_block_hash = blocks_of_data ~max_block_size data in","counters":[]},{"line":"      let result = Or_error.ok_exn (data_of_blocks blocks root_block_hash) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      Out_channel.flush Out_channel.stdout ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: Bigstring.t] data result","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}