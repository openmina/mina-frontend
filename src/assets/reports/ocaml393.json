{"filename":"src/lib/secrets/keypair_read_write.ml","lines":[{"line":"(* keypair_read_write.ml -- readers, writers for keypairs *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Async","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"module Make (Env : sig","counters":[]},{"line":"  val env : string","counters":[]},{"line":"","counters":[]},{"line":"  val which : string","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  open Env","counters":[]},{"line":"","counters":[]},{"line":"  (* avoid spurious cyclic dependency *)","counters":[]},{"line":"  module Keypair = Signature_lib.Keypair","counters":[]},{"line":"","counters":[]},{"line":"  type t = Keypair.t","counters":[]},{"line":"","counters":[]},{"line":"  let env = env","counters":[]},{"line":"","counters":[]},{"line":"  (** Writes a keypair to [privkey_path] and [privkey_path ^ \".pub\"] using [Secret_file] *)","counters":[]},{"line":"  let write_exn { Keypair.private_key; public_key } ~(privkey_path : string)","counters":[]},{"line":"      ~(password : Secret_file.password) : unit Deferred.t =","counters":[]},{"line":"    let privkey_bytes =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Private_key.to_bigstring private_key |> Bigstring.to_bytes","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    in","counters":[]},{"line":"    let pubkey_string =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Public_key.Compressed.to_base58_check (Public_key.compress public_key)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"    in","counters":[]},{"line":"    match%bind","counters":[]},{"line":"      Secret_file.write ~path:privkey_path ~mkdir:true ~plaintext:privkey_bytes","counters":[]},{"line":"        ~password","counters":[]},{"line":"    with","counters":[]},{"line":"    | Ok () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* The hope is that if [Secret_file.write] succeeded then this ought to","counters":[]},{"line":"           as well, letting [handle_open] stay inside [Secret_file]. It might not","counters":[]},{"line":"           if the environment changes underneath us, and we won't have nice errors","counters":[]},{"line":"           in that case. *)","counters":[]},{"line":"        let%bind pubkey_f = Writer.open_file (privkey_path ^ \".pub\") in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"        Writer.write_line pubkey_f pubkey_string ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Writer.close pubkey_f","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Error e ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Privkey_error.raise ~which e","counters":[]},{"line":"","counters":[]},{"line":"  (** Reads a private key from [privkey_path] using [Secret_file] *)","counters":[]},{"line":"  let read ~(privkey_path : string) ~(password : Secret_file.password) :","counters":[]},{"line":"      (Keypair.t, Privkey_error.t) Deferred.Result.t =","counters":[]},{"line":"    let open Deferred.Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind pk_bytes = Secret_file.read ~path:privkey_path ~password in","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Deferred.return","counters":[]},{"line":"    @@ let%bind sk =","counters":[]},{"line":"         try","counters":[]},{"line":"           return","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"             (pk_bytes |> Bigstring.of_bytes |> Private_key.of_bigstring_exn)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"         with exn ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           Privkey_error.corrupted_privkey","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"             (Error.createf \"Error parsing decrypted private key file: %s\"","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                (Exn.to_string exn) )","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"       in","counters":[]},{"line":"       try return (Keypair.of_private_key_exn sk)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"       with exn ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"         Privkey_error.corrupted_privkey","counters":[]},{"line":"           (Error.createf","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              \"Error computing public key from private, is your keyfile \\","counters":[]},{"line":"               corrupt? %s\"","counters":[]},{"line":"              (Exn.to_string exn) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"  (** Reads a private key from [privkey_path] using [Secret_file], throws on failure *)","counters":[]},{"line":"  let read_exn ~(privkey_path : string) ~(password : Secret_file.password) :","counters":[]},{"line":"      Keypair.t Deferred.t =","counters":[]},{"line":"    match%map read ~privkey_path ~password with","counters":[]},{"line":"    | Ok keypair ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        keypair","counters":[]},{"line":"    | Error priv_key_error ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Privkey_error.raise ~which priv_key_error","counters":[]},{"line":"","counters":[]},{"line":"  let read_exn' path =","counters":[]},{"line":"    let password =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let env_value = Sys.getenv env in","counters":[]},{"line":"      match env_value with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some v ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          lazy (return @@ Bytes.of_string v)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let error_help_message =","counters":[]},{"line":"            sprintf \"Set the %s environment variable to the password\" env","counters":[]},{"line":"          in","counters":[]},{"line":"          lazy","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Password.read_hidden_line ~error_help_message","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"               \"Secret key password: \" )","counters":[]},{"line":"    in","counters":[]},{"line":"    read_exn ~privkey_path:path ~password","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}