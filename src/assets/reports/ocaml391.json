{"filename":"src/lib/mina_base/account_id_intf.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  module Digest : sig","counters":[]},{"line":"    [%%versioned:","counters":[]},{"line":"    module Stable : sig","counters":[]},{"line":"      module V1 : sig","counters":[]},{"line":"        type t [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    val of_field : Snark_params.Tick.Field.t -> t","counters":[]},{"line":"","counters":[]},{"line":"    val to_field_unsafe : t -> Snark_params.Tick.Field.t","counters":[]},{"line":"","counters":[]},{"line":"    include Stringable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"    (* so we can easily import these into Token_id *)","counters":[]},{"line":"    module Binables : sig","counters":[]},{"line":"      include Comparable_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"      include Hashable_binable with type t := t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include module type of Binables","counters":[]},{"line":"","counters":[]},{"line":"    val to_input : t -> Snark_params.Tick.Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"    val default : t","counters":[]},{"line":"","counters":[]},{"line":"    val gen : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"    val gen_non_default : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"    [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"    module Checked : sig","counters":[]},{"line":"      open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"      type t","counters":[]},{"line":"","counters":[]},{"line":"      val to_input : t -> Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"      val constant : Stable.Latest.t -> t","counters":[]},{"line":"","counters":[]},{"line":"      val equal : t -> t -> Boolean.var","counters":[]},{"line":"","counters":[]},{"line":"      val if_ : Boolean.var -> then_:t -> else_:t -> t","counters":[]},{"line":"","counters":[]},{"line":"      val of_field : Pickles.Impls.Step.Field.t -> t","counters":[]},{"line":"","counters":[]},{"line":"      val to_field_unsafe : t -> Pickles.Impls.Step.Field.t","counters":[]},{"line":"","counters":[]},{"line":"      module Assert : sig","counters":[]},{"line":"        val equal : t -> t -> unit","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    val typ : (Checked.t, t) Snark_params.Tick.Typ.t","counters":[]},{"line":"","counters":[]},{"line":"    [%%endif]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type t [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  val create : Public_key.Compressed.t -> Digest.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val derive_token_id : owner:t -> Digest.t","counters":[]},{"line":"","counters":[]},{"line":"  val empty : t","counters":[]},{"line":"","counters":[]},{"line":"  val invalid : t","counters":[]},{"line":"","counters":[]},{"line":"  val public_key : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"  val token_id : t -> Digest.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_input : t -> Snark_params.Tick.Field.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"  val gen : t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var","counters":[]},{"line":"","counters":[]},{"line":"  val typ : (var, t) Snark_params.Tick.Typ.t","counters":[]},{"line":"","counters":[]},{"line":"  val var_of_t : t -> var","counters":[]},{"line":"","counters":[]},{"line":"  module Checked : sig","counters":[]},{"line":"    open Snark_params","counters":[]},{"line":"    open Tick","counters":[]},{"line":"","counters":[]},{"line":"    val create : Public_key.Compressed.var -> Digest.Checked.t -> var","counters":[]},{"line":"","counters":[]},{"line":"    val public_key : var -> Public_key.Compressed.var","counters":[]},{"line":"","counters":[]},{"line":"    val token_id : var -> Digest.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    val to_input :","counters":[]},{"line":"      var -> Snark_params.Tick.Field.Var.t Random_oracle.Input.Chunked.t","counters":[]},{"line":"","counters":[]},{"line":"    val equal : var -> var -> Boolean.var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    val if_ : Boolean.var -> then_:var -> else_:var -> var Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    val derive_token_id : owner:var -> Digest.Checked.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}