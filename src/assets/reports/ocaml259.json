{"filename":"src/lib/mina_base/zkapp_account.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"open Zkapp_basic","counters":[]},{"line":"","counters":[]},{"line":"module Event = struct","counters":[]},{"line":"  (* Arbitrary hash input, encoding determined by the zkApp's developer. *)","counters":[]},{"line":"  type t = Field.t array [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  let hash (x : t) = Random_oracle.hash ~init:Hash_prefix_states.zkapp_event x","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = Field.Var.t array","counters":[]},{"line":"","counters":[]},{"line":"  let hash_var (x : Field.Var.t array) =","counters":[]},{"line":"    Random_oracle.Checked.hash ~init:Hash_prefix_states.zkapp_event x","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_events (Inputs : sig","counters":[]},{"line":"  val salt_phrase : string","counters":[]},{"line":"","counters":[]},{"line":"  val hash_prefix : field Random_oracle.State.t","counters":[]},{"line":"","counters":[]},{"line":"  val deriver_name : string","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  type t = Event.t list [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  let empty_hash = Random_oracle.(salt Inputs.salt_phrase |> digest)","counters":[{"col_start":37,"col_end":37,"count":2},{"col_start":66,"col_end":66,"count":2}]},{"line":"","counters":[]},{"line":"  let push_hash acc hash =","counters":[]},{"line":"    Random_oracle.hash ~init:Inputs.hash_prefix [| acc; hash |]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let push_event acc event = push_hash acc (Event.hash event)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"  let hash (x : t) =","counters":[]},{"line":"    (* fold_right so the empty hash is used at the end of the events *)","counters":[]},{"line":"    List.fold_right ~init:empty_hash ~f:(Fn.flip push_event) x","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":47,"col_end":47,"count":2}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = t Data_as_hash.t","counters":[]},{"line":"","counters":[]},{"line":"  let typ = Data_as_hash.typ ~hash","counters":[]},{"line":"","counters":[]},{"line":"  let var_to_input (x : var) = Data_as_hash.to_input x","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input (x : t) = Random_oracle_input.Chunked.field (hash x)","counters":[{"col_start":25,"col_end":25,"count":2},{"col_start":63,"col_end":63,"count":2}]},{"line":"","counters":[]},{"line":"  let push_to_data_as_hash (events : var) (e : Event.var) : var =","counters":[]},{"line":"    let open Run in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let res =","counters":[]},{"line":"      exists typ ~compute:(fun () ->","counters":[]},{"line":"          let tl = As_prover.read typ events in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let hd =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            As_prover.read (Typ.array ~length:(Array.length e) Field.typ) e","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          in","counters":[]},{"line":"          hd :: tl )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    Field.Assert.equal","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Random_oracle.Checked.hash ~init:Inputs.hash_prefix","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"         [| Data_as_hash.hash events; Event.hash_var e |] )","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      (Data_as_hash.hash res) ;","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    res","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let empty_stack_msg = \"Attempted to pop an empty stack\"","counters":[]},{"line":"","counters":[]},{"line":"  let pop_from_data_as_hash (events : var) : Event.t Data_as_hash.t * var =","counters":[]},{"line":"    let open Run in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let hd, tl =","counters":[]},{"line":"      exists","counters":[]},{"line":"        Typ.(Data_as_hash.typ ~hash:Event.hash * typ)","counters":[]},{"line":"        ~compute:(fun () ->","counters":[]},{"line":"          match As_prover.read typ events with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | [] ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith empty_stack_msg","counters":[]},{"line":"          | event :: events ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (event, events) )","counters":[]},{"line":"    in","counters":[]},{"line":"    Field.Assert.equal","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Random_oracle.Checked.hash ~init:Hash_prefix_states.zkapp_events","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"         [| Data_as_hash.hash tl; Data_as_hash.hash hd |] )","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      (Data_as_hash.hash events) ;","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    (hd, tl)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let events = list @@ array field (o ()) in","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    with_checked","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~checked:(Data_as_hash.deriver events)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      ~name:Inputs.deriver_name events obj","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Events = struct","counters":[]},{"line":"  include Make_events (struct","counters":[]},{"line":"    let salt_phrase = \"MinaZkappEventsEmpty\"","counters":[]},{"line":"","counters":[]},{"line":"    let hash_prefix = Hash_prefix_states.zkapp_events","counters":[]},{"line":"","counters":[]},{"line":"    let deriver_name = \"Events\"","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"checked push/pop inverse\" =","counters":[]},{"line":"    let open Quickcheck in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let num_events = 11 in","counters":[]},{"line":"    let event_len = 7 in","counters":[]},{"line":"    let events =","counters":[]},{"line":"      random_value","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (Generator.list_with_length num_events","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"           (Generator.list_with_length event_len Field.gen) )","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"      |> List.map ~f:Array.of_list","counters":[]},{"line":"    in","counters":[]},{"line":"    let events_vars = List.map events ~f:(Array.map ~f:Field.Var.constant) in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let f () () =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Run.as_prover (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let empty_var = Run.exists typ ~compute:(fun _ -> []) in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"          let pushed =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.fold_right events_vars ~init:empty_var","counters":[]},{"line":"              ~f:(Fn.flip push_to_data_as_hash)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          in","counters":[]},{"line":"          let popped =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let rec go acc var =","counters":[]},{"line":"              try","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let event_with_hash, tl_var = pop_from_data_as_hash var in","counters":[]},{"line":"                let event =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Run.As_prover.read","counters":[]},{"line":"                    (Data_as_hash.typ ~hash:Event.hash)","counters":[]},{"line":"                    event_with_hash","counters":[]},{"line":"                in","counters":[]},{"line":"                go (event :: acc) tl_var","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"              with","counters":[]},{"line":"              | Snarky_backendless.Snark0.Runtime_error (_, Failure s, _)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              | Failure s","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              when String.equal s empty_stack_msg","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"              ->","counters":[]},{"line":"                List.rev acc","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            in","counters":[]},{"line":"            go [] pushed","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          in","counters":[]},{"line":"          assert (equal events popped) )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    in","counters":[]},{"line":"    match Snark_params.Tick.Run.run_and_check f with","counters":[]},{"line":"    | Ok () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ()","counters":[]},{"line":"    | Error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"Error from run_and_check: %s\" (Error.to_string_hum err) ()","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Sequence_events = struct","counters":[]},{"line":"  include Make_events (struct","counters":[]},{"line":"    let salt_phrase = \"MinaZkappSequenceEmpty\"","counters":[]},{"line":"","counters":[]},{"line":"    let hash_prefix = Hash_prefix_states.zkapp_sequence_events","counters":[]},{"line":"","counters":[]},{"line":"    let deriver_name = \"SequenceEvents\"","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  let is_empty_var (e : var) =","counters":[]},{"line":"    Snark_params.Tick.Field.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Checked.equal (Data_as_hash.hash e) (Var.constant empty_hash))","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"  let empty_state_element =","counters":[]},{"line":"    let salt_phrase = \"MinaZkappSequenceStateEmptyElt\" in","counters":[]},{"line":"    Random_oracle.(salt salt_phrase |> digest)","counters":[{"col_start":22,"col_end":22,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"","counters":[]},{"line":"  let push_events (acc : Field.t) (events : t) : Field.t =","counters":[]},{"line":"    push_hash acc (hash events)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  let push_events_checked (x : Field.Var.t) (e : var) : Field.Var.t =","counters":[]},{"line":"    Random_oracle.Checked.hash ~init:Hash_prefix_states.zkapp_sequence_events","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [| x; Data_as_hash.hash e |]","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ('app_state, 'vk, 'zkapp_version, 'field, 'slot, 'bool, 'zkapp_uri) t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":79,"col_end":79,"count":17}]},{"line":"        { app_state : 'app_state","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; verification_key : 'vk","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; zkapp_version : 'zkapp_version","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; sequence_state : 'field Pickles_types.Vector.Vector_5.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        ; last_sequence_slot : 'slot","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; proved_state : 'bool","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; zkapp_uri : 'zkapp_uri","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":18,"col_end":18,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, equal, compare, hash, yojson, hlist, fields]","counters":[{"col_start":67,"col_end":67,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type ('app_state, 'vk, 'zkapp_version, 'field, 'slot, 'bool, 'zkapp_uri) t_ =","counters":[]},{"line":"      ('app_state, 'vk, 'zkapp_version, 'field, 'slot, 'bool, 'zkapp_uri) Poly.t =","counters":[]},{"line":"  { app_state : 'app_state","counters":[]},{"line":"  ; verification_key : 'vk","counters":[]},{"line":"  ; zkapp_version : 'zkapp_version","counters":[]},{"line":"  ; sequence_state : 'field Pickles_types.Vector.Vector_5.t","counters":[]},{"line":"  ; last_sequence_slot : 'slot","counters":[]},{"line":"  ; proved_state : 'bool","counters":[]},{"line":"  ; zkapp_uri : 'zkapp_uri","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1}]},{"line":"      ( Zkapp_state.Value.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Verification_key_wire.Stable.V1.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"      , Mina_numbers.Zkapp_version.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , F.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Mina_numbers.Global_slot.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , bool","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , string )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Poly.Stable.V2.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving sexp, equal, compare, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  ( Zkapp_state.Value.t","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0}]},{"line":"  , Verification_key_wire.t option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  , Mina_numbers.Zkapp_version.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , F.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , Mina_numbers.Global_slot.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , bool","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string )","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  Poly.t","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"[@@deriving sexp, equal, compare, hash, yojson]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"let () =","counters":[]},{"line":"  let _f : unit -> (t, Stable.Latest.t) Type_equal.t = fun () -> Type_equal.T in","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"  ()","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Pickles.Impls.Step.Field.t Zkapp_state.V.t","counters":[]},{"line":"    , ( Boolean.var","counters":[]},{"line":"      , (Side_loaded_verification_key.t option, Field.t) With_hash.t","counters":[]},{"line":"        Data_as_hash.t )","counters":[]},{"line":"      Flagged_option.t","counters":[]},{"line":"    , Mina_numbers.Zkapp_version.Checked.t","counters":[]},{"line":"    , Pickles.Impls.Step.Field.t","counters":[]},{"line":"    , Mina_numbers.Global_slot.Checked.t","counters":[]},{"line":"    , Boolean.var","counters":[]},{"line":"    , string Data_as_hash.t )","counters":[]},{"line":"    Poly.t","counters":[]},{"line":"","counters":[]},{"line":"  open Pickles_types","counters":[]},{"line":"","counters":[]},{"line":"  let to_input' (t : _ Poly.t) :","counters":[]},{"line":"      Snark_params.Tick.Field.Var.t Random_oracle.Input.Chunked.t =","counters":[]},{"line":"    let open Random_oracle.Input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let f mk acc field = mk (Core_kernel.Field.get field t) :: acc in","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"    let app_state v =","counters":[]},{"line":"      Random_oracle.Input.Chunked.field_elements (Vector.to_array v)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"    in","counters":[]},{"line":"    Poly.Fields.fold ~init:[] ~app_state:(f app_state)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      ~verification_key:(f field)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"      ~zkapp_version:(f Mina_numbers.Zkapp_version.Checked.to_input)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ~sequence_state:(f app_state)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ~last_sequence_slot:(f Mina_numbers.Global_slot.Checked.to_input)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      ~proved_state:","counters":[]},{"line":"        (f (fun (b : Boolean.var) ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"             Random_oracle.Input.Chunked.packed ((b :> Field.Var.t), 1) ) )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      ~zkapp_uri:(f field)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    |> List.reduce_exn ~f:append","counters":[]},{"line":"","counters":[]},{"line":"  let to_input (t : t) =","counters":[]},{"line":"    to_input'","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { t with","counters":[]},{"line":"        verification_key = Data_as_hash.hash t.verification_key.data","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; zkapp_uri = Data_as_hash.hash t.zkapp_uri","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"  let digest_vk t =","counters":[]},{"line":"    Random_oracle.Checked.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix_states.side_loaded_vk","counters":[]},{"line":"        (pack_input (Pickles.Side_loaded.Verification_key.Checked.to_input t)))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    Random_oracle.Checked.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix_states.zkapp_account (pack_input (to_input t)))","counters":[{"col_start":60,"col_end":60,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  let digest' t =","counters":[]},{"line":"    Random_oracle.Checked.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix_states.zkapp_account (pack_input (to_input' t)))","counters":[{"col_start":60,"col_end":60,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally Verification_key_wire.(digest_vk, dummy_vk_hash)]","counters":[]},{"line":"","counters":[]},{"line":"(* This preimage cannot be attained by any string, due to the trailing [true]","counters":[]},{"line":"   added below.","counters":[]},{"line":"*)","counters":[]},{"line":"let zkapp_uri_non_preimage =","counters":[]},{"line":"  lazy (Random_oracle_input.Chunked.field_elements [| Field.zero; Field.zero |])","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"","counters":[]},{"line":"let hash_zkapp_uri_opt (zkapp_uri_opt : string option) =","counters":[]},{"line":"  let input =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    match zkapp_uri_opt with","counters":[]},{"line":"    | Some zkapp_uri ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        (* We use [length*8 + 1] to pass a final [true] after the end of the","counters":[]},{"line":"           string, to ensure that trailing null bytes don't alias in the hash","counters":[]},{"line":"           preimage.","counters":[]},{"line":"        *)","counters":[]},{"line":"        let bits = Array.create ~len:((String.length zkapp_uri * 8) + 1) true in","counters":[{"col_start":51,"col_end":51,"count":1}]},{"line":"        String.foldi zkapp_uri ~init:() ~f:(fun i () c ->","counters":[{"col_start":8,"col_end":8,"count":1}]},{"line":"            let c = Char.to_int c in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            (* Insert the bits into [bits], LSB order. *)","counters":[]},{"line":"            for j = 0 to 7 do","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (* [Int.test_bit c j] *)","counters":[]},{"line":"              bits.((i * 8) + j) <- Int.bit_and c (1 lsl j) <> 0","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"            done ) ;","counters":[]},{"line":"        Random_oracle_input.Chunked.packeds","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":42,"col_end":42,"count":1}]},{"line":"          (Array.map ~f:(fun b -> (field_of_bool b, 1)) bits)","counters":[{"col_start":19,"col_end":19,"count":1},{"col_start":34,"col_end":34,"count":1},{"col_start":47,"col_end":47,"count":1}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        Lazy.force zkapp_uri_non_preimage","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"  in","counters":[]},{"line":"  Random_oracle.pack_input input","counters":[{"col_start":25,"col_end":25,"count":2}]},{"line":"  |> Random_oracle.hash ~init:Hash_prefix_states.zkapp_uri","counters":[]},{"line":"","counters":[]},{"line":"let hash_zkapp_uri (zkapp_uri : string) = hash_zkapp_uri_opt (Some zkapp_uri)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"","counters":[]},{"line":"let typ : (Checked.t, t) Typ.t =","counters":[]},{"line":"  let open Poly in","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Zkapp_state.typ Field.typ","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"    ; Flagged_option.option_typ","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"        ~default:{ With_hash.data = None; hash = dummy_vk_hash () }","counters":[{"col_start":61,"col_end":61,"count":1}]},{"line":"        (Data_as_hash.typ ~hash:With_hash.hash)","counters":[]},{"line":"      |> Typ.transport","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"           ~there:(Option.map ~f:(With_hash.map ~f:Option.some))","counters":[]},{"line":"           ~back:","counters":[]},{"line":"             (Option.map ~f:(With_hash.map ~f:(fun x -> Option.value_exn x)))","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"    ; Mina_numbers.Zkapp_version.typ","counters":[]},{"line":"    ; Pickles_types.Vector.typ Field.typ Pickles_types.Nat.N5.n","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"    ; Mina_numbers.Global_slot.typ","counters":[]},{"line":"    ; Boolean.typ","counters":[]},{"line":"    ; Data_as_hash.typ ~hash:hash_zkapp_uri","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"    ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let zkapp_uri_to_input zkapp_uri =","counters":[]},{"line":"  Random_oracle.Input.Chunked.field @@ hash_zkapp_uri zkapp_uri","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":52,"col_end":52,"count":1}]},{"line":"","counters":[]},{"line":"let to_input (t : t) : _ Random_oracle.Input.Chunked.t =","counters":[]},{"line":"  let open Random_oracle.Input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let f mk acc field = mk (Core_kernel.Field.get field t) :: acc in","counters":[{"col_start":23,"col_end":23,"count":7},{"col_start":24,"col_end":24,"count":7},{"col_start":47,"col_end":47,"count":7}]},{"line":"  let app_state v =","counters":[]},{"line":"    Random_oracle.Input.Chunked.field_elements (Pickles_types.Vector.to_array v)","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":76,"col_end":76,"count":2}]},{"line":"  in","counters":[]},{"line":"  Poly.Fields.fold ~init:[] ~app_state:(f app_state)","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"    ~verification_key:","counters":[]},{"line":"      (f","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"         (Fn.compose field","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"            (Option.value_map ~default:(dummy_vk_hash ()) ~f:With_hash.hash) ) )","counters":[{"col_start":52,"col_end":52,"count":1}]},{"line":"    ~zkapp_version:(f Mina_numbers.Zkapp_version.to_input)","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"    ~sequence_state:(f app_state)","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"    ~last_sequence_slot:(f Mina_numbers.Global_slot.to_input)","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"    ~proved_state:","counters":[]},{"line":"      (f (fun b -> Random_oracle.Input.Chunked.packed (field_of_bool b, 1)))","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":19,"col_end":19,"count":1},{"col_start":67,"col_end":67,"count":1}]},{"line":"    ~zkapp_uri:(f zkapp_uri_to_input)","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"  |> List.reduce_exn ~f:append","counters":[]},{"line":"","counters":[]},{"line":"let default : _ Poly.t =","counters":[]},{"line":"  (* These are the permissions of a \"user\"/\"non zkapp\" account. *)","counters":[]},{"line":"  { app_state =","counters":[]},{"line":"      Pickles_types.Vector.init Zkapp_state.Max_state_size.n ~f:(fun _ ->","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"          F.zero )","counters":[{"col_start":10,"col_end":10,"count":8}]},{"line":"  ; verification_key = None","counters":[]},{"line":"  ; zkapp_version = Mina_numbers.Zkapp_version.zero","counters":[]},{"line":"  ; sequence_state =","counters":[]},{"line":"      (let empty = Sequence_events.empty_state_element in","counters":[]},{"line":"       [ empty; empty; empty; empty; empty ] )","counters":[]},{"line":"  ; last_sequence_slot = Mina_numbers.Global_slot.zero","counters":[]},{"line":"  ; proved_state = false","counters":[]},{"line":"  ; zkapp_uri = \"\"","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let digest (t : t) =","counters":[]},{"line":"  Random_oracle.(","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    hash ~init:Hash_prefix_states.zkapp_account (pack_input (to_input t)))","counters":[{"col_start":58,"col_end":58,"count":1},{"col_start":68,"col_end":68,"count":1}]},{"line":"","counters":[]},{"line":"let default_digest = lazy (digest default)","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"let hash_zkapp_account_opt' = function","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Lazy.force default_digest","counters":[]},{"line":"  | Some (a : t) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      digest a","counters":[{"col_start":13,"col_end":13,"count":1}]}]}