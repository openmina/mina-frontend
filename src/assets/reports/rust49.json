{"filename":"src/util/mod.rs","lines":[{"line":"use std::ops::Neg;","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::{BigInteger, PrimeField};","counters":[]},{"line":"use mina_curves::pasta::Fq;","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::{CompressedPubKey, CurvePoint, Keypair, PubKey};","counters":[]},{"line":"","counters":[]},{"line":"mod backtrace;","counters":[]},{"line":"mod time;","counters":[]},{"line":"","counters":[]},{"line":"pub use crate::util::backtrace::*;","counters":[]},{"line":"pub use time::*;","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(not(target_family = \"wasm\"))]","counters":[]},{"line":"pub fn pid() -> u32 {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    std::process::id()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"#[cfg(target_family = \"wasm\")]","counters":[]},{"line":"pub fn pid() -> u32 {","counters":[]},{"line":"    0","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub trait FpExt {","counters":[]},{"line":"    fn to_decimal(&self) -> String;","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FpExt for Fp {","counters":[]},{"line":"    fn to_decimal(&self) -> String {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        let r = self.into_repr();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        let bigint: num_bigint::BigUint = r.into();","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        bigint.to_string()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FpExt for Fq {","counters":[]},{"line":"    fn to_decimal(&self) -> String {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        let r = self.into_repr();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        let bigint: num_bigint::BigUint = r.into();","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        bigint.to_string()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn gen_keypair() -> Keypair {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"    Keypair::rand(&mut rng)","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn gen_compressed() -> CompressedPubKey {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    gen_keypair().public.into_compressed()","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// Not sure if it's correct","counters":[]},{"line":"/// I used the same code as there:","counters":[]},{"line":"/// https://github.com/o1-labs/proof-systems/blob/226de4aeb11b8814327ab832e4fccdce5585f473/signer/src/pubkey.rs#L95-L106","counters":[]},{"line":"pub fn decompress_pk(pk: &CompressedPubKey) -> Option<PubKey> {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"    let y_parity = pk.is_odd;","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    let x = pk.x;","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"    let mut pt = CurvePoint::get_point_from_x(x, y_parity)?;","counters":[{"col_start":8,"col_end":14,"count":0},{"col_start":17,"col_end":58,"count":0},{"col_start":58,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"    if pt.y.into_repr().is_even() == y_parity {","counters":[{"col_start":7,"col_end":45,"count":0},{"col_start":46,"col_end":47,"count":0}]},{"line":"        pt.y = pt.y.neg();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    if !pt.is_on_curve() {","counters":[{"col_start":7,"col_end":24,"count":0}]},{"line":"        return None;","counters":[{"col_start":15,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // Safe now because we checked point pt is on curve","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"    Some(PubKey::from_point_unsafe(pt))","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn take<T>(slice: &[T], n: usize) -> &[T] {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    slice.get(..n).unwrap_or(slice)","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn drop<T>(slice: &[T], n: usize) -> &[T] {","counters":[]},{"line":"    slice.get(n..).unwrap_or(&[])","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn take_at<T>(slice: &[T], skip: usize, n: usize) -> &[T] {","counters":[]},{"line":"    slice.get(skip..).map(|s| take(s, n)).unwrap_or(&[])","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn split_at<T>(slice: &[T], at: usize) -> (&[T], &[T]) {","counters":[]},{"line":"    if at <= slice.len() {","counters":[]},{"line":"        slice.split_at(at)","counters":[]},{"line":"    } else {","counters":[]},{"line":"        (slice, &[])","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn split_at_vec<T>(mut vec: Vec<T>, at: usize) -> (Vec<T>, Vec<T>) {","counters":[]},{"line":"    if at <= vec.len() {","counters":[]},{"line":"        let vec2 = vec.split_off(at);","counters":[]},{"line":"        (vec, vec2)","counters":[]},{"line":"    } else {","counters":[]},{"line":"        (vec, Vec::new())","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// `std::borrow::Cow` has a `ToOwned` constraints","counters":[]},{"line":"pub enum MyCow<'a, T> {","counters":[]},{"line":"    Borrow(&'a T),","counters":[]},{"line":"    Own(T),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<'a, T> std::ops::Deref for MyCow<'a, T> {","counters":[]},{"line":"    type Target = T;","counters":[]},{"line":"","counters":[]},{"line":"    fn deref(&self) -> &Self::Target {","counters":[]},{"line":"        self.as_ref()","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<'a, T> AsRef<T> for MyCow<'a, T> {","counters":[]},{"line":"    fn as_ref(&self) -> &T {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            MyCow::Borrow(v) => v,","counters":[{"col_start":26,"col_end":33,"count":0}]},{"line":"            MyCow::Own(v) => v,","counters":[{"col_start":23,"col_end":30,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// `std::borrow::Cow` has a `ToOwned` constraints","counters":[]},{"line":"pub enum MyCowMut<'a, T> {","counters":[]},{"line":"    Borrow(&'a mut T),","counters":[]},{"line":"    Own(T),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<'a, T> std::ops::Deref for MyCowMut<'a, T> {","counters":[]},{"line":"    type Target = T;","counters":[]},{"line":"","counters":[]},{"line":"    fn deref(&self) -> &Self::Target {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            MyCowMut::Borrow(v) => v,","counters":[{"col_start":29,"col_end":36,"count":0}]},{"line":"            MyCowMut::Own(v) => v,","counters":[{"col_start":26,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<'a, T> std::ops::DerefMut for MyCowMut<'a, T> {","counters":[]},{"line":"    fn deref_mut(&mut self) -> &mut Self::Target {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            MyCowMut::Borrow(v) => v,","counters":[{"col_start":29,"col_end":36,"count":0}]},{"line":"            MyCowMut::Own(v) => v,","counters":[{"col_start":26,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}