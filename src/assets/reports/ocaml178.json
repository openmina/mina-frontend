{"filename":"src/lib/mina_base/token_id.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Legacy_token = Mina_numbers.Nat.Make64 ()","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t = Account_id.Digest.Stable.V1.t","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1},{"col_start":13,"col_end":13,"count":0}]},{"line":"    [@@deriving sexp, yojson, equal, compare, hash]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  (* for transactions in pre-Berkeley hard fork *)","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Legacy_token.Stable.V1.t","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":9,"col_end":9,"count":2},{"col_start":13,"col_end":13,"count":0}]},{"line":"    [@@deriving sexp, equal, compare, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":15}]},{"line":"","counters":[]},{"line":"    let to_latest _ = failwith \"Not implemented\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"[%%define_locally","counters":[]},{"line":"Account_id.Digest.","counters":[]},{"line":"  ( default","counters":[]},{"line":"  , typ","counters":[]},{"line":"  , to_input","counters":[]},{"line":"  , gen","counters":[]},{"line":"  , gen_non_default","counters":[]},{"line":"  , to_field_unsafe","counters":[]},{"line":"  , of_field","counters":[]},{"line":"  , to_string","counters":[]},{"line":"  , of_string","counters":[]},{"line":"  , comparator","counters":[]},{"line":"  , ( <> ) )]","counters":[]},{"line":"","counters":[]},{"line":"include Account_id.Digest.Binables","counters":[]},{"line":"","counters":[]},{"line":"(* someday, allow this in %%define_locally *)","counters":[]},{"line":"module Checked = Account_id.Digest.Checked","counters":[]},{"line":"","counters":[]},{"line":"let deriver obj =","counters":[]},{"line":"  (* this doesn't use js_type:Field because it is converted to JSON differently than a normal Field *)","counters":[]},{"line":"  Fields_derivers_zkapps.iso_string obj ~name:\"TokenId\"","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~js_type:(Custom \"TokenId\") ~doc:\"String representing a token ID\" ~to_string","counters":[]},{"line":"    ~of_string:(Fields_derivers_zkapps.except ~f:of_string `Token_id)","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":68,"col_end":68,"count":1}]}]}