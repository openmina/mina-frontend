{"filename":"src/lib/pickles/wrap_proof.ml","lines":[{"line":"open Pickles_types","counters":[]},{"line":"open Import","counters":[]},{"line":"open Backend","counters":[]},{"line":"","counters":[]},{"line":"type dlog_opening = (Tock.Curve.Affine.t, Tock.Field.t) Types.Step.Bulletproof.t","counters":[]},{"line":"","counters":[]},{"line":"module Constant = struct","counters":[]},{"line":"  (* Out-of-circuit type for wrap proofs *)","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { messages : Tock.Curve.Affine.t Plonk_types.Messages.t","counters":[]},{"line":"    ; opening : dlog_opening","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving hlist]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"open Step_main_inputs","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  (* In-circuit type for wrap proofs *)","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { messages :","counters":[]},{"line":"        (Inner_curve.t, Impl.Boolean.var) Plonk_types.Messages.In_circuit.t","counters":[]},{"line":"    ; opening :","counters":[]},{"line":"        ( Inner_curve.t","counters":[]},{"line":"        , Impls.Step.Other_field.t Shifted_value.Type2.t )","counters":[]},{"line":"        Types.Step.Bulletproof.t","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving hlist]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"open Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"let typ : (Checked.t, Constant.t) Typ.t =","counters":[]},{"line":"  let shift = Shifted_value.Type2.Shift.create (module Tock.Field) in","counters":[]},{"line":"  Typ.of_hlistable ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":17,"col_end":17,"count":1}]},{"line":"    ~value_to_hlist:Constant.to_hlist ~value_of_hlist:Constant.of_hlist","counters":[]},{"line":"    [ Plonk_types.Messages.typ","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"        (module Impl)","counters":[]},{"line":"        Inner_curve.typ","counters":[]},{"line":"        { lookup = No; runtime = No }","counters":[]},{"line":"        ~bool:Boolean.typ ~dummy:Inner_curve.Params.one","counters":[]},{"line":"        ~commitment_lengths:(Commitment_lengths.create ~of_int:(fun x -> x))","counters":[{"col_start":73,"col_end":73,"count":2}]},{"line":"    ; Types.Step.Bulletproof.typ ~length:(Nat.to_int Tock.Rounds.n)","counters":[{"col_start":31,"col_end":31,"count":1},{"col_start":51,"col_end":51,"count":1}]},{"line":"        ( Typ.transport Other_field.typ","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"            ~there:(fun x ->","counters":[]},{"line":"              (* When storing, make it a shifted value *)","counters":[]},{"line":"              match","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Shifted_value.Type2.of_field (module Tock.Field) ~shift x","counters":[]},{"line":"              with","counters":[]},{"line":"              | Shifted_value x ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  x )","counters":[]},{"line":"            ~back:(fun x ->","counters":[]},{"line":"              Shifted_value.Type2.to_field","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (module Tock.Field)","counters":[]},{"line":"                ~shift (Shifted_value x) )","counters":[]},{"line":"        (* When reading, unshift *)","counters":[]},{"line":"        |> Typ.transport_var","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"           (* For the var, we just wrap the now shifted underlying value. *)","counters":[]},{"line":"             ~there:(fun (Shifted_value.Type2.Shifted_value x) -> x)","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"             ~back:(fun x -> Shifted_value x) )","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        Inner_curve.typ","counters":[]},{"line":"    ]","counters":[{"col_start":4,"col_end":4,"count":2}]}]}