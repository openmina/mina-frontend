{"filename":"src/lib/snark_bits/bits_intf.ml","lines":[{"line":"(* bits_intf.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Fold_lib","counters":[]},{"line":"","counters":[]},{"line":"module type Basic = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val fold : t -> bool Fold.t","counters":[]},{"line":"","counters":[]},{"line":"  val size_in_bits : int","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include Basic","counters":[]},{"line":"","counters":[]},{"line":"  val iter : t -> f:(bool -> unit) -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val to_bits : t -> bool list","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Convertible_bits = sig","counters":[]},{"line":"  include S","counters":[]},{"line":"","counters":[]},{"line":"  val of_bits : bool list -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Tuple_lib","counters":[]},{"line":"","counters":[]},{"line":"module Snarkable = struct","counters":[]},{"line":"  module type Basic = sig","counters":[]},{"line":"    type (_, _) typ","counters":[]},{"line":"","counters":[]},{"line":"    type _ checked","counters":[]},{"line":"","counters":[]},{"line":"    type boolean_var","counters":[]},{"line":"","counters":[]},{"line":"    val size_in_bits : int","counters":[]},{"line":"","counters":[]},{"line":"    module Packed : sig","counters":[]},{"line":"      type var","counters":[]},{"line":"","counters":[]},{"line":"      type value","counters":[]},{"line":"","counters":[]},{"line":"      val typ : (var, value) typ","counters":[]},{"line":"","counters":[]},{"line":"      val size_in_bits : int","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Unpacked : sig","counters":[]},{"line":"      type var","counters":[]},{"line":"","counters":[]},{"line":"      type value","counters":[]},{"line":"","counters":[]},{"line":"      val typ : (var, value) typ","counters":[]},{"line":"","counters":[]},{"line":"      val var_to_bits : var -> boolean_var Bitstring_lib.Bitstring.Lsb_first.t","counters":[]},{"line":"","counters":[]},{"line":"      val var_of_bits : boolean_var Bitstring_lib.Bitstring.Lsb_first.t -> var","counters":[]},{"line":"","counters":[]},{"line":"      val var_to_triples : var -> boolean_var Triple.t list","counters":[]},{"line":"","counters":[]},{"line":"      val var_of_value : value -> var","counters":[]},{"line":"","counters":[]},{"line":"      val size_in_bits : int","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module type Lossy = sig","counters":[]},{"line":"    include Basic","counters":[]},{"line":"","counters":[]},{"line":"    val project_value : Unpacked.value -> Packed.value","counters":[]},{"line":"","counters":[]},{"line":"    val unpack_value : Packed.value -> Unpacked.value","counters":[]},{"line":"","counters":[]},{"line":"    val project_var : Unpacked.var -> Packed.var","counters":[]},{"line":"","counters":[]},{"line":"    val choose_preimage_var : Packed.var -> Unpacked.var checked","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module type Faithful = sig","counters":[]},{"line":"    include Basic","counters":[]},{"line":"","counters":[]},{"line":"    val pack_value : Unpacked.value -> Packed.value","counters":[]},{"line":"","counters":[]},{"line":"    val unpack_value : Packed.value -> Unpacked.value","counters":[]},{"line":"","counters":[]},{"line":"    val pack_var : Unpacked.var -> Packed.var","counters":[]},{"line":"","counters":[]},{"line":"    val unpack_var : Packed.var -> Unpacked.var checked","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module type Small = sig","counters":[]},{"line":"    type comparison_result","counters":[]},{"line":"","counters":[]},{"line":"    type field_var","counters":[]},{"line":"","counters":[]},{"line":"    include Faithful with type Packed.var = private field_var","counters":[]},{"line":"","counters":[]},{"line":"    val compare_var : Unpacked.var -> Unpacked.var -> comparison_result checked","counters":[]},{"line":"","counters":[]},{"line":"    val increment_var : Unpacked.var -> Unpacked.var checked","counters":[]},{"line":"","counters":[]},{"line":"    val increment_if_var : Unpacked.var -> boolean_var -> Unpacked.var checked","counters":[]},{"line":"","counters":[]},{"line":"    val assert_equal_var : Unpacked.var -> Unpacked.var -> unit checked","counters":[]},{"line":"","counters":[]},{"line":"    val equal_var : Unpacked.var -> Unpacked.var -> boolean_var checked","counters":[]},{"line":"","counters":[]},{"line":"    val var_of_field : field_var -> Unpacked.var checked","counters":[]},{"line":"","counters":[]},{"line":"    val var_of_field_unsafe : field_var -> Packed.var","counters":[]},{"line":"","counters":[]},{"line":"    val if_ :","counters":[]},{"line":"         boolean_var","counters":[]},{"line":"      -> then_:Unpacked.var","counters":[]},{"line":"      -> else_:Unpacked.var","counters":[]},{"line":"      -> Unpacked.var checked","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}