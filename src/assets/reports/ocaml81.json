{"filename":"src/lib/base58_check/version_bytes.ml","lines":[{"line":"(* version_bytes.ml -- version bytes for Base58Check encodings *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"type t = char","counters":[]},{"line":"","counters":[]},{"line":"(** Base58Check version bytes for individual types","counters":[]},{"line":"    Each of the following values should be distinct","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"let coinbase : t = '\\x01'","counters":[]},{"line":"","counters":[]},{"line":"let secret_box_byteswr : t = '\\x02'","counters":[]},{"line":"","counters":[]},{"line":"let fee_transfer_single : t = '\\x03'","counters":[]},{"line":"","counters":[]},{"line":"let frontier_hash : t = '\\x04'","counters":[]},{"line":"","counters":[]},{"line":"let ledger_hash : t = '\\x05'","counters":[]},{"line":"","counters":[]},{"line":"let lite_precomputed : t = '\\x06'","counters":[]},{"line":"","counters":[]},{"line":"let proof : t = '\\x0A'","counters":[]},{"line":"","counters":[]},{"line":"let random_oracle_base : t = '\\x0B'","counters":[]},{"line":"","counters":[]},{"line":"let receipt_chain_hash : t = '\\x0C'","counters":[]},{"line":"","counters":[]},{"line":"let epoch_seed : t = '\\x0D'","counters":[]},{"line":"","counters":[]},{"line":"let staged_ledger_hash_aux_hash : t = '\\x0E'","counters":[]},{"line":"","counters":[]},{"line":"let staged_ledger_hash_pending_coinbase_aux : t = '\\x0F'","counters":[]},{"line":"","counters":[]},{"line":"let state_hash : t = '\\x10'","counters":[]},{"line":"","counters":[]},{"line":"let state_body_hash : t = '\\x11'","counters":[]},{"line":"","counters":[]},{"line":"let transaction_hash : t = '\\x12'","counters":[]},{"line":"","counters":[]},{"line":"(* used only to deserialize transaction ids, pre-Berkeley hard fork *)","counters":[]},{"line":"let signed_command_v1 : t = '\\x13'","counters":[]},{"line":"","counters":[]},{"line":"let user_command_memo : t = '\\x14'","counters":[]},{"line":"","counters":[]},{"line":"let vrf_truncated_output : t = '\\x15'","counters":[]},{"line":"","counters":[]},{"line":"let web_pipe : t = '\\x16'","counters":[]},{"line":"","counters":[]},{"line":"let coinbase_stack_data : t = '\\x17'","counters":[]},{"line":"","counters":[]},{"line":"let coinbase_stack_hash : t = '\\x18'","counters":[]},{"line":"","counters":[]},{"line":"let pending_coinbase_hash_builder : t = '\\x19'","counters":[]},{"line":"","counters":[]},{"line":"let zkapp_command : t = '\\x1A'","counters":[]},{"line":"","counters":[]},{"line":"let verification_key : t = '\\x1B'","counters":[]},{"line":"","counters":[]},{"line":"let token_id_key : t = '\\x1C'","counters":[]},{"line":"","counters":[]},{"line":"(** used for testing only *)","counters":[]},{"line":"","counters":[]},{"line":"let ledger_test_hash : t = '\\x30'","counters":[]},{"line":"","counters":[]},{"line":"(** The following version bytes are non-sequential; existing","counters":[]},{"line":"    user key infrastructure depends on them. don't change them!","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"let private_key : t = '\\x5A'","counters":[]},{"line":"","counters":[]},{"line":"let non_zero_curve_point_compressed : t = '\\xCB'","counters":[]},{"line":"","counters":[]},{"line":"let signature : t = '\\x9A'","counters":[{"col_start":25,"col_end":25,"count":1}]}]}