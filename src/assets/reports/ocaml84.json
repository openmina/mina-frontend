{"filename":"src/lib/one_or_two/intfs.ml","lines":[{"line":"type 'a t = [ `One of 'a | `Two of 'a * 'a ]","counters":[]},{"line":"","counters":[]},{"line":"(** One_or_two operations in a two-parameter monad. *)","counters":[]},{"line":"module type Monadic2 = sig","counters":[]},{"line":"  type ('a, 'e) m","counters":[]},{"line":"","counters":[]},{"line":"  val sequence : ('a, 'e) m t -> ('a t, 'e) m","counters":[]},{"line":"","counters":[]},{"line":"  val map : 'a t -> f:('a -> ('b, 'e) m) -> ('b t, 'e) m","counters":[]},{"line":"","counters":[]},{"line":"  val fold :","counters":[]},{"line":"    'a t -> init:'accum -> f:('accum -> 'a -> ('accum, 'e) m) -> ('accum, 'e) m","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** One_or_two operations in a single parameter monad. *)","counters":[]},{"line":"module type Monadic = sig","counters":[]},{"line":"  type 'a m","counters":[]},{"line":"","counters":[]},{"line":"  include Monadic2 with type ('a, 'e) m := 'a m","counters":[]},{"line":"end","counters":[]}]}