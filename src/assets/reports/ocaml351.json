{"filename":"src/lib/transaction_snark/test/test_zkapp_update.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_ledger","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module U = Util","counters":[]},{"line":"module Spec = Transaction_snark.For_tests.Update_states_spec","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"module type Input_intf = sig","counters":[]},{"line":"  (*Spec for all the updates to generate a zkapp_command transaction*)","counters":[]},{"line":"  val snapp_update : Account_update.Update.t","counters":[]},{"line":"","counters":[]},{"line":"  val test_description : string","counters":[]},{"line":"","counters":[]},{"line":"  val failure_expected : Mina_base.Transaction_status.Failure.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Input : Input_intf) = struct","counters":[]},{"line":"  open Input","counters":[]},{"line":"","counters":[]},{"line":"  let `VK vk, `Prover zkapp_prover = Lazy.force U.trivial_zkapp","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let memo = Signed_command_memo.create_from_string_exn test_description","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with signature\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs = _ }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = (new_kp, Mina_base.Account.Nonce.zero)","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Signature","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with proof\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs = _ }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = (new_kp, Mina_base.Account.Nonce.zero)","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Proof","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:","counters":[]},{"line":"            (U.permissions_from_update snapp_update ~auth:Proof)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with None permission\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.None","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:(U.permissions_from_update snapp_update ~auth:None)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with None permission and Signature auth\"","counters":[]},{"line":"      =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Signature","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:(U.permissions_from_update snapp_update ~auth:None)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with None permission and Proof auth\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Proof","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:(U.permissions_from_update snapp_update ~auth:None)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with Either permission and Signature \\","counters":[]},{"line":"                 auth\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Signature","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:","counters":[]},{"line":"            (U.permissions_from_update snapp_update ~auth:Either)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with Either permission and Proof auth\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.Proof","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update","counters":[]},{"line":"          ~snapp_permissions:","counters":[]},{"line":"            (U.permissions_from_update snapp_update ~auth:Either)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"update a snapp account with Either permission and None auth\" =","counters":[]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let spec = List.hd_exn specs in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let test_spec : Spec.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { sender = spec.sender","counters":[]},{"line":"          ; fee","counters":[]},{"line":"          ; fee_payer = None","counters":[]},{"line":"          ; receivers = []","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"          ; memo","counters":[]},{"line":"          ; new_zkapp_account = false","counters":[]},{"line":"          ; snapp_update","counters":[]},{"line":"          ; current_auth = Permissions.Auth_required.None","counters":[]},{"line":"          ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"          ; events = []","counters":[]},{"line":"          ; sequence_events = []","counters":[]},{"line":"          ; preconditions = None","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        U.test_snapp_update ~expected_failure:failure_expected","counters":[]},{"line":"          ~snapp_permissions:","counters":[]},{"line":"            (U.permissions_from_update snapp_update ~auth:Either)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          test_spec ~init_ledger ~vk ~zkapp_prover","counters":[]},{"line":"          ~snapp_pk:(Public_key.compress new_kp.public_key) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"Update when not permitted but transaction is applied\" =","counters":[]},{"line":"    let open Mina_transaction_logic.For_tests in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Quickcheck.test ~trials:1 U.gen_snapp_ledger","counters":[]},{"line":"      ~f:(fun ({ init_ledger; specs }, new_kp) ->","counters":[]},{"line":"        Ledger.with_ledger ~depth:U.ledger_depth ~f:(fun ledger ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            let spec = List.hd_exn specs in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let fee = Fee.of_int 1_000_000 in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let amount = Amount.of_int 10_000_000_000 in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let test_spec : Spec.t =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              { sender = spec.sender","counters":[]},{"line":"              ; fee","counters":[]},{"line":"              ; fee_payer = None","counters":[]},{"line":"              ; receivers = []","counters":[]},{"line":"              ; amount","counters":[]},{"line":"              ; zkapp_account_keypairs = [ new_kp ]","counters":[]},{"line":"              ; memo","counters":[]},{"line":"              ; new_zkapp_account = false","counters":[]},{"line":"              ; snapp_update","counters":[]},{"line":"              ; current_auth = Permissions.Auth_required.Signature","counters":[]},{"line":"              ; call_data = Snark_params.Tick.Field.zero","counters":[]},{"line":"              ; events = []","counters":[]},{"line":"              ; sequence_events = []","counters":[]},{"line":"              ; preconditions = None","counters":[]},{"line":"              }","counters":[]},{"line":"            in","counters":[]},{"line":"            let snapp_pk = Public_key.compress new_kp.public_key in","counters":[]},{"line":"            Init_ledger.init (module Ledger.Ledger_inner) init_ledger ledger ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            (*Create snapp transaction*)","counters":[]},{"line":"            Transaction_snark.For_tests.create_trivial_zkapp_account","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~permissions:(U.permissions_from_update snapp_update ~auth:Proof)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"              ~vk ~ledger snapp_pk ;","counters":[]},{"line":"            (*Ledger.apply_transaction should be successful if fee payer update","counters":[]},{"line":"              is successful*)","counters":[]},{"line":"            U.test_snapp_update ~expected_failure:failure_expected","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ~snapp_permissions:","counters":[]},{"line":"                (U.permissions_from_update snapp_update ~auth:Proof)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              ~vk ~zkapp_prover test_spec ~init_ledger ~snapp_pk ) )","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}