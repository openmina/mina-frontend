{"filename":"src/address/raw.rs","lines":[{"line":"use crate::base::AccountIndex;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug, PartialEq, Eq)]","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":20,"col_end":21,"count":0}]},{"line":"pub enum Direction {","counters":[]},{"line":"    Left,","counters":[]},{"line":"    Right,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Address<const NBYTES: usize> {","counters":[]},{"line":"    pub(super) inner: [u8; NBYTES],","counters":[]},{"line":"    pub(super) length: usize,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<'a, const NBYTES: usize> TryFrom<&'a str> for Address<NBYTES> {","counters":[]},{"line":"    type Error = ();","counters":[]},{"line":"","counters":[]},{"line":"    fn try_from(s: &'a str) -> Result<Self, Self::Error> {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        if s.len() >= (NBYTES * 8) {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            return Err(());","counters":[{"col_start":19,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let mut addr = Address {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            inner: [0; NBYTES],","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            length: s.len(),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        for (index, c) in s.chars().enumerate() {","counters":[{"col_start":13,"col_end":21,"count":0},{"col_start":26,"col_end":47,"count":0}]},{"line":"            if c == '1' {","counters":[{"col_start":15,"col_end":23,"count":0},{"col_start":24,"col_end":25,"count":0}]},{"line":"                addr.set(index);","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            } else if c != '0' {","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":22,"col_end":30,"count":0}]},{"line":"                return Err(());","counters":[{"col_start":23,"col_end":30,"count":16912922}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":-16912922}]},{"line":"        }","counters":[]},{"line":"        Ok(addr)","counters":[{"col_start":8,"col_end":16,"count":2641136}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":19554058}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> PartialEq for Address<NBYTES> {","counters":[]},{"line":"    fn eq(&self, other: &Self) -> bool {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        if self.length != other.length {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            return false;","counters":[{"col_start":19,"col_end":24,"count":67}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":-67}]},{"line":"","counters":[]},{"line":"        let nused_bytes = self.nused_bytes();","counters":[{"col_start":0,"col_end":45,"count":-67}]},{"line":"","counters":[]},{"line":"        if self.inner[0..nused_bytes - 1] != other.inner[0..nused_bytes - 1] {","counters":[{"col_start":0,"col_end":76,"count":-67}]},{"line":"            return false;","counters":[{"col_start":19,"col_end":24,"count":67}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        const MASK: [u8; 8] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            0b11111111, 0b10000000, 0b11000000, 0b11100000, 0b11110000, 0b11111000, 0b11111100,","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            0b11111110,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        ];","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let bit_index = self.length % 8;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let mask = MASK[bit_index];","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        self.inner[nused_bytes - 1] & mask == other.inner[nused_bytes - 1] & mask","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":134}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> std::fmt::Debug for Address<NBYTES> {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        let mut s = String::with_capacity(NBYTES * 8);","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"        for index in 0..self.length {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":24,"col_end":35,"count":0}]},{"line":"            if index != 0 && index % 8 == 0 {","counters":[{"col_start":15,"col_end":25,"count":0},{"col_start":29,"col_end":43,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"                s.push('_');","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            match self.get(index) {","counters":[{"col_start":18,"col_end":33,"count":0}]},{"line":"                Direction::Left => s.push('0'),","counters":[{"col_start":35,"col_end":46,"count":0}]},{"line":"                Direction::Right => s.push('1'),","counters":[{"col_start":36,"col_end":47,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        f.debug_struct(\"Address\")","counters":[{"col_start":8,"col_end":33,"count":3}]},{"line":"            .field(\"inner\", &s)","counters":[{"col_start":0,"col_end":31,"count":3}]},{"line":"            .field(\"length\", &self.length)","counters":[{"col_start":0,"col_end":42,"count":3}]},{"line":"            .field(\"index\", &self.to_index())","counters":[{"col_start":0,"col_end":45,"count":3}]},{"line":"            .finish()","counters":[{"col_start":0,"col_end":21,"count":3}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":3}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> IntoIterator for Address<NBYTES> {","counters":[]},{"line":"    type Item = Direction;","counters":[]},{"line":"","counters":[]},{"line":"    type IntoIter = AddressIterator<NBYTES>;","counters":[]},{"line":"","counters":[]},{"line":"    fn into_iter(self) -> Self::IntoIter {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        let length = self.length;","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        AddressIterator {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            length,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            addr: self,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            iter_index: 0,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            iter_back_index: length,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> Address<NBYTES> {","counters":[]},{"line":"    pub fn to_linear_index(&self) -> usize {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        let index = self.to_index();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        2usize.pow(self.length as u32) + index.0 as usize - 1","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn iter(&self) -> AddressIterator<NBYTES> {","counters":[]},{"line":"        AddressIterator {","counters":[]},{"line":"            addr: self.clone(),","counters":[]},{"line":"            length: self.length,","counters":[]},{"line":"            iter_index: 0,","counters":[]},{"line":"            iter_back_index: self.length,","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    pub fn length(&self) -> usize {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        self.length","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn root() -> Self {","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            inner: [0; NBYTES],","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            length: 0,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub const fn first(length: usize) -> Self {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            inner: [0; NBYTES],","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            length,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn last(length: usize) -> Self {","counters":[]},{"line":"        Self {","counters":[]},{"line":"            inner: [!0; NBYTES],","counters":[]},{"line":"            length,","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    pub fn child_left(&self) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            inner: self.inner,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            length: self.length + 1,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn child_right(&self) -> Self {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        let mut child = self.child_left();","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        child.set(child.length() - 1);","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        child","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn parent(&self) -> Option<Self> {","counters":[{"col_start":4,"col_end":42,"count":68}]},{"line":"        if self.length == 0 {","counters":[{"col_start":0,"col_end":27,"count":68}]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Some(Self {","counters":[{"col_start":12,"col_end":23,"count":68}]},{"line":"                inner: self.inner,","counters":[{"col_start":0,"col_end":34,"count":68}]},{"line":"                length: self.length - 1,","counters":[{"col_start":0,"col_end":40,"count":68}]},{"line":"            })","counters":[{"col_start":0,"col_end":14,"count":68}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":68}]},{"line":"","counters":[]},{"line":"    pub fn is_root(&self) -> bool {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        self.length == 0","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get(&self, index: usize) -> Direction {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        let byte_index = index / 8;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        let bit_index = index % 8;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        if self.inner[byte_index] & (1 << (7 - bit_index)) != 0 {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            Direction::Right","counters":[{"col_start":12,"col_end":28,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Direction::Left","counters":[{"col_start":12,"col_end":27,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set(&mut self, index: usize) {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        let byte_index = index / 8;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        let bit_index = index % 8;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        self.inner[byte_index] |= 1 << (7 - bit_index);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn unset(&mut self, index: usize) {","counters":[{"col_start":4,"col_end":39,"count":2}]},{"line":"        let byte_index = index / 8;","counters":[{"col_start":0,"col_end":35,"count":2}]},{"line":"        let bit_index = index % 8;","counters":[{"col_start":0,"col_end":34,"count":2}]},{"line":"","counters":[]},{"line":"        self.inner[byte_index] &= !(1 << (7 - bit_index));","counters":[{"col_start":0,"col_end":58,"count":2}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2}]},{"line":"","counters":[]},{"line":"    fn nused_bytes(&self) -> usize {","counters":[{"col_start":4,"col_end":36,"count":2}]},{"line":"        self.length.saturating_sub(1) / 8 + 1","counters":[{"col_start":0,"col_end":45,"count":2}]},{"line":"","counters":[]},{"line":"        // let length_div = self.length / 8;","counters":[{"col_start":0,"col_end":44,"count":2}]},{"line":"        // let length_mod = self.length % 8;","counters":[{"col_start":0,"col_end":44,"count":2}]},{"line":"","counters":[]},{"line":"        // if length_mod == 0 {","counters":[{"col_start":0,"col_end":31,"count":2}]},{"line":"        //     length_div","counters":[{"col_start":0,"col_end":25,"count":2}]},{"line":"        // } else {","counters":[{"col_start":0,"col_end":19,"count":2}]},{"line":"        //     length_div + 1","counters":[{"col_start":0,"col_end":29,"count":2}]},{"line":"        // }","counters":[{"col_start":0,"col_end":12,"count":2}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2}]},{"line":"","counters":[]},{"line":"    pub(super) fn clear_after(&mut self, index: usize) {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let byte_index = index / 8;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        let bit_index = index % 8;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        const MASK: [u8; 8] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            0b10000000, 0b11000000, 0b11100000, 0b11110000, 0b11111000, 0b11111100, 0b11111110,","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            0b11111111,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        ];","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        self.inner[byte_index] &= MASK[bit_index];","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        for byte_index in byte_index + 1..self.nused_bytes() {","counters":[{"col_start":12,"col_end":22,"count":0},{"col_start":26,"col_end":60,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"            self.inner[byte_index] = 0;","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_after(&mut self, index: usize) {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        let byte_index = index / 8;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        let bit_index = index % 8;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        const MASK: [u8; 8] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            0b01111111, 0b00111111, 0b00011111, 0b00001111, 0b00000111, 0b00000011, 0b00000001,","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            0b00000000,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        ];","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        self.inner[byte_index] |= MASK[bit_index];","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        for byte_index in byte_index + 1..self.nused_bytes() {","counters":[{"col_start":12,"col_end":22,"count":0},{"col_start":26,"col_end":60,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"            self.inner[byte_index] = !0;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":2}]},{"line":"","counters":[]},{"line":"    pub fn next(&self) -> Option<Self> {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        let length = self.length;","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        let mut next = self.clone();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        let nused_bytes = self.nused_bytes();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        const MASK: [u8; 8] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            0b00000000, 0b01111111, 0b00111111, 0b00011111, 0b00001111, 0b00000111, 0b00000011,","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            0b00000001,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        ];","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        next.inner[nused_bytes - 1] |= MASK[length % 8];","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        let rightmost_clear_index = next.inner[0..nused_bytes]","counters":[{"col_start":12,"col_end":33,"count":0},{"col_start":36,"col_end":62,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .rev()","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .enumerate()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .find_map(|(index, byte)| match byte.trailing_ones() as usize {","counters":[{"col_start":0,"col_end":22,"count":0},{"col_start":38,"col_end":73,"count":0}]},{"line":"                x if x == 8 => None,","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":21,"col_end":27,"count":0},{"col_start":31,"col_end":35,"count":0}]},{"line":"                x => Some((nused_bytes - index) * 8 - x - 1),","counters":[{"col_start":16,"col_end":60,"count":0}]},{"line":"            })?;","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0},{"col_start":14,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"        next.set(rightmost_clear_index);","counters":[{"col_start":8,"col_end":40,"count":0}]},{"line":"        next.clear_after(rightmost_clear_index);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"        assert_ne!(self, &next);","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"        Some(next)","counters":[{"col_start":8,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn prev(&self) -> Option<Self> {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        let length = self.length;","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        let mut prev = self.clone();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        let nused_bytes = self.nused_bytes();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        const MASK: [u8; 8] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            0b11111111, 0b10000000, 0b11000000, 0b11100000, 0b11110000, 0b11111000, 0b11111100,","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            0b11111110,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        ];","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        prev.inner[nused_bytes - 1] &= MASK[length % 8];","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        let nused_bytes = self.nused_bytes();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        let rightmost_one_index = prev.inner[0..nused_bytes]","counters":[{"col_start":12,"col_end":31,"count":0},{"col_start":34,"col_end":60,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .rev()","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .enumerate()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .find_map(|(index, byte)| match byte.trailing_zeros() as usize {","counters":[{"col_start":0,"col_end":22,"count":0},{"col_start":38,"col_end":74,"count":0}]},{"line":"                x if x == 8 => None,","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":21,"col_end":27,"count":0},{"col_start":31,"col_end":35,"count":0}]},{"line":"                x => Some((nused_bytes - index) * 8 - x - 1),","counters":[{"col_start":16,"col_end":60,"count":1}]},{"line":"            })?;","counters":[{"col_start":12,"col_end":13,"count":1},{"col_start":13,"col_end":14,"count":0},{"col_start":14,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"        prev.unset(rightmost_one_index);","counters":[{"col_start":8,"col_end":40,"count":0}]},{"line":"        prev.set_after(rightmost_one_index);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        assert_ne!(self, &prev);","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"        Some(prev)","counters":[{"col_start":8,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn to_index(&self) -> AccountIndex {","counters":[{"col_start":4,"col_end":44,"count":1472}]},{"line":"        if self.length == 0 {","counters":[{"col_start":0,"col_end":27,"count":1472}]},{"line":"            return AccountIndex(0);","counters":[{"col_start":19,"col_end":34,"count":1472}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let mut account_index: u64 = 0;","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        let nused_bytes = self.nused_bytes();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let mut shift = 0;","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"        self.inner[0..nused_bytes]","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .rev()","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .enumerate()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .for_each(|(index, byte)| {","counters":[{"col_start":0,"col_end":22,"count":0},{"col_start":38,"col_end":39,"count":0}]},{"line":"                let byte = *byte as u64;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"                if index == 0 && self.length % 8 != 0 {","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":53,"count":0},{"col_start":54,"col_end":55,"count":1}]},{"line":"                    let nunused = self.length % 8;","counters":[{"col_start":0,"col_end":50,"count":1}]},{"line":"                    account_index |= byte >> (8 - nunused);","counters":[{"col_start":0,"col_end":59,"count":1}]},{"line":"                    shift += nunused;","counters":[{"col_start":0,"col_end":37,"count":1}]},{"line":"                } else {","counters":[{"col_start":0,"col_end":17,"count":1},{"col_start":23,"col_end":24,"count":0}]},{"line":"                    account_index |= byte << shift;","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                    shift += 8;","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            });","counters":[{"col_start":12,"col_end":13,"count":1},{"col_start":13,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"        AccountIndex(account_index)","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":1472}]},{"line":"","counters":[]},{"line":"    pub fn from_index(index: AccountIndex, length: usize) -> Self {","counters":[{"col_start":4,"col_end":67,"count":1376}]},{"line":"        let account_index = index.0;","counters":[{"col_start":0,"col_end":36,"count":1376}]},{"line":"        let mut addr = Address::first(length);","counters":[{"col_start":0,"col_end":45,"count":1376}]},{"line":"","counters":[]},{"line":"        for (index, bit_index) in (0..length).rev().enumerate() {","counters":[{"col_start":13,"col_end":29,"count":0},{"col_start":34,"col_end":63,"count":1376}]},{"line":"            if account_index & (1 << bit_index) != 0 {","counters":[{"col_start":15,"col_end":52,"count":0},{"col_start":53,"col_end":54,"count":0}]},{"line":"                addr.set(index);","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        addr","counters":[{"col_start":8,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn iter_children(&self, length: usize) -> AddressChildrenIterator<NBYTES> {","counters":[{"col_start":4,"col_end":83,"count":0}]},{"line":"        assert!(self.length <= length);","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        let root_length = self.length;","counters":[{"col_start":12,"col_end":38,"count":0}]},{"line":"        let mut current = self.clone();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"        let mut until = current.next().map(|mut until| {","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":55,"col_end":56,"count":0}]},{"line":"            until.length = length;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            until.clear_after(root_length);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            until","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        current.length = length;","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        current.clear_after(root_length);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        let current = Some(current);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        if until == current {","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":28,"col_end":29,"count":25659}]},{"line":"            until = None;","counters":[{"col_start":0,"col_end":25,"count":25659}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":25659},{"col_start":9,"col_end":10,"count":-25659}]},{"line":"","counters":[]},{"line":"        AddressChildrenIterator {","counters":[{"col_start":8,"col_end":33,"count":0}]},{"line":"            current,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            until,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            nchildren: 2u64.pow(length as u32 - root_length as u32),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn is_before(&self, other: &Self) -> bool {","counters":[{"col_start":4,"col_end":51,"count":0}]},{"line":"        assert!(self.length <= other.length);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        let mut other = other.clone();","counters":[{"col_start":12,"col_end":38,"count":0}]},{"line":"        other.length = self.length;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        self.to_index() <= other.to_index()","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"        // self == &other","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn is_parent_of(&self, other: &Self) -> bool {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        if self.length == 0 {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            return true;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        assert!(self.length <= other.length);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        let mut other = other.clone();","counters":[{"col_start":12,"col_end":38,"count":0}]},{"line":"        other.length = self.length;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        self == &other","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    #[allow(clippy::inherent_to_string)]","counters":[]},{"line":"    pub fn to_string(&self) -> String {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        let mut s = String::with_capacity(self.length());","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        for index in 0..self.length {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":24,"col_end":35,"count":0}]},{"line":"            match self.get(index) {","counters":[{"col_start":18,"col_end":33,"count":0}]},{"line":"                Direction::Left => s.push('0'),","counters":[{"col_start":35,"col_end":46,"count":0}]},{"line":"                Direction::Right => s.push('1'),","counters":[{"col_start":36,"col_end":47,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        s","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    #[cfg(test)]","counters":[]},{"line":"    pub fn rand_nonleaf(max_depth: usize) -> Self {","counters":[]},{"line":"        use rand::{Rng, RngCore};","counters":[]},{"line":"","counters":[]},{"line":"        let mut rng = rand::thread_rng();","counters":[]},{"line":"        let length = rng.gen_range(0..max_depth);","counters":[]},{"line":"","counters":[]},{"line":"        let mut inner = [0; NBYTES];","counters":[]},{"line":"        rng.fill_bytes(&mut inner[0..(length / 8) + 1]);","counters":[]},{"line":"","counters":[]},{"line":"        Self { inner, length }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct AddressIterator<const NBYTES: usize> {","counters":[]},{"line":"    addr: Address<NBYTES>,","counters":[]},{"line":"    iter_index: usize,","counters":[]},{"line":"    iter_back_index: usize,","counters":[]},{"line":"    length: usize,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> DoubleEndedIterator for AddressIterator<NBYTES> {","counters":[]},{"line":"    fn next_back(&mut self) -> Option<Self::Item> {","counters":[]},{"line":"        let prev = self.iter_back_index.checked_sub(1)?;","counters":[]},{"line":"        self.iter_back_index = prev;","counters":[]},{"line":"        Some(self.addr.get(prev))","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> Iterator for AddressIterator<NBYTES> {","counters":[]},{"line":"    type Item = Direction;","counters":[]},{"line":"","counters":[]},{"line":"    fn next(&mut self) -> Option<Self::Item> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let iter_index = self.iter_index;","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        if iter_index >= self.length {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            return None;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"        self.iter_index += 1;","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"        Some(self.addr.get(iter_index))","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[]},{"line":"pub struct AddressChildrenIterator<const NBYTES: usize> {","counters":[]},{"line":"    current: Option<Address<NBYTES>>,","counters":[]},{"line":"    until: Option<Address<NBYTES>>,","counters":[]},{"line":"    nchildren: u64,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> AddressChildrenIterator<NBYTES> {","counters":[]},{"line":"    pub fn len(&self) -> usize {","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"        self.nchildren as usize","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn is_empty(&self) -> bool {","counters":[]},{"line":"        self.len() == 0","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<const NBYTES: usize> Iterator for AddressChildrenIterator<NBYTES> {","counters":[]},{"line":"    type Item = Address<NBYTES>;","counters":[]},{"line":"","counters":[]},{"line":"    fn next(&mut self) -> Option<Self::Item> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        if self.current == self.until {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            return None;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"        let current = self.current.clone()?;","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":22,"col_end":42,"count":0},{"col_start":42,"col_end":43,"count":0}]},{"line":"        self.current = current.next();","counters":[{"col_start":8,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        Some(current)","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}