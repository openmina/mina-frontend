{"filename":"src/lib/visualization/visualization.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(** [Visualization] is a set of tools that lets a client visualize complex data","counters":[]},{"line":"    structures like the transition_frontier *)","counters":[]},{"line":"","counters":[]},{"line":"let display_prefix_of_string string = String.prefix string 10","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"let display_short_sexp (type t) (module M : Sexpable.S with type t = t)","counters":[]},{"line":"    (value : t) =","counters":[]},{"line":"  value |> [%sexp_of: M.t] |> Sexp.to_string |> display_prefix_of_string","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"(* converts a json structure into a presentable node in a dot file *)","counters":[]},{"line":"let rec to_dot (json : Yojson.Safe.t) =","counters":[]},{"line":"  match json with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Int value ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Int.to_string value","counters":[]},{"line":"  | `String value | `Intlit value ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"      value","counters":[]},{"line":"  | `Assoc values ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map values ~f:(fun (key, value) ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          match value with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | `Assoc subvalues ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf !\"{%s|{%s}}\" key @@ to_dot (`Assoc subvalues)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          | subvalue ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf !\"%s:%s\" key (to_dot subvalue) )","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      |> String.concat ~sep:\"|\"","counters":[]},{"line":"  | `List values | `Tuple values ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      List.map values ~f:(fun value -> to_dot value) |> String.concat ~sep:\"|\"","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"  | `Float value ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Float.to_string value","counters":[]},{"line":"  | `Bool value ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Bool.to_string value","counters":[]},{"line":"  | `Variant (key, value) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Option.value_map value ~default:key ~f:(fun some_value ->","counters":[]},{"line":"          sprintf !\"%s:%s\" key (to_dot some_value) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  | `Null ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"null\"","counters":[]},{"line":"","counters":[]},{"line":"module type Node_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  type display [@@deriving yojson]","counters":[]},{"line":"","counters":[]},{"line":"  val display : t -> display","counters":[]},{"line":"","counters":[]},{"line":"  val equal : t -> t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val hash : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val compare : t -> t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val name : t -> string","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** Visualizes graph structures. Namely, it assumes that a node can be presented","counters":[]},{"line":"    in a pretty json form. Using the json form, it interprets the json form","counters":[]},{"line":"    into dot form using the function, to_dot *)","counters":[]},{"line":"module Make_ocamlgraph (Node : Node_intf) = struct","counters":[]},{"line":"  module G = Graph.Persistent.Digraph.ConcreteBidirectional (Node)","counters":[]},{"line":"  include G","counters":[]},{"line":"","counters":[]},{"line":"  include Graph.Graphviz.Dot (struct","counters":[]},{"line":"    include G","counters":[]},{"line":"","counters":[]},{"line":"    let graph_attributes _ = [ `Rankdir `LeftToRight ]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let get_subgraph _ = None","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"    let default_vertex_attributes _ = [ `Shape `Record ]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let vertex_name = Node.name","counters":[]},{"line":"","counters":[]},{"line":"    let vertex_attributes node =","counters":[]},{"line":"      let dot_format = to_dot @@ Node.display_to_yojson (Node.display node) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      [ `Label dot_format ]","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let default_edge_attributes _ = []","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    let edge_attributes _ = []","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  end)","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}