{
  "filename": "src/lib/work_selector/work_selector.ml",
  "lines": [
    {
      "line": "module Lib = Work_lib.Make (Inputs.Implementation_inputs)",
      "counters": []
    },
    {
      "line": "module State = Lib.State",
      "counters": []
    },
    {
      "line": "",
      "counters": []
    },
    {
      "line": "module type Selection_method_intf =",
      "counters": []
    },
    {
      "line": "  Intf.Selection_method_intf",
      "counters": []
    },
    {
      "line": "    with type snark_pool := Network_pool.Snark_pool.t",
      "counters": []
    },
    {
      "line": "     and type staged_ledger := Staged_ledger.t",
      "counters": []
    },
    {
      "line": "     and type work :=",
      "counters": []
    },
    {
      "line": "      (Transaction_witness.t, Ledger_proof.t) Snark_work_lib.Work.Single.Spec.t",
      "counters": []
    },
    {
      "line": "     and type transition_frontier := Transition_frontier.t",
      "counters": []
    },
    {
      "line": "     and module State := State",
      "counters": []
    },
    {
      "line": "",
      "counters": []
    },
    {
      "line": "module Selection_methods = struct",
      "counters": []
    },
    {
      "line": "  module Random = Random.Make (Inputs.Implementation_inputs) (Lib)",
      "counters": []
    },
    {
      "line": "  module Sequence = Sequence.Make (Inputs.Implementation_inputs) (Lib)",
      "counters": []
    },
    {
      "line": "end",
      "counters": [
        {
          "col_start": 2,
          "col_end": 2,
          "count": 1
        }
      ]
    }
  ]
}
