{"filename":"src/lib/daemon_rpcs/client.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"(** Methods for the client to interact with Coda protocol *)","counters":[]},{"line":"","counters":[]},{"line":"let print_rpc_error error =","counters":[]},{"line":"  eprintf \"RPC connection error: %s\\n\" (Error.to_string_hum error)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"let dispatch rpc query (host_and_port : Host_and_port.t) =","counters":[]},{"line":"  Deferred.Or_error.try_with_join ~here:[%here] (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Tcp.with_connection (Tcp.Where_to_connect.of_host_and_port host_and_port)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        ~timeout:(Time.Span.of_sec 1.) (fun _ r w ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          let open Deferred.Let_syntax in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          match%bind","counters":[]},{"line":"            Rpc.Connection.create","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"              ~handshake_timeout:","counters":[]},{"line":"                (Time.Span.of_sec Mina_compile_config.rpc_handshake_timeout_sec)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"              ~heartbeat_config:","counters":[]},{"line":"                (Rpc.Connection.Heartbeat_config.create","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                   ~timeout:","counters":[]},{"line":"                     (Time_ns.Span.of_sec","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                        Mina_compile_config.rpc_heartbeat_timeout_sec )","counters":[]},{"line":"                   ~send_every:","counters":[]},{"line":"                     (Time_ns.Span.of_sec","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                        Mina_compile_config.rpc_heartbeat_send_every_sec )","counters":[]},{"line":"                   () )","counters":[]},{"line":"              r w","counters":[]},{"line":"              ~connection_state:(fun _ -> ())","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          with","counters":[]},{"line":"          | Error exn ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return","counters":[]},{"line":"                (Or_error.errorf","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                   !\"Error connecting to the daemon on %{sexp:Host_and_port.t} \\","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                     using the RPC call, %s,: %s\"","counters":[]},{"line":"                   host_and_port (Rpc.Rpc.name rpc) (Exn.to_string exn) )","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"          | Ok conn ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Rpc.Rpc.dispatch rpc conn query ) )","counters":[]},{"line":"","counters":[]},{"line":"let dispatch_join_errors rpc query port =","counters":[]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map res = dispatch rpc query port in","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  Or_error.join res","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(** Call an RPC, passing handlers for a successful call and a failing one. Note","counters":[]},{"line":"    that a successful *call* may have failed on the server side and returned a","counters":[]},{"line":"    failing result. To deal with that, the success handler returns an","counters":[]},{"line":"    Or_error. *)","counters":[]},{"line":"let dispatch_with_message rpc query port ~success ~error","counters":[]},{"line":"    ~(join_error : 'a Or_error.t -> 'b Or_error.t) =","counters":[]},{"line":"  let fail err = eprintf \"%s\\n%!\" err ; exit 18 in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"  let%bind res = dispatch rpc query port in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  match join_error res with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Ok x ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      printf \"%s\\n\" (success x) ;","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      fail (error e)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"let dispatch_pretty_message (type t)","counters":[]},{"line":"    (module Print : Cli_lib.Render.Printable_intf with type t = t)","counters":[]},{"line":"    ?(json = true) ~(join_error : 'a Or_error.t -> t Or_error.t) ~error_ctx rpc","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    query port =","counters":[]},{"line":"  let%bind res = dispatch rpc query port in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  Cli_lib.Render.print (module Print) json (join_error res) ~error_ctx","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"  |> Deferred.return","counters":[{"col_start":19,"col_end":19,"count":2}]}]}