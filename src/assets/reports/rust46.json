{"filename":"src/coverage/covmap.rs","lines":[{"line":"use super::util::{cursor_align, read_int, Leb128};","counters":[]},{"line":"use std::io::{Cursor, Read, Seek, SeekFrom};","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Header {","counters":[]},{"line":"    zero: u32,","counters":[]},{"line":"    encoded_filenames_len: u32,","counters":[]},{"line":"    zero2: u32,","counters":[]},{"line":"    version: u32,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Header {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let header = Self {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            zero: read_int(cursor),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            encoded_filenames_len: read_int(cursor),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            zero2: read_int(cursor),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            version: read_int(cursor),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        assert!(header.zero == 0 && header.zero2 == 0);","counters":[{"col_start":8,"col_end":15,"count":0},{"col_start":16,"col_end":32,"count":0},{"col_start":36,"col_end":53,"count":0}]},{"line":"        header","counters":[{"col_start":8,"col_end":14,"count":-48}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":-48}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Filenames(pub Vec<String>);","counters":[]},{"line":"","counters":[]},{"line":"impl Filenames {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":48}]},{"line":"        let num_filenames = u64::read_leb128(cursor);","counters":[{"col_start":0,"col_end":53,"count":48}]},{"line":"        let uncompressed_len = usize::read_leb128(cursor);","counters":[{"col_start":0,"col_end":58,"count":48}]},{"line":"        let compressed_len = usize::read_leb128(cursor);","counters":[{"col_start":0,"col_end":56,"count":48}]},{"line":"        let pos = cursor.position() as usize;","counters":[{"col_start":0,"col_end":45,"count":48}]},{"line":"","counters":[]},{"line":"        let mut filenames = Vec::new();","counters":[{"col_start":0,"col_end":39,"count":48}]},{"line":"        let mut decompressed_buf = vec![0; uncompressed_len];","counters":[{"col_start":0,"col_end":60,"count":48}]},{"line":"        let buf = if compressed_len != 0 {","counters":[{"col_start":12,"col_end":15,"count":48},{"col_start":21,"col_end":40,"count":48}]},{"line":"            flate2::Decompress::new(true)","counters":[{"col_start":12,"col_end":41,"count":0}]},{"line":"                .decompress(","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                    &cursor.get_ref()[pos..pos + compressed_len],","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                    &mut decompressed_buf[..],","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    flate2::FlushDecompress::Finish,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                )","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                .unwrap();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            decompressed_buf","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            cursor.get_ref()[pos..pos + uncompressed_len].to_vec()","counters":[{"col_start":12,"col_end":66,"count":48}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let mut cursor = Cursor::new(&buf);","counters":[{"col_start":12,"col_end":42,"count":48}]},{"line":"","counters":[]},{"line":"        while (cursor.position() as usize) < uncompressed_len {","counters":[{"col_start":14,"col_end":61,"count":48},{"col_start":62,"col_end":63,"count":0}]},{"line":"            filenames.push(Self::read_filename(&mut cursor));","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        assert!(filenames.len() == num_filenames as usize);","counters":[{"col_start":8,"col_end":58,"count":48}]},{"line":"        Self(filenames)","counters":[{"col_start":8,"col_end":23,"count":48}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":48}]},{"line":"","counters":[]},{"line":"    fn read_filename(cursor: &mut Cursor<&Vec<u8>>) -> String {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        let string_len = usize::read_leb128(cursor);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        let mut output = vec![0; string_len];","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        cursor.read_exact(output.as_mut_slice()).unwrap();","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        String::from_utf8(output).unwrap()","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct CovMap {","counters":[]},{"line":"    header: Header,","counters":[]},{"line":"    pub encoded_data_hash: u64,","counters":[]},{"line":"    pub filenames: Filenames,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl CovMap {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let header = Header::read(cursor);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        let pos = cursor.position() as usize;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let end = pos + header.encoded_filenames_len as usize;","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"        let digest = md5::compute(&cursor.get_ref()[pos..end]).0;","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"        let encoded_data_hash: u64 = read_int(&mut Cursor::new(digest));","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"        let filenames = Filenames::read(cursor);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        cursor.seek(SeekFrom::Start(end as u64)).unwrap();","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        cursor_align::<u64>(cursor);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            header,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            encoded_data_hash,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            filenames,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}