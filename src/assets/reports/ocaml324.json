{"filename":"src/lib/mina_block/validation_types.ml","lines":[{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"type ( 'time_received","counters":[]},{"line":"     , 'genesis_state","counters":[]},{"line":"     , 'proof","counters":[]},{"line":"     , 'delta_block_chain","counters":[]},{"line":"     , 'frontier_dependencies","counters":[]},{"line":"     , 'staged_ledger_diff","counters":[]},{"line":"     , 'protocol_versions )","counters":[]},{"line":"     t =","counters":[]},{"line":"  'time_received","counters":[]},{"line":"  * 'genesis_state","counters":[]},{"line":"  * 'proof","counters":[]},{"line":"  * 'delta_block_chain","counters":[]},{"line":"  * 'frontier_dependencies","counters":[]},{"line":"  * 'staged_ledger_diff","counters":[]},{"line":"  * 'protocol_versions","counters":[]},{"line":"","counters":[]},{"line":"(* TODO commented out because of weird type errors *)","counters":[]},{"line":"(* Types are constrained though in practice (e.g. all functions requiring fully validated","counters":[]},{"line":"   block prescribe this requirement well) *)","counters":[]},{"line":"(* constraint 'time_received = [ `Time_received ] * (unit, _) Truth.t","counters":[]},{"line":"   constraint 'genesis_state = [ `Genesis_state ] * (unit, _) Truth.t","counters":[]},{"line":"   constraint 'proof = [ `Proof ] * (unit, _) Truth.t","counters":[]},{"line":"   (* TODO: This type seems wrong... we sometimes have a proof if it was received","counters":[]},{"line":"      via gossip, but sometimes we do not and just stick a dummy proof here.","counters":[]},{"line":"      It seems that the better thing to do would be to mark this accordingly instead","counters":[]},{"line":"      of having a dummy (though I wonder why we need to cache this in the first","counters":[]},{"line":"      place). *)","counters":[]},{"line":"   constraint","counters":[]},{"line":"     'delta_block_chain =","counters":[]},{"line":"     [ `Delta_block_chain ] * (State_hash.t Non_empty_list.t, _) Truth.t","counters":[]},{"line":"   constraint","counters":[]},{"line":"     'frontier_dependencies =","counters":[]},{"line":"     [ `Frontier_dependencies ] * (unit, _) Truth.t","counters":[]},{"line":"   constraint 'staged_ledger_diff = [ `Staged_ledger_diff ] * (unit, _) Truth.t","counters":[]},{"line":"   constraint 'protocol_versions = [ `Protocol_versions ] * (unit, _) Truth.t *)","counters":[]},{"line":"","counters":[]},{"line":"type fully_invalid =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.false_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.false_t )","counters":[]},{"line":"  t","counters":[]},{"line":"","counters":[]},{"line":"type initial_valid =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.true_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.true_t )","counters":[]},{"line":"  t","counters":[]},{"line":"","counters":[]},{"line":"type almost_valid =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.true_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.true_t )","counters":[]},{"line":"  t","counters":[]},{"line":"","counters":[]},{"line":"type fully_valid =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.true_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.true_t )","counters":[]},{"line":"  t","counters":[]},{"line":"","counters":[]},{"line":"type ( 'time_received","counters":[]},{"line":"     , 'genesis_state","counters":[]},{"line":"     , 'proof","counters":[]},{"line":"     , 'delta_block_chain","counters":[]},{"line":"     , 'frontier_dependencies","counters":[]},{"line":"     , 'staged_ledger_diff","counters":[]},{"line":"     , 'protocol_versions )","counters":[]},{"line":"     with_block =","counters":[]},{"line":"  Block.with_hash","counters":[]},{"line":"  * ( 'time_received","counters":[]},{"line":"    , 'genesis_state","counters":[]},{"line":"    , 'proof","counters":[]},{"line":"    , 'delta_block_chain","counters":[]},{"line":"    , 'frontier_dependencies","counters":[]},{"line":"    , 'staged_ledger_diff","counters":[]},{"line":"    , 'protocol_versions )","counters":[]},{"line":"    t","counters":[]},{"line":"","counters":[]},{"line":"type fully_invalid_with_block =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.false_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.false_t )","counters":[]},{"line":"  with_block","counters":[]},{"line":"","counters":[]},{"line":"type initial_valid_with_block =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.true_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.true_t )","counters":[]},{"line":"  with_block","counters":[]},{"line":"","counters":[]},{"line":"type almost_valid_with_block =","counters":[]},{"line":"  ( [ `Time_received ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Genesis_state ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Proof ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Delta_block_chain ] * State_hash.t Non_empty_list.t Truth.true_t","counters":[]},{"line":"  , [ `Frontier_dependencies ] * unit Truth.true_t","counters":[]},{"line":"  , [ `Staged_ledger_diff ] * unit Truth.false_t","counters":[]},{"line":"  , [ `Protocol_versions ] * unit Truth.true_t )","counters":[]},{"line":"  with_block","counters":[]},{"line":"","counters":[]},{"line":"type fully_valid_with_block = Block.with_hash * fully_valid","counters":[]},{"line":"","counters":[]},{"line":"let fully_invalid : fully_invalid =","counters":[]},{"line":"  ( (`Time_received, Truth.False)","counters":[]},{"line":"  , (`Genesis_state, Truth.False)","counters":[]},{"line":"  , (`Proof, Truth.False)","counters":[]},{"line":"  , (`Delta_block_chain, Truth.False)","counters":[]},{"line":"  , (`Frontier_dependencies, Truth.False)","counters":[]},{"line":"  , (`Staged_ledger_diff, Truth.False)","counters":[]},{"line":"  , (`Protocol_versions, Truth.False) )","counters":[{"col_start":38,"col_end":38,"count":2}]}]}