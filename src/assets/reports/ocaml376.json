{"filename":"src/lib/network_pool/test.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"(* Only show stdout for failed inline tests. *)","counters":[]},{"line":"open Inline_test_quiet_logs","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"network pool test\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let trust_system = Mocks.trust_system","counters":[]},{"line":"","counters":[]},{"line":"    let logger = Logger.null ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let precomputed_values = Lazy.force Precomputed_values.for_unit_tests","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    let consensus_constants = precomputed_values.consensus_constants","counters":[]},{"line":"","counters":[]},{"line":"    let proof_level = precomputed_values.proof_level","counters":[]},{"line":"","counters":[]},{"line":"    let time_controller = Block_time.Controller.basic ~logger","counters":[]},{"line":"","counters":[]},{"line":"    let expiry_ns =","counters":[]},{"line":"      Time_ns.Span.of_hr","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        (Float.of_int precomputed_values.genesis_constants.transaction_expiry_hr)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    let verifier =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          Verifier.create ~logger ~proof_level ~constraint_constants","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~conf_dir:None","counters":[]},{"line":"            ~pids:(Child_processes.Termination.create_pid_table ()) )","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"    module Mock_snark_pool =","counters":[]},{"line":"      Snark_pool.Make (Mocks.Base_ledger) (Mocks.Staged_ledger)","counters":[]},{"line":"        (Mocks.Transition_frontier)","counters":[]},{"line":"","counters":[]},{"line":"    let config =","counters":[]},{"line":"      Mock_snark_pool.Resource_pool.make_config ~verifier ~trust_system","counters":[]},{"line":"        ~disk_location:\"/tmp/snark-pool\"","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"Work that gets fed into apply_and_broadcast will be \\","counters":[]},{"line":"                   received in the pool's reader\" =","counters":[]},{"line":"      let tf = Mocks.Transition_frontier.create [] in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let frontier_broadcast_pipe_r, _ = Broadcast_pipe.create (Some tf) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let work =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `One","counters":[]},{"line":"          (Quickcheck.random_value ~seed:(`Deterministic \"network_pool_test\")","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"             Transaction_snark.Statement.gen )","counters":[]},{"line":"      in","counters":[]},{"line":"      let priced_proof =","counters":[]},{"line":"        { Priced_proof.proof =","counters":[]},{"line":"            One_or_two.map ~f:Ledger_proof.For_tests.mk_dummy_proof work","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; fee =","counters":[]},{"line":"            { fee = Currency.Fee.of_int 0","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            ; prover = Signature_lib.Public_key.Compressed.empty","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"      in","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"          let network_pool, _, _ =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Mock_snark_pool.create ~config ~logger ~constraint_constants","counters":[]},{"line":"              ~consensus_constants ~time_controller ~expiry_ns","counters":[]},{"line":"              ~frontier_broadcast_pipe:frontier_broadcast_pipe_r","counters":[]},{"line":"              ~log_gossip_heard:false ~on_remote_push:(Fn.const Deferred.unit)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"          in","counters":[]},{"line":"          let%bind () =","counters":[]},{"line":"            Mocks.Transition_frontier.refer_statements tf [ work ]","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"          in","counters":[]},{"line":"          let command =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Mock_snark_pool.Resource_pool.Diff.Add_solved_work","counters":[]},{"line":"              (work, priced_proof)","counters":[]},{"line":"          in","counters":[]},{"line":"          don't_wait_for","counters":[]},{"line":"            (Mock_snark_pool.apply_and_broadcast network_pool","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"               (Envelope.Incoming.local command)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"               (Mock_snark_pool.Broadcast_callback.Local (Fn.const ())) ) ;","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"          let%map _ =","counters":[]},{"line":"            Linear_pipe.read (Mock_snark_pool.broadcasts network_pool)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          in","counters":[]},{"line":"          let pool = Mock_snark_pool.resource_pool network_pool in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          match Mock_snark_pool.Resource_pool.request_proof pool work with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Some { proof; fee = _ } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              assert (","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                [%equal: Ledger_proof.t One_or_two.t] proof priced_proof.proof )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith \"There should have been a proof here\" )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"when creating a network, the incoming diffs and local diffs \\","counters":[]},{"line":"                   in the reader pipes will automatically get process\" =","counters":[]},{"line":"      let work_count = 10 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let works =","counters":[]},{"line":"        Quickcheck.random_sequence ~seed:(`Deterministic \"works\")","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          Transaction_snark.Statement.gen","counters":[]},{"line":"        |> Fn.flip Sequence.take work_count","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        |> Sequence.map ~f:(fun x -> `One x)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        |> Sequence.to_list","counters":[]},{"line":"      in","counters":[]},{"line":"      let per_reader = work_count / 2 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let create_work work =","counters":[]},{"line":"        Mock_snark_pool.Resource_pool.Diff.Add_solved_work","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( work","counters":[]},{"line":"          , Priced_proof.","counters":[]},{"line":"              { proof =","counters":[]},{"line":"                  One_or_two.map ~f:Ledger_proof.For_tests.mk_dummy_proof work","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"              ; fee =","counters":[]},{"line":"                  { fee = Currency.Fee.of_int 0","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"                  ; prover = Signature_lib.Public_key.Compressed.empty","counters":[]},{"line":"                  }","counters":[]},{"line":"              } )","counters":[]},{"line":"      in","counters":[]},{"line":"      let verify_unsolved_work () =","counters":[]},{"line":"        let%bind () = Async.Scheduler.yield_until_no_jobs_remain () in","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"        let tf = Mocks.Transition_frontier.create [] in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let frontier_broadcast_pipe_r, _ = Broadcast_pipe.create (Some tf) in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let network_pool, remote_sink, local_sink =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Mock_snark_pool.create ~config ~logger ~constraint_constants","counters":[]},{"line":"            ~consensus_constants ~time_controller ~expiry_ns","counters":[]},{"line":"            ~frontier_broadcast_pipe:frontier_broadcast_pipe_r","counters":[]},{"line":"            ~log_gossip_heard:false ~on_remote_push:(Fn.const Deferred.unit)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"        in","counters":[]},{"line":"        List.map (List.take works per_reader) ~f:create_work","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        |> List.map ~f:(fun work ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"               ( Envelope.Incoming.local work","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"               , Mina_net2.Validation_callback.create_without_expiration () ) )","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"        |> List.iter ~f:(fun diff ->","counters":[]},{"line":"               Mock_snark_pool.Remote_sink.push remote_sink diff","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"               |> Deferred.don't_wait_for ) ;","counters":[]},{"line":"        List.map (List.drop works per_reader) ~f:create_work","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        |> List.iter ~f:(fun diff ->","counters":[]},{"line":"               Mock_snark_pool.Local_sink.push local_sink (diff, Fn.const ())","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"               |> Deferred.don't_wait_for ) ;","counters":[]},{"line":"        let%bind () = Mocks.Transition_frontier.refer_statements tf works in","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"        don't_wait_for","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        @@ Linear_pipe.iter (Mock_snark_pool.broadcasts network_pool)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"             ~f:(fun work_command ->","counters":[]},{"line":"               let work =","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 match work_command with","counters":[]},{"line":"                 | Mock_snark_pool.Resource_pool.Diff.Add_solved_work (work, _)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                   ->","counters":[]},{"line":"                     work","counters":[]},{"line":"                 | Mock_snark_pool.Resource_pool.Diff.Empty ->","counters":[]},{"line":"                     assert false","counters":[]},{"line":"               in","counters":[]},{"line":"               assert (","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                 List.mem works work","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                   ~equal:Transaction_snark_work.Statement.equal ) ;","counters":[]},{"line":"               Deferred.unit ) ;","counters":[]},{"line":"        Deferred.unit","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      verify_unsolved_work |> Async.Thread_safe.block_on_async_exn","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]}]}