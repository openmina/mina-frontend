{"filename":"src/coverage/reports.rs","lines":[{"line":"use itertools::Itertools;","counters":[]},{"line":"use serde::Serialize;","counters":[]},{"line":"use std::fs::File;","counters":[]},{"line":"use std::io::{BufRead, BufReader, Write};","counters":[]},{"line":"use std::{env, fmt, fs};","counters":[]},{"line":"","counters":[]},{"line":"use super::cov::FileDump;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone, Serialize)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0},{"col_start":23,"col_end":31,"count":0},{"col_start":31,"col_end":32,"count":76}]},{"line":"pub struct LineCounter {","counters":[]},{"line":"    pub col_start: usize,","counters":[]},{"line":"    pub col_end: usize,","counters":[]},{"line":"    pub count: i64,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl LineCounter {","counters":[]},{"line":"    fn overlap(&self, rhs: &Self) -> bool {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        self.col_start < rhs.col_end && rhs.col_start < self.col_end","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":68,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn contains(&self, rhs: &Self) -> bool {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        self.col_start < rhs.col_start && self.col_end > rhs.col_end","counters":[{"col_start":0,"col_end":38,"count":0},{"col_start":42,"col_end":68,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merge(&self, rhs: &Self, count: i64) -> Self {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            col_start: self.col_start.min(rhs.col_start),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            col_end: self.col_end.max(rhs.col_end),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            count,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn split3(&self, rhs: &Self) -> Vec<Self> {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        vec![","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                col_start: self.col_start,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                col_end: rhs.col_start,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                count: self.count,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                col_start: rhs.col_start,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                col_end: rhs.col_end,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                count: rhs.count,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                col_start: rhs.col_end,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                col_end: self.col_end,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                count: self.count,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        ]","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn split2(&self, rhs: &Self) -> Vec<Self> {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        vec![","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                col_start: self.col_start,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                col_end: rhs.col_start,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                count: self.count,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            Self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                col_start: rhs.col_start,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                col_end: rhs.col_end,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                count: rhs.count,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        ]","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn split(&self, rhs: &Self) -> Vec<Self> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        if self.contains(&rhs) {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            self.split3(&rhs)","counters":[{"col_start":12,"col_end":29,"count":0}]},{"line":"        } else if rhs.contains(self) {","counters":[{"col_start":18,"col_end":36,"count":0}]},{"line":"            rhs.split3(self)","counters":[{"col_start":12,"col_end":28,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            if self.col_start < rhs.col_start {","counters":[{"col_start":15,"col_end":45,"count":0}]},{"line":"                self.split2(rhs)","counters":[{"col_start":16,"col_end":32,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                rhs.split2(self)","counters":[{"col_start":16,"col_end":32,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn join(&self, rhs: &Self) -> Option<Vec<Self>> {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        if self.overlap(rhs) {","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            if self.count == rhs.count {","counters":[{"col_start":15,"col_end":38,"count":0}]},{"line":"                Some(vec![self.merge(rhs, self.count)])","counters":[{"col_start":16,"col_end":55,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                if self.col_start == rhs.col_start && self.col_end == rhs.col_end {","counters":[{"col_start":19,"col_end":50,"count":0},{"col_start":54,"col_end":81,"count":0}]},{"line":"                    Some(vec![self.merge(rhs, self.count.max(rhs.count))])","counters":[{"col_start":20,"col_end":74,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    Some(self.split(rhs))","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        } else {","counters":[]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn color_line_counters(line: &str, counters: &Vec<LineCounter>) -> String {","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"    let mut result = String::new();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"    if counters.is_empty() {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        return line.to_string();","counters":[{"col_start":15,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let mut line_color = 43; // light yellow","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    for counter in counters.iter() {","counters":[{"col_start":8,"col_end":15,"count":0},{"col_start":28,"col_end":34,"count":0}]},{"line":"        if counter.count > 0 {","counters":[{"col_start":11,"col_end":28,"count":0}]},{"line":"            if line_color == 41 {","counters":[{"col_start":15,"col_end":31,"count":0}]},{"line":"                line_color = 43;","counters":[{"col_start":16,"col_end":32,"count":0}]},{"line":"                break;","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            line_color = 42; // light green","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            if line_color == 42 {","counters":[{"col_start":15,"col_end":31,"count":0}]},{"line":"                line_color = 43;","counters":[{"col_start":16,"col_end":32,"count":0}]},{"line":"                break;","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            line_color = 41; // light red","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    result.push_str(&format!(\"\\x1b[1;{}m\\x1b[1;37m\", line_color));","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"    for (column, c) in line.chars().enumerate() {","counters":[{"col_start":9,"col_end":18,"count":0},{"col_start":23,"col_end":47,"count":0}]},{"line":"        let counter = counters.iter().find(","counters":[{"col_start":12,"col_end":43,"count":0}]},{"line":"            |LineCounter {","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"                 col_start, col_end, ..","counters":[]},{"line":"             }| *col_start <= column && *col_end >= column,","counters":[{"col_start":16,"col_end":36,"count":0},{"col_start":40,"col_end":58,"count":0},{"col_start":58,"col_end":59,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(counter) = counter {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":38,"count":0}]},{"line":"            if column == counter.col_start {","counters":[{"col_start":15,"col_end":42,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"                let color_code: u8 = if counter.count == 0 { 101 } else { 102 };","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":40,"col_end":58,"count":0},{"col_start":61,"col_end":64,"count":0},{"col_start":74,"col_end":77,"count":0}]},{"line":"                result.push_str(&format!(\"\\x1b[1;{}m\\x1b[1;{}m\", line_color, color_code));","counters":[{"col_start":16,"col_end":89,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        result.push(c);","counters":[{"col_start":8,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(counter) = counter {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":38,"count":0}]},{"line":"            // avoid reset colors if there is another counter","counters":[]},{"line":"            if column == counter.col_end","counters":[{"col_start":15,"col_end":40,"count":0}]},{"line":"                && (counter.col_start == counter.col_end","counters":[{"col_start":20,"col_end":56,"count":0}]},{"line":"                    || counters","counters":[{"col_start":23,"col_end":31,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .find(|LineCounter { col_start, .. }| *col_start == column)","counters":[{"col_start":0,"col_end":30,"count":0},{"col_start":62,"col_end":82,"count":0},{"col_start":82,"col_end":83,"count":0}]},{"line":"                        .is_none())","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            {","counters":[{"col_start":12,"col_end":13,"count":0}]},{"line":"                result.push_str(&format!(\"\\x1b[1;{}m\\x1b[1;37m\", line_color));","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    result.push_str(\"\\x1b[0m\");","counters":[{"col_start":4,"col_end":31,"count":0}]},{"line":"    result","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"#[derive(Debug, Serialize)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":25,"count":0}]},{"line":"pub struct LineCoverage {","counters":[]},{"line":"    pub line: String,","counters":[]},{"line":"    pub counters: Vec<LineCounter>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl fmt::Display for LineCoverage {","counters":[]},{"line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        write!(f, \"{}\", color_line_counters(&self.line, &self.counters))","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Serialize)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":25,"count":0}]},{"line":"pub struct FileCoverage {","counters":[]},{"line":"    pub filename: String,","counters":[]},{"line":"    pub lines: Vec<LineCoverage>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FileCoverage {","counters":[]},{"line":"    pub fn covered_percent(&self) -> usize {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        let mut total = 0;","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        let mut covered = 0;","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        for line in self.lines.iter() {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":31,"col_end":37,"count":0},{"col_start":38,"col_end":39,"count":0}]},{"line":"            total += line.counters.len();","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            covered += line","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                .counters","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                .fold(0, |acc, lc| if lc.count != 0 { acc + 1 } else { acc });","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":35,"col_end":51,"count":0},{"col_start":54,"col_end":61,"count":0},{"col_start":71,"col_end":74,"count":0},{"col_start":75,"col_end":76,"count":0},{"col_start":76,"col_end":78,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        if total != 0 {","counters":[{"col_start":11,"col_end":21,"count":0}]},{"line":"            (covered * 100) / total","counters":[{"col_start":12,"col_end":35,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            0","counters":[{"col_start":12,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl fmt::Display for FileCoverage {","counters":[]},{"line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","counters":[]},{"line":"        write!(f, \"{}:\\n\", self.filename)?;","counters":[{"col_start":8,"col_end":41,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        for (i, line) in self.lines.iter().enumerate() {","counters":[{"col_start":13,"col_end":20,"count":0},{"col_start":25,"col_end":54,"count":0}]},{"line":"            write!(f, \"{:>6}: {}\\n\", i, line)?;","counters":[{"col_start":12,"col_end":45,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct CoverageReport(Vec<FileCoverage>);","counters":[]},{"line":"","counters":[]},{"line":"impl fmt::Display for CoverageReport {","counters":[]},{"line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        for file in self.0.iter() {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":27,"col_end":33,"count":0}]},{"line":"            write!(f, \"{}\\n\", file)?;","counters":[{"col_start":12,"col_end":35,"count":0},{"col_start":35,"col_end":36,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl CoverageReport {","counters":[]},{"line":"    pub fn write_files(&self, report_prefix: String) {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        let sources_path = env::var(\"REPORTS_PATH\").unwrap();","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        let report_file_vec: Vec<(String, &FileCoverage)> = self","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            .0","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .enumerate()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .map(|(n, filecov)| (report_prefix.clone() + &n.to_string() + \".json\", filecov))","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":32,"col_end":91,"count":0},{"col_start":91,"col_end":92,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        let report_index: Vec<(String, usize, String)> = report_file_vec","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|(report_name, filecov)| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":42,"col_end":43,"count":0}]},{"line":"                (","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                    report_name.clone(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                    filecov.covered_percent(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    filecov.filename.clone(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                )","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        let mut file = fs::OpenOptions::new()","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            .write(true)","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .truncate(true)","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            .create(true)","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            .open(sources_path.clone() + &report_prefix + \"index.json\")","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            .unwrap();","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        file.write_all(serde_json::to_string(&report_index).unwrap().as_bytes())","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"            .unwrap();","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        for (report_name, filecov) in report_file_vec.iter() {","counters":[{"col_start":13,"col_end":33,"count":0},{"col_start":54,"col_end":60,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"            let mut file = fs::OpenOptions::new()","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                .write(true)","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                .truncate(true)","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                .create(true)","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                .open(sources_path.clone() + report_name)","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                .unwrap();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"            file.write_all(serde_json::to_string(filecov).unwrap().as_bytes())","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                .unwrap();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merge_counters(counter: &LineCounter, counters: &mut Vec<LineCounter>) {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        for idx in 0.. {","counters":[{"col_start":12,"col_end":15,"count":0},{"col_start":19,"col_end":22,"count":0}]},{"line":"            if idx == counters.len() {","counters":[{"col_start":15,"col_end":36,"count":0}]},{"line":"                counters.push(counter.clone());","counters":[{"col_start":16,"col_end":47,"count":0}]},{"line":"                break;","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            if let Some(new_counters) = counters[idx].join(&counter) {","counters":[{"col_start":24,"col_end":36,"count":0},{"col_start":40,"col_end":68,"count":0}]},{"line":"                counters.remove(idx);","counters":[{"col_start":16,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"                for counter in new_counters.iter() {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":44,"col_end":50,"count":0},{"col_start":51,"col_end":52,"count":0}]},{"line":"                    Self::merge_counters(counter, counters);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"                break;","counters":[{"col_start":16,"col_end":21,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                if counters[idx].col_end > counter.col_end {","counters":[{"col_start":19,"col_end":58,"count":0}]},{"line":"                    counters.insert(idx, counter.clone());","counters":[{"col_start":20,"col_end":58,"count":0}]},{"line":"                    break;","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                }","counters":[{"col_start":17,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn from_llvm_dump(llvm_dump: &Vec<FileDump>) -> Self {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        let sources_path = env::var(\"RUST_BUILD_PATH\").unwrap();","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        let mut file_coverage_vec = Vec::new();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"        for FileDump {","counters":[]},{"line":"            filename,","counters":[{"col_start":12,"col_end":21,"count":0}]},{"line":"            source_counters_vec,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        } in llvm_dump.iter()","counters":[{"col_start":23,"col_end":29,"count":0}]},{"line":"        {","counters":[]},{"line":"            // Ignore external crates. Might want them back at some point?","counters":[]},{"line":"            if filename.starts_with(\"/rustc/\") || filename.contains(\"/.cargo/\") {","counters":[{"col_start":15,"col_end":46,"count":0},{"col_start":50,"col_end":79,"count":0}]},{"line":"                continue;","counters":[{"col_start":16,"col_end":24,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            let file = File::open(sources_path.clone() + filename).unwrap();","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"            let mut lines: Vec<LineCoverage> = BufReader::new(file)","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                .lines()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                .map(|line| LineCoverage {","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":28,"col_end":42,"count":0}]},{"line":"                    line: line.unwrap(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                    counters: Vec::new(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                })","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"                .collect();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"            for source_counters in source_counters_vec.iter() {","counters":[{"col_start":16,"col_end":31,"count":0},{"col_start":55,"col_end":61,"count":0}]},{"line":"                let mut previous_line = 0;","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"                for (count, source_range) in source_counters.iter() {","counters":[{"col_start":21,"col_end":40,"count":0},{"col_start":61,"col_end":67,"count":0}]},{"line":"                    let count = *count;","counters":[{"col_start":24,"col_end":39,"count":0}]},{"line":"                    let start = previous_line + source_range.delta_line_start - 1;","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                    let end = start + source_range.num_lines;","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                    //println!(\"{:?}\", source_range);","counters":[]},{"line":"","counters":[]},{"line":"                    for line in start..=end {","counters":[{"col_start":24,"col_end":28,"count":0},{"col_start":32,"col_end":43,"count":0}]},{"line":"                        if line == lines.len() || lines[line].line.chars().count() == 0 {","counters":[{"col_start":27,"col_end":46,"count":0},{"col_start":50,"col_end":87,"count":0}]},{"line":"                            continue;","counters":[{"col_start":28,"col_end":36,"count":0}]},{"line":"                        }","counters":[{"col_start":25,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"                        let col_start = if line == start {","counters":[{"col_start":28,"col_end":37,"count":0},{"col_start":43,"col_end":56,"count":0}]},{"line":"                            source_range.column_start - 1","counters":[{"col_start":28,"col_end":57,"count":0}]},{"line":"                        } else {","counters":[]},{"line":"                            0","counters":[{"col_start":28,"col_end":29,"count":0}]},{"line":"                        };","counters":[]},{"line":"                        let mut col_end = if line == end {","counters":[{"col_start":28,"col_end":39,"count":0},{"col_start":45,"col_end":56,"count":0}]},{"line":"                            source_range.column_end - 1","counters":[{"col_start":28,"col_end":55,"count":0}]},{"line":"                        } else {","counters":[]},{"line":"                            lines[line].line.chars().count()","counters":[{"col_start":28,"col_end":60,"count":0}]},{"line":"                        };","counters":[]},{"line":"","counters":[]},{"line":"                        // Why can this happen?","counters":[]},{"line":"                        if col_end < col_start {","counters":[{"col_start":27,"col_end":46,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"                            col_end = col_start;","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                        }","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":25,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"                        let line_counter = LineCounter {","counters":[{"col_start":28,"col_end":56,"count":0}]},{"line":"                            col_start,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                            col_end,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                            count,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                        };","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"                        Self::merge_counters(&line_counter, &mut lines[line].counters);","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                    }","counters":[]},{"line":"","counters":[]},{"line":"                    previous_line += source_range.delta_line_start;","counters":[{"col_start":20,"col_end":66,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            let file_cov = FileCoverage {","counters":[{"col_start":16,"col_end":41,"count":0}]},{"line":"                filename: filename.clone(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                lines,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            };","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            file_coverage_vec.push(file_cov);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        Self(file_coverage_vec)","counters":[{"col_start":8,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn from_bisect_dump(bisect_dump: &Vec<(String, Vec<i64>, Vec<i64>)>) -> Self {","counters":[{"col_start":4,"col_end":86,"count":0}]},{"line":"        let sources_path = env::var(\"OCAML_BUILD_PATH\").unwrap();","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"        let mut file_coverage_vec = Vec::new();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"        for (filename, points, counts) in bisect_dump.iter() {","counters":[{"col_start":13,"col_end":37,"count":0},{"col_start":54,"col_end":60,"count":0}]},{"line":"            let file_contents = fs::read(sources_path.clone() + filename).unwrap();","counters":[{"col_start":16,"col_end":83,"count":0}]},{"line":"            let line_offset_vec: Vec<usize> = file_contents","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                .enumerate()","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                .filter_map(|(i, &x)| if x == b'\\n' { Some(i) } else { None })","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":38,"col_end":51,"count":0},{"col_start":54,"col_end":61,"count":0},{"col_start":71,"col_end":75,"count":0},{"col_start":76,"col_end":77,"count":0},{"col_start":77,"col_end":78,"count":0}]},{"line":"                .collect();","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            let mut lines: Vec<LineCoverage> = line_offset_vec","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                .enumerate()","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                .map(|(i, &end_pos)| {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                    let start_pos = if i == 0 {","counters":[{"col_start":24,"col_end":33,"count":0},{"col_start":39,"col_end":45,"count":0}]},{"line":"                        0","counters":[{"col_start":24,"col_end":25,"count":0}]},{"line":"                    } else {","counters":[]},{"line":"                        line_offset_vec[i - 1] + 1","counters":[{"col_start":24,"col_end":50,"count":0}]},{"line":"                    };","counters":[]},{"line":"                    LineCoverage {","counters":[{"col_start":20,"col_end":34,"count":0}]},{"line":"                        line: String::from_utf8((&file_contents[start_pos..end_pos]).to_vec())","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                            .unwrap(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        counters: Vec::new(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                })","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"                .collect();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"            for (point, count) in points","counters":[{"col_start":17,"col_end":29,"count":0},{"col_start":34,"col_end":40,"count":0}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                .zip(counts.iter())","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                .filter_map(|(point, count)| {","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"                    // FIXME: figure out why bisect-ppx is reporting point values such as -1","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"                    if *point <= 0 {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                        None","counters":[{"col_start":24,"col_end":28,"count":0}]},{"line":"                    } else {","counters":[]},{"line":"                        Some(((*point - 1) as usize, *count))","counters":[{"col_start":24,"col_end":61,"count":0}]},{"line":"                    }","counters":[]},{"line":"                })","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"                .sorted_by_key(|(point, _count)| *point)","counters":[{"col_start":0,"col_end":31,"count":0},{"col_start":49,"col_end":55,"count":30},{"col_start":55,"col_end":56,"count":0}]},{"line":"            {","counters":[]},{"line":"                let (line_num, _) = line_offset_vec","counters":[{"col_start":21,"col_end":51,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .enumerate()","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    .find(|(i, &offset)| point < offset || i + 1 == line_offset_vec.len())","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":41,"col_end":55,"count":0},{"col_start":59,"col_end":89,"count":0},{"col_start":89,"col_end":90,"count":0}]},{"line":"                    .unwrap();","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"                let col = if line_num == 0 {","counters":[{"col_start":20,"col_end":23,"count":0},{"col_start":29,"col_end":42,"count":0}]},{"line":"                    point as usize","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    point as usize - line_offset_vec[line_num - 1]","counters":[{"col_start":20,"col_end":66,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                // TODO: find a better way to convert bytes position to char position","counters":[]},{"line":"                let col_start =","counters":[{"col_start":20,"col_end":31,"count":0}]},{"line":"                    String::from_utf8((&lines[line_num].line.as_bytes()[..col]).to_vec())","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                        .unwrap()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        .chars()","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                        .count();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"                // It seems there isn't an \"end column\" in bisect-ppx","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                let col_end = col_start;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"                lines[line_num].counters.push(LineCounter {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                    col_start,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    col_end,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"                    count,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                })","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            file_coverage_vec.push(FileCoverage {","counters":[{"col_start":12,"col_end":49,"count":0}]},{"line":"                filename: filename.clone(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                lines,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        Self(file_coverage_vec)","counters":[{"col_start":8,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}