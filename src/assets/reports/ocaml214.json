{"filename":"src/lib/fields_derivers/fields_derivers.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Annotations = struct","counters":[]},{"line":"  module Utils = struct","counters":[]},{"line":"    let find xs key =","counters":[]},{"line":"      List.find ~f:(fun (k', _) -> String.equal key k') xs |> Option.map ~f:snd","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"    let find_string xs key =","counters":[]},{"line":"      find xs key |> Option.join |> Option.map ~f:(fun s -> String.strip s)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"    let find_bool xs key =","counters":[]},{"line":"      find xs key","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      |> Option.map ~f:(fun _ -> true)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      |> Option.value ~default:false","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Top = struct","counters":[]},{"line":"    (** Top comment *)","counters":[]},{"line":"    type t = { name : string; doc : string option }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    [@@deriving annot, sexp, compare, equal]","counters":[]},{"line":"","counters":[]},{"line":"    open Utils","counters":[]},{"line":"","counters":[]},{"line":"    let of_annots ~name t_toplevel_annots =","counters":[]},{"line":"      let xs = t_toplevel_annots () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      { name; doc = find_string xs \"ocaml.doc\" }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"top annots parse\" =","counters":[]},{"line":"      let t = of_annots ~name:\"Top\" t_toplevel_annots in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: t] t { name = \"Top\"; doc = Some \"Top comment\" }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Fields = struct","counters":[]},{"line":"    module T = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { name : string option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"        ; doc : string option [@name \"document\"]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"        ; skip : bool [@skip]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"        ; deprecated : string option [@depr \"foo\"]  (** this is deprecated *)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, sexp, compare, equal]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t = string -> T.t","counters":[]},{"line":"","counters":[]},{"line":"    open Utils","counters":[]},{"line":"","counters":[]},{"line":"    let of_annots t_fields_annots field =","counters":[]},{"line":"      let xs = t_fields_annots field in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let s = find_string xs in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let b = find_bool xs in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      { T.name = s \"name\"","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      ; doc = s \"ocaml.doc\"","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      ; skip = b \"skip\"","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      ; deprecated = s \"depr\"","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"field annots parse\" =","counters":[]},{"line":"      let annots = of_annots T.t_fields_annots in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: T.t] (annots \"doc\")","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"        { name = Some \"document\"; doc = None; skip = false; deprecated = None } ;","counters":[]},{"line":"      [%test_eq: T.t] (annots \"skip\")","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"        { name = None; doc = None; skip = true; deprecated = None } ;","counters":[]},{"line":"      [%test_eq: T.t] (annots \"deprecated\")","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"        { name = None","counters":[]},{"line":"        ; doc = Some \"this is deprecated\"","counters":[]},{"line":"        ; skip = false","counters":[]},{"line":"        ; deprecated = Some \"foo\"","counters":[]},{"line":"        }","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** Rewrites underscore_case to camelCase. Note: Keeps leading underscores. *)","counters":[]},{"line":"let under_to_camel s =","counters":[]},{"line":"  (* take all the underscores *)","counters":[]},{"line":"  let prefix_us =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    String.take_while s ~f:(function '_' -> true | _ -> false)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  in","counters":[]},{"line":"  (* remove them from the original *)","counters":[]},{"line":"  let rest = String.substr_replace_first ~pattern:prefix_us ~with_:\"\" s in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ws = String.split rest ~on:'_' in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let result =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match ws with","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"\"","counters":[]},{"line":"    | w :: ws ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* capitalize each word separated by underscores *)","counters":[]},{"line":"        w :: (ws |> List.map ~f:String.capitalize) |> String.concat ?sep:None","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"  in","counters":[]},{"line":"  (* add the leading underscoes back *)","counters":[]},{"line":"  String.concat [ prefix_us; result ]","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"under_to_camel works as expected\" =","counters":[]},{"line":"  let open Core_kernel in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  [%test_eq: string] \"fooHello\" (under_to_camel \"foo_hello\") ;","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  [%test_eq: string] \"fooHello\" (under_to_camel \"foo_hello___\") ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  [%test_eq: string] \"_fooHello\" (under_to_camel \"_foo_hello__\")","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"(** Like Field.name but rewrites underscore_case to camelCase. *)","counters":[]},{"line":"let name_under_to_camel f = Fieldslib.Field.name f |> under_to_camel","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let introspection_query_raw =","counters":[]},{"line":"  {graphql|","counters":[]},{"line":"  query IntrospectionQuery {","counters":[]},{"line":"    __schema {","counters":[]},{"line":"      queryType { name }","counters":[]},{"line":"      mutationType { name }","counters":[]},{"line":"      subscriptionType { name }","counters":[]},{"line":"      types {","counters":[]},{"line":"        ...FullType","counters":[]},{"line":"      }","counters":[]},{"line":"      directives {","counters":[]},{"line":"        name","counters":[]},{"line":"        description","counters":[]},{"line":"        locations","counters":[]},{"line":"        args {","counters":[]},{"line":"          ...InputValue","counters":[]},{"line":"        }","counters":[]},{"line":"      }","counters":[]},{"line":"    }","counters":[]},{"line":"  }","counters":[]},{"line":"  fragment FullType on __Type {","counters":[]},{"line":"    kind","counters":[]},{"line":"    name","counters":[]},{"line":"    description","counters":[]},{"line":"    fields(includeDeprecated: true) {","counters":[]},{"line":"      name","counters":[]},{"line":"      description","counters":[]},{"line":"      args {","counters":[]},{"line":"        ...InputValue","counters":[]},{"line":"      }","counters":[]},{"line":"      type {","counters":[]},{"line":"        ...TypeRef","counters":[]},{"line":"      }","counters":[]},{"line":"      isDeprecated","counters":[]},{"line":"      deprecationReason","counters":[]},{"line":"    }","counters":[]},{"line":"    inputFields {","counters":[]},{"line":"      ...InputValue","counters":[]},{"line":"    }","counters":[]},{"line":"    interfaces {","counters":[]},{"line":"      ...TypeRef","counters":[]},{"line":"    }","counters":[]},{"line":"    enumValues(includeDeprecated: true) {","counters":[]},{"line":"      name","counters":[]},{"line":"      description","counters":[]},{"line":"      isDeprecated","counters":[]},{"line":"      deprecationReason","counters":[]},{"line":"    }","counters":[]},{"line":"    possibleTypes {","counters":[]},{"line":"      ...TypeRef","counters":[]},{"line":"    }","counters":[]},{"line":"  }","counters":[]},{"line":"  fragment InputValue on __InputValue {","counters":[]},{"line":"    name","counters":[]},{"line":"    description","counters":[]},{"line":"    type { ...TypeRef }","counters":[]},{"line":"    defaultValue","counters":[]},{"line":"  }","counters":[]},{"line":"  fragment TypeRef on __Type {","counters":[]},{"line":"    kind","counters":[]},{"line":"    name","counters":[]},{"line":"    ofType {","counters":[]},{"line":"      kind","counters":[]},{"line":"      name","counters":[]},{"line":"      ofType {","counters":[]},{"line":"        kind","counters":[]},{"line":"        name","counters":[]},{"line":"        ofType {","counters":[]},{"line":"          kind","counters":[]},{"line":"          name","counters":[]},{"line":"          ofType {","counters":[]},{"line":"            kind","counters":[]},{"line":"            name","counters":[]},{"line":"            ofType {","counters":[]},{"line":"              kind","counters":[]},{"line":"              name","counters":[]},{"line":"              ofType {","counters":[]},{"line":"                kind","counters":[]},{"line":"                name","counters":[]},{"line":"                ofType {","counters":[]},{"line":"                  kind","counters":[]},{"line":"                  name","counters":[]},{"line":"                }","counters":[]},{"line":"              }","counters":[]},{"line":"            }","counters":[]},{"line":"          }","counters":[]},{"line":"        }","counters":[]},{"line":"      }","counters":[]},{"line":"    }","counters":[]},{"line":"  }","counters":[]},{"line":"  |graphql}","counters":[{"col_start":10,"col_end":10,"count":2}]}]}