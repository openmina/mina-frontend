{"filename":"src/coverage/cov.rs","lines":[{"line":"use core::slice;","counters":[]},{"line":"use std::io::Cursor;","counters":[]},{"line":"","counters":[]},{"line":"use super::{","counters":[]},{"line":"    covfun::{Counter, CounterExpression, FunCov, Header, Region, SourceRange},","counters":[]},{"line":"    covmap::CovMap,","counters":[]},{"line":"    names::Names,","counters":[]},{"line":"    profile_data::ProfileData,","counters":[]},{"line":"    util::{get_counters, get_elf_sections, get_module_path},","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Sections {","counters":[]},{"line":"    pub covmap: Vec<CovMap>,","counters":[]},{"line":"    pub covfun: Vec<FunCov>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Sections {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        let section_names = vec![\"__llvm_covmap\", \"__llvm_covfun\"];","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        let sections = get_elf_sections(get_module_path(), &section_names);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        let covmap = &sections[\"__llvm_covmap\"];","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        let covmap_len = covmap.len() as u64;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let mut covmap_cursor = Cursor::new(covmap);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        let mut covmap = Vec::new();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        while covmap_cursor.position() < covmap_len {","counters":[{"col_start":14,"col_end":51,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"            covmap.push(CovMap::read(&mut covmap_cursor));","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let covfun = &sections[\"__llvm_covfun\"];","counters":[{"col_start":12,"col_end":48,"count":0}]},{"line":"        let covfun_len = covfun.len() as u64;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let mut covfun_cursor = Cursor::new(covfun);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        let mut covfun = Vec::new();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        while covfun_cursor.position() < covfun_len {","counters":[{"col_start":14,"col_end":51,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"            covfun.push(FunCov::read(&mut covfun_cursor));","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Self { covmap, covfun }","counters":[{"col_start":8,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct FunCounters {","counters":[]},{"line":"    pub name_hash: u64,","counters":[]},{"line":"    pub fun_hash: u64,","counters":[]},{"line":"    pub counters: &'static [i64],","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct FileCounters {","counters":[]},{"line":"    pub filename: String,","counters":[]},{"line":"    pub counters: Vec<&'static [i64]>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct FileDump {","counters":[]},{"line":"    pub filename: String,","counters":[]},{"line":"    pub source_counters_vec: Vec<Vec<(i64, SourceRange)>>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct Cov {","counters":[]},{"line":"    pub counters: &'static mut [i64],","counters":[]},{"line":"    pub names: Names,","counters":[]},{"line":"    pub data: ProfileData,","counters":[]},{"line":"    pub sections: Sections,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Cov {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            counters: unsafe { get_counters() },","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            names: Names::new(),","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            data: ProfileData::new(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            sections: Sections::new(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_functions_counters(&mut self) -> Vec<FunCounters> {","counters":[{"col_start":4,"col_end":66,"count":0}]},{"line":"        let mut pos = 0;","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        self.data","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            .0","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .filter_map(|fun_control| {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":38,"col_end":39,"count":0}]},{"line":"                if fun_control.func_hash == 0 {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    None","counters":[{"col_start":20,"col_end":24,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    let fun_counters = FunCounters {","counters":[{"col_start":24,"col_end":52,"count":0}]},{"line":"                        name_hash: fun_control.name_hash,","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                        fun_hash: fun_control.func_hash,","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                        counters: unsafe {","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                            slice::from_raw_parts(","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                                self.counters[pos as usize..].as_ptr(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                                fun_control.num_counters as usize,","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                            )","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    };","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"                    pos += fun_control.num_counters;","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                    Some(fun_counters)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                }","counters":[]},{"line":"            })","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn for_file_cov<F>(&mut self, mut f: F)","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(String, &'static [i64], &Vec<Region>, &Vec<CounterExpression>),","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"        let mut fun_counters_vec = self.get_functions_counters();","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"        for covmap in self.sections.covmap.iter() {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":43,"col_end":49,"count":0}]},{"line":"            for funcov in self.sections.covfun.iter() {","counters":[{"col_start":16,"col_end":22,"count":0},{"col_start":47,"col_end":53,"count":0}]},{"line":"                let record = &funcov.function_record;","counters":[{"col_start":20,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"                if record.translation_unit_hash == covmap.encoded_data_hash {","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                    for (index, regions) in funcov.mapping_regions.iter() {","counters":[{"col_start":25,"col_end":39,"count":0},{"col_start":67,"col_end":73,"count":0}]},{"line":"                        let filename = covmap.filenames.0[*index as usize].clone();","counters":[{"col_start":28,"col_end":83,"count":0}]},{"line":"","counters":[]},{"line":"                        let pos = fun_counters_vec.iter().position(|fc| {","counters":[{"col_start":0,"col_end":67,"count":0},{"col_start":72,"col_end":73,"count":0}]},{"line":"                            fc.name_hash == record.name_hash && fc.fun_hash == record.func_hash","counters":[{"col_start":0,"col_end":60,"count":0},{"col_start":64,"col_end":95,"count":0}]},{"line":"                        });","counters":[{"col_start":24,"col_end":25,"count":0},{"col_start":25,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"                        if pos.is_none() {","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                            continue;","counters":[{"col_start":28,"col_end":36,"count":0}]},{"line":"                        }","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"                        let fun_counters = fun_counters_vec.swap_remove(pos.unwrap());","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"","counters":[]},{"line":"                        f(","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                            filename,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            fun_counters.counters,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                            regions,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                            &funcov.expressions,","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                        )","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    }","counters":[]},{"line":"                }","counters":[{"col_start":17,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_file_counters(&mut self) -> Vec<FileCounters> {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        let mut result: Vec<FileCounters> = Vec::new();","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        self.for_file_cov(|filename, counters, _, _| {","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":53,"col_end":54,"count":0}]},{"line":"            match result.iter_mut().find(|c| c.filename == filename) {","counters":[{"col_start":0,"col_end":41,"count":0},{"col_start":45,"col_end":67,"count":0},{"col_start":67,"col_end":68,"count":0}]},{"line":"                Some(existing_counters) => {","counters":[{"col_start":21,"col_end":44,"count":0}]},{"line":"                    existing_counters.counters.push(counters);","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                None => {","counters":[{"col_start":24,"col_end":25,"count":0}]},{"line":"                    result.push(FileCounters {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        filename,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        counters: vec![counters],","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                    });","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"        });","counters":[{"col_start":8,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        result","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn dump(&mut self) -> Vec<FileDump> {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        let mut result: Vec<FileDump> = Vec::new();","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"        self.for_file_cov(|filename, counters, regions, expressions| {","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":69,"col_end":70,"count":0}]},{"line":"            let mut source_counters: Vec<(i64, SourceRange)> = Vec::new();","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"            for region in regions.iter() {","counters":[{"col_start":16,"col_end":22,"count":0},{"col_start":34,"col_end":40,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"                let counter = match &region.header {","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":36,"col_end":50,"count":0}]},{"line":"                    Header::Counter(counter) => {","counters":[{"col_start":36,"col_end":49,"count":0}]},{"line":"                        match counter {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            Counter::Zero => 0,","counters":[{"col_start":45,"col_end":46,"count":0}]},{"line":"                            Counter::Reference(idx) => counters[*idx],","counters":[{"col_start":47,"col_end":69,"count":0}]},{"line":"                            Counter::Substraction(idx) => {","counters":[{"col_start":50,"col_end":59,"count":0}]},{"line":"                                let expr = &expressions[*idx];","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                                expr.resolve_sub(counters, expressions)","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            }","counters":[]},{"line":"                            Counter::Addition(idx) => {","counters":[{"col_start":46,"col_end":55,"count":0}]},{"line":"                                let expr = &expressions[*idx];","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                                expr.resolve_add(counters, expressions)","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            }","counters":[]},{"line":"                        }","counters":[]},{"line":"                    }","counters":[]},{"line":"                    Header::PseudoCounter(_pseudo_counter) => continue // TODO","counters":[{"col_start":42,"col_end":70,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                /*","counters":[]},{"line":"                    FIXME?: in some cases I observe negative values","counters":[]},{"line":"","counters":[]},{"line":"                    SubExpr => CounterExpression { lhs: Reference(0), rhs: Reference(1) }","counters":[]},{"line":"                    counter => -1632","counters":[]},{"line":"                */","counters":[]},{"line":"                //println!(\"counter => {:?}\", counter);","counters":[]},{"line":"                source_counters.push((counter, region.source_range.clone()));","counters":[{"col_start":16,"col_end":76,"count":0}]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            match result.iter_mut().find(|c| c.filename == filename) {","counters":[{"col_start":18,"col_end":41,"count":0},{"col_start":45,"col_end":67,"count":0},{"col_start":67,"col_end":68,"count":0}]},{"line":"                Some(existing_file_dump) => {","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"                    existing_file_dump.source_counters_vec.push(source_counters);","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                None => {","counters":[{"col_start":24,"col_end":25,"count":0}]},{"line":"                    result.push(FileDump {","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                        filename,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        source_counters_vec: vec![source_counters],","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    });","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"        });","counters":[{"col_start":8,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        result","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}