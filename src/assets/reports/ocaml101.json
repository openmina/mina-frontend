{"filename":"src/lib/transition_chain_verifier/transition_chain_verifier.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"","counters":[]},{"line":"module Merkle_list_verifier = Merkle_list_verifier.Make (struct","counters":[]},{"line":"  type proof_elem = State_body_hash.t","counters":[]},{"line":"","counters":[]},{"line":"  type hash = State_hash.t [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"  let hash previous_state_hash state_body_hash =","counters":[]},{"line":"    (Protocol_state.hashes_abstract ~hash_body:Fn.id","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"       { previous_state_hash; body = state_body_hash } )","counters":[]},{"line":"      .state_hash","counters":[]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"let verify ~target_hash ~transition_chain_proof:(init_state_hash, merkle_list) =","counters":[]},{"line":"  (* TODO: Should we check the length here too? *)","counters":[]},{"line":"  Merkle_list_verifier.verify ~init:init_state_hash merkle_list target_hash","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":74,"col_end":74,"count":2}]}]}