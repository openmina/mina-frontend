{"filename":"src/lib/mina_base/account_timing.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params","counters":[]},{"line":"open Tick","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type ('slot, 'balance, 'amount) t =","counters":[{"col_start":6,"col_end":6,"count":237},{"col_start":38,"col_end":38,"count":7}]},{"line":"        | Untimed","counters":[{"col_start":8,"col_end":8,"count":312}]},{"line":"        | Timed of","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            { initial_minimum_balance : 'balance","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"            ; cliff_time : 'slot","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"            ; cliff_amount : 'amount","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"            ; vesting_period : 'slot","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"            ; vesting_increment : 'amount","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"            }","counters":[]},{"line":"      [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":52,"col_end":52,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":276},{"col_start":9,"col_end":9,"count":1}]},{"line":"      ( Global_slot.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Balance.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Amount.Stable.V1.t )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Poly.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type ('slot, 'balance, 'amount) tt = ('slot, 'balance, 'amount) Poly.t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  | Untimed","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Timed of","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      { initial_minimum_balance : 'balance","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      ; cliff_time : 'slot","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; cliff_amount : 'amount","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      ; vesting_period : 'slot","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      ; vesting_increment : 'amount","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      }","counters":[]},{"line":"[@@deriving sexp, equal, hash, compare, yojson]","counters":[]},{"line":"","counters":[]},{"line":"module As_record = struct","counters":[]},{"line":"  type ('bool, 'slot, 'balance, 'amount) t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { is_timed : 'bool","counters":[]},{"line":"    ; initial_minimum_balance : 'balance","counters":[]},{"line":"    ; cliff_time : 'slot","counters":[]},{"line":"    ; cliff_amount : 'amount","counters":[]},{"line":"    ; vesting_period : 'slot","counters":[]},{"line":"    ; vesting_increment : 'amount","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving hlist]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* convert sum type to record format, useful for to_bits and typ *)","counters":[]},{"line":"let to_record t =","counters":[]},{"line":"  match t with","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  | Untimed ->","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      let slot_unused = Global_slot.zero in","counters":[]},{"line":"      let slot_one = Global_slot.(succ zero) in","counters":[{"col_start":37,"col_end":37,"count":2}]},{"line":"      let balance_unused = Balance.zero in","counters":[]},{"line":"      let amount_unused = Amount.zero in","counters":[]},{"line":"      As_record.","counters":[]},{"line":"        { is_timed = false","counters":[]},{"line":"        ; initial_minimum_balance = balance_unused","counters":[]},{"line":"        ; cliff_time = slot_unused","counters":[]},{"line":"        ; cliff_amount = amount_unused","counters":[]},{"line":"        ; vesting_period = slot_one (* avoid division by zero *)","counters":[]},{"line":"        ; vesting_increment = amount_unused","counters":[]},{"line":"        }","counters":[]},{"line":"  | Timed","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { initial_minimum_balance","counters":[]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      } ->","counters":[]},{"line":"      As_record.","counters":[]},{"line":"        { is_timed = true","counters":[]},{"line":"        ; initial_minimum_balance","counters":[]},{"line":"        ; cliff_time","counters":[]},{"line":"        ; cliff_amount","counters":[]},{"line":"        ; vesting_period","counters":[]},{"line":"        ; vesting_increment","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"let to_input t =","counters":[]},{"line":"  let As_record.","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"        { is_timed","counters":[]},{"line":"        ; initial_minimum_balance","counters":[]},{"line":"        ; cliff_time","counters":[]},{"line":"        ; cliff_amount","counters":[]},{"line":"        ; vesting_period","counters":[]},{"line":"        ; vesting_increment","counters":[]},{"line":"        } =","counters":[]},{"line":"    to_record t","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Random_oracle_input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  Array.reduce_exn ~f:append","counters":[]},{"line":"    [| packed ((if is_timed then Field.one else Field.zero), 1)","counters":[{"col_start":12,"col_end":12,"count":1},{"col_start":33,"col_end":33,"count":0},{"col_start":48,"col_end":48,"count":1}]},{"line":"     ; Balance.to_input initial_minimum_balance","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"     ; Global_slot.to_input cliff_time","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"     ; Amount.to_input cliff_amount","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"     ; Global_slot.to_input vesting_period","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"     ; Amount.to_input vesting_increment","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"type var =","counters":[]},{"line":"  (Boolean.var, Global_slot.Checked.var, Balance.var, Amount.var) As_record.t","counters":[]},{"line":"","counters":[]},{"line":"let var_to_input","counters":[]},{"line":"    As_record.","counters":[]},{"line":"      { is_timed : Boolean.var","counters":[]},{"line":"      ; initial_minimum_balance","counters":[]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      } =","counters":[]},{"line":"  let open Random_oracle_input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Array.reduce_exn ~f:append","counters":[]},{"line":"    [| packed ((is_timed :> Field.Var.t), 1)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"     ; Balance.var_to_input initial_minimum_balance","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"     ; Global_slot.Checked.to_input cliff_time","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"     ; Amount.var_to_input cliff_amount","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"     ; Global_slot.Checked.to_input vesting_period","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"     ; Amount.var_to_input vesting_increment","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"let var_of_t (t : t) : var =","counters":[]},{"line":"  let As_record.","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"        { is_timed","counters":[]},{"line":"        ; initial_minimum_balance","counters":[]},{"line":"        ; cliff_time","counters":[]},{"line":"        ; cliff_amount","counters":[]},{"line":"        ; vesting_period","counters":[]},{"line":"        ; vesting_increment","counters":[]},{"line":"        } =","counters":[]},{"line":"    to_record t","counters":[]},{"line":"  in","counters":[]},{"line":"  As_record.","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    { is_timed = Boolean.var_of_value is_timed","counters":[{"col_start":36,"col_end":36,"count":1}]},{"line":"    ; initial_minimum_balance = Balance.var_of_t initial_minimum_balance","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"    ; cliff_time = Global_slot.Checked.constant cliff_time","counters":[{"col_start":46,"col_end":46,"count":1}]},{"line":"    ; cliff_amount = Amount.var_of_t cliff_amount","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; vesting_period = Global_slot.Checked.constant vesting_period","counters":[{"col_start":50,"col_end":50,"count":1}]},{"line":"    ; vesting_increment = Amount.var_of_t vesting_increment","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"let untimed_var = var_of_t Untimed","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"let typ : (var, t) Typ.t =","counters":[]},{"line":"  (* because we represent the types t (a sum type) and var (a record) differently,","counters":[]},{"line":"      we can't use the trick, used elsewhere, of polymorphic to_hlist and of_hlist","counters":[]},{"line":"      functions to handle both types","counters":[]},{"line":"  *)","counters":[]},{"line":"  let value_of_hlist :","counters":[]},{"line":"         ( unit","counters":[]},{"line":"         ,    Boolean.value","counters":[]},{"line":"           -> Balance.t","counters":[]},{"line":"           -> Global_slot.t","counters":[]},{"line":"           -> Amount.t","counters":[]},{"line":"           -> Global_slot.t","counters":[]},{"line":"           -> Amount.t","counters":[]},{"line":"           -> unit )","counters":[]},{"line":"         H_list.t","counters":[]},{"line":"      -> t =","counters":[]},{"line":"    let open H_list in","counters":[]},{"line":"    fun [ is_timed","counters":[]},{"line":"        ; initial_minimum_balance","counters":[]},{"line":"        ; cliff_time","counters":[]},{"line":"        ; cliff_amount","counters":[]},{"line":"        ; vesting_period","counters":[]},{"line":"        ; vesting_increment","counters":[]},{"line":"        ] ->","counters":[]},{"line":"      if is_timed then","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Timed","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { initial_minimum_balance","counters":[]},{"line":"          ; cliff_time","counters":[]},{"line":"          ; cliff_amount","counters":[]},{"line":"          ; vesting_period","counters":[]},{"line":"          ; vesting_increment","counters":[]},{"line":"          }","counters":[]},{"line":"      else Untimed","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  in","counters":[]},{"line":"  let value_to_hlist (t : t) =","counters":[]},{"line":"    let As_record.","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"          { is_timed","counters":[]},{"line":"          ; initial_minimum_balance","counters":[]},{"line":"          ; cliff_time","counters":[]},{"line":"          ; cliff_amount","counters":[]},{"line":"          ; vesting_period","counters":[]},{"line":"          ; vesting_increment","counters":[]},{"line":"          } =","counters":[]},{"line":"      to_record t","counters":[]},{"line":"    in","counters":[]},{"line":"    H_list.","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ is_timed","counters":[]},{"line":"      ; initial_minimum_balance","counters":[]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      ]","counters":[]},{"line":"  in","counters":[]},{"line":"  let var_of_hlist = As_record.of_hlist in","counters":[]},{"line":"  let var_to_hlist = As_record.to_hlist in","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Boolean.typ","counters":[]},{"line":"    ; Balance.typ","counters":[]},{"line":"    ; Global_slot.typ","counters":[]},{"line":"    ; Amount.typ","counters":[]},{"line":"    ; Global_slot.typ","counters":[]},{"line":"    ; Amount.typ","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist ~var_of_hlist ~value_to_hlist ~value_of_hlist","counters":[]},{"line":"","counters":[]},{"line":"(* we can't use the generic if_ with the above typ, because Global_slot.typ doesn't work correctly with it","counters":[]},{"line":"    so we define a custom if_","counters":[]},{"line":"*)","counters":[]},{"line":"let if_ b ~(then_ : var) ~(else_ : var) =","counters":[]},{"line":"  let%bind is_timed =","counters":[]},{"line":"    Boolean.if_ b ~then_:then_.is_timed ~else_:else_.is_timed","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind initial_minimum_balance =","counters":[]},{"line":"    Balance.Checked.if_ b ~then_:then_.initial_minimum_balance","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ~else_:else_.initial_minimum_balance","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind cliff_time =","counters":[]},{"line":"    Global_slot.Checked.if_ b ~then_:then_.cliff_time ~else_:else_.cliff_time","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind cliff_amount =","counters":[]},{"line":"    Amount.Checked.if_ b ~then_:then_.cliff_amount ~else_:else_.cliff_amount","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind vesting_period =","counters":[]},{"line":"    Global_slot.Checked.if_ b ~then_:then_.vesting_period","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ~else_:else_.vesting_period","counters":[]},{"line":"  in","counters":[]},{"line":"  let%map vesting_increment =","counters":[]},{"line":"    Amount.Checked.if_ b ~then_:then_.vesting_increment","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      ~else_:else_.vesting_increment","counters":[]},{"line":"  in","counters":[]},{"line":"  As_record.","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { is_timed","counters":[]},{"line":"    ; initial_minimum_balance","counters":[]},{"line":"    ; cliff_time","counters":[]},{"line":"    ; cliff_amount","counters":[]},{"line":"    ; vesting_period","counters":[]},{"line":"    ; vesting_increment","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}