{"filename":"src/lib/random_oracle/permutation/external/random_oracle_permutation.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Inputs = Pickles.Tick_field_sponge.Inputs","counters":[]},{"line":"module Ocaml_permutation = Sponge.Poseidon (Inputs)","counters":[]},{"line":"module Field = Kimchi_backend.Pasta.Basic.Fp","counters":[]},{"line":"","counters":[]},{"line":"let add_assign = Ocaml_permutation.add_assign","counters":[]},{"line":"","counters":[]},{"line":"let copy = Ocaml_permutation.copy","counters":[]},{"line":"","counters":[]},{"line":"let params = Kimchi_pasta_fp_poseidon.create ()","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"","counters":[]},{"line":"let block_cipher _params (s : Field.t array) =","counters":[]},{"line":"  let v = Kimchi_bindings.FieldVectors.Fp.create () in","counters":[{"col_start":2,"col_end":2,"count":465}]},{"line":"  Array.iter s ~f:(Kimchi_bindings.FieldVectors.Fp.emplace_back v) ;","counters":[{"col_start":2,"col_end":2,"count":465},{"col_start":62,"col_end":62,"count":465}]},{"line":"  Kimchi_pasta_fp_poseidon.block_cipher params v ;","counters":[{"col_start":2,"col_end":2,"count":465}]},{"line":"  Array.init (Array.length s) ~f:(Kimchi_bindings.FieldVectors.Fp.get v)","counters":[{"col_start":2,"col_end":2,"count":465},{"col_start":25,"col_end":25,"count":465},{"col_start":68,"col_end":68,"count":465}]},{"line":"","counters":[]},{"line":"let%test_unit \"check rust implementation of block-cipher\" =","counters":[]},{"line":"  let params' : Field.t Sponge.Params.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Sponge.Params.(map pasta_p_kimchi ~f:Field.of_string)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  in","counters":[]},{"line":"  let open Pickles.Impls.Step in","counters":[]},{"line":"  let module T = Internal_Basic in","counters":[]},{"line":"  Quickcheck.test (Quickcheck.Generator.list_with_length 3 T.Field.gen)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"    ~f:(fun s ->","counters":[]},{"line":"      let s () = Array.of_list s in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      [%test_eq: T.Field.t array]","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        (Ocaml_permutation.block_cipher params' (s ()))","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        (block_cipher params' (s ())) )","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":38,"col_end":38,"count":1}]}]}