{"filename":"src/lib/timeout_lib/timeout_lib.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type Time_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  module Span : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val to_time_ns_span : t -> Time_ns.Span.t","counters":[]},{"line":"","counters":[]},{"line":"    val ( - ) : t -> t -> t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Controller : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val now : Controller.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val diff : t -> t -> Span.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Timeout_intf (Time : Time_intf) = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type 'a t","counters":[]},{"line":"","counters":[]},{"line":"    val create : Time.Controller.t -> Time.Span.t -> f:(Time.t -> 'a) -> 'a t","counters":[]},{"line":"","counters":[]},{"line":"    val to_deferred : 'a t -> 'a Async_kernel.Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"    val peek : 'a t -> 'a option","counters":[]},{"line":"","counters":[]},{"line":"    val cancel : Time.Controller.t -> 'a t -> 'a -> unit","counters":[]},{"line":"","counters":[]},{"line":"    val remaining_time : 'a t -> Time.Span.t","counters":[]},{"line":"","counters":[]},{"line":"    val await :","counters":[]},{"line":"         timeout_duration:Time.Span.t","counters":[]},{"line":"      -> Time.Controller.t","counters":[]},{"line":"      -> 'a Deferred.t","counters":[]},{"line":"      -> [ `Ok of 'a | `Timeout ] Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"    val await_exn :","counters":[]},{"line":"         timeout_duration:Time.Span.t","counters":[]},{"line":"      -> Time.Controller.t","counters":[]},{"line":"      -> 'a Deferred.t","counters":[]},{"line":"      -> 'a Deferred.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Time : Time_intf) : Timeout_intf(Time).S = struct","counters":[]},{"line":"  type 'a t =","counters":[]},{"line":"    { deferred : 'a Deferred.t","counters":[]},{"line":"    ; cancel : 'a -> unit","counters":[]},{"line":"    ; start_time : Time.t","counters":[]},{"line":"    ; span : Time.Span.t","counters":[]},{"line":"    ; ctrl : Time.Controller.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let create ctrl span ~f:action =","counters":[]},{"line":"    let open Deferred.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let cancel_ivar = Ivar.create () in","counters":[]},{"line":"    let timeout = after (Time.Span.to_time_ns_span span) >>| fun () -> None in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"    let deferred =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Deferred.any [ Ivar.read cancel_ivar; timeout ]","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      >>| function None -> action (Time.now ctrl) | Some x -> x","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    in","counters":[]},{"line":"    let cancel value = Ivar.fill_if_empty cancel_ivar (Some value) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    { ctrl; deferred; cancel; start_time = Time.now ctrl; span }","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let to_deferred { deferred; _ } = deferred","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let peek { deferred; _ } = Deferred.peek deferred","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let cancel _ { cancel; _ } value = cancel value","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let remaining_time { ctrl : _; start_time; span; _ } =","counters":[]},{"line":"    let current_time = Time.now ctrl in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let time_elapsed = Time.diff current_time start_time in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Time.Span.(span - time_elapsed)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let await ~timeout_duration time_controller deferred =","counters":[]},{"line":"    let timeout =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Deferred.create (fun ivar ->","counters":[]},{"line":"          ignore","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ( create time_controller timeout_duration ~f:(fun x ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                  if Ivar.is_full ivar then","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    [%log' error (Logger.create ())] \"Ivar.fill bug is here KKK !\" ;","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"                  Ivar.fill_if_empty ivar x )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              : unit t ) )","counters":[]},{"line":"    in","counters":[]},{"line":"    Deferred.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      choose","counters":[]},{"line":"        [ choice deferred (fun x -> `Ok x); choice timeout (Fn.const `Timeout) ])","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let await_exn ~timeout_duration time_controller deferred =","counters":[]},{"line":"    match%map await ~timeout_duration time_controller deferred with","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    | `Timeout ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"timeout\"","counters":[]},{"line":"    | `Ok x ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        x","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Core_time = Make (struct","counters":[]},{"line":"  include (","counters":[]},{"line":"    Core_kernel.Time :","counters":[]},{"line":"      module type of Core_kernel.Time","counters":[]},{"line":"        with module Span := Core_kernel.Time.Span","counters":[]},{"line":"         and type underlying = float )","counters":[]},{"line":"","counters":[]},{"line":"  module Controller = struct","counters":[]},{"line":"    type t = unit","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Span = struct","counters":[]},{"line":"    include Core_kernel.Time.Span","counters":[]},{"line":"","counters":[]},{"line":"    let to_time_ns_span = Fn.compose Core_kernel.Time_ns.Span.of_ns to_ns","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let diff x y =","counters":[]},{"line":"    let x_ns = Span.to_ns @@ to_span_since_epoch x in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    let y_ns = Span.to_ms @@ to_span_since_epoch y in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    Span.of_ns (x_ns -. y_ns)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"module Core_time_ns = Make (struct","counters":[]},{"line":"  include (","counters":[]},{"line":"    Core_kernel.Time_ns :","counters":[]},{"line":"      module type of Core_kernel.Time_ns","counters":[]},{"line":"        with module Span := Core_kernel.Time_ns.Span )","counters":[]},{"line":"","counters":[]},{"line":"  module Controller = struct","counters":[]},{"line":"    type t = unit","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Span = struct","counters":[]},{"line":"    include Core_kernel.Time_ns.Span","counters":[]},{"line":"","counters":[]},{"line":"    let to_time_ns_span = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let diff x y =","counters":[]},{"line":"    let x_ns = Span.to_ns @@ to_span_since_epoch x in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    let y_ns = Span.to_ms @@ to_span_since_epoch y in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    Span.of_ns (x_ns -. y_ns)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end)","counters":[{"col_start":3,"col_end":3,"count":2}]}]}