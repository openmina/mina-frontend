{"filename":"src/lib/snark_worker/debug.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"module Inputs = struct","counters":[]},{"line":"  module Worker_state = struct","counters":[]},{"line":"    include Unit","counters":[]},{"line":"","counters":[]},{"line":"    let create ~constraint_constants:_ ~proof_level () =","counters":[]},{"line":"      match proof_level with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Genesis_constants.Proof_level.Full ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"Unable to handle proof-level=Full\"","counters":[]},{"line":"      | Check | None ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"          Deferred.unit","counters":[]},{"line":"","counters":[]},{"line":"    let worker_wait_time = 0.5","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let perform_single () ~message s :","counters":[]},{"line":"      (Ledger_proof.t * Time.Span.t) Deferred.Or_error.t =","counters":[]},{"line":"    (* Use a dummy proof. *)","counters":[]},{"line":"    let stmt =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match s with","counters":[]},{"line":"      | Snark_work_lib.Work.Single.Spec.Transition (stmt, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          stmt","counters":[]},{"line":"      | Merge (stmt, _, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          stmt","counters":[]},{"line":"    in","counters":[]},{"line":"    let sok_digest = Sok_message.digest message in","counters":[]},{"line":"    Deferred.Or_error.return","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    @@ ( Transaction_snark.create ~statement:{ stmt with sok_digest }","counters":[]},{"line":"           ~proof:Proof.transaction_dummy","counters":[]},{"line":"       , Time.Span.zero )","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}