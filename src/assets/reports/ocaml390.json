{"filename":"src/lib/transaction_inclusion_status/transaction_inclusion_status.ml","lines":[{"line":"open Inline_test_quiet_logs","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_transaction","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_pool","counters":[]},{"line":"","counters":[]},{"line":"module State = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Pending | Included | Unknown [@@deriving equal, sexp, compare]","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":76,"col_end":76,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let to_string = function","counters":[]},{"line":"    | Pending ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"PENDING\"","counters":[]},{"line":"    | Included ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"INCLUDED\"","counters":[]},{"line":"    | Unknown ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"UNKOWN\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: this is extremely expensive as implemented and needs to be replaced with an extension *)","counters":[]},{"line":"let get_status ~frontier_broadcast_pipe ~transaction_pool cmd =","counters":[]},{"line":"  let resource_pool = Transaction_pool.resource_pool transaction_pool in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match Broadcast_pipe.Reader.peek frontier_broadcast_pipe with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      State.Unknown","counters":[]},{"line":"  | Some transition_frontier ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      with_return (fun { return } ->","counters":[]},{"line":"          let best_tip_path =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Transition_frontier.best_tip_path transition_frontier","counters":[]},{"line":"          in","counters":[]},{"line":"          let in_breadcrumb breadcrumb =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            breadcrumb |> Transition_frontier.Breadcrumb.validated_transition","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"            |> Mina_block.Validated.valid_commands","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"            |> List.exists ~f:(fun { data = cmd'; _ } ->","counters":[]},{"line":"                   User_command.equal cmd (User_command.forget_check cmd') )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"          in","counters":[]},{"line":"          if List.exists ~f:in_breadcrumb best_tip_path then","counters":[]},{"line":"            return State.Included ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"          if","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.exists ~f:in_breadcrumb","counters":[]},{"line":"              (Transition_frontier.all_breadcrumbs transition_frontier)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"          then return State.Pending ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"          (*This is to look for commands in the pool which are valid.","counters":[]},{"line":"             Membership check requires only the user command and no other","counters":[]},{"line":"             aspect of User_command.Valid.t and so no need to check signatures","counters":[]},{"line":"             or extract zkApp verification keys.*)","counters":[]},{"line":"          let (`If_this_is_used_it_should_have_a_comment_justifying_it","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"                checked_cmd ) =","counters":[]},{"line":"            User_command.to_valid_unsafe cmd","counters":[]},{"line":"          in","counters":[]},{"line":"          if","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Transaction_pool.Resource_pool.member resource_pool","counters":[]},{"line":"              (Transaction_hash.User_command_with_valid_signature.create","counters":[{"col_start":71,"col_end":71,"count":0}]},{"line":"                 checked_cmd )","counters":[]},{"line":"          then return State.Pending ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"          State.Unknown )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"let%test_module \"transaction_status\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    open Async","counters":[]},{"line":"    open Mina_numbers","counters":[]},{"line":"","counters":[]},{"line":"    let max_length = 10","counters":[]},{"line":"","counters":[]},{"line":"    let frontier_size = 1","counters":[]},{"line":"","counters":[]},{"line":"    let logger = Logger.null ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let time_controller = Block_time.Controller.basic ~logger","counters":[]},{"line":"","counters":[]},{"line":"    let precomputed_values = Lazy.force Precomputed_values.for_unit_tests","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let proof_level = precomputed_values.proof_level","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    module Genesis_ledger = (val precomputed_values.genesis_ledger)","counters":[]},{"line":"","counters":[]},{"line":"    let trust_system = Trust_system.null ()","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let pool_max_size = precomputed_values.genesis_constants.txpool_max_size","counters":[]},{"line":"","counters":[]},{"line":"    let verifier =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          Verifier.create ~logger ~proof_level ~constraint_constants","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~conf_dir:None","counters":[]},{"line":"            ~pids:(Child_processes.Termination.create_pid_table ()) )","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"    let key_gen =","counters":[]},{"line":"      let open Quickcheck.Generator in","counters":[]},{"line":"      let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"      let keypairs = List.map (Lazy.force Genesis_ledger.accounts) ~f:fst in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      let%map random_key_opt = of_list keypairs in","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"      ( Genesis_ledger.largest_account_keypair_exn ()","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      , Signature_lib.Keypair.of_private_key_exn","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          (Option.value_exn random_key_opt) )","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let gen_frontier =","counters":[]},{"line":"      Transition_frontier.For_tests.gen ~logger ~precomputed_values ~verifier","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        ~trust_system ~max_length ~size:frontier_size ()","counters":[]},{"line":"","counters":[]},{"line":"    (* TODO: Generate zkApps txns *)","counters":[]},{"line":"    let gen_user_command =","counters":[]},{"line":"      Signed_command.Gen.payment ~sign_type:`Real ~max_amount:100 ~fee_range:10","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ~key_gen ~nonce:(Account_nonce.of_int 1) ()","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let create_pool ~frontier_broadcast_pipe =","counters":[]},{"line":"      let config =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transaction_pool.Resource_pool.make_config ~trust_system ~pool_max_size","counters":[]},{"line":"          ~verifier ~genesis_constants:precomputed_values.genesis_constants","counters":[]},{"line":"      in","counters":[]},{"line":"      let transaction_pool, _, local_sink =","counters":[]},{"line":"        Transaction_pool.create ~config","counters":[]},{"line":"          ~constraint_constants:precomputed_values.constraint_constants","counters":[]},{"line":"          ~consensus_constants:precomputed_values.consensus_constants","counters":[]},{"line":"          ~time_controller ~logger ~frontier_broadcast_pipe","counters":[]},{"line":"          ~expiry_ns:","counters":[]},{"line":"            (Time_ns.Span.of_hr","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"               (Float.of_int","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  precomputed_values.genesis_constants.transaction_expiry_hr ) )","counters":[]},{"line":"          ~log_gossip_heard:false ~on_remote_push:(Fn.const Deferred.unit)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      in","counters":[]},{"line":"      don't_wait_for","counters":[]},{"line":"      @@ Linear_pipe.iter (Transaction_pool.broadcasts transaction_pool)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"           ~f:(fun transactions ->","counters":[]},{"line":"             [%log trace]","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"               \"Transactions have been applied successfully and is propagated \\","counters":[]},{"line":"                throughout the 'network'\"","counters":[]},{"line":"               ~metadata:","counters":[]},{"line":"                 [ ( \"transactions\"","counters":[]},{"line":"                   , Transaction_pool.Resource_pool.Diff.to_yojson transactions","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                   )","counters":[]},{"line":"                 ] ;","counters":[]},{"line":"             Deferred.unit ) ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      (* Need to wait for transaction_pool to see the transition_frontier *)","counters":[]},{"line":"      let%map () = Async.Scheduler.yield_until_no_jobs_remain () in","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"      (transaction_pool, local_sink)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"If the transition frontier currently doesn't exist, the \\","counters":[]},{"line":"                   status of a sent transaction will be unknown\" =","counters":[]},{"line":"      Quickcheck.test ~trials:1 gen_user_command ~f:(fun user_command ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Backtrace.elide := false ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"              let frontier_broadcast_pipe, _ = Broadcast_pipe.create None in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let%bind transaction_pool, local_diffs_writer =","counters":[]},{"line":"                create_pool ~frontier_broadcast_pipe","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind () =","counters":[]},{"line":"                Transaction_pool.Local_sink.push local_diffs_writer","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                  ([ Signed_command user_command ], Fn.const ())","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"              in","counters":[]},{"line":"              let%map () = Async.Scheduler.yield_until_no_jobs_remain () in","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"              [%log info] \"Checking status\" ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"              [%test_eq: State.t] ~equal:State.equal State.Unknown","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"                (get_status ~frontier_broadcast_pipe ~transaction_pool","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                   (Signed_command user_command) ) ) )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"A pending transaction is either in the transition frontier \\","counters":[]},{"line":"                   or transaction pool, but not in the best path of the \\","counters":[]},{"line":"                   transition frontier\" =","counters":[]},{"line":"      Quickcheck.test ~trials:1","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Quickcheck.Generator.tuple2 gen_frontier gen_user_command)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        ~f:(fun (frontier, user_command) ->","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let frontier_broadcast_pipe, _ =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Broadcast_pipe.create (Some frontier)","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind transaction_pool, local_diffs_writer =","counters":[]},{"line":"                create_pool ~frontier_broadcast_pipe","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind () =","counters":[]},{"line":"                Transaction_pool.Local_sink.push local_diffs_writer","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                  ([ Signed_command user_command ], Fn.const ())","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"              in","counters":[]},{"line":"              let%map () = Async.Scheduler.yield_until_no_jobs_remain () in","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"              let status =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                get_status ~frontier_broadcast_pipe ~transaction_pool","counters":[]},{"line":"                  (Signed_command user_command)","counters":[]},{"line":"              in","counters":[]},{"line":"              [%log info] \"Computing status\" ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"              [%test_eq: State.t] ~equal:State.equal State.Pending status ) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"An unknown transaction does not appear in the transition \\","counters":[]},{"line":"                   frontier or transaction pool \" =","counters":[]},{"line":"      let user_commands_generator =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let open Quickcheck.Generator in","counters":[]},{"line":"        let open Let_syntax in","counters":[]},{"line":"        let%bind head_user_command = gen_user_command in","counters":[]},{"line":"        let%map tail_user_commands =","counters":[]},{"line":"          Quickcheck.Generator.list_with_length 10 gen_user_command","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"        in","counters":[]},{"line":"        Non_empty_list.init head_user_command tail_user_commands","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      Quickcheck.test ~trials:1","counters":[]},{"line":"        (Quickcheck.Generator.tuple2 gen_frontier user_commands_generator)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        ~f:(fun (frontier, user_commands) ->","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let frontier_broadcast_pipe, _ =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Broadcast_pipe.create (Some frontier)","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind transaction_pool, local_diffs_writer =","counters":[]},{"line":"                create_pool ~frontier_broadcast_pipe","counters":[]},{"line":"              in","counters":[]},{"line":"              let unknown_user_command, pool_user_commands =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Non_empty_list.uncons user_commands","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind () =","counters":[]},{"line":"                Transaction_pool.Local_sink.push local_diffs_writer","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                  ( List.map pool_user_commands ~f:(fun x ->","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                        User_command.Signed_command x )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                  , Fn.const () )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              in","counters":[]},{"line":"              let%map () = Async.Scheduler.yield_until_no_jobs_remain () in","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"              [%log info] \"Computing status\" ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"              [%test_eq: State.t] ~equal:State.equal State.Unknown","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"                (get_status ~frontier_broadcast_pipe ~transaction_pool","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                   (Signed_command unknown_user_command) ) ) )","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}