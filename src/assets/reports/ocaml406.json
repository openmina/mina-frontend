{"filename":"src/lib/transition_frontier/persistent_root/persistent_root.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"module Ledger_transfer = Mina_ledger.Ledger_transfer.Make (Ledger) (Ledger.Db)","counters":[]},{"line":"","counters":[]},{"line":"let genesis_root_identifier ~genesis_state_hash =","counters":[]},{"line":"  let open Root_identifier.Stable.Latest in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { state_hash = genesis_state_hash }","counters":[]},{"line":"","counters":[]},{"line":"let with_file ?size filename access_level ~f =","counters":[]},{"line":"  Printf.eprintf \"PERSISTENT_WITH_FILE %s\\n%!\" filename ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Unix in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let shared, mode =","counters":[]},{"line":"    match access_level with","counters":[]},{"line":"    | `Read ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (false, [ O_RDONLY ])","counters":[]},{"line":"    | `Write ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (true, [ O_RDWR; O_TRUNC; O_CREAT ])","counters":[]},{"line":"  in","counters":[]},{"line":"  let fd = Unix.openfile filename ~mode in","counters":[]},{"line":"  let buf_size =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match size with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Int64.to_int_exn Unix.(fstat fd).st_size","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    | Some sz ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        sz","counters":[]},{"line":"  in","counters":[]},{"line":"  (* Bigstring.map_file has been removed. We copy its old implementation. *)","counters":[]},{"line":"  let buf =","counters":[]},{"line":"    Bigarray.(","counters":[]},{"line":"      array1_of_genarray","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        (Core.Unix.map_file fd char c_layout ~shared [| buf_size |]))","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  in","counters":[]},{"line":"  let x = f buf in","counters":[]},{"line":"  Bigstring.unsafe_destroy buf ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Unix.close fd ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  x","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Locations = struct","counters":[]},{"line":"  let snarked_ledger root = Filename.concat root \"snarked_ledger\"","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  let tmp_snarked_ledger root = Filename.concat root \"tmp_snarked_ledger\"","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  (** potential_snarked_ledgers is a json file that stores a list of potential","counters":[]},{"line":"      snarked ledgeres *)","counters":[]},{"line":"  let potential_snarked_ledgers root =","counters":[]},{"line":"    Filename.concat root \"potential_snarked_ledgers.json\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (** potential_snarked_ledger is the actual location of each potential snarked","counters":[]},{"line":"      ledger *)","counters":[]},{"line":"  let potential_snarked_ledger root =","counters":[]},{"line":"    let uuid = Uuid_unix.create () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Filename.concat root (\"snarked_ledger\" ^ Uuid.to_string_hum uuid)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"  let root_identifier root = Filename.concat root \"root\"","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: create a reusable singleton factory abstraction *)","counters":[]},{"line":"module rec Instance_type : sig","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { snarked_ledger : Ledger.Db.t","counters":[]},{"line":"    ; potential_snarked_ledgers : string Queue.t","counters":[]},{"line":"    ; factory : Factory_type.t","counters":[]},{"line":"    }","counters":[]},{"line":"end =","counters":[]},{"line":"  Instance_type","counters":[]},{"line":"","counters":[]},{"line":"and Factory_type : sig","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { directory : string","counters":[]},{"line":"    ; logger : Logger.t","counters":[]},{"line":"    ; mutable instance : Instance_type.t option","counters":[]},{"line":"    ; ledger_depth : int","counters":[]},{"line":"    }","counters":[]},{"line":"end =","counters":[]},{"line":"  Factory_type","counters":[]},{"line":"","counters":[]},{"line":"open Instance_type","counters":[]},{"line":"open Factory_type","counters":[]},{"line":"","counters":[]},{"line":"module Instance = struct","counters":[]},{"line":"  type t = Instance_type.t","counters":[]},{"line":"","counters":[]},{"line":"  let potential_snarked_ledgers_to_yojson queue =","counters":[]},{"line":"    `List (List.map (Queue.to_list queue) ~f:(fun filename -> `String filename))","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"  let potential_snarked_ledgers_of_yojson json =","counters":[]},{"line":"    Yojson.Safe.Util.to_list json |> List.map ~f:Yojson.Safe.Util.to_string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"  let load_potential_snarked_ledgers_from_disk factory =","counters":[]},{"line":"    let location = Locations.potential_snarked_ledgers factory.directory in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    if phys_equal (Sys.file_exists location) `Yes then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      Yojson.Safe.from_file location |> potential_snarked_ledgers_of_yojson","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    else []","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let write_potential_snarked_ledgers_to_disk t =","counters":[]},{"line":"    Yojson.Safe.to_file","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Locations.potential_snarked_ledgers t.factory.directory)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      (potential_snarked_ledgers_to_yojson t.potential_snarked_ledgers)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let enqueue_snarked_ledger ~location t =","counters":[]},{"line":"    Queue.enqueue t.potential_snarked_ledgers location ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    write_potential_snarked_ledgers_to_disk t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let dequeue_snarked_ledger t =","counters":[]},{"line":"    let location = Queue.dequeue_exn t.potential_snarked_ledgers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    File_system.rmrf location ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    write_potential_snarked_ledgers_to_disk t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let destroy t =","counters":[]},{"line":"    List.iter (Queue.to_list t.potential_snarked_ledgers) ~f:File_system.rmrf ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"    File_system.rmrf (Locations.potential_snarked_ledgers t.factory.directory) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"    Ledger.Db.close t.snarked_ledger ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    t.factory.instance <- None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let close t =","counters":[]},{"line":"    Ledger.Db.close t.snarked_ledger ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    t.factory.instance <- None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let create factory =","counters":[]},{"line":"    let snarked_ledger =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ledger.Db.create ~depth:factory.ledger_depth","counters":[]},{"line":"        ~directory_name:(Locations.snarked_ledger factory.directory)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"        ()","counters":[]},{"line":"    in","counters":[]},{"line":"    { snarked_ledger; potential_snarked_ledgers = Queue.create (); factory }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"  (** When we load from disk,","counters":[]},{"line":"      1. Check the potential_snarked_ledgers to see if any one of these","counters":[]},{"line":"         matches the snarked_ledger_hash in persistent_frontier;","counters":[]},{"line":"      2. if none of those works, we load the old snarked_ledger and check if","counters":[]},{"line":"         the old snarked_ledger matches with persistent_frontier;","counters":[]},{"line":"      3. if not, we just reset all the persisted data and start from genesis","counters":[]},{"line":"   *)","counters":[]},{"line":"  let load_from_disk factory ~snarked_ledger_hash ~logger =","counters":[]},{"line":"    let potential_snarked_ledgers =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      load_potential_snarked_ledgers_from_disk factory","counters":[]},{"line":"    in","counters":[]},{"line":"    let snarked_ledger =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.fold_until potential_snarked_ledgers ~init:None","counters":[]},{"line":"        ~f:(fun _ location ->","counters":[]},{"line":"          let potential_snarked_ledger =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ledger.Db.create ~depth:factory.ledger_depth","counters":[]},{"line":"              ~directory_name:location ()","counters":[]},{"line":"          in","counters":[]},{"line":"          let potential_snarked_ledger_hash =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Frozen_ledger_hash.of_ledger_hash","counters":[]},{"line":"            @@ Ledger.Db.merkle_root potential_snarked_ledger","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          in","counters":[]},{"line":"          [%log debug]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ ( \"potential_snarked_ledger_hash\"","counters":[]},{"line":"                , Frozen_ledger_hash.to_yojson potential_snarked_ledger_hash )","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"              ]","counters":[]},{"line":"            \"loaded potential_snarked_ledger from disk\" ;","counters":[]},{"line":"          if","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Frozen_ledger_hash.equal potential_snarked_ledger_hash","counters":[]},{"line":"              snarked_ledger_hash","counters":[]},{"line":"          then (","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"            let snarked_ledger =","counters":[]},{"line":"              Ledger.Db.create ~depth:factory.ledger_depth","counters":[]},{"line":"                ~directory_name:(Locations.tmp_snarked_ledger factory.directory)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"                ()","counters":[]},{"line":"            in","counters":[]},{"line":"            match","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Ledger_transfer.transfer_accounts","counters":[]},{"line":"                ~src:(Ledger.of_database potential_snarked_ledger)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                ~dest:snarked_ledger","counters":[]},{"line":"            with","counters":[]},{"line":"            | Ok _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Ledger.Db.close potential_snarked_ledger ;","counters":[]},{"line":"                File_system.rmrf @@ Locations.snarked_ledger factory.directory ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                Sys.rename","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (Locations.tmp_snarked_ledger factory.directory)","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"                  (Locations.snarked_ledger factory.directory) ;","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                List.iter potential_snarked_ledgers ~f:File_system.rmrf ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                File_system.rmrf","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (Locations.potential_snarked_ledgers factory.directory) ;","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                Stop (Some snarked_ledger)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | Error e ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Ledger.Db.close potential_snarked_ledger ;","counters":[]},{"line":"                List.iter potential_snarked_ledgers ~f:File_system.rmrf ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                File_system.rmrf","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (Locations.potential_snarked_ledgers factory.directory) ;","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                [%log' error factory.logger]","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"                  ~metadata:[ (\"error\", `String (Error.to_string_hum e)) ]","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                  \"Ledger_transfer failed\" ;","counters":[]},{"line":"                Stop None )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          else (","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"            Ledger.Db.close potential_snarked_ledger ;","counters":[]},{"line":"            Continue None ) )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        ~finish:(fun _ ->","counters":[]},{"line":"          List.iter potential_snarked_ledgers ~f:File_system.rmrf ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          File_system.rmrf","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Locations.potential_snarked_ledgers factory.directory) ;","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          None )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    match snarked_ledger with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let snarked_ledger =","counters":[]},{"line":"          Ledger.Db.create ~depth:factory.ledger_depth","counters":[]},{"line":"            ~directory_name:(Locations.snarked_ledger factory.directory)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"            ()","counters":[]},{"line":"        in","counters":[]},{"line":"        let potential_snarked_ledger_hash =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Frozen_ledger_hash.of_ledger_hash","counters":[]},{"line":"          @@ Ledger.Db.merkle_root snarked_ledger","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        in","counters":[]},{"line":"        if","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Frozen_ledger_hash.equal potential_snarked_ledger_hash","counters":[]},{"line":"            snarked_ledger_hash","counters":[]},{"line":"        then","counters":[]},{"line":"          Ok","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { snarked_ledger","counters":[]},{"line":"            ; potential_snarked_ledgers = Queue.create ()","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            ; factory","counters":[]},{"line":"            }","counters":[]},{"line":"        else (","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          Ledger.Db.close snarked_ledger ;","counters":[]},{"line":"          Error `Snarked_ledger_mismatch )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    | Some snarked_ledger ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok","counters":[]},{"line":"          { snarked_ledger","counters":[]},{"line":"          ; potential_snarked_ledgers = Queue.create ()","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; factory","counters":[]},{"line":"          }","counters":[]},{"line":"","counters":[]},{"line":"  (* TODO: encapsulate functionality of snarked ledger *)","counters":[]},{"line":"  let snarked_ledger { snarked_ledger; _ } = snarked_ledger","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let set_root_identifier t new_root_identifier =","counters":[]},{"line":"    [%log' trace t.factory.logger]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"root_identifier\", Root_identifier.to_yojson new_root_identifier) ]","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"      \"Setting persistent root identifier\" ;","counters":[]},{"line":"    let size = Root_identifier.Stable.Latest.bin_size_t new_root_identifier in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    with_file (Locations.root_identifier t.factory.directory) `Write ~size","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      ~f:(fun buf ->","counters":[]},{"line":"        ignore","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( Root_identifier.Stable.Latest.bin_write_t buf ~pos:0","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"              new_root_identifier","counters":[]},{"line":"            : int ) )","counters":[]},{"line":"","counters":[]},{"line":"  (* defaults to genesis *)","counters":[]},{"line":"  let load_root_identifier t =","counters":[]},{"line":"    let file = Locations.root_identifier t.factory.directory in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match Unix.access file [ `Exists; `Read ] with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Error _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Ok () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        with_file file `Read ~f:(fun buf ->","counters":[]},{"line":"            let root_identifier =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Root_identifier.Stable.Latest.bin_read_t buf ~pos_ref:(ref 0)","counters":[]},{"line":"            in","counters":[]},{"line":"            [%log' trace t.factory.logger]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"root_identifier\", Root_identifier.to_yojson root_identifier)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                ]","counters":[]},{"line":"              \"Loaded persistent root identifier\" ;","counters":[]},{"line":"            Some root_identifier )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"  let set_root_state_hash t state_hash = set_root_identifier t { state_hash }","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t = Factory_type.t","counters":[]},{"line":"","counters":[]},{"line":"let create ~logger ~directory ~ledger_depth =","counters":[]},{"line":"  { directory; logger; instance = None; ledger_depth }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create_instance_exn t =","counters":[]},{"line":"  assert (Option.is_none t.instance) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  let instance = Instance.create t in","counters":[]},{"line":"  t.instance <- Some instance ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  instance","counters":[]},{"line":"","counters":[]},{"line":"let load_from_disk_exn t ~snarked_ledger_hash ~logger =","counters":[]},{"line":"  let open Result.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  assert (Option.is_none t.instance) ;","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  let%map instance = Instance.load_from_disk t ~snarked_ledger_hash ~logger in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  t.instance <- Some instance ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  instance","counters":[]},{"line":"","counters":[]},{"line":"let with_instance_exn t ~f =","counters":[]},{"line":"  let instance = create_instance_exn t in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let x = f instance in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Instance.close instance ; x","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"let reset_to_genesis_exn t ~precomputed_values =","counters":[]},{"line":"  Printf.eprintf \"RESET_TO_GENESIS %s\\n%!\" t.directory ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  assert (Option.is_none t.instance) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  File_system.rmrf t.directory ;","counters":[]},{"line":"  (* Core.Unix.mkdir_p t.directory ; *)","counters":[]},{"line":"  with_instance_exn t ~f:(fun instance ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      ignore","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( Ledger_transfer.transfer_accounts","counters":[]},{"line":"            ~src:","counters":[]},{"line":"              (Lazy.force","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                 (Precomputed_values.genesis_ledger precomputed_values) )","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"            ~dest:(Instance.snarked_ledger instance)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          : Ledger.Db.t Or_error.t ) ;","counters":[]},{"line":"      Instance.set_root_identifier instance","counters":[]},{"line":"        (genesis_root_identifier","counters":[]},{"line":"           ~genesis_state_hash:","counters":[]},{"line":"             (Precomputed_values.genesis_state_hashes precomputed_values)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"               .state_hash ) )","counters":[{"col_start":29,"col_end":29,"count":2}]}]}