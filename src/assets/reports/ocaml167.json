{"filename":"src/lib/perf_histograms/rpc.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"let decorate_dispatch ~name (dispatch : ('q, 'r) Intf.dispatch) :","counters":[]},{"line":"    ('q, 'r) Intf.dispatch =","counters":[]},{"line":" fun conn q ->","counters":[{"col_start":1,"col_end":1,"count":11}]},{"line":"  let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let start = Time.now () in","counters":[]},{"line":"  let%map r = dispatch conn q in","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  let span = Time.diff (Time.now ()) start in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  Perf_histograms0.add_span ~name:(sprintf \"rpc_dispatch_%s\" name) span ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"  Mina_metrics.(","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Network.Rpc_latency_histogram.observe Network.rpc_latency_ms_summary","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      (Time.Span.to_ms span)) ;","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  Mina_metrics.(Gauge.set (Network.rpc_latency_ms ~name) (Time.Span.to_ms span)) ;","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"  r","counters":[]},{"line":"","counters":[]},{"line":"let decorate_impl ~name (impl : ('q, 'r, 'state) Intf.impl) :","counters":[]},{"line":"    ('q, 'r, 'state) Intf.impl =","counters":[]},{"line":" fun state ~version q ->","counters":[{"col_start":1,"col_end":1,"count":0}]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let start = Time.now () in","counters":[]},{"line":"  let%map r = impl state ~version q in","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  Perf_histograms0.add_span","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~name:(sprintf \"rpc_impl_%s\" name)","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    (Time.diff (Time.now ()) start) ;","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  r","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Plain = struct","counters":[]},{"line":"  module Extend (Rpc : Intf.Rpc.S) :","counters":[]},{"line":"    Intf.Patched.S","counters":[]},{"line":"      with type callee_query := Rpc.Callee.query","counters":[]},{"line":"       and type callee_response := Rpc.Callee.response","counters":[]},{"line":"       and type caller_query := Rpc.Caller.query","counters":[]},{"line":"       and type caller_response := Rpc.Caller.response = struct","counters":[]},{"line":"    include Rpc","counters":[]},{"line":"","counters":[]},{"line":"    let dispatch_multi = dispatch_multi |> decorate_dispatch ~name","counters":[{"col_start":59,"col_end":59,"count":11}]},{"line":"","counters":[]},{"line":"    let implement_multi ?log_not_previously_seen_version f =","counters":[]},{"line":"      implement_multi ?log_not_previously_seen_version (f |> decorate_impl ~name)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Decorate_bin_io (M : Intf.Rpc.S) (Rpc : Intf.Versioned_rpc(M).S) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    include Rpc","counters":[]},{"line":"","counters":[]},{"line":"    module type Running_stats = sig","counters":[]},{"line":"      val max_value : unit -> int","counters":[]},{"line":"","counters":[]},{"line":"      val average_value : unit -> float","counters":[]},{"line":"","counters":[]},{"line":"      val update_stats : int -> unit","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Make_stats () : Running_stats = struct","counters":[]},{"line":"      let num_values_ref = ref 0","counters":[]},{"line":"","counters":[]},{"line":"      let max_value_ref = ref 0","counters":[]},{"line":"","counters":[]},{"line":"      let average_value_ref = ref 0.0","counters":[]},{"line":"","counters":[]},{"line":"      let max_value () = !max_value_ref","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      let average_value () = !average_value_ref","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"      let update_stats v =","counters":[]},{"line":"        incr num_values_ref ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        (* Knuth's online mean algorithm *)","counters":[]},{"line":"        let delta = Float.of_int v -. !average_value_ref in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        average_value_ref :=","counters":[]},{"line":"          !average_value_ref +. (delta /. Float.of_int !num_values_ref) ;","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"        if v > !max_value_ref then max_value_ref := v","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Read_stats = Make_stats ()","counters":[]},{"line":"","counters":[]},{"line":"    let bin_read_response buf ~pos_ref =","counters":[]},{"line":"      let open Mina_metrics in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let response = bin_read_response buf ~pos_ref in","counters":[]},{"line":"      let read_size = bin_size_response response in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Read_stats.update_stats read_size ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let name = M.name ^ \"_read_response\" in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let observations =","counters":[]},{"line":"        [ (Network.rpc_size_bytes ~name, read_size |> Float.of_int)","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"        ; (Network.rpc_max_bytes ~name, Read_stats.max_value () |> Float.of_int)","counters":[{"col_start":59,"col_end":59,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"        ; (Network.rpc_avg_bytes ~name, Read_stats.average_value ())","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"        ]","counters":[]},{"line":"      in","counters":[]},{"line":"      List.iter observations ~f:(fun (histogram, value) ->","counters":[]},{"line":"          Network.Rpc_size_histogram.observe histogram value ) ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      response","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let bin_reader_response =","counters":[]},{"line":"      { Bin_prot.Type_class.read = bin_read_response","counters":[]},{"line":"      ; vtag_read = __bin_read_response__","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    module Write_stats = Make_stats ()","counters":[]},{"line":"","counters":[]},{"line":"    let bin_write_response buf ~pos response =","counters":[]},{"line":"      let open Mina_metrics in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let write_size = bin_size_response response in","counters":[]},{"line":"      Write_stats.update_stats write_size ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let name = M.name ^ \"_write_response\" in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let observations =","counters":[]},{"line":"        [ (Network.rpc_size_bytes ~name, write_size |> Float.of_int)","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"        ; (Network.rpc_max_bytes ~name, Write_stats.max_value () |> Float.of_int)","counters":[{"col_start":60,"col_end":60,"count":0},{"col_start":79,"col_end":79,"count":0}]},{"line":"        ; (Network.rpc_avg_bytes ~name, Write_stats.average_value ())","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"        ]","counters":[]},{"line":"      in","counters":[]},{"line":"      List.iter observations ~f:(fun (histogram, value) ->","counters":[]},{"line":"          Network.Rpc_size_histogram.observe histogram value ) ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      bin_write_response buf ~pos response","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let bin_writer_response =","counters":[]},{"line":"      { Bin_prot.Type_class.write = bin_write_response","counters":[]},{"line":"      ; size = bin_size_response","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let bin_response =","counters":[]},{"line":"      { Bin_prot.Type_class.reader = bin_reader_response","counters":[]},{"line":"      ; writer = bin_writer_response","counters":[]},{"line":"      ; shape = bin_shape_response","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}