{"filename":"src/lib/snark_worker/intf.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"let command_name = \"snark-worker\"","counters":[]},{"line":"","counters":[]},{"line":"module type Inputs_intf = sig","counters":[]},{"line":"  open Snark_work_lib","counters":[]},{"line":"","counters":[]},{"line":"  module Ledger_proof : Ledger_proof.S","counters":[]},{"line":"","counters":[]},{"line":"  module Worker_state : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val create :","counters":[]},{"line":"         constraint_constants:Genesis_constants.Constraint_constants.t","counters":[]},{"line":"      -> proof_level:Genesis_constants.Proof_level.t","counters":[]},{"line":"      -> unit","counters":[]},{"line":"      -> t Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"    val worker_wait_time : float","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val perform_single :","counters":[]},{"line":"       Worker_state.t","counters":[]},{"line":"    -> message:Mina_base.Sok_message.t","counters":[]},{"line":"    -> (Transaction_witness.t, Ledger_proof.t) Work.Single.Spec.t","counters":[]},{"line":"    -> (Ledger_proof.t * Time.Span.t) Deferred.Or_error.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Rpc_master = sig","counters":[]},{"line":"  module Master : sig","counters":[]},{"line":"    module T : sig","counters":[]},{"line":"      type query","counters":[]},{"line":"","counters":[]},{"line":"      type response","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Caller = T","counters":[]},{"line":"    module Callee = T","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Register (Version : sig","counters":[]},{"line":"    val version : int","counters":[]},{"line":"","counters":[]},{"line":"    type query [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"    type response [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"    val query_of_caller_model : Master.Caller.query -> query","counters":[]},{"line":"","counters":[]},{"line":"    val callee_model_of_query : query -> Master.Callee.query","counters":[]},{"line":"","counters":[]},{"line":"    val response_of_callee_model : Master.Callee.response -> response","counters":[]},{"line":"","counters":[]},{"line":"    val caller_model_of_response : response -> Master.Caller.response","counters":[]},{"line":"  end) : sig","counters":[]},{"line":"    val rpc : (Version.query, Version.response) Rpc.Rpc.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Work_S = sig","counters":[]},{"line":"  open Snark_work_lib","counters":[]},{"line":"","counters":[]},{"line":"  type ledger_proof","counters":[]},{"line":"","counters":[]},{"line":"  module Single : sig","counters":[]},{"line":"    module Spec : sig","counters":[]},{"line":"      type t = (Transaction_witness.t, ledger_proof) Work.Single.Spec.t","counters":[]},{"line":"      [@@deriving sexp, to_yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Spec : sig","counters":[]},{"line":"    type t = Single.Spec.t Work.Spec.t [@@deriving sexp, to_yojson]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Result : sig","counters":[]},{"line":"    type t = (Spec.t, ledger_proof) Work.Result.t","counters":[]},{"line":"","counters":[]},{"line":"    val transactions :","counters":[]},{"line":"      t -> Mina_transaction.Transaction.t option One_or_two.Stable.V1.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Rpcs_versioned_S = sig","counters":[]},{"line":"  module Work : Work_S","counters":[]},{"line":"","counters":[]},{"line":"  module Get_work : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type query = unit [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      type response =","counters":[]},{"line":"        (Work.Spec.t * Signature_lib.Public_key.Compressed.t) option","counters":[]},{"line":"      [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      val rpc : (query, response) Rpc.Rpc.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V2","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Submit_work : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type query = Work.Result.t [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      type response = unit [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      val rpc : (query, response) Rpc.Rpc.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V2","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Failed_to_generate_snark : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type query = Work.Spec.t * Signature_lib.Public_key.Compressed.t","counters":[]},{"line":"      [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      type response = unit [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"      val rpc : (query, response) Rpc.Rpc.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V2","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* result of Functor.Make *)","counters":[]},{"line":"module type S0 = sig","counters":[]},{"line":"  type ledger_proof","counters":[]},{"line":"","counters":[]},{"line":"  module Work : Work_S with type ledger_proof := ledger_proof","counters":[]},{"line":"","counters":[]},{"line":"  module Rpcs : sig","counters":[]},{"line":"    module Get_work :","counters":[]},{"line":"      Rpc_master","counters":[]},{"line":"        with type Master.T.query = unit","counters":[]},{"line":"         and type Master.T.response =","counters":[]},{"line":"          (Work.Spec.t * Signature_lib.Public_key.Compressed.t) option","counters":[]},{"line":"","counters":[]},{"line":"    module Submit_work :","counters":[]},{"line":"      Rpc_master","counters":[]},{"line":"        with type Master.T.query = Work.Result.t","counters":[]},{"line":"         and type Master.T.response = unit","counters":[]},{"line":"","counters":[]},{"line":"    module Failed_to_generate_snark :","counters":[]},{"line":"      Rpc_master","counters":[]},{"line":"        with type Master.T.query =","counters":[]},{"line":"          Work.Spec.t * Signature_lib.Public_key.Compressed.t","counters":[]},{"line":"         and type Master.T.response = unit","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val command_from_rpcs :","counters":[]},{"line":"       (module Rpcs_versioned_S with type Work.ledger_proof = ledger_proof)","counters":[]},{"line":"    -> Command.t","counters":[]},{"line":"","counters":[]},{"line":"  val arguments :","counters":[]},{"line":"       proof_level:Genesis_constants.Proof_level.t","counters":[]},{"line":"    -> daemon_address:Host_and_port.t","counters":[]},{"line":"    -> shutdown_on_disconnect:bool","counters":[]},{"line":"    -> string list","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* add in versioned Rpc modules *)","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include S0","counters":[]},{"line":"","counters":[]},{"line":"  module Rpcs_versioned :","counters":[]},{"line":"    Rpcs_versioned_S with type Work.ledger_proof = ledger_proof","counters":[]},{"line":"","counters":[]},{"line":"  val command : Command.t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}