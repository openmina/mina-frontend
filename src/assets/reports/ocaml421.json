{"filename":"src/lib/pickles/plonk_checks/plonk_checks.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Pickles_base","counters":[]},{"line":"module Scalars = Scalars","counters":[]},{"line":"module Domain = Domain","counters":[]},{"line":"module Opt = Plonk_types.Opt","counters":[]},{"line":"","counters":[]},{"line":"type 'field vanishing_polynomial_domain =","counters":[]},{"line":"  < vanishing_polynomial : 'field -> 'field >","counters":[]},{"line":"","counters":[]},{"line":"type 'field plonk_domain =","counters":[]},{"line":"  < vanishing_polynomial : 'field -> 'field","counters":[]},{"line":"  ; shifts : 'field Plonk_types.Shifts.t","counters":[]},{"line":"  ; generator : 'field >","counters":[]},{"line":"","counters":[]},{"line":"type 'field domain = < size : 'field ; vanishing_polynomial : 'field -> 'field >","counters":[]},{"line":"","counters":[]},{"line":"let debug = false","counters":[]},{"line":"","counters":[]},{"line":"module type Field_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val size_in_bits : int","counters":[]},{"line":"","counters":[]},{"line":"  val one : t","counters":[]},{"line":"","counters":[]},{"line":"  val of_int : int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( * ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( / ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( + ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( - ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val inv : t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val negate : t -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type 'f field = (module Field_intf with type t = 'f)","counters":[]},{"line":"","counters":[]},{"line":"let map_reduce reduce xs map = List.reduce_exn (List.map xs ~f:map) ~f:reduce","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"let pow2pow (type t) ((module F) : t field) (x : t) n : t =","counters":[]},{"line":"  let rec go acc i = if i = 0 then acc else go F.(acc * acc) (i - 1) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  go x n","counters":[]},{"line":"","counters":[]},{"line":"(* x^{2 ^ k} - 1 *)","counters":[]},{"line":"let vanishing_polynomial (type t) ((module F) : t field) domain x =","counters":[]},{"line":"  let k = Domain.log2_size domain in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  F.(pow2pow (module F) x k - one)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let domain (type t) ((module F) : t field) ~shifts ~domain_generator","counters":[]},{"line":"    (domain : Domain.t) : t plonk_domain =","counters":[]},{"line":"  let log2_size = Domain.log2_size domain in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let shifts = shifts ~log2_size in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let generator = domain_generator ~log2_size in","counters":[]},{"line":"  object","counters":[]},{"line":"    method shifts = shifts","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    method vanishing_polynomial x = vanishing_polynomial (module F) domain x","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    method generator = generator","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"let all_but m =","counters":[]},{"line":"  List.filter Abc.Label.all ~f:(fun label -> not (Abc.Label.equal label m))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"let actual_evaluation (type f) (module Field : Field_intf with type t = f)","counters":[]},{"line":"    (e : Field.t array) (pt : Field.t) ~rounds : Field.t =","counters":[]},{"line":"  let pt_n =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let rec go acc i = if i = 0 then acc else go Field.(acc * acc) (i - 1) in","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    go pt rounds","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  in","counters":[]},{"line":"  match List.rev (Array.to_list e) with","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"  | e :: es ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.fold ~init:e es ~f:(fun acc fx -> Field.(fx + (pt_n * acc)))","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Field.of_int 0","counters":[]},{"line":"","counters":[]},{"line":"let evals_of_split_evals field ~zeta ~zetaw (es : _ Plonk_types.Evals.t) ~rounds","counters":[]},{"line":"    =","counters":[]},{"line":"  let e = Fn.flip (actual_evaluation field ~rounds) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  Plonk_types.Evals.map es ~f:(fun (x1, x2) -> (e zeta x1, e zetaw x2))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"open Composition_types.Wrap.Proof_state.Deferred_values.Plonk","counters":[]},{"line":"","counters":[]},{"line":"let scalars_env (type t) (module F : Field_intf with type t = t) ~endo ~mds","counters":[]},{"line":"    ~field_of_hex ~domain ~srs_length_log2","counters":[]},{"line":"    ({ alpha; beta; gamma; zeta; joint_combiner } : (t, _) Minimal.t)","counters":[]},{"line":"    (e : (_ * _, _) Plonk_types.Evals.In_circuit.t) =","counters":[]},{"line":"  let ww = Vector.to_array e.w in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let w0 = Array.map ww ~f:fst in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let w1 = Array.map ww ~f:snd in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let var (col, row) =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let get_eval, w =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match (row : Scalars.curr_or_next) with","counters":[]},{"line":"      | Curr ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (fst, w0)","counters":[]},{"line":"      | Next ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (snd, w1)","counters":[]},{"line":"    in","counters":[]},{"line":"    match (col : Scalars.Column.t) with","counters":[]},{"line":"    | Witness i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        w.(i)","counters":[]},{"line":"    | Index Poseidon ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        get_eval e.poseidon_selector","counters":[]},{"line":"    | Index i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf","counters":[]},{"line":"          !\"Index %{sexp:Scalars.Gate_type.t}\\n\\","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"            %! should have been linearized away\"","counters":[]},{"line":"          i ()","counters":[]},{"line":"    | Coefficient i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf","counters":[]},{"line":"          !\"Coefficient index %d\\n%! should have been linearized away\"","counters":[]},{"line":"          i ()","counters":[]},{"line":"    | LookupTable ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        get_eval (Opt.value_exn e.lookup).table","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | LookupSorted i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        get_eval (Opt.value_exn e.lookup).sorted.(i)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | LookupAggreg ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        get_eval (Opt.value_exn e.lookup).aggreg","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | LookupRuntimeTable ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        get_eval (Opt.value_exn (Opt.value_exn e.lookup).runtime)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    | LookupKindIndex LookupGate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Lookup kind index should have been linearized away\"","counters":[]},{"line":"    | LookupRuntimeSelector ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Lookup runtime selector should have been linearized away\"","counters":[]},{"line":"  in","counters":[]},{"line":"  let open F in","counters":[]},{"line":"  let square x = x * x in","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  let rec pow x n =","counters":[]},{"line":"    if n = 0 then one","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"    else if n = 1 then x","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    else","counters":[]},{"line":"      let y = pow (square x) Int.(n / 2) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      if n mod 2 = 0 then y else x * y","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  in","counters":[]},{"line":"  let alpha_pows =","counters":[]},{"line":"    let arr = Array.create ~len:71 one in","counters":[]},{"line":"    arr.(1) <- alpha ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    for i = 2 to Int.(Array.length arr - 1) do","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      arr.(i) <- alpha * arr.(Int.(i - 1))","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    done ;","counters":[]},{"line":"    arr","counters":[]},{"line":"  in","counters":[]},{"line":"  let w4, w3, w2, w1 =","counters":[]},{"line":"    (* generator^{n - 3} *)","counters":[]},{"line":"    let gen = domain#generator in","counters":[]},{"line":"    (* gen_inv = gen^{n - 1} = gen^{-1} *)","counters":[]},{"line":"    let w1 = one / gen in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let w2 = square w1 in","counters":[]},{"line":"    let w3 = w2 * w1 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let w4 = lazy (w3 * w1) in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    (w4, w3, w2, w1)","counters":[]},{"line":"  in","counters":[]},{"line":"  let zk_polynomial =","counters":[]},{"line":"    (* Vanishing polynomial of [w1, w2, w3]","counters":[]},{"line":"        evaluated at x = zeta","counters":[]},{"line":"    *)","counters":[]},{"line":"    (zeta - w1) * (zeta - w2) * (zeta - w3)","counters":[]},{"line":"  in","counters":[]},{"line":"  let zeta_to_n_minus_1 = lazy (domain#vanishing_polynomial zeta) in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  { Scalars.Env.add = ( + )","counters":[]},{"line":"  ; sub = ( - )","counters":[]},{"line":"  ; mul = ( * )","counters":[]},{"line":"  ; square","counters":[]},{"line":"  ; alpha_pow = (fun i -> alpha_pows.(i))","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  ; var","counters":[]},{"line":"  ; pow = Tuple2.uncurry pow","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; field = field_of_hex","counters":[]},{"line":"  ; cell = Fn.id","counters":[]},{"line":"  ; double = (fun x -> of_int 2 * x)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  ; zk_polynomial","counters":[]},{"line":"  ; omega_to_minus_3 = w3","counters":[]},{"line":"  ; zeta_to_n_minus_1 = domain#vanishing_polynomial zeta","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"  ; endo_coefficient = endo","counters":[]},{"line":"  ; mds = (fun (row, col) -> mds.(row).(col))","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; srs_length_log2","counters":[]},{"line":"  ; vanishes_on_last_4_rows =","counters":[]},{"line":"      ( match joint_combiner with","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* No need to compute anything when not using lookups *)","counters":[]},{"line":"          F.one","counters":[]},{"line":"      | Some _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          zk_polynomial * (zeta - Lazy.force w4) )","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  ; joint_combiner = Option.value joint_combiner ~default:F.one","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  ; beta","counters":[]},{"line":"  ; gamma","counters":[]},{"line":"  ; unnormalized_lagrange_basis =","counters":[]},{"line":"      (fun i ->","counters":[]},{"line":"        let w_to_i =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match i with","counters":[]},{"line":"          | 0 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              one","counters":[]},{"line":"          | 1 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              domain#generator","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          | -1 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              w1","counters":[]},{"line":"          | -2 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              w2","counters":[]},{"line":"          | -3 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              w3","counters":[]},{"line":"          | -4 ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Lazy.force w4","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith \"TODO\"","counters":[]},{"line":"        in","counters":[]},{"line":"        Lazy.force zeta_to_n_minus_1 / (zeta - w_to_i) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: not true anymore if lookup is used *)","counters":[]},{"line":"","counters":[]},{"line":"(** The offset of the powers of alpha for the permutation. ","counters":[]},{"line":"(see https://github.com/o1-labs/proof-systems/blob/516b16fc9b0fdcab5c608cd1aea07c0c66b6675d/kimchi/src/index.rs#L190) *)","counters":[]},{"line":"let perm_alpha0 : int = 21","counters":[]},{"line":"","counters":[]},{"line":"let tick_lookup_constant_term_part (type a)","counters":[]},{"line":"    ({ add = ( + )","counters":[]},{"line":"     ; sub = ( - )","counters":[]},{"line":"     ; mul = ( * )","counters":[]},{"line":"     ; square = _","counters":[]},{"line":"     ; mds = _","counters":[]},{"line":"     ; endo_coefficient = _","counters":[]},{"line":"     ; pow","counters":[]},{"line":"     ; var","counters":[]},{"line":"     ; field","counters":[]},{"line":"     ; cell","counters":[]},{"line":"     ; alpha_pow","counters":[]},{"line":"     ; double = _","counters":[]},{"line":"     ; zk_polynomial = _","counters":[]},{"line":"     ; omega_to_minus_3 = _","counters":[]},{"line":"     ; zeta_to_n_minus_1 = _","counters":[]},{"line":"     ; srs_length_log2 = _","counters":[]},{"line":"     ; vanishes_on_last_4_rows","counters":[]},{"line":"     ; joint_combiner","counters":[]},{"line":"     ; beta","counters":[]},{"line":"     ; gamma","counters":[]},{"line":"     ; unnormalized_lagrange_basis","counters":[]},{"line":"     } :","counters":[]},{"line":"      a Scalars.Env.t ) =","counters":[]},{"line":"  alpha_pow 24","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"  * ( vanishes_on_last_4_rows","counters":[]},{"line":"    * ( cell (var (LookupAggreg, Next))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        * ( ( gamma","counters":[]},{"line":"              * ( beta","counters":[]},{"line":"                + field","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                )","counters":[]},{"line":"            + cell (var (LookupSorted 0, Curr))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"            + (beta * cell (var (LookupSorted 0, Next))) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          * ( gamma","counters":[]},{"line":"              * ( beta","counters":[]},{"line":"                + field","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                )","counters":[]},{"line":"            + cell (var (LookupSorted 1, Next))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"            + (beta * cell (var (LookupSorted 1, Curr))) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          * ( gamma","counters":[]},{"line":"              * ( beta","counters":[]},{"line":"                + field","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                )","counters":[]},{"line":"            + cell (var (LookupSorted 2, Curr))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"            + (beta * cell (var (LookupSorted 2, Next))) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          * ( gamma","counters":[]},{"line":"              * ( beta","counters":[]},{"line":"                + field","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                )","counters":[]},{"line":"            + cell (var (LookupSorted 3, Next))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"            + (beta * cell (var (LookupSorted 3, Curr))) ) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      - cell (var (LookupAggreg, Curr))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        * ( ( gamma","counters":[]},{"line":"            + pow (joint_combiner, 2)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              * field","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  \"0x0000000000000000000000000000000000000000000000000000000000000000\"","counters":[]},{"line":"            )","counters":[]},{"line":"          * ( gamma","counters":[]},{"line":"            + pow (joint_combiner, 2)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              * field","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  \"0x0000000000000000000000000000000000000000000000000000000000000000\"","counters":[]},{"line":"            )","counters":[]},{"line":"          * ( gamma","counters":[]},{"line":"            + pow (joint_combiner, 2)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              * field","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  \"0x0000000000000000000000000000000000000000000000000000000000000000\"","counters":[]},{"line":"            )","counters":[]},{"line":"          * pow","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              ( field","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                + beta","counters":[]},{"line":"              , 3 )","counters":[]},{"line":"          * ( gamma","counters":[]},{"line":"              * ( beta","counters":[]},{"line":"                + field","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"                )","counters":[]},{"line":"            + cell (var (LookupTable, Curr))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"            + (beta * cell (var (LookupTable, Next))) ) ) ) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  + alpha_pow 25","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    * ( unnormalized_lagrange_basis 0","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      * ( cell (var (LookupAggreg, Curr))","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"        - field","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"        ) )","counters":[]},{"line":"  + alpha_pow 26","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    * ( unnormalized_lagrange_basis (-4)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      * ( cell (var (LookupAggreg, Curr))","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"        - field","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            \"0x0000000000000000000000000000000000000000000000000000000000000001\"","counters":[]},{"line":"        ) )","counters":[]},{"line":"  + alpha_pow 27","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    * ( unnormalized_lagrange_basis (-4)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      * (cell (var (LookupSorted 0, Curr)) - cell (var (LookupSorted 1, Curr)))","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      )","counters":[]},{"line":"  + alpha_pow 28","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    * ( unnormalized_lagrange_basis 0","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      * (cell (var (LookupSorted 1, Curr)) - cell (var (LookupSorted 2, Curr)))","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      )","counters":[]},{"line":"  + alpha_pow 29","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    * ( unnormalized_lagrange_basis (-4)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      * (cell (var (LookupSorted 2, Curr)) - cell (var (LookupSorted 3, Curr)))","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      )","counters":[]},{"line":"","counters":[]},{"line":"module Make (Shifted_value : Shifted_value.S) (Sc : Scalars.S) = struct","counters":[]},{"line":"  (** Computes the ft evaluation at zeta. ","counters":[]},{"line":"  (see https://o1-labs.github.io/mina-book/crypto/plonk/maller_15.html#the-evaluation-of-l)","counters":[]},{"line":"  *)","counters":[]},{"line":"  let ft_eval0 (type t) (module F : Field_intf with type t = t) ~domain","counters":[]},{"line":"      ~(env : t Scalars.Env.t)","counters":[]},{"line":"      ({ alpha = _; beta; gamma; zeta; joint_combiner = _ } : _ Minimal.t)","counters":[]},{"line":"      (e : (_ * _, _) Plonk_types.Evals.In_circuit.t) p_eval0","counters":[]},{"line":"      ~(lookup_constant_term_part : (F.t Scalars.Env.t -> F.t) option) =","counters":[]},{"line":"    let open Plonk_types.Evals.In_circuit in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let e0 field = fst (field e) in","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    let e1 field = snd (field e) in","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    let e0_s = Vector.map e.s ~f:fst in","counters":[]},{"line":"    let zkp = env.zk_polynomial in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let alpha_pow = env.alpha_pow in","counters":[]},{"line":"    let zeta1m1 = env.zeta_to_n_minus_1 in","counters":[]},{"line":"    let open F in","counters":[]},{"line":"    let w0 = Vector.to_array e.w |> Array.map ~f:fst in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    let ft_eval0 =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let a0 = alpha_pow perm_alpha0 in","counters":[]},{"line":"      let w_n = w0.(Nat.to_int Plonk_types.Permuts_minus_1.n) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      let init = (w_n + gamma) * e1 z * a0 * zkp in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      (* TODO: This shares some computation with the permutation scalar in","counters":[]},{"line":"         derive_plonk. Could share between them. *)","counters":[]},{"line":"      Vector.foldi e0_s ~init ~f:(fun i acc s ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          ((beta * s) + w0.(i) + gamma) * acc )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let shifts = domain#shifts in","counters":[]},{"line":"    let ft_eval0 = ft_eval0 - p_eval0 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ft_eval0 =","counters":[]},{"line":"      ft_eval0","counters":[]},{"line":"      - Array.foldi shifts","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          ~init:(alpha_pow perm_alpha0 * zkp * e0 z)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          ~f:(fun i acc s -> acc * (gamma + (beta * zeta * s) + w0.(i)))","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    in","counters":[]},{"line":"    let nominator =","counters":[]},{"line":"      ( zeta1m1","counters":[]},{"line":"        * alpha_pow Int.(perm_alpha0 + 1)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        * (zeta - env.omega_to_minus_3)","counters":[]},{"line":"      + (zeta1m1 * alpha_pow Int.(perm_alpha0 + 2) * (zeta - one)) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      * (one - e0 z)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let denominator = (zeta - env.omega_to_minus_3) * (zeta - one) in","counters":[]},{"line":"    let ft_eval0 = ft_eval0 + (nominator / denominator) in","counters":[]},{"line":"    let constant_term =","counters":[]},{"line":"      let c = Sc.constant_term env in","counters":[]},{"line":"      Option.value_map lookup_constant_term_part ~default:c ~f:(fun x ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          c + x env )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    in","counters":[]},{"line":"    ft_eval0 - constant_term","counters":[]},{"line":"","counters":[]},{"line":"  (** Computes the list of scalars used in the linearization. *)","counters":[]},{"line":"  let derive_plonk (type t) ?(with_label = fun _ (f : unit -> t) -> f ())","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      (module F : Field_intf with type t = t) ~(env : t Scalars.Env.t) ~shift =","counters":[]},{"line":"    let _ = with_label in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open F in","counters":[]},{"line":"    fun ({ alpha; beta; gamma; zeta; joint_combiner } : _ Minimal.t)","counters":[]},{"line":"        (e : (_ * _, _) Plonk_types.Evals.In_circuit.t)","counters":[]},{"line":"          (*((e0, e1) : _ Plonk_types.Evals.In_circuit.t Double.t) *) ->","counters":[]},{"line":"      let open Plonk_types.Evals.In_circuit in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let e0 field = fst (field e) in","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      let e1 field = snd (field e) in","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      let zkp = env.zk_polynomial in","counters":[]},{"line":"      let index_terms = Sc.index_terms env in","counters":[]},{"line":"      let alpha_pow = env.alpha_pow in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let w0 = Vector.map e.w ~f:fst in","counters":[]},{"line":"      let perm =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let w0 = Vector.to_array w0 in","counters":[]},{"line":"        with_label __LOC__ (fun () ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"            Vector.foldi e.s","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              ~init:(e1 z * beta * alpha_pow perm_alpha0 * zkp)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"              ~f:(fun i acc (s, _) -> acc * (gamma + (beta * s) + w0.(i)))","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            |> negate )","counters":[]},{"line":"      in","counters":[]},{"line":"      let generic =","counters":[]},{"line":"        let open Vector in","counters":[]},{"line":"        let (l1 :: r1 :: o1 :: l2 :: r2 :: o2 :: _) = w0 in","counters":[]},{"line":"        let m1 = l1 * r1 in","counters":[]},{"line":"        let m2 = l2 * r2 in","counters":[]},{"line":"        [ e0 generic_selector; l1; r1; o1; m1; l2; r2; o2; m2 ]","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"      in","counters":[]},{"line":"      In_circuit.map_fields","counters":[]},{"line":"        ~f:(Shifted_value.of_field (module F) ~shift)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        { alpha","counters":[]},{"line":"        ; beta","counters":[]},{"line":"        ; gamma","counters":[]},{"line":"        ; zeta","counters":[]},{"line":"        ; zeta_to_domain_size = env.zeta_to_n_minus_1 + F.one","counters":[]},{"line":"        ; zeta_to_srs_length = pow2pow (module F) zeta env.srs_length_log2","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; poseidon_selector = e0 poseidon_selector","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; vbmul = Lazy.force (Hashtbl.find_exn index_terms (Index VarBaseMul))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        ; complete_add =","counters":[]},{"line":"            Lazy.force (Hashtbl.find_exn index_terms (Index CompleteAdd))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; endomul = Lazy.force (Hashtbl.find_exn index_terms (Index EndoMul))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        ; endomul_scalar =","counters":[]},{"line":"            Lazy.force (Hashtbl.find_exn index_terms (Index EndoMulScalar))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; perm","counters":[]},{"line":"        ; generic","counters":[]},{"line":"        ; lookup =","counters":[]},{"line":"            ( match joint_combiner with","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Plonk_types.Opt.None","counters":[]},{"line":"            | Some joint_combiner ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Some","counters":[]},{"line":"                  { joint_combiner","counters":[]},{"line":"                  ; lookup_gate =","counters":[]},{"line":"                      Lazy.force","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                        (Hashtbl.find_exn index_terms","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                           (LookupKindIndex LookupGate) )","counters":[]},{"line":"                  } )","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"  (** Check that computed proof scalars match the expected ones,","counters":[]},{"line":"    using the native field.","counters":[]},{"line":"    Note that the expected scalars are used to check ","counters":[]},{"line":"    the linearization in a proof over the other field ","counters":[]},{"line":"    (where those checks are more efficient), ","counters":[]},{"line":"    but we deferred the arithmetic checks until here ","counters":[]},{"line":"    so that we have the efficiency of the native field.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let checked (type t)","counters":[]},{"line":"      (module Impl : Snarky_backendless.Snark_intf.Run with type field = t)","counters":[]},{"line":"      ~shift ~env (plonk : (_, _, _, _ Opt.t) In_circuit.t) evals =","counters":[]},{"line":"    let actual =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      derive_plonk ~with_label:Impl.with_label","counters":[]},{"line":"        (module Impl.Field)","counters":[]},{"line":"        ~shift ~env","counters":[]},{"line":"        { alpha = plonk.alpha","counters":[]},{"line":"        ; beta = plonk.beta","counters":[]},{"line":"        ; gamma = plonk.gamma","counters":[]},{"line":"        ; zeta = plonk.zeta","counters":[]},{"line":"        ; joint_combiner =","counters":[]},{"line":"            ( match plonk.lookup with","counters":[]},{"line":"            | Plonk_types.Opt.None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                None","counters":[]},{"line":"            | Some l | Maybe (_, l) ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"                Some l.In_circuit.Lookup.joint_combiner )","counters":[]},{"line":"        }","counters":[]},{"line":"        evals","counters":[]},{"line":"    in","counters":[]},{"line":"    let open Impl in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open In_circuit in","counters":[]},{"line":"    with_label __LOC__ (fun () ->","counters":[]},{"line":"        ( Vector.to_list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            (with_label __LOC__ (fun () ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                 Vector.map2 plonk.generic actual.generic","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   ~f:(Shifted_value.equal Field.equal) ) )","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"        @ with_label __LOC__ (fun () ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"              List.map","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~f:(fun f ->","counters":[]},{"line":"                  Shifted_value.equal Field.equal (f plonk) (f actual) )","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"                [ poseidon_selector; vbmul; complete_add; endomul; perm ] )","counters":[]},{"line":"        @","counters":[]},{"line":"        match (plonk.lookup, actual.lookup) with","counters":[]},{"line":"        | None, None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            []","counters":[]},{"line":"        | Some plonk, Some actual ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ Shifted_value.equal Field.equal plonk.lookup_gate","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                actual.lookup_gate","counters":[]},{"line":"            ]","counters":[]},{"line":"        | Maybe (is_some, plonk), (Some actual | Maybe (_, actual)) ->","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"            [ Boolean.( ||| ) (Boolean.not is_some)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"                (Shifted_value.equal Field.equal plonk.lookup_gate","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                   actual.lookup_gate )","counters":[]},{"line":"            ]","counters":[]},{"line":"        | Some _, Maybe _ | None, (Some _ | Maybe _) | (Some _ | Maybe _), None","counters":[]},{"line":"          ->","counters":[]},{"line":"            assert false )","counters":[]},{"line":"        |> Boolean.all )","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}