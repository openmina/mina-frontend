{"filename":"src/lib/mina_base/epoch_data.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type ( 'epoch_ledger","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"           , 'epoch_seed","counters":[]},{"line":"           , 'start_checkpoint","counters":[]},{"line":"           , 'lock_checkpoint","counters":[]},{"line":"           , 'length )","counters":[]},{"line":"           t =","counters":[{"col_start":11,"col_end":11,"count":8}]},{"line":"            ( 'epoch_ledger","counters":[]},{"line":"            , 'epoch_seed","counters":[]},{"line":"            , 'start_checkpoint","counters":[]},{"line":"            , 'lock_checkpoint","counters":[]},{"line":"            , 'length )","counters":[]},{"line":"            Mina_wire_types.Mina_base.Epoch_data.Poly.V1.t =","counters":[]},{"line":"        { ledger : 'epoch_ledger","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; seed : 'epoch_seed","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        ; start_checkpoint : 'start_checkpoint","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              (* The lock checkpoint is the hash of the latest state in the seed update range, not including","counters":[]},{"line":"                 the current state. *)","counters":[]},{"line":"        ; lock_checkpoint : 'lock_checkpoint","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; epoch_length : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, hlist, sexp, equal, compare, hash, yojson, fields]","counters":[{"col_start":74,"col_end":74,"count":11}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type var =","counters":[]},{"line":"  ( Epoch_ledger.var","counters":[]},{"line":"  , Epoch_seed.var","counters":[]},{"line":"  , State_hash.var","counters":[]},{"line":"  , State_hash.var","counters":[]},{"line":"  , Length.Checked.t )","counters":[]},{"line":"  Poly.t","counters":[]},{"line":"","counters":[]},{"line":"let if_ cond ~(then_ : var) ~(else_ : var) =","counters":[]},{"line":"  let open Snark_params.Tick.Checked.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map ledger = Epoch_ledger.if_ cond ~then_:then_.ledger ~else_:else_.ledger","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  and seed = Epoch_seed.if_ cond ~then_:then_.seed ~else_:else_.seed","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  and start_checkpoint =","counters":[]},{"line":"    State_hash.if_ cond ~then_:then_.start_checkpoint","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ~else_:else_.start_checkpoint","counters":[]},{"line":"  and lock_checkpoint =","counters":[]},{"line":"    State_hash.if_ cond ~then_:then_.lock_checkpoint","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ~else_:else_.lock_checkpoint","counters":[]},{"line":"  and epoch_length =","counters":[]},{"line":"    Length.Checked.if_ cond ~then_:then_.epoch_length ~else_:else_.epoch_length","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  in","counters":[]},{"line":"  { Poly.ledger; seed; start_checkpoint; lock_checkpoint; epoch_length }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Value = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Epoch_ledger.Value.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Epoch_seed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , State_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , State_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Length.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Poly.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, compare, equal, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}