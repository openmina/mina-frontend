{"filename":"src/lib/logger/impl.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"let max_log_line_length = 1 lsl 20","counters":[]},{"line":"","counters":[]},{"line":"module Level = struct","counters":[]},{"line":"  type t = Spam | Trace | Debug | Info | Warn | Error | Faulty_peer | Fatal","counters":[{"col_start":2,"col_end":2,"count":16},{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"  [@@deriving sexp, equal, compare, show { with_path = false }, enumerate]","counters":[]},{"line":"","counters":[]},{"line":"  let of_string str =","counters":[]},{"line":"    try Ok (t_of_sexp (Sexp.Atom str))","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    with Sexp.Of_sexp_error (err, _) -> Error (Exn.to_string err)","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson t = `String (show t)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json = of_string @@ Yojson.Safe.Util.to_string json","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* Core modules extended with Yojson converters *)","counters":[]},{"line":"module Time = struct","counters":[]},{"line":"  include Time","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson t = `String (Time.to_string_abs t ~zone:Zone.utc)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let of_yojson json =","counters":[]},{"line":"    json |> Yojson.Safe.Util.to_string |> fun s -> Ok (Time.of_string s)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"  let pretty_to_string timestamp =","counters":[]},{"line":"    (* This used to be","counters":[]},{"line":"       [Core.Time.format timestamp \"%Y-%m-%d %H:%M:%S UTC\"","counters":[]},{"line":"        ~zone:Time.Zone.utc]","counters":[]},{"line":"       which uses the Unix string formatting under the hood, but we","counters":[]},{"line":"       don't want to load that just for the pretty printing. Instead,","counters":[]},{"line":"       we simulate it here.","counters":[]},{"line":"    *)","counters":[]},{"line":"    let zone = Time.Zone.utc in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let date, time = Time.to_date_ofday ~zone timestamp in","counters":[]},{"line":"    let time_parts = Time.Ofday.to_parts time in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let fmt_2_chars () i =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let s = string_of_int i in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if Int.(i < 10) then \"0\" ^ s else s","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    in","counters":[]},{"line":"    Stdlib.Format.sprintf \"%i-%a-%a %a:%a:%a UTC\" (Date.year date) fmt_2_chars","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"      (Date.month date |> Month.to_int)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      fmt_2_chars (Date.day date) fmt_2_chars time_parts.hr fmt_2_chars","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      time_parts.min fmt_2_chars time_parts.sec","counters":[]},{"line":"","counters":[]},{"line":"  let pretty_to_string_ref = ref pretty_to_string","counters":[]},{"line":"","counters":[]},{"line":"  let set_pretty_to_string x = pretty_to_string_ref := x","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"","counters":[]},{"line":"  let pretty_to_string x = !pretty_to_string_ref x","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Source = struct","counters":[]},{"line":"  type t = { module_ : string [@key \"module\"]; location : string }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let create ~module_ ~location = { module_; location }","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Metadata = struct","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Yojson.Safe.t String.Map.t","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":40,"col_end":40,"count":1}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      let to_yojson t = `Assoc (String.Map.to_alist t)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"      let of_yojson = function","counters":[]},{"line":"        | `Assoc alist ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok (String.Map.of_alist_exn alist)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error \"Unexpected object\"","counters":[]},{"line":"","counters":[]},{"line":"      include","counters":[]},{"line":"        Binable.Of_binable_without_uuid","counters":[]},{"line":"          (Core_kernel.String.Stable.V1)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"            let to_binable t = to_yojson t |> Yojson.Safe.to_string","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"            let of_binable (t : string) : t =","counters":[]},{"line":"              Yojson.Safe.from_string t |> of_yojson |> Result.ok","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"              |> Option.value_exn","counters":[]},{"line":"          end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let empty = String.Map.empty","counters":[]},{"line":"","counters":[]},{"line":"  let to_yojson = Stable.Latest.to_yojson","counters":[]},{"line":"","counters":[]},{"line":"  let of_yojson = Stable.Latest.of_yojson","counters":[]},{"line":"","counters":[]},{"line":"  let of_alist_exn = String.Map.of_alist_exn","counters":[]},{"line":"","counters":[]},{"line":"  let mem = String.Map.mem","counters":[]},{"line":"","counters":[]},{"line":"  let extend (t : t) alist =","counters":[]},{"line":"    List.fold_left alist ~init:t ~f:(fun acc (key, data) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        String.Map.set acc ~key ~data )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let merge (a : t) (b : t) = extend a (String.Map.to_alist b)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let global_metadata = ref []","counters":[]},{"line":"","counters":[]},{"line":"(* List.append isn't tail-recursive (recurses over first arg), so hopefully it doesn't get too big! *)","counters":[]},{"line":"let append_to_global_metadata l =","counters":[]},{"line":"  global_metadata := List.append !global_metadata l","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"module Message = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { timestamp : Time.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ; level : Level.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    ; source : Source.t option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; message : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; metadata : Metadata.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; event_id : Structured_log_events.id option [@default None]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving yojson]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let check_invariants (t : t) =","counters":[]},{"line":"    match Interpolator_lib.Interpolator.parse t.message with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Error _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | Ok items ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        List.for_all items ~f:(function","counters":[]},{"line":"          | `Interpolate item ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Metadata.mem t.metadata item","counters":[]},{"line":"          | `Raw _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              true )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Processor = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val process : t -> Message.t -> string option","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = T : (module S with type t = 't) * 't -> t","counters":[]},{"line":"","counters":[]},{"line":"  module Raw = struct","counters":[]},{"line":"    type t = Level.t","counters":[]},{"line":"","counters":[]},{"line":"    let create ~log_level = log_level","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    let process log_level (msg : Message.t) =","counters":[]},{"line":"      if Level.compare msg.level log_level < 0 then None","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      else","counters":[]},{"line":"        let msg_json_fields =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Message.to_yojson msg |> Yojson.Safe.Util.to_assoc","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        in","counters":[]},{"line":"        let json =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Level.compare msg.level Level.Spam = 0 then","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            `Assoc","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (List.filter msg_json_fields ~f:(fun (k, _) ->","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                   not (String.equal k \"source\") ) )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          else `Assoc msg_json_fields","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        in","counters":[]},{"line":"        Some (Yojson.Safe.to_string json)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Pretty = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      { log_level : Level.t; config : Interpolator_lib.Interpolator.config }","counters":[]},{"line":"","counters":[]},{"line":"    let create ~log_level ~config = { log_level; config }","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    let process { log_level; config } (msg : Message.t) =","counters":[]},{"line":"      let open Message in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if Level.compare msg.level log_level < 0 then None","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      else","counters":[]},{"line":"        match","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Interpolator_lib.Interpolator.interpolate config msg.message","counters":[]},{"line":"            msg.metadata","counters":[]},{"line":"        with","counters":[]},{"line":"        | Error err ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Option.iter msg.source ~f:(fun source ->","counters":[]},{"line":"                printf \"logproc interpolation error in %s: %s\\n\" source.location","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  err ) ;","counters":[]},{"line":"            None","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | Ok (str, extra) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let formatted_extra =","counters":[]},{"line":"              extra","counters":[]},{"line":"              |> List.map ~f:(fun (k, v) -> \"\\n\\t\" ^ k ^ \": \" ^ v)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"              |> String.concat ~sep:\"\"","counters":[]},{"line":"            in","counters":[]},{"line":"            let time = Time.pretty_to_string msg.timestamp in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            Some","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (time ^ \" [\" ^ Level.show msg.level ^ \"] \" ^ str ^ formatted_extra)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let raw ?(log_level = Level.Spam) () = T ((module Raw), Raw.create ~log_level)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let pretty ~log_level ~config =","counters":[]},{"line":"    T ((module Pretty), Pretty.create ~log_level ~config)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Transport = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val transport : t -> string -> unit","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = T : (module S with type t = 't) * 't -> t","counters":[]},{"line":"","counters":[]},{"line":"  let create m t = T (m, t)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"  module Stdout = struct","counters":[]},{"line":"    type t = unit","counters":[]},{"line":"","counters":[]},{"line":"    let create () = ()","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    let transport () = print_endline","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let stdout () = T ((module Stdout), Stdout.create ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Consumer_registry = struct","counters":[]},{"line":"  type consumer = { processor : Processor.t; transport : Transport.t }","counters":[]},{"line":"","counters":[]},{"line":"  let default_consumer =","counters":[]},{"line":"    lazy { processor = Processor.raw (); transport = Transport.stdout () }","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"  module Consumer_tbl = Hashtbl.Make (String)","counters":[]},{"line":"","counters":[]},{"line":"  type t = consumer list Consumer_tbl.t","counters":[]},{"line":"","counters":[]},{"line":"  let t : t = Consumer_tbl.create ()","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"","counters":[]},{"line":"  type id = string","counters":[]},{"line":"","counters":[]},{"line":"  let register ~(id : id) ~processor ~transport =","counters":[]},{"line":"    Consumer_tbl.add_multi t ~key:id ~data:{ processor; transport }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let rec broadcast_log_message ~id msg =","counters":[]},{"line":"    let consumers =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match Hashtbl.find t id with","counters":[]},{"line":"      | Some consumers ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          consumers","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [ Lazy.force default_consumer ]","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    in","counters":[]},{"line":"    List.iter consumers ~f:(fun consumer ->","counters":[]},{"line":"        let { processor = Processor.T ((module Processor), processor)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            ; transport = Transport.T ((module Transport), transport)","counters":[]},{"line":"            } =","counters":[]},{"line":"          consumer","counters":[]},{"line":"        in","counters":[]},{"line":"        match Processor.process processor msg with","counters":[]},{"line":"        | Some str ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if","counters":[]},{"line":"              String.equal id \"oversized_logs\"","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              || String.length str < max_log_line_length","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"            then Transport.transport transport str","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"            else","counters":[]},{"line":"              let max_log_line_error =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { msg with","counters":[]},{"line":"                  message =","counters":[]},{"line":"                    \"<log message elided as it exceeded the max log line \\","counters":[]},{"line":"                     length; see oversized logs for full log>\"","counters":[]},{"line":"                ; metadata = Metadata.empty","counters":[]},{"line":"                }","counters":[]},{"line":"              in","counters":[]},{"line":"              Processor.process processor max_log_line_error","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"              |> Option.value","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                   ~default:\"failed to process max log line error message\"","counters":[]},{"line":"              |> Transport.transport transport ;","counters":[]},{"line":"              broadcast_log_message ~id:\"oversized_logs\" msg","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            () )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t = { null : bool; metadata : Metadata.Stable.V1.t; id : string }","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2},{"col_start":73,"col_end":73,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let metadata t = t.metadata","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let create ?(metadata = []) ?(id = \"default\") () =","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  { null = false; metadata = Metadata.extend Metadata.empty metadata; id }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"let null () = { null = true; metadata = Metadata.empty; id = \"default\" }","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"let extend t metadata =","counters":[]},{"line":"  { t with metadata = Metadata.extend t.metadata metadata }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"let change_id { null; metadata; id = _ } ~id = { null; metadata; id }","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let make_message (t : t) ~level ~module_ ~location ~metadata ~message ~event_id","counters":[]},{"line":"    =","counters":[]},{"line":"  let global_metadata' =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let m = !global_metadata in","counters":[]},{"line":"    let key_cmp (k1, _) (k2, _) = String.compare k1 k2 in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    match List.find_all_dups m ~compare:key_cmp with","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        m","counters":[]},{"line":"    | dups ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (\"$duplicated_keys\", `List (List.map ~f:(fun (s, _) -> `String s) dups))","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        :: List.dedup_and_sort m ~compare:key_cmp","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  in","counters":[]},{"line":"  { Message.timestamp = Time.now ()","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  ; level","counters":[]},{"line":"  ; source = Some (Source.create ~module_ ~location)","counters":[]},{"line":"  ; message","counters":[]},{"line":"  ; metadata =","counters":[]},{"line":"      Metadata.extend","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        (Metadata.merge (Metadata.of_alist_exn global_metadata') t.metadata)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        metadata","counters":[]},{"line":"  ; event_id","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let raw ({ id; _ } as t) msg =","counters":[]},{"line":"  if t.null then ()","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  else if Message.check_invariants msg then","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"    Consumer_registry.broadcast_log_message ~id msg","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else","counters":[]},{"line":"    let msg' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Message.","counters":[]},{"line":"        { timestamp = msg.timestamp","counters":[]},{"line":"        ; level = Error","counters":[]},{"line":"        ; source = None","counters":[]},{"line":"        ; message =","counters":[]},{"line":"            String.concat","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              [ \"invalid log call: \"","counters":[]},{"line":"              ; String.tr ~target:'$' ~replacement:'.' msg.message","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              ]","counters":[]},{"line":"        ; metadata = Metadata.empty","counters":[]},{"line":"        ; event_id = None","counters":[]},{"line":"        }","counters":[]},{"line":"    in","counters":[]},{"line":"    Consumer_registry.broadcast_log_message ~id msg'","counters":[]},{"line":"","counters":[]},{"line":"let add_tags_to_metadata metadata tags =","counters":[]},{"line":"  Option.value_map tags ~default:metadata ~f:(fun tags ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let tags_item = (\"tags\", `List (List.map tags ~f:Tags.to_yojson)) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      tags_item :: metadata )","counters":[]},{"line":"","counters":[]},{"line":"let log t ~level ~module_ ~location ?tags ?(metadata = []) ?event_id fmt =","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"  let metadata = add_tags_to_metadata metadata tags in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let f message =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    raw t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    @@ make_message t ~level ~module_ ~location ~metadata ~message ~event_id","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  in","counters":[]},{"line":"  ksprintf f fmt","counters":[]},{"line":"","counters":[]},{"line":"type 'a log_function =","counters":[]},{"line":"     t","counters":[]},{"line":"  -> module_:string","counters":[]},{"line":"  -> location:string","counters":[]},{"line":"  -> ?tags:Tags.t list","counters":[]},{"line":"  -> ?metadata:(string, Yojson.Safe.t) List.Assoc.t","counters":[]},{"line":"  -> ?event_id:Structured_log_events.id","counters":[]},{"line":"  -> ('a, unit, string, unit) format4","counters":[]},{"line":"  -> 'a","counters":[]},{"line":"","counters":[]},{"line":"let trace = log ~level:Trace","counters":[]},{"line":"","counters":[]},{"line":"let debug = log ~level:Debug","counters":[]},{"line":"","counters":[]},{"line":"let info = log ~level:Info","counters":[]},{"line":"","counters":[]},{"line":"let warn = log ~level:Warn","counters":[]},{"line":"","counters":[]},{"line":"let error = log ~level:Error","counters":[]},{"line":"","counters":[]},{"line":"let fatal = log ~level:Fatal","counters":[]},{"line":"","counters":[]},{"line":"let faulty_peer_without_punishment = log ~level:Faulty_peer","counters":[]},{"line":"","counters":[]},{"line":"let spam = log ~level:Spam ~module_:\"\" ~location:\"\" ?event_id:None","counters":[]},{"line":"","counters":[]},{"line":"(* deprecated, use Trust_system.record instead *)","counters":[]},{"line":"let faulty_peer = faulty_peer_without_punishment","counters":[]},{"line":"","counters":[]},{"line":"module Structured = struct","counters":[]},{"line":"  type log_function =","counters":[]},{"line":"       t","counters":[]},{"line":"    -> module_:string","counters":[]},{"line":"    -> location:string","counters":[]},{"line":"    -> ?tags:Tags.t list","counters":[]},{"line":"    -> ?metadata:(string, Yojson.Safe.t) List.Assoc.t","counters":[]},{"line":"    -> Structured_log_events.t","counters":[]},{"line":"    -> unit","counters":[]},{"line":"","counters":[]},{"line":"  let log t ~level ~module_ ~location ?tags ?(metadata = []) event =","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"    let message, event_id, str_metadata = Structured_log_events.log event in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let event_id = Some event_id in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let metadata = add_tags_to_metadata (str_metadata @ metadata) tags in","counters":[]},{"line":"    raw t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    @@ make_message t ~level ~module_ ~location ~metadata ~message ~event_id","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  let trace = log ~level:Trace","counters":[]},{"line":"","counters":[]},{"line":"  let debug = log ~level:Debug","counters":[]},{"line":"","counters":[]},{"line":"  let info = log ~level:Info","counters":[]},{"line":"","counters":[]},{"line":"  let warn = log ~level:Warn","counters":[]},{"line":"","counters":[]},{"line":"  let error = log ~level:Error","counters":[]},{"line":"","counters":[]},{"line":"  let fatal = log ~level:Fatal","counters":[]},{"line":"","counters":[]},{"line":"  let faulty_peer_without_punishment = log ~level:Faulty_peer","counters":[]},{"line":"","counters":[]},{"line":"  let best_tip_diff = log ~level:Spam ~module_:\"\" ~location:\"\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Str = Structured","counters":[{"col_start":22,"col_end":22,"count":2}]}]}