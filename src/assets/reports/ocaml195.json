{"filename":"src/lib/mina_net2/multiaddr.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"type t = string [@@deriving compare, bin_io_unversioned]","counters":[{"col_start":0,"col_end":0,"count":1},{"col_start":5,"col_end":5,"count":1},{"col_start":55,"col_end":55,"count":4}]},{"line":"","counters":[]},{"line":"let to_string t = t","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let of_string t = t","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let of_libp2p_ipc = Libp2p_ipc.multiaddr_to_string","counters":[]},{"line":"","counters":[]},{"line":"let to_libp2p_ipc = Libp2p_ipc.create_multiaddr","counters":[]},{"line":"","counters":[]},{"line":"let to_peer t =","counters":[]},{"line":"  match String.split ~on:'/' t with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [ \"\"; \"ip4\"; ip4_str; \"tcp\"; tcp_str; \"p2p\"; peer_id ] -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      try","counters":[]},{"line":"        let host = Unix.Inet_addr.of_string ip4_str in","counters":[]},{"line":"        let libp2p_port = Int.of_string tcp_str in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Some (Peer.create host ~libp2p_port ~peer_id)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      with _ -> None )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      None","counters":[]},{"line":"","counters":[]},{"line":"let valid_as_peer t =","counters":[]},{"line":"  match String.split ~on:'/' t with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [ \"\"; protocol; _; \"tcp\"; _; \"p2p\"; _ ]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    when List.mem [ \"ip4\"; \"ip6\"; \"dns4\"; \"dns6\" ] protocol ~equal:String.equal","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    ->","counters":[]},{"line":"      true","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      false","counters":[]},{"line":"","counters":[]},{"line":"let of_file_contents contents : t list =","counters":[]},{"line":"  String.split ~on:'\\n' contents","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  |> List.filter ~f:(fun s ->","counters":[]},{"line":"         if valid_as_peer s then true","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"         else if String.is_empty s then false","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"         else (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           [%log' error (Logger.create ())]","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"             \"Invalid peer $peer found in peers list\"","counters":[]},{"line":"             ~metadata:[ (\"peer\", `String s) ] ;","counters":[]},{"line":"           false ) )","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":19,"col_end":19,"count":2}]}]}