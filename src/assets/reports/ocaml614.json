{"filename":"src/lib/mina_base/zkapp_precondition.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module A = Account","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Zkapp_basic","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"module Impl = Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"module Closed_interval = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type 'a t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":14,"col_end":14,"count":4}]},{"line":"            'a Mina_wire_types.Mina_base.Zkapp_precondition.Closed_interval.V1.t =","counters":[]},{"line":"        { lower : 'a; upper : 'a }","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      [@@deriving annot, sexp, equal, compare, hash, yojson, hlist, fields]","counters":[{"col_start":74,"col_end":74,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen gen_a compare_a =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"    let%bind a1 = gen_a in","counters":[]},{"line":"    let%map a2 = gen_a in","counters":[]},{"line":"    if compare_a a1 a2 <= 0 then { lower = a1; upper = a2 }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    else { lower = a2; upper = a1 }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input { lower; upper } ~f =","counters":[]},{"line":"    Random_oracle_input.Chunked.append (f lower) (f upper)","counters":[{"col_start":4,"col_end":4,"count":12},{"col_start":40,"col_end":40,"count":12},{"col_start":50,"col_end":50,"count":12}]},{"line":"","counters":[]},{"line":"  let typ x =","counters":[]},{"line":"    Typ.of_hlistable [ x; x ] ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist","counters":[{"col_start":4,"col_end":4,"count":10}]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let deriver ~name inner obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"    Fields.make_creator obj ~lower:!.inner ~upper:!.inner","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"    |> finish (name ^ \"Interval\") ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let%test_module \"ClosedInterval\" =","counters":[]},{"line":"    ( module struct","counters":[]},{"line":"      module IntClosedInterval = struct","counters":[]},{"line":"        type t_ = int t [@@deriving sexp, equal, compare]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        (* Note: nonrec doesn't work with ppx-deriving *)","counters":[]},{"line":"        type t = t_ [@@deriving sexp, equal, compare]","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"        let v = { lower = 10; upper = 100 }","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      let%test_unit \"roundtrip json\" =","counters":[]},{"line":"        let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let full = o () in","counters":[]},{"line":"        let _a : _ Unified_input.t = deriver ~name:\"Int\" int full in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        [%test_eq: IntClosedInterval.t]","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          (!(full#of_json) (!(full#to_json) IntClosedInterval.v))","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          IntClosedInterval.v","counters":[]},{"line":"    end )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let assert_ b e = if b then Ok () else Or_error.error_string e","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"(* Proofs are produced against a predicate on the protocol state. For the","counters":[]},{"line":"   transaction to go through, the predicate must be satisfied of the protocol","counters":[]},{"line":"   state at the time of transaction application. *)","counters":[]},{"line":"module Numeric = struct","counters":[]},{"line":"  module Tc = struct","counters":[]},{"line":"    type ('var, 'a) t =","counters":[]},{"line":"      { zero : 'a","counters":[]},{"line":"      ; max_value : 'a","counters":[]},{"line":"      ; compare : 'a -> 'a -> int","counters":[]},{"line":"      ; equal : 'a -> 'a -> bool","counters":[]},{"line":"      ; typ : ('var, 'a) Typ.t","counters":[]},{"line":"      ; to_input : 'a -> F.t Random_oracle_input.Chunked.t","counters":[]},{"line":"      ; to_input_checked : 'var -> Field.Var.t Random_oracle_input.Chunked.t","counters":[]},{"line":"      ; lte_checked : 'var -> 'var -> Boolean.var","counters":[]},{"line":"      ; eq_checked : 'var -> 'var -> Boolean.var","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let run f x y = Impl.run_checked (f x y)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let ( !! ) f = Fn.compose Impl.run_checked f","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    let length =","counters":[]},{"line":"      Length.","counters":[]},{"line":"        { zero","counters":[]},{"line":"        ; max_value","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; equal","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let amount =","counters":[]},{"line":"      Currency.Amount.","counters":[]},{"line":"        { zero","counters":[]},{"line":"        ; max_value = max_int","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; equal","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = var_to_input","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let balance =","counters":[]},{"line":"      Currency.Balance.","counters":[]},{"line":"        { zero","counters":[]},{"line":"        ; max_value = max_int","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; equal","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = var_to_input","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let nonce =","counters":[]},{"line":"      Account_nonce.","counters":[]},{"line":"        { zero","counters":[]},{"line":"        ; max_value","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; equal","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let global_slot =","counters":[]},{"line":"      Global_slot.","counters":[]},{"line":"        { zero","counters":[]},{"line":"        ; max_value","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; equal","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let time =","counters":[]},{"line":"      Block_time.","counters":[]},{"line":"        { equal","counters":[]},{"line":"        ; compare","counters":[]},{"line":"        ; lte_checked = run Checked.( <= )","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"        ; eq_checked = run Checked.( = )","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; zero","counters":[]},{"line":"        ; max_value","counters":[]},{"line":"        ; typ = Checked.typ","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  open Tc","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type 'a t = 'a Closed_interval.Stable.V1.t Or_ignore.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":8},{"col_start":11,"col_end":11,"count":0},{"col_start":14,"col_end":14,"count":3},{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":17}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let deriver name inner range_max obj =","counters":[]},{"line":"    let closed_interval obj' = Closed_interval.deriver ~name inner obj' in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    Or_ignore.deriver_interval ~range_max closed_interval obj","counters":[]},{"line":"","counters":[]},{"line":"  module Derivers = struct","counters":[]},{"line":"    open Fields_derivers_zkapps.Derivers","counters":[]},{"line":"","counters":[]},{"line":"    let range_uint32 =","counters":[]},{"line":"      Unsigned_extended.UInt32.(to_string zero, to_string max_int)","counters":[{"col_start":40,"col_end":40,"count":1},{"col_start":56,"col_end":56,"count":1}]},{"line":"","counters":[]},{"line":"    let range_uint64 =","counters":[]},{"line":"      Unsigned_extended.UInt64.(to_string zero, to_string max_int)","counters":[{"col_start":40,"col_end":40,"count":1},{"col_start":56,"col_end":56,"count":1}]},{"line":"","counters":[]},{"line":"    let block_time_inner obj =","counters":[]},{"line":"      let ( ^^ ) = Fn.compose in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      iso_string ~name:\"BlockTime\" ~js_type:UInt64","counters":[]},{"line":"        ~of_string:(Block_time.of_uint64 ^^ Unsigned_extended.UInt64.of_string)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ~to_string:(Unsigned_extended.UInt64.to_string ^^ Block_time.to_uint64)","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"        obj","counters":[]},{"line":"","counters":[]},{"line":"    let nonce obj = deriver \"Nonce\" uint32 range_uint32 obj","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    let balance obj = deriver \"Balance\" balance range_uint64 obj","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    let amount obj = deriver \"CurrencyAmount\" amount range_uint64 obj","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    let length obj = deriver \"Length\" uint32 range_uint32 obj","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    let global_slot obj = deriver \"GlobalSlot\" uint32 range_uint32 obj","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let block_time obj = deriver \"BlockTime\" block_time_inner range_uint64 obj","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let%test_module \"Numeric\" =","counters":[]},{"line":"    ( module struct","counters":[]},{"line":"      module Int_numeric = struct","counters":[]},{"line":"        type t_ = int t [@@deriving sexp, equal, compare]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        (* Note: nonrec doesn't work with ppx-deriving *)","counters":[]},{"line":"        type t = t_ [@@deriving sexp, equal, compare]","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type t = { foo : Int_numeric.t }","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        [@@deriving annot, sexp, equal, compare, fields]","counters":[]},{"line":"","counters":[]},{"line":"        let v : t =","counters":[]},{"line":"          { foo = Or_ignore.Check { Closed_interval.lower = 10; upper = 100 } }","counters":[]},{"line":"","counters":[]},{"line":"        let deriver obj =","counters":[]},{"line":"          let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"          Fields.make_creator obj ~foo:!.(deriver \"Int\" int (\"0\", \"1000\"))","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          |> finish \"T\" ~t_toplevel_annots","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      let%test_unit \"roundtrip json\" =","counters":[]},{"line":"        let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let full = o () in","counters":[]},{"line":"        let _a : _ Unified_input.t = T.deriver full in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        [%test_eq: T.t] (of_json full (to_json full T.v)) T.v","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    end )","counters":[]},{"line":"","counters":[]},{"line":"  let gen gen_a compare_a = Or_ignore.gen (Closed_interval.gen gen_a compare_a)","counters":[{"col_start":28,"col_end":28,"count":2},{"col_start":61,"col_end":61,"count":2}]},{"line":"","counters":[]},{"line":"  let to_input { zero; max_value; to_input; _ } (t : 'a t) =","counters":[]},{"line":"    Flagged_option.to_input'","counters":[{"col_start":4,"col_end":4,"count":12}]},{"line":"      ~f:(Closed_interval.to_input ~f:to_input)","counters":[]},{"line":"      ~field_of_bool","counters":[]},{"line":"      ( match t with","counters":[]},{"line":"      | Ignore ->","counters":[{"col_start":8,"col_end":8,"count":12}]},{"line":"          { is_some = false","counters":[]},{"line":"          ; data = { Closed_interval.lower = zero; upper = max_value }","counters":[]},{"line":"          }","counters":[]},{"line":"      | Check x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { is_some = true; data = x } )","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type 'a t = 'a Closed_interval.t Or_ignore.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_input { to_input_checked; _ } (t : 'a t) =","counters":[]},{"line":"      Or_ignore.Checked.to_input t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(Closed_interval.to_input ~f:to_input_checked)","counters":[]},{"line":"","counters":[]},{"line":"    open Impl","counters":[]},{"line":"","counters":[]},{"line":"    let check { lte_checked = ( <= ); _ } (t : 'a t) (x : 'a) =","counters":[]},{"line":"      Or_ignore.Checked.check t ~f:(fun { lower; upper } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Boolean.all [ lower <= x; x <= upper ] )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    let is_constant { eq_checked = ( = ); _ } (t : 'a t) =","counters":[]},{"line":"      let is_constant ({ lower; upper } : _ Closed_interval.t) =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        lower = upper","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      Boolean.( &&& )","counters":[]},{"line":"        (Or_ignore.Checked.is_check t)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        (is_constant (Or_ignore.Checked.data t))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ { zero; max_value; typ; _ } =","counters":[]},{"line":"    Or_ignore.typ (Closed_interval.typ typ)","counters":[{"col_start":4,"col_end":4,"count":10},{"col_start":37,"col_end":37,"count":10}]},{"line":"      ~ignore:{ Closed_interval.lower = zero; upper = max_value }","counters":[]},{"line":"","counters":[]},{"line":"  let check ~label { compare; _ } (t : 'a t) (x : 'a) =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ignore ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok ()","counters":[]},{"line":"    | Check { lower; upper } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if compare lower x <= 0 && compare x upper <= 0 then Ok ()","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        else Or_error.errorf \"Bounds check failed: %s\" label","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"  let is_constant { equal = ( = ); _ } (t : 'a t) =","counters":[]},{"line":"    match t with Ignore -> false | Check { lower; upper } -> lower = upper","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Eq_data = struct","counters":[]},{"line":"  include Or_ignore","counters":[]},{"line":"","counters":[]},{"line":"  module Tc = struct","counters":[]},{"line":"    type ('var, 'a) t =","counters":[]},{"line":"      { equal : 'a -> 'a -> bool","counters":[]},{"line":"      ; equal_checked : 'var -> 'var -> Boolean.var","counters":[]},{"line":"      ; default : 'a","counters":[]},{"line":"      ; typ : ('var, 'a) Typ.t","counters":[]},{"line":"      ; to_input : 'a -> F.t Random_oracle_input.Chunked.t","counters":[]},{"line":"      ; to_input_checked : 'var -> Field.Var.t Random_oracle_input.Chunked.t","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let run f x y = Impl.run_checked (f x y)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let field =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[]},{"line":"      Field.","counters":[]},{"line":"        { typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run Checked.equal","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        ; default = zero","counters":[]},{"line":"        ; to_input = field","counters":[]},{"line":"        ; to_input_checked = field","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let sequence_state =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[]},{"line":"      lazy","counters":[]},{"line":"        Field.","counters":[{"col_start":8,"col_end":8,"count":1}]},{"line":"          { typ","counters":[]},{"line":"          ; equal","counters":[]},{"line":"          ; equal_checked = run Checked.equal","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"          ; default = Zkapp_account.Sequence_events.empty_state_element","counters":[]},{"line":"          ; to_input = field","counters":[]},{"line":"          ; to_input_checked = field","counters":[]},{"line":"          }","counters":[]},{"line":"","counters":[]},{"line":"    let boolean =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[]},{"line":"      Boolean.","counters":[]},{"line":"        { typ","counters":[]},{"line":"        ; equal = Bool.equal","counters":[]},{"line":"        ; equal_checked = run equal","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        ; default = false","counters":[]},{"line":"        ; to_input = (fun b -> packed (field_of_bool b, 1))","counters":[{"col_start":31,"col_end":31,"count":2},{"col_start":51,"col_end":51,"count":2}]},{"line":"        ; to_input_checked =","counters":[]},{"line":"            (fun (b : Boolean.var) -> packed ((b :> Field.Var.t), 1))","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let receipt_chain_hash =","counters":[]},{"line":"      Receipt.Chain_hash.","counters":[]},{"line":"        { field with","counters":[]},{"line":"          to_input_checked = var_to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run equal_var","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let ledger_hash =","counters":[]},{"line":"      Ledger_hash.","counters":[]},{"line":"        { field with","counters":[]},{"line":"          to_input_checked = var_to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run equal_var","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let frozen_ledger_hash =","counters":[]},{"line":"      Frozen_ledger_hash.","counters":[]},{"line":"        { field with","counters":[]},{"line":"          to_input_checked = var_to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run equal_var","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let state_hash =","counters":[]},{"line":"      State_hash.","counters":[]},{"line":"        { field with","counters":[]},{"line":"          to_input_checked = var_to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run equal_var","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let token_id =","counters":[]},{"line":"      Token_id.","counters":[]},{"line":"        { default","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = Checked.equal","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let epoch_seed =","counters":[]},{"line":"      Epoch_seed.","counters":[]},{"line":"        { field with","counters":[]},{"line":"          to_input_checked = var_to_input","counters":[]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        ; equal_checked = run equal_var","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let public_key () =","counters":[]},{"line":"      Public_key.Compressed.","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"        { default = invalid_public_key","counters":[]},{"line":"        ; to_input","counters":[]},{"line":"        ; to_input_checked = Checked.to_input","counters":[]},{"line":"        ; equal_checked = run Checked.equal","counters":[{"col_start":28,"col_end":28,"count":2}]},{"line":"        ; typ","counters":[]},{"line":"        ; equal","counters":[]},{"line":"        }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_input { Tc.default; to_input; _ } (t : _ t) =","counters":[]},{"line":"    Flagged_option.to_input' ~f:to_input ~field_of_bool","counters":[{"col_start":4,"col_end":4,"count":22}]},{"line":"      ( match t with","counters":[]},{"line":"      | Ignore ->","counters":[{"col_start":8,"col_end":8,"count":22}]},{"line":"          { is_some = false; data = default }","counters":[]},{"line":"      | Check data ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { is_some = true; data } )","counters":[]},{"line":"","counters":[]},{"line":"  let to_input_checked { Tc.to_input_checked; _ } (t : _ Checked.t) =","counters":[]},{"line":"    Checked.to_input t ~f:to_input_checked","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let check_checked { Tc.equal_checked; _ } (t : 'a Checked.t) (x : 'a) =","counters":[]},{"line":"    Checked.check t ~f:(equal_checked x)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let check ?(label = \"\") { Tc.equal; _ } (t : 'a t) (x : 'a) =","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ignore ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok ()","counters":[]},{"line":"    | Check y ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if equal x y then Ok ()","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        else Or_error.errorf \"Equality check failed: %s\" label","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"  let typ { Tc.default = ignore; typ = t; _ } = typ ~ignore t","counters":[{"col_start":48,"col_end":48,"count":9}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Hash = Eq_data","counters":[]},{"line":"","counters":[]},{"line":"module Leaf_typs = struct","counters":[]},{"line":"  let public_key () =","counters":[]},{"line":"    Public_key.Compressed.(Or_ignore.typ ~ignore:invalid_public_key typ)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  open Eq_data.Tc","counters":[]},{"line":"","counters":[]},{"line":"  let field = Eq_data.typ field","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let receipt_chain_hash = Hash.typ receipt_chain_hash","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"  let ledger_hash = Hash.typ ledger_hash","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"  let frozen_ledger_hash = Hash.typ frozen_ledger_hash","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"  let state_hash = Hash.typ state_hash","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"  open Numeric.Tc","counters":[]},{"line":"","counters":[]},{"line":"  let length = Numeric.typ length","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let time = Numeric.typ time","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"  let amount = Numeric.typ amount","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let balance = Numeric.typ balance","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"  let nonce = Numeric.typ nonce","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let global_slot = Numeric.typ global_slot","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"  let token_id = Hash.typ token_id","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Account = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Zkapp_precondition.Account.V2.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { balance : Balance.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        ; nonce : Account_nonce.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"        ; receipt_chain_hash : Receipt.Chain_hash.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":62,"col_end":62,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"        ; delegate : Public_key.Compressed.Stable.V1.t Eq_data.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"        ; state : F.Stable.V1.t Eq_data.Stable.V1.t Zkapp_state.V.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"        ; sequence_state : F.Stable.V1.t Eq_data.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        ; proved_state : bool Eq_data.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        ; is_new : bool Eq_data.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, hlist, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":74,"col_end":74,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[]},{"line":"    let%bind balance = Numeric.gen Balance.gen Balance.compare in","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    let%bind nonce = Numeric.gen Account_nonce.gen Account_nonce.compare in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    let%bind receipt_chain_hash = Or_ignore.gen Receipt.Chain_hash.gen in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"    let%bind delegate = Eq_data.gen Public_key.Compressed.gen in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    let%bind state =","counters":[]},{"line":"      let%bind fields =","counters":[]},{"line":"        let field_gen = Snark_params.Tick.Field.gen in","counters":[]},{"line":"        Quickcheck.Generator.list_with_length 8 (Or_ignore.gen field_gen)","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"      in","counters":[]},{"line":"      (* won't raise because length is correct *)","counters":[]},{"line":"      Quickcheck.Generator.return (Zkapp_state.V.of_list_exn fields)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind sequence_state =","counters":[]},{"line":"      let%bind n = Int.gen_uniform_incl Int.min_value Int.max_value in","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"      let field_gen = Quickcheck.Generator.return (F.of_int n) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"      Or_ignore.gen field_gen","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind proved_state = Or_ignore.gen Quickcheck.Generator.bool in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    let%map is_new = Or_ignore.gen Quickcheck.Generator.bool in","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    { balance","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; nonce","counters":[]},{"line":"    ; receipt_chain_hash","counters":[]},{"line":"    ; delegate","counters":[]},{"line":"    ; state","counters":[]},{"line":"    ; sequence_state","counters":[]},{"line":"    ; proved_state","counters":[]},{"line":"    ; is_new","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let accept : t =","counters":[]},{"line":"    { balance = Ignore","counters":[]},{"line":"    ; nonce = Ignore","counters":[]},{"line":"    ; receipt_chain_hash = Ignore","counters":[]},{"line":"    ; delegate = Ignore","counters":[]},{"line":"    ; state =","counters":[]},{"line":"        Vector.init Zkapp_state.Max_state_size.n ~f:(fun _ -> Or_ignore.Ignore)","counters":[{"col_start":18,"col_end":18,"count":1},{"col_start":62,"col_end":62,"count":8}]},{"line":"    ; sequence_state = Ignore","counters":[]},{"line":"    ; proved_state = Ignore","counters":[]},{"line":"    ; is_new = Ignore","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let is_accept : t -> bool = equal accept","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"    let sequence_state =","counters":[]},{"line":"      with_checked ~checked:field ~name:\"SequenceState\" field","counters":[]},{"line":"    in","counters":[]},{"line":"    Fields.make_creator obj ~balance:!.Numeric.Derivers.balance","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"      ~nonce:!.Numeric.Derivers.nonce","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~receipt_chain_hash:!.(Or_ignore.deriver field)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      ~delegate:!.(Or_ignore.deriver public_key)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ~state:!.(Zkapp_state.deriver @@ Or_ignore.deriver field)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"      ~sequence_state:!.(Or_ignore.deriver sequence_state)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      ~proved_state:!.(Or_ignore.deriver bool)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      ~is_new:!.(Or_ignore.deriver bool)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    |> finish \"AccountPrecondition\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip\" =","counters":[]},{"line":"    let b = Balance.of_int 1000 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let predicate : t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { accept with","counters":[]},{"line":"        balance = Or_ignore.Check { Closed_interval.lower = b; upper = b }","counters":[]},{"line":"      ; sequence_state = Or_ignore.Check (Field.of_int 99)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"      ; proved_state = Or_ignore.Check true","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] predicate (predicate |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ balance","counters":[]},{"line":"       ; nonce","counters":[]},{"line":"       ; receipt_chain_hash","counters":[]},{"line":"       ; delegate","counters":[]},{"line":"       ; state","counters":[]},{"line":"       ; sequence_state","counters":[]},{"line":"       ; proved_state","counters":[]},{"line":"       ; is_new","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) =","counters":[]},{"line":"    let open Random_oracle_input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      [ Numeric.(to_input Tc.balance balance)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Numeric.(to_input Tc.nonce nonce)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Hash.(to_input Tc.receipt_chain_hash receipt_chain_hash)","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"      ; Eq_data.(to_input (Tc.public_key ()) delegate)","counters":[{"col_start":24,"col_end":24,"count":1},{"col_start":39,"col_end":39,"count":1}]},{"line":"      ; Vector.reduce_exn ~f:append","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"          (Vector.map state ~f:Eq_data.(to_input Tc.field))","counters":[{"col_start":20,"col_end":20,"count":1},{"col_start":47,"col_end":47,"count":1}]},{"line":"      ; Eq_data.(to_input (Lazy.force Tc.sequence_state)) sequence_state","counters":[{"col_start":24,"col_end":24,"count":1},{"col_start":36,"col_end":36,"count":1},{"col_start":56,"col_end":56,"count":1}]},{"line":"      ; Eq_data.(to_input Tc.boolean) proved_state","counters":[{"col_start":24,"col_end":24,"count":1},{"col_start":36,"col_end":36,"count":1}]},{"line":"      ; Eq_data.(to_input Tc.boolean) is_new","counters":[{"col_start":24,"col_end":24,"count":1},{"col_start":36,"col_end":36,"count":1}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    Random_oracle.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix.zkapp_precondition_account","counters":[]},{"line":"        (pack_input (to_input t)))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { balance : Balance.var Numeric.Checked.t","counters":[]},{"line":"      ; nonce : Account_nonce.Checked.t Numeric.Checked.t","counters":[]},{"line":"      ; receipt_chain_hash : Receipt.Chain_hash.var Hash.Checked.t","counters":[]},{"line":"      ; delegate : Public_key.Compressed.var Eq_data.Checked.t","counters":[]},{"line":"      ; state : Field.Var.t Eq_data.Checked.t Zkapp_state.V.t","counters":[]},{"line":"      ; sequence_state : Field.Var.t Eq_data.Checked.t","counters":[]},{"line":"      ; proved_state : Boolean.var Eq_data.Checked.t","counters":[]},{"line":"      ; is_new : Boolean.var Eq_data.Checked.t","counters":[]},{"line":"      }","counters":[]},{"line":"    [@@deriving hlist]","counters":[]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        ({ balance","counters":[]},{"line":"         ; nonce","counters":[]},{"line":"         ; receipt_chain_hash","counters":[]},{"line":"         ; delegate","counters":[]},{"line":"         ; state","counters":[]},{"line":"         ; sequence_state","counters":[]},{"line":"         ; proved_state","counters":[]},{"line":"         ; is_new","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      List.reduce_exn ~f:append","counters":[]},{"line":"        [ Numeric.(Checked.to_input Tc.balance balance)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Numeric.(Checked.to_input Tc.nonce nonce)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Hash.(to_input_checked Tc.receipt_chain_hash receipt_chain_hash)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; Eq_data.(to_input_checked (Tc.public_key ()) delegate)","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        ; Vector.reduce_exn ~f:append","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"            (Vector.map state ~f:Eq_data.(to_input_checked Tc.field))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        ; Eq_data.(to_input_checked (Lazy.force Tc.sequence_state))","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"            sequence_state","counters":[]},{"line":"        ; Eq_data.(to_input_checked Tc.boolean) proved_state","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        ; Eq_data.(to_input_checked Tc.boolean) is_new","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    open Impl","counters":[]},{"line":"","counters":[]},{"line":"    let checks ~new_account","counters":[]},{"line":"        { balance","counters":[]},{"line":"        ; nonce","counters":[]},{"line":"        ; receipt_chain_hash","counters":[]},{"line":"        ; delegate","counters":[]},{"line":"        ; state","counters":[]},{"line":"        ; sequence_state","counters":[]},{"line":"        ; proved_state","counters":[]},{"line":"        ; is_new","counters":[]},{"line":"        } (a : Account.Checked.Unhashed.t) =","counters":[]},{"line":"      [ ( Transaction_status.Failure.Account_balance_precondition_unsatisfied","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        , Numeric.(Checked.check Tc.balance balance a.balance) )","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ; ( Transaction_status.Failure.Account_nonce_precondition_unsatisfied","counters":[]},{"line":"        , Numeric.(Checked.check Tc.nonce nonce a.nonce) )","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ; ( Transaction_status.Failure","counters":[]},{"line":"          .Account_receipt_chain_hash_precondition_unsatisfied","counters":[]},{"line":"        , Eq_data.(","counters":[]},{"line":"            check_checked Tc.receipt_chain_hash receipt_chain_hash","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              a.receipt_chain_hash) )","counters":[]},{"line":"      ; ( Transaction_status.Failure.Account_delegate_precondition_unsatisfied","counters":[]},{"line":"        , Eq_data.(check_checked (Tc.public_key ()) delegate a.delegate) )","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      ]","counters":[]},{"line":"      @ [ ( Transaction_status.Failure","counters":[]},{"line":"            .Account_sequence_state_precondition_unsatisfied","counters":[]},{"line":"          , Boolean.any","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"              Vector.(","counters":[]},{"line":"                to_list","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                  (map a.zkapp.sequence_state","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                     ~f:","counters":[]},{"line":"                       Eq_data.(","counters":[]},{"line":"                         check_checked","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           (Lazy.force Tc.sequence_state)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           sequence_state) )) )","counters":[]},{"line":"        ]","counters":[]},{"line":"      @ ( Vector.(","counters":[]},{"line":"            to_list","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              (map2 state a.zkapp.app_state ~f:Eq_data.(check_checked Tc.field)))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        |> List.mapi ~f:(fun i check ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"               let failure =","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 Transaction_status.Failure","counters":[]},{"line":"                 .Account_app_state_precondition_unsatisfied","counters":[]},{"line":"                   i","counters":[]},{"line":"               in","counters":[]},{"line":"               (failure, check) ) )","counters":[]},{"line":"      @ [ ( Transaction_status.Failure","counters":[]},{"line":"            .Account_proved_state_precondition_unsatisfied","counters":[]},{"line":"          , Eq_data.(check_checked Tc.boolean proved_state a.zkapp.proved_state)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          )","counters":[]},{"line":"        ]","counters":[]},{"line":"      @ [ ( Transaction_status.Failure.Account_is_new_precondition_unsatisfied","counters":[]},{"line":"          , Eq_data.(check_checked Tc.boolean is_new new_account) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let check ~new_account ~check t a =","counters":[]},{"line":"      List.iter","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun (failure, passed) -> check failure passed)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        (checks ~new_account t a)","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let digest (t : t) =","counters":[]},{"line":"      Random_oracle.Checked.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        hash ~init:Hash_prefix.zkapp_precondition_account","counters":[]},{"line":"          (pack_input (to_input t)))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ () : (Checked.t, t) Typ.t =","counters":[]},{"line":"    let open Leaf_typs in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Typ.of_hlistable","counters":[]},{"line":"      [ balance","counters":[]},{"line":"      ; nonce","counters":[]},{"line":"      ; receipt_chain_hash","counters":[]},{"line":"      ; public_key ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ; Zkapp_state.typ (Or_ignore.typ Field.typ ~ignore:Field.zero)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      ; Or_ignore.typ Field.typ","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          ~ignore:Zkapp_account.Sequence_events.empty_state_element","counters":[]},{"line":"      ; Or_ignore.typ Boolean.typ ~ignore:false","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      ; Or_ignore.typ Boolean.typ ~ignore:false","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let checks ~new_account","counters":[]},{"line":"      { balance","counters":[]},{"line":"      ; nonce","counters":[]},{"line":"      ; receipt_chain_hash","counters":[]},{"line":"      ; delegate","counters":[]},{"line":"      ; state","counters":[]},{"line":"      ; sequence_state","counters":[]},{"line":"      ; proved_state","counters":[]},{"line":"      ; is_new","counters":[]},{"line":"      } (a : Account.t) =","counters":[]},{"line":"    [ ( Transaction_status.Failure.Account_balance_precondition_unsatisfied","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      , Numeric.(check ~label:\"balance\" Tc.balance balance a.balance) )","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; ( Transaction_status.Failure.Account_nonce_precondition_unsatisfied","counters":[]},{"line":"      , Numeric.(check ~label:\"nonce\" Tc.nonce nonce a.nonce) )","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; ( Transaction_status.Failure","counters":[]},{"line":"        .Account_receipt_chain_hash_precondition_unsatisfied","counters":[]},{"line":"      , Eq_data.(","counters":[]},{"line":"          check ~label:\"receipt_chain_hash\" Tc.receipt_chain_hash","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            receipt_chain_hash a.receipt_chain_hash) )","counters":[]},{"line":"    ; ( Transaction_status.Failure.Account_delegate_precondition_unsatisfied","counters":[]},{"line":"      , let tc = Eq_data.Tc.public_key () in","counters":[]},{"line":"        Eq_data.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          check ~label:\"delegate\" tc delegate","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            (Option.value ~default:tc.default a.delegate)) )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    ]","counters":[]},{"line":"    @","counters":[]},{"line":"    let zkapp = Option.value ~default:Zkapp_account.default a.zkapp in","counters":[]},{"line":"    [ ( Transaction_status.Failure","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        .Account_sequence_state_precondition_unsatisfied","counters":[]},{"line":"      , match","counters":[]},{"line":"          List.find (Vector.to_list zkapp.sequence_state) ~f:(fun state ->","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"              Eq_data.(","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                check","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  (Lazy.force Tc.sequence_state)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                  ~label:\"\" sequence_state state)","counters":[]},{"line":"              |> Or_error.is_ok )","counters":[]},{"line":"        with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error (Error.createf \"Sequence state mismatch\")","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        | Some _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok () )","counters":[]},{"line":"    ]","counters":[]},{"line":"    @ List.mapi","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        Vector.(to_list (zip state zkapp.app_state))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        ~f:(fun i (c, v) ->","counters":[]},{"line":"          let failure =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Transaction_status.Failure","counters":[]},{"line":"            .Account_app_state_precondition_unsatisfied","counters":[]},{"line":"              i","counters":[]},{"line":"          in","counters":[]},{"line":"          (failure, Eq_data.(check Tc.field ~label:(sprintf \"state[%d]\" i) c v))","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          )","counters":[]},{"line":"    @ [ ( Transaction_status.Failure","counters":[]},{"line":"          .Account_proved_state_precondition_unsatisfied","counters":[]},{"line":"        , Eq_data.(","counters":[]},{"line":"            check ~label:\"proved_state\" Tc.boolean proved_state","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              zkapp.proved_state) )","counters":[]},{"line":"      ]","counters":[]},{"line":"    @ [ ( Transaction_status.Failure.Account_is_new_precondition_unsatisfied","counters":[]},{"line":"        , Eq_data.(check ~label:\"is_new\" Tc.boolean is_new new_account) )","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let check ~new_account ~check t a =","counters":[]},{"line":"    List.iter","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:(fun (failure, res) -> check failure (Result.is_ok res))","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"      (checks ~new_account t a)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Protocol_state = struct","counters":[]},{"line":"  (* On each numeric field, you may assert a range","counters":[]},{"line":"     On each hash field, you may assert an equality","counters":[]},{"line":"  *)","counters":[]},{"line":"","counters":[]},{"line":"  module Epoch_data = struct","counters":[]},{"line":"    module Poly = Epoch_data.Poly","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        (* TODO: Not sure if this should be frozen ledger hash or not *)","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( ( Frozen_ledger_hash.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"            , Currency.Amount.Stable.V1.t Numeric.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"            Epoch_ledger.Poly.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Epoch_seed.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          , State_hash.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          , State_hash.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          , Length.Stable.V1.t Numeric.Stable.V1.t )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"          Poly.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ledger obj' =","counters":[]},{"line":"        let ( !. ) =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( !. ) ~t_fields_annots:Epoch_ledger.Poly.t_fields_annots","counters":[]},{"line":"        in","counters":[]},{"line":"        Epoch_ledger.Poly.Fields.make_creator obj'","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"          ~hash:!.(Or_ignore.deriver field)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          ~total_currency:!.Numeric.Derivers.amount","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        |> finish \"EpochLedgerPrecondition\"","counters":[]},{"line":"             ~t_toplevel_annots:Epoch_ledger.Poly.t_toplevel_annots","counters":[]},{"line":"      in","counters":[]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots:Poly.t_fields_annots in","counters":[]},{"line":"      Poly.Fields.make_creator obj ~ledger:!.ledger","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        ~seed:!.(Or_ignore.deriver field)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        ~start_checkpoint:!.(Or_ignore.deriver field)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        ~lock_checkpoint:!.(Or_ignore.deriver field)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        ~epoch_length:!.Numeric.Derivers.length","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      |> finish \"EpochDataPrecondition\"","counters":[]},{"line":"           ~t_toplevel_annots:Poly.t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"json roundtrip\" =","counters":[]},{"line":"      let f = Or_ignore.Check Field.one in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let u = Length.zero in","counters":[]},{"line":"      let a = Amount.zero in","counters":[]},{"line":"      let predicate : t =","counters":[]},{"line":"        { Poly.ledger =","counters":[]},{"line":"            { Epoch_ledger.Poly.hash = f","counters":[]},{"line":"            ; total_currency =","counters":[]},{"line":"                Or_ignore.Check { Closed_interval.lower = a; upper = a }","counters":[]},{"line":"            }","counters":[]},{"line":"        ; seed = f","counters":[]},{"line":"        ; start_checkpoint = f","counters":[]},{"line":"        ; lock_checkpoint = f","counters":[]},{"line":"        ; epoch_length =","counters":[]},{"line":"            Or_ignore.Check { Closed_interval.lower = u; upper = u }","counters":[]},{"line":"        }","counters":[]},{"line":"      in","counters":[]},{"line":"      let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"      let full = deriver (Fd.o ()) in","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      [%test_eq: t] predicate (predicate |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"    let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"      let open Quickcheck.Let_syntax in","counters":[]},{"line":"      let%bind ledger =","counters":[]},{"line":"        let%bind hash = Hash.gen Frozen_ledger_hash0.gen in","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"        let%map total_currency = Numeric.gen Amount.gen Amount.compare in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"        { Epoch_ledger.Poly.hash; total_currency }","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind seed = Hash.gen Epoch_seed.gen in","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      let%bind start_checkpoint = Hash.gen State_hash.gen in","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      let%bind lock_checkpoint = Hash.gen State_hash.gen in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      let min_epoch_length = 8 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let max_epoch_length = Genesis_constants.slots_per_epoch in","counters":[]},{"line":"      let%map epoch_length =","counters":[]},{"line":"        Numeric.gen","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          (Length.gen_incl","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"             (Length.of_int min_epoch_length)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"             (Length.of_int max_epoch_length) )","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"          Length.compare","counters":[]},{"line":"      in","counters":[]},{"line":"      { Poly.ledger; seed; start_checkpoint; lock_checkpoint; epoch_length }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        ({ ledger = { hash; total_currency }","counters":[]},{"line":"         ; seed","counters":[]},{"line":"         ; start_checkpoint","counters":[]},{"line":"         ; lock_checkpoint","counters":[]},{"line":"         ; epoch_length","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) =","counters":[]},{"line":"      let open Random_oracle.Input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"      List.reduce_exn ~f:append","counters":[]},{"line":"        [ Hash.(to_input Tc.frozen_ledger_hash hash)","counters":[{"col_start":23,"col_end":23,"count":2}]},{"line":"        ; Numeric.(to_input Tc.amount total_currency)","counters":[{"col_start":26,"col_end":26,"count":2}]},{"line":"        ; Hash.(to_input Tc.epoch_seed seed)","counters":[{"col_start":23,"col_end":23,"count":2}]},{"line":"        ; Hash.(to_input Tc.state_hash start_checkpoint)","counters":[{"col_start":23,"col_end":23,"count":2}]},{"line":"        ; Hash.(to_input Tc.state_hash lock_checkpoint)","counters":[{"col_start":23,"col_end":23,"count":2}]},{"line":"        ; Numeric.(to_input Tc.length epoch_length)","counters":[{"col_start":26,"col_end":26,"count":2}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      type t =","counters":[]},{"line":"        ( ( Frozen_ledger_hash.var Hash.Checked.t","counters":[]},{"line":"          , Currency.Amount.var Numeric.Checked.t )","counters":[]},{"line":"          Epoch_ledger.Poly.t","counters":[]},{"line":"        , Epoch_seed.var Hash.Checked.t","counters":[]},{"line":"        , State_hash.var Hash.Checked.t","counters":[]},{"line":"        , State_hash.var Hash.Checked.t","counters":[]},{"line":"        , Length.Checked.t Numeric.Checked.t )","counters":[]},{"line":"        Poly.t","counters":[]},{"line":"","counters":[]},{"line":"      let to_input","counters":[]},{"line":"          ({ ledger = { hash; total_currency }","counters":[]},{"line":"           ; seed","counters":[]},{"line":"           ; start_checkpoint","counters":[]},{"line":"           ; lock_checkpoint","counters":[]},{"line":"           ; epoch_length","counters":[]},{"line":"           } :","counters":[]},{"line":"            t ) =","counters":[]},{"line":"        let open Random_oracle.Input.Chunked in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        List.reduce_exn ~f:append","counters":[]},{"line":"          [ Hash.(to_input_checked Tc.frozen_ledger_hash hash)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; Numeric.(Checked.to_input Tc.amount total_currency)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          ; Hash.(to_input_checked Tc.epoch_seed seed)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; Hash.(to_input_checked Tc.state_hash start_checkpoint)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; Hash.(to_input_checked Tc.state_hash lock_checkpoint)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; Numeric.(Checked.to_input Tc.length epoch_length)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          ]","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type ( 'snarked_ledger_hash","counters":[{"col_start":8,"col_end":8,"count":2}]},{"line":"             , 'time","counters":[]},{"line":"             , 'length","counters":[]},{"line":"             , 'vrf_output","counters":[]},{"line":"             , 'global_slot","counters":[]},{"line":"             , 'amount","counters":[]},{"line":"             , 'epoch_data )","counters":[]},{"line":"             t =","counters":[{"col_start":13,"col_end":13,"count":10}]},{"line":"              ( 'snarked_ledger_hash","counters":[]},{"line":"              , 'time","counters":[]},{"line":"              , 'length","counters":[]},{"line":"              , 'vrf_output","counters":[]},{"line":"              , 'global_slot","counters":[]},{"line":"              , 'amount","counters":[]},{"line":"              , 'epoch_data )","counters":[]},{"line":"              Mina_wire_types.Mina_base.Zkapp_precondition.Protocol_state.Poly","counters":[]},{"line":"              .V1","counters":[]},{"line":"              .t =","counters":[]},{"line":"          { (* TODO:","counters":[]},{"line":"               We should include staged ledger hash again! It only changes once per","counters":[]},{"line":"               block. *)","counters":[]},{"line":"            snarked_ledger_hash : 'snarked_ledger_hash","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          ; timestamp : 'time","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"          ; blockchain_length : 'length","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"                (* TODO: This previously had epoch_count but I removed it as I believe it is redundant","counters":[]},{"line":"                   with global_slot_since_hard_fork.","counters":[]},{"line":"","counters":[]},{"line":"                   epoch_count in [a, b]","counters":[]},{"line":"","counters":[]},{"line":"                   should be equivalent to","counters":[]},{"line":"","counters":[]},{"line":"                   global_slot_since_hard_fork in [slots_per_epoch * a, slots_per_epoch * b]","counters":[]},{"line":"                *)","counters":[]},{"line":"          ; min_window_density : 'length","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; last_vrf_output : 'vrf_output [@skip]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; total_currency : 'amount","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"          ; global_slot_since_hard_fork : 'global_slot","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          ; global_slot_since_genesis : 'global_slot","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; staking_epoch_data : 'epoch_data","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          ; next_epoch_data : 'epoch_data","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, hlist, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":76,"col_end":76,"count":5}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Frozen_ledger_hash.Stable.V1.t Hash.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        , Block_time.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        , Length.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        , unit (* TODO *)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Global_slot.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        , Currency.Amount.Stable.V1.t Numeric.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        , Epoch_data.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Poly.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) ?skip_data =","counters":[]},{"line":"      ( !. ) ?skip_data ~t_fields_annots:Poly.t_fields_annots","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let last_vrf_output = ( !. ) ~skip_data:() skip in","counters":[]},{"line":"    Poly.Fields.make_creator obj","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      ~snarked_ledger_hash:!.(Or_ignore.deriver field)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      ~timestamp:!.Numeric.Derivers.block_time","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      ~blockchain_length:!.Numeric.Derivers.length","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ~min_window_density:!.Numeric.Derivers.length ~last_vrf_output","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      ~total_currency:!.Numeric.Derivers.amount","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ~global_slot_since_hard_fork:!.Numeric.Derivers.global_slot","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~global_slot_since_genesis:!.Numeric.Derivers.global_slot","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      ~staking_epoch_data:!.Epoch_data.deriver","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      ~next_epoch_data:!.Epoch_data.deriver","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    |> finish \"NetworkPrecondition\" ~t_toplevel_annots:Poly.t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[]},{"line":"    (* TODO: pass in ledger hash, next available token *)","counters":[]},{"line":"    let snarked_ledger_hash = Zkapp_basic.Or_ignore.Ignore in","counters":[]},{"line":"    let%bind timestamp = Numeric.gen Block_time.gen Block_time.compare in","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    let%bind blockchain_length = Numeric.gen Length.gen Length.compare in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    let max_min_window_density =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Genesis_constants.for_unit_tests.protocol.slots_per_sub_window","counters":[]},{"line":"      * Genesis_constants.Constraint_constants.compiled.sub_windows_per_window","counters":[]},{"line":"      - 1","counters":[]},{"line":"      |> Length.of_int","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind min_window_density =","counters":[]},{"line":"      Numeric.gen","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        (Length.gen_incl Length.zero max_min_window_density)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        Length.compare","counters":[]},{"line":"    in","counters":[]},{"line":"    (* TODO: fix when type becomes something other than unit *)","counters":[]},{"line":"    let last_vrf_output = () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind total_currency =","counters":[]},{"line":"      Numeric.gen Currency.Amount.gen Currency.Amount.compare","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind global_slot_since_hard_fork =","counters":[]},{"line":"      Numeric.gen Global_slot.gen Global_slot.compare","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind global_slot_since_genesis =","counters":[]},{"line":"      Numeric.gen Global_slot.gen Global_slot.compare","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind staking_epoch_data = Epoch_data.gen in","counters":[]},{"line":"    let%map next_epoch_data = Epoch_data.gen in","counters":[]},{"line":"    { Poly.snarked_ledger_hash","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; timestamp","counters":[]},{"line":"    ; blockchain_length","counters":[]},{"line":"    ; min_window_density","counters":[]},{"line":"    ; last_vrf_output","counters":[]},{"line":"    ; total_currency","counters":[]},{"line":"    ; global_slot_since_hard_fork","counters":[]},{"line":"    ; global_slot_since_genesis","counters":[]},{"line":"    ; staking_epoch_data","counters":[]},{"line":"    ; next_epoch_data","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ snarked_ledger_hash","counters":[]},{"line":"       ; timestamp","counters":[]},{"line":"       ; blockchain_length","counters":[]},{"line":"       ; min_window_density","counters":[]},{"line":"       ; last_vrf_output","counters":[]},{"line":"       ; total_currency","counters":[]},{"line":"       ; global_slot_since_hard_fork","counters":[]},{"line":"       ; global_slot_since_genesis","counters":[]},{"line":"       ; staking_epoch_data","counters":[]},{"line":"       ; next_epoch_data","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) =","counters":[]},{"line":"    let open Random_oracle.Input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let () = last_vrf_output in","counters":[]},{"line":"    let length = Numeric.(to_input Tc.length) in","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      [ Hash.(to_input Tc.field snarked_ledger_hash)","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"      ; Numeric.(to_input Tc.time timestamp)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; length blockchain_length","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"      ; length min_window_density","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"      ; Numeric.(to_input Tc.amount total_currency)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Numeric.(to_input Tc.global_slot global_slot_since_hard_fork)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Numeric.(to_input Tc.global_slot global_slot_since_genesis)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Epoch_data.to_input staking_epoch_data","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"      ; Epoch_data.to_input next_epoch_data","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    Random_oracle.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix.zkapp_precondition_protocol_state","counters":[]},{"line":"        (pack_input (to_input t)))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  module View = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( Frozen_ledger_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Block_time.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Length.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , unit (* TODO *)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Global_slot.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , Currency.Amount.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          , ( ( Frozen_ledger_hash.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"              , Currency.Amount.Stable.V1.t )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              Epoch_ledger.Poly.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Epoch_seed.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , State_hash.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , State_hash.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            , Length.Stable.V1.t )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            Epoch_data.Poly.Stable.V1.t )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"          Poly.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      type t =","counters":[]},{"line":"        ( Frozen_ledger_hash.var","counters":[]},{"line":"        , Block_time.Checked.t","counters":[]},{"line":"        , Length.Checked.t","counters":[]},{"line":"        , unit (* TODO *)","counters":[]},{"line":"        , Global_slot.Checked.t","counters":[]},{"line":"        , Currency.Amount.var","counters":[]},{"line":"        , ( (Frozen_ledger_hash.var, Currency.Amount.var) Epoch_ledger.Poly.t","counters":[]},{"line":"          , Epoch_seed.var","counters":[]},{"line":"          , State_hash.var","counters":[]},{"line":"          , State_hash.var","counters":[]},{"line":"          , Length.Checked.t )","counters":[]},{"line":"          Epoch_data.Poly.t )","counters":[]},{"line":"        Poly.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let epoch_data_deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ledger obj' =","counters":[]},{"line":"        let ( !. ) =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( !. ) ~t_fields_annots:Epoch_ledger.Poly.t_fields_annots","counters":[]},{"line":"        in","counters":[]},{"line":"        Epoch_ledger.Poly.Fields.make_creator obj' ~hash:!.field","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          ~total_currency:!.amount","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        |> finish \"EpochLedger\"","counters":[]},{"line":"             ~t_toplevel_annots:Epoch_ledger.Poly.t_toplevel_annots","counters":[]},{"line":"      in","counters":[]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots:Epoch_data.Poly.t_fields_annots in","counters":[]},{"line":"      Epoch_data.Poly.Fields.make_creator obj ~ledger:!.ledger ~seed:!.field","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"        ~start_checkpoint:!.field ~lock_checkpoint:!.field","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"        ~epoch_length:!.uint32","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      |> finish \"EpochData\" ~t_toplevel_annots:Epoch_data.Poly.t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) ?skip_data =","counters":[]},{"line":"        ( !. ) ?skip_data ~t_fields_annots:Poly.t_fields_annots","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      let last_vrf_output = ( !. ) ~skip_data:() skip in","counters":[]},{"line":"      Poly.Fields.make_creator obj ~snarked_ledger_hash:!.field","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        ~timestamp:!.Numeric.Derivers.block_time_inner","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        ~blockchain_length:!.uint32 ~min_window_density:!.uint32","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        ~last_vrf_output ~total_currency:!.amount","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ~global_slot_since_hard_fork:!.uint32","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        ~global_slot_since_genesis:!.uint32","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        ~staking_epoch_data:!.epoch_data_deriver","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        ~next_epoch_data:!.epoch_data_deriver","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      |> finish \"NetworkView\" ~t_toplevel_annots:Poly.t_toplevel_annots","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( Frozen_ledger_hash.var Hash.Checked.t","counters":[]},{"line":"      , Block_time.Checked.t Numeric.Checked.t","counters":[]},{"line":"      , Length.Checked.t Numeric.Checked.t","counters":[]},{"line":"      , unit (* TODO *)","counters":[]},{"line":"      , Global_slot.Checked.t Numeric.Checked.t","counters":[]},{"line":"      , Currency.Amount.var Numeric.Checked.t","counters":[]},{"line":"      , Epoch_data.Checked.t )","counters":[]},{"line":"      Poly.Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        ({ snarked_ledger_hash","counters":[]},{"line":"         ; timestamp","counters":[]},{"line":"         ; blockchain_length","counters":[]},{"line":"         ; min_window_density","counters":[]},{"line":"         ; last_vrf_output","counters":[]},{"line":"         ; total_currency","counters":[]},{"line":"         ; global_slot_since_hard_fork","counters":[]},{"line":"         ; global_slot_since_genesis","counters":[]},{"line":"         ; staking_epoch_data","counters":[]},{"line":"         ; next_epoch_data","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) =","counters":[]},{"line":"      let open Random_oracle.Input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let () = last_vrf_output in","counters":[]},{"line":"      let length = Numeric.(Checked.to_input Tc.length) in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      List.reduce_exn ~f:append","counters":[]},{"line":"        [ Hash.(to_input_checked Tc.frozen_ledger_hash snarked_ledger_hash)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; Numeric.(Checked.to_input Tc.time timestamp)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; length blockchain_length","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        ; length min_window_density","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        ; Numeric.(Checked.to_input Tc.amount total_currency)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Numeric.(Checked.to_input Tc.global_slot global_slot_since_hard_fork)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Numeric.(Checked.to_input Tc.global_slot global_slot_since_genesis)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Epoch_data.Checked.to_input staking_epoch_data","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        ; Epoch_data.Checked.to_input next_epoch_data","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let digest t =","counters":[]},{"line":"      Random_oracle.Checked.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        hash ~init:Hash_prefix.zkapp_precondition_protocol_state","counters":[]},{"line":"          (pack_input (to_input t)))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let check","counters":[]},{"line":"        (* Bind all the fields explicity so we make sure they are all used. *)","counters":[]},{"line":"          ({ snarked_ledger_hash","counters":[]},{"line":"           ; timestamp","counters":[]},{"line":"           ; blockchain_length","counters":[]},{"line":"           ; min_window_density","counters":[]},{"line":"           ; last_vrf_output","counters":[]},{"line":"           ; total_currency","counters":[]},{"line":"           ; global_slot_since_hard_fork","counters":[]},{"line":"           ; global_slot_since_genesis","counters":[]},{"line":"           ; staking_epoch_data","counters":[]},{"line":"           ; next_epoch_data","counters":[]},{"line":"           } :","counters":[]},{"line":"            t ) (s : View.Checked.t) =","counters":[]},{"line":"      let open Impl in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let epoch_ledger ({ hash; total_currency } : _ Epoch_ledger.Poly.t)","counters":[]},{"line":"          (t : Epoch_ledger.var) =","counters":[]},{"line":"        [ Hash.(check_checked Tc.frozen_ledger_hash) hash t.hash","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; Numeric.(Checked.check Tc.amount) total_currency t.total_currency","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        ]","counters":[]},{"line":"      in","counters":[]},{"line":"      let epoch_data","counters":[]},{"line":"          ({ ledger; seed; start_checkpoint; lock_checkpoint; epoch_length } :","counters":[]},{"line":"            _ Epoch_data.Poly.t ) (t : _ Epoch_data.Poly.t) =","counters":[]},{"line":"        ignore seed ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        epoch_ledger ledger t.ledger","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        @ [ Hash.(check_checked Tc.state_hash)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              start_checkpoint t.start_checkpoint","counters":[]},{"line":"          ; Hash.(check_checked Tc.state_hash) lock_checkpoint t.lock_checkpoint","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"          ; Numeric.(Checked.check Tc.length) epoch_length t.epoch_length","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          ]","counters":[]},{"line":"      in","counters":[]},{"line":"      ignore last_vrf_output ;","counters":[]},{"line":"      Boolean.all","counters":[]},{"line":"        ( [ Hash.(check_checked Tc.ledger_hash)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"              snarked_ledger_hash s.snarked_ledger_hash","counters":[]},{"line":"          ; Numeric.(Checked.check Tc.time) timestamp s.timestamp","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; Numeric.(Checked.check Tc.length)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"              blockchain_length s.blockchain_length","counters":[]},{"line":"          ; Numeric.(Checked.check Tc.length)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"              min_window_density s.min_window_density","counters":[]},{"line":"          ; Numeric.(Checked.check Tc.amount) total_currency s.total_currency","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          ; Numeric.(Checked.check Tc.global_slot)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"              global_slot_since_hard_fork s.global_slot_since_hard_fork","counters":[]},{"line":"          ; Numeric.(Checked.check Tc.global_slot)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"              global_slot_since_genesis s.global_slot_since_genesis","counters":[]},{"line":"          ]","counters":[]},{"line":"        @ epoch_data staking_epoch_data s.staking_epoch_data","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        @ epoch_data next_epoch_data s.next_epoch_data )","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ : (Checked.t, Stable.Latest.t) Typ.t =","counters":[]},{"line":"    let open Poly.Stable.Latest in","counters":[]},{"line":"    let frozen_ledger_hash = Hash.(typ Tc.frozen_ledger_hash) in","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"    let state_hash = Hash.(typ Tc.state_hash) in","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"    let epoch_seed = Hash.(typ Tc.epoch_seed) in","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"    let length = Numeric.(typ Tc.length) in","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"    let time = Numeric.(typ Tc.time) in","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"    let amount = Numeric.(typ Tc.amount) in","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"    let global_slot = Numeric.(typ Tc.global_slot) in","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    let epoch_data =","counters":[]},{"line":"      let epoch_ledger =","counters":[]},{"line":"        let open Epoch_ledger.Poly in","counters":[]},{"line":"        Typ.of_hlistable","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"          [ frozen_ledger_hash; amount ]","counters":[]},{"line":"          ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"          ~value_of_hlist:of_hlist","counters":[]},{"line":"      in","counters":[]},{"line":"      let open Epoch_data.Poly in","counters":[]},{"line":"      Typ.of_hlistable","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"        [ epoch_ledger; epoch_seed; state_hash; state_hash; length ]","counters":[]},{"line":"        ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"        ~value_of_hlist:of_hlist","counters":[]},{"line":"    in","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"      [ frozen_ledger_hash","counters":[]},{"line":"      ; time","counters":[]},{"line":"      ; length","counters":[]},{"line":"      ; length","counters":[]},{"line":"      ; Typ.unit","counters":[]},{"line":"      ; amount","counters":[]},{"line":"      ; global_slot","counters":[]},{"line":"      ; global_slot","counters":[]},{"line":"      ; epoch_data","counters":[]},{"line":"      ; epoch_data","counters":[]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"      ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let epoch_data : Epoch_data.t =","counters":[]},{"line":"    { ledger = { hash = Ignore; total_currency = Ignore }","counters":[]},{"line":"    ; seed = Ignore","counters":[]},{"line":"    ; start_checkpoint = Ignore","counters":[]},{"line":"    ; lock_checkpoint = Ignore","counters":[]},{"line":"    ; epoch_length = Ignore","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let accept : t =","counters":[]},{"line":"    { snarked_ledger_hash = Ignore","counters":[]},{"line":"    ; timestamp = Ignore","counters":[]},{"line":"    ; blockchain_length = Ignore","counters":[]},{"line":"    ; min_window_density = Ignore","counters":[]},{"line":"    ; last_vrf_output = ()","counters":[]},{"line":"    ; total_currency = Ignore","counters":[]},{"line":"    ; global_slot_since_hard_fork = Ignore","counters":[]},{"line":"    ; global_slot_since_genesis = Ignore","counters":[]},{"line":"    ; staking_epoch_data = epoch_data","counters":[]},{"line":"    ; next_epoch_data = epoch_data","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let valid_until time : t =","counters":[]},{"line":"    { snarked_ledger_hash = Ignore","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; timestamp = Check time","counters":[]},{"line":"    ; blockchain_length = Ignore","counters":[]},{"line":"    ; min_window_density = Ignore","counters":[]},{"line":"    ; last_vrf_output = ()","counters":[]},{"line":"    ; total_currency = Ignore","counters":[]},{"line":"    ; global_slot_since_hard_fork = Ignore","counters":[]},{"line":"    ; global_slot_since_genesis = Ignore","counters":[]},{"line":"    ; staking_epoch_data = epoch_data","counters":[]},{"line":"    ; next_epoch_data = epoch_data","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip\" =","counters":[]},{"line":"    let predicate : t = accept in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] predicate (predicate |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  let check","counters":[]},{"line":"      (* Bind all the fields explicity so we make sure they are all used. *)","counters":[]},{"line":"        ({ snarked_ledger_hash","counters":[]},{"line":"         ; timestamp","counters":[]},{"line":"         ; blockchain_length","counters":[]},{"line":"         ; min_window_density","counters":[]},{"line":"         ; last_vrf_output","counters":[]},{"line":"         ; total_currency","counters":[]},{"line":"         ; global_slot_since_hard_fork","counters":[]},{"line":"         ; global_slot_since_genesis","counters":[]},{"line":"         ; staking_epoch_data","counters":[]},{"line":"         ; next_epoch_data","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) (s : View.t) =","counters":[]},{"line":"    let open Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let epoch_ledger ({ hash; total_currency } : _ Epoch_ledger.Poly.t)","counters":[]},{"line":"        (t : Epoch_ledger.Value.t) =","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        Hash.(check ~label:\"epoch_ledger_hash\" Tc.frozen_ledger_hash)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"          hash t.hash","counters":[]},{"line":"      in","counters":[]},{"line":"      let%map () =","counters":[]},{"line":"        Numeric.(check ~label:\"epoch_ledger_total_currency\" Tc.amount)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"          total_currency t.total_currency","counters":[]},{"line":"      in","counters":[]},{"line":"      ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let epoch_data label","counters":[]},{"line":"        ({ ledger; seed; start_checkpoint; lock_checkpoint; epoch_length } :","counters":[]},{"line":"          _ Epoch_data.Poly.t ) (t : _ Epoch_data.Poly.t) =","counters":[]},{"line":"      let l s = sprintf \"%s_%s\" label s in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      let%bind () = epoch_ledger ledger t.ledger in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ignore seed ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        Hash.(check ~label:(l \"start_check_point\") Tc.state_hash)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"          start_checkpoint t.start_checkpoint","counters":[]},{"line":"      in","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        Hash.(check ~label:(l \"lock_check_point\") Tc.state_hash)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          lock_checkpoint t.lock_checkpoint","counters":[]},{"line":"      in","counters":[]},{"line":"      let%map () =","counters":[]},{"line":"        Numeric.(check ~label:\"epoch_length\" Tc.length)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          epoch_length t.epoch_length","counters":[]},{"line":"      in","counters":[]},{"line":"      ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Hash.(check ~label:\"snarked_ledger_hash\" Tc.ledger_hash)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        snarked_ledger_hash s.snarked_ledger_hash","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"timestamp\" Tc.time) timestamp s.timestamp","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"blockchain_length\" Tc.length)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        blockchain_length s.blockchain_length","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"min_window_density\" Tc.length)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        min_window_density s.min_window_density","counters":[]},{"line":"    in","counters":[]},{"line":"    ignore last_vrf_output ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* TODO: Decide whether to expose this *)","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"total_currency\" Tc.amount)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        total_currency s.total_currency","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"curr_global_slot\" Tc.global_slot)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        global_slot_since_hard_fork s.global_slot_since_hard_fork","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      Numeric.(check ~label:\"global_slot_since_genesis\" Tc.global_slot)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"        global_slot_since_genesis s.global_slot_since_genesis","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      epoch_data \"staking_epoch_data\" staking_epoch_data s.staking_epoch_data","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      epoch_data \"next_epoch_data\" next_epoch_data s.next_epoch_data","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    ()","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Account_type = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = User | Zkapp | None | Any","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let check (t : t) (a : A.t option) =","counters":[]},{"line":"    match (a, t) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | _, Any ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok ()","counters":[]},{"line":"    | None, None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok ()","counters":[]},{"line":"    | None, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Or_error.error_string \"expected account_type = None\"","counters":[]},{"line":"    | Some a, User ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        assert_ (Option.is_none a.zkapp) \"expected account_type = User\"","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | Some a, Zkapp ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        assert_ (Option.is_some a.zkapp) \"expected account_type = Zkapp\"","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | Some _, None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Or_error.error_string \"no second account allowed\"","counters":[]},{"line":"","counters":[]},{"line":"  let to_bits = function","counters":[]},{"line":"    | User ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ true; false ]","counters":[]},{"line":"    | Zkapp ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ false; true ]","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ false; false ]","counters":[]},{"line":"    | Any ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ true; true ]","counters":[]},{"line":"","counters":[]},{"line":"  let of_bits = function","counters":[]},{"line":"    | [ user; zkapp ] -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match (user, zkapp) with","counters":[]},{"line":"        | true, false ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            User","counters":[]},{"line":"        | false, true ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Zkapp","counters":[]},{"line":"        | false, false ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | true, true ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Any )","counters":[]},{"line":"    | _ ->","counters":[]},{"line":"        assert false","counters":[]},{"line":"","counters":[]},{"line":"  let to_input x =","counters":[]},{"line":"    let open Random_oracle_input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Array.reduce_exn ~f:append","counters":[]},{"line":"      (Array.of_list_map (to_bits x) ~f:(fun b -> packed (field_of_bool b, 1)))","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t = { user : Boolean.var; zkapp : Boolean.var } [@@deriving hlist]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"    let to_input { user; zkapp } =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Array.reduce_exn ~f:append","counters":[]},{"line":"        (Array.map [| user; zkapp |] ~f:(fun b ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             packed ((b :> Field.Var.t), 1) ) )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"    let constant =","counters":[]},{"line":"      let open Boolean in","counters":[]},{"line":"      function","counters":[]},{"line":"      | User ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { user = true_; zkapp = false_ }","counters":[]},{"line":"      | Zkapp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { user = false_; zkapp = true_ }","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { user = false_; zkapp = false_ }","counters":[]},{"line":"      | Any ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { user = true_; zkapp = true_ }","counters":[]},{"line":"","counters":[]},{"line":"    (* TODO: Write a unit test for these. *)","counters":[]},{"line":"    let snapp_allowed t = t.zkapp","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let user_allowed t = t.user","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ =","counters":[]},{"line":"    let open Checked in","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"      [ Boolean.typ; Boolean.typ ]","counters":[]},{"line":"      ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist","counters":[]},{"line":"      ~value_to_hlist:(function","counters":[]},{"line":"        | User ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ true; false ]","counters":[]},{"line":"        | Zkapp ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ false; true ]","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ false; false ]","counters":[]},{"line":"        | Any ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ true; true ] )","counters":[]},{"line":"      ~value_of_hlist:(fun [ user; zkapp ] ->","counters":[]},{"line":"        match (user, zkapp) with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | true, false ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            User","counters":[]},{"line":"        | false, true ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Zkapp","counters":[]},{"line":"        | false, false ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | true, true ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Any )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Other = struct","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type ('account, 'account_transition, 'vk) t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":50,"col_end":50,"count":6}]},{"line":"          { predicate : 'account","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"          ; account_transition : 'account_transition","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; account_vk : 'vk","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving hlist, sexp, equal, yojson, hash, compare]","counters":[{"col_start":61,"col_end":61,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Account.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Account_state.Stable.V1.t Transition.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        , F.Stable.V1.t Hash.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"        Poly.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( Account.Checked.t","counters":[]},{"line":"      , Account_state.Checked.t Transition.t","counters":[]},{"line":"      , Field.Var.t Or_ignore.Checked.t )","counters":[]},{"line":"      Poly.Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_input ({ predicate; account_transition; account_vk } : t) =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      List.reduce_exn ~f:append","counters":[]},{"line":"        [ Account.Checked.to_input predicate","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ; Transition.to_input ~f:Account_state.Checked.to_input","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            account_transition","counters":[]},{"line":"        ; Hash.(to_input_checked Tc.field) account_vk","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        ]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_input ({ predicate; account_transition; account_vk } : t) =","counters":[]},{"line":"    let open Random_oracle_input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      [ Account.to_input predicate","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ; Transition.to_input ~f:Account_state.to_input account_transition","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ; Hash.(to_input Tc.field) account_vk","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let typ () =","counters":[]},{"line":"    let open Poly in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Typ.of_hlistable","counters":[]},{"line":"      [ Account.typ (); Transition.typ Account_state.typ; Hash.(typ Tc.field) ]","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"      ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"      ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let accept : t =","counters":[]},{"line":"    { predicate = Account.accept","counters":[]},{"line":"    ; account_transition = { prev = Any; next = Any }","counters":[]},{"line":"    ; account_vk = Ignore","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type ('account, 'protocol_state, 'other, 'pk) t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":52,"col_end":52,"count":7}]},{"line":"        { self_predicate : 'account","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; other : 'other","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; fee_payer : 'pk","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"        ; protocol_state_predicate : 'protocol_state","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving hlist, sexp, equal, yojson, hash, compare]","counters":[{"col_start":59,"col_end":59,"count":3}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let typ spec =","counters":[]},{"line":"    let open Stable.Latest in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Typ.of_hlistable spec ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist","counters":[]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1}]},{"line":"      ( Account.Stable.V2.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Protocol_state.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Other.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Public_key.Compressed.Stable.V1.t Eq_data.Stable.V1.t )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"      Poly.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"module Digested = F","counters":[]},{"line":"","counters":[]},{"line":"let to_input ({ self_predicate; other; fee_payer; protocol_state_predicate } : t)","counters":[]},{"line":"    =","counters":[]},{"line":"  let open Random_oracle_input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  List.reduce_exn ~f:append","counters":[]},{"line":"    [ Account.to_input self_predicate","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; Other.to_input other","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"    ; Eq_data.(to_input (Tc.public_key ())) fee_payer","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"    ; Protocol_state.to_input protocol_state_predicate","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"let digest t =","counters":[]},{"line":"  Random_oracle.(","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    hash ~init:Hash_prefix.zkapp_precondition (pack_input (to_input t)))","counters":[{"col_start":56,"col_end":56,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"let accept : t =","counters":[]},{"line":"  { self_predicate = Account.accept","counters":[]},{"line":"  ; other = Other.accept","counters":[]},{"line":"  ; fee_payer = Ignore","counters":[]},{"line":"  ; protocol_state_predicate = Protocol_state.accept","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Account.Checked.t","counters":[]},{"line":"    , Protocol_state.Checked.t","counters":[]},{"line":"    , Other.Checked.t","counters":[]},{"line":"    , Public_key.Compressed.var Or_ignore.Checked.t )","counters":[]},{"line":"    Poly.Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ self_predicate; other; fee_payer; protocol_state_predicate } : t) =","counters":[]},{"line":"    let open Random_oracle_input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      [ Account.Checked.to_input self_predicate","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ; Other.Checked.to_input other","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      ; Eq_data.(to_input_checked (Tc.public_key ())) fee_payer","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; Protocol_state.Checked.to_input protocol_state_predicate","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    Random_oracle.Checked.(","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash ~init:Hash_prefix.zkapp_precondition (pack_input (to_input t)))","counters":[{"col_start":58,"col_end":58,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let typ () : (Checked.t, Stable.Latest.t) Typ.t =","counters":[]},{"line":"  Poly.typ","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ Account.typ ()","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; Other.typ ()","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    ; Eq_data.(typ (Tc.public_key ()))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; Protocol_state.typ","counters":[]},{"line":"    ]","counters":[{"col_start":4,"col_end":4,"count":1}]}]}