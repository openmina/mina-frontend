{"filename":"src/lib/mina_base/hack_snarky_tests.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"merkle_tree\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    open Snarky_backendless.Merkle_tree","counters":[]},{"line":"","counters":[]},{"line":"    let merge x y = Free_hash.Merge (x, y)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    let hash =","counters":[]},{"line":"      Option.value_map ~default:Free_hash.Hash_empty ~f:(fun x ->","counters":[]},{"line":"          Free_hash.Hash_value x )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    let create_tree n =","counters":[]},{"line":"      let tree = create ~hash ~merge 0 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      add_many tree (List.init (n - 1) ~f:(fun i -> i + 1))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"    let n = 10","counters":[]},{"line":"","counters":[]},{"line":"    let tree = create_tree n","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"    let%test \"length\" = List.length (to_list tree) = n","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"key_retrieval\" =","counters":[]},{"line":"      for i = 0 to n - 1 do","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        assert (get_exn tree i = i)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"      done","counters":[]},{"line":"","counters":[]},{"line":"    let%test \"key_nonexist\" = Option.is_none (get tree n)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"merkle_root\" =","counters":[]},{"line":"      for key = 0 to n - 1 do","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let path = get_path tree key in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        (* need poly equality here *)","counters":[]},{"line":"        assert (","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"          Poly.( = )","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            (implied_root ~merge key (hash (Some key)) path)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"            (root tree) )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      done","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]}]}