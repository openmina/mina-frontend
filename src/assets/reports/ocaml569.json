{"filename":"src/lib/bootstrap_controller/transition_cache.ml","lines":[{"line":"open Mina_base","counters":[]},{"line":"open Core","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"(* Cache represents a graph. The key is a State_hash, which is the node in","counters":[]},{"line":"   the graph, and the value is the children transitions of the node *)","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  Mina_block.initial_valid_block Envelope.Incoming.t list State_hash.Table.t","counters":[]},{"line":"","counters":[]},{"line":"let create () = State_hash.Table.create ()","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"let add (t : t) ~parent new_child =","counters":[]},{"line":"  State_hash.Table.update t parent ~f:(function","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ new_child ]","counters":[]},{"line":"    | Some children ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if","counters":[]},{"line":"          List.mem children new_child ~equal:(fun e1 e2 ->","counters":[]},{"line":"              let state_hash e =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Envelope.Incoming.data e","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                |> Mina_block.Validation.block_with_hash","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                |> State_hash.With_state_hashes.state_hash","counters":[]},{"line":"              in","counters":[]},{"line":"              State_hash.equal (state_hash e1) (state_hash e2) )","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        then children","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"        else new_child :: children )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"let data t =","counters":[]},{"line":"  let collected_transitions = State_hash.Table.data t |> List.concat in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  assert (","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"    Stdlib.List.compare_lengths collected_transitions","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      (List.stable_dedup collected_transitions)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    = 0 )","counters":[]},{"line":"  (* TODO: make this assertion more efficient *) ;","counters":[]},{"line":"  collected_transitions","counters":[{"col_start":22,"col_end":22,"count":2}]}]}