{"filename":"src/generators/user_command.rs","lines":[{"line":"use std::{collections::HashMap, rc::Rc};","counters":[]},{"line":"","counters":[]},{"line":"use mina_signer::Keypair;","counters":[]},{"line":"use rand::Rng;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    gen_keypair,","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{Balance, Magnitude},","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            valid,","counters":[]},{"line":"            zkapp_command::{self, WithHash},","counters":[]},{"line":"        },","counters":[]},{"line":"    },","counters":[]},{"line":"    staged_ledger::pre_diff_info::HashableCompressedPubKey,","counters":[]},{"line":"    util, Account, AccountId, AuthRequired, BaseLedger, Mask, MyCowMut, Permissions, TokenId,","counters":[]},{"line":"    VerificationKey, ZkAppAccount,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::{","counters":[]},{"line":"    zkapp_command::GenZkappCommandParams, Failure, Role, LEDGER_DEPTH, MAX_ACCOUNT_UPDATES,","counters":[]},{"line":"    MAX_TOKEN_UPDATES, MINIMUM_USER_COMMAND_FEE,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"fn zkapp_command_with_ledger(","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    num_keypairs: Option<usize>,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    max_account_updates: Option<usize>,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    max_token_updates: Option<usize>,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"    account_state_tbl: Option<&mut HashMap<AccountId, (Account, Role)>>,","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"    vk: Option<WithHash<VerificationKey>>,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    failure: Option<&Failure>,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":") -> (","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    valid::UserCommand,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    Keypair,","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    HashMap<HashableCompressedPubKey, Keypair>,","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    Mask,","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":") {","counters":[{"col_start":0,"col_end":3,"count":0}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    // Need a fee payer keypair, a keypair for the \"balancing\" account (so that the balance changes","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"    // sum to zero), and max_account_updates * 2 keypairs, because all the other zkapp_command","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"    // might be new and their accounts not in the ledger; or they might all be old and in the ledger","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"","counters":[]},{"line":"    // We'll put the fee payer account and max_account_updates accounts in the","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"    // ledger, and have max_account_updates keypairs available for new accounts","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"    let max_account_updates = max_account_updates.unwrap_or(MAX_ACCOUNT_UPDATES);","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"    let max_token_updates = max_token_updates.unwrap_or(MAX_TOKEN_UPDATES);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"    let num_keypairs =","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        num_keypairs.unwrap_or((max_account_updates * 2) + (max_token_updates * 3) + 2);","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"","counters":[]},{"line":"    let keypairs: Vec<Keypair> = (0..num_keypairs).map(|_| gen_keypair()).collect();","counters":[{"col_start":0,"col_end":55,"count":0},{"col_start":59,"col_end":72,"count":0},{"col_start":72,"col_end":84,"count":0}]},{"line":"","counters":[]},{"line":"    let keymap: HashMap<HashableCompressedPubKey, Keypair> = keypairs","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        .map(|kp| {","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":18,"col_end":19,"count":0}]},{"line":"            let compressed = kp.public.into_compressed();","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            (HashableCompressedPubKey(compressed), kp.clone())","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    let num_keypairs_in_ledger = num_keypairs / 2;","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"    let keypairs_in_ledger = util::take(&keypairs, num_keypairs_in_ledger);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"","counters":[]},{"line":"    let account_ids: Vec<AccountId> = keypairs_in_ledger","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        .map(|Keypair { public, .. }| {","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":38,"col_end":39,"count":0}]},{"line":"            AccountId::create(public.into_compressed(), TokenId::default())","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    let verification_key = vk.clone().unwrap_or_else(|| {","counters":[{"col_start":0,"col_end":53,"count":0},{"col_start":56,"col_end":57,"count":0}]},{"line":"        let dummy_vk = VerificationKey::dummy();","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        let hash = dummy_vk.hash();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        WithHash {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            data: dummy_vk,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            hash,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let balances: Vec<Balance> = {","counters":[{"col_start":8,"col_end":30,"count":0}]},{"line":"        let min_cmd_fee = MINIMUM_USER_COMMAND_FEE;","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"        let min_balance = {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            let balance = min_cmd_fee.as_u64() + 100_000_000_000_000_000;","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"            Balance::from_u64(balance)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        // max balance to avoid overflow when adding deltas","counters":[]},{"line":"        let max_balance = {","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"            let max_bal = Balance::of_formatted_string(\"2000000000.0\");","counters":[{"col_start":16,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"            assert_eq!(max_bal.as_u64(), 2000000000000000000);","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"            min_balance","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"                .checked_add(&max_bal)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                .expect(\"zkapp_command_with_ledger: overflow for max_balance\")","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        (0..num_keypairs_in_ledger)","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            .map(move |_| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":26,"col_end":27,"count":0}]},{"line":"                let balance = rng.gen_range(min_balance.as_u64()..max_balance.as_u64());","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                Balance::from_u64(balance)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let account_ids_and_balances: Vec<(AccountId, Balance)> =","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        account_ids.iter().cloned().zip(balances).collect();","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"    let snappify_account = |mut account: Account| {","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":50,"col_end":51,"count":0}]},{"line":"        let permissions = Permissions {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            edit_state: AuthRequired::Either,","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            send: AuthRequired::Either,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            set_delegate: AuthRequired::Either,","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            set_permissions: AuthRequired::Either,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            set_verification_key: AuthRequired::Either,","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            set_zkapp_uri: AuthRequired::Either,","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            edit_sequence_state: AuthRequired::Either,","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            set_token_symbol: AuthRequired::Either,","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            increment_nonce: AuthRequired::Either,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            set_voting_for: AuthRequired::Either,","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            //receive: AuthRequired::Either,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            ..Permissions::user_default()","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let verification_key = Some(verification_key.data.clone());","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        let zkapp = Some(ZkAppAccount {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            verification_key,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            ..ZkAppAccount::default()","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        account.zkapp = zkapp;","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        account.permissions = permissions;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        account","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // half zkApp accounts, half non-zkApp accounts","counters":[]},{"line":"    let accounts =","counters":[{"col_start":8,"col_end":18,"count":0}]},{"line":"        account_ids_and_balances","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .enumerate()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .map(|(ndx, (account_id, balance))| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                let account = Account::create_with(account_id.clone(), *balance);","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                if ndx % 2 == 0 {","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                    account","counters":[{"col_start":20,"col_end":27,"count":20}]},{"line":"                } else {","counters":[]},{"line":"                    snappify_account(account)","counters":[{"col_start":20,"col_end":45,"count":-20}]},{"line":"                }","counters":[]},{"line":"            });","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"    let fee_payer_keypair = keypairs.first().unwrap();","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"    let mut ledger = Mask::create(LEDGER_DEPTH);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    account_ids.iter().zip(accounts).for_each(|(id, account)| {","counters":[{"col_start":0,"col_end":46,"count":0},{"col_start":62,"col_end":63,"count":6345}]},{"line":"        let res = ledger","counters":[{"col_start":0,"col_end":24,"count":6345}]},{"line":"            .get_or_create_account(id.clone(), account)","counters":[{"col_start":0,"col_end":55,"count":6345}]},{"line":"            .expect(\"zkapp_command: error adding account for account id\");","counters":[{"col_start":0,"col_end":73,"count":6345}]},{"line":"        assert!(","counters":[{"col_start":8,"col_end":15,"count":6345}]},{"line":"            matches!(res, crate::GetOrCreated::Added(_)),","counters":[{"col_start":12,"col_end":20,"count":0},{"col_start":21,"col_end":24,"count":6345}]},{"line":"            \"zkapp_command: account for account id already exists\"","counters":[{"col_start":12,"col_end":66,"count":30}]},{"line":"        );","counters":[]},{"line":"    });","counters":[{"col_start":4,"col_end":5,"count":6315},{"col_start":5,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    // to keep track of account states across transactions","counters":[]},{"line":"    let mut account_state_tbl = match account_state_tbl {","counters":[{"col_start":8,"col_end":29,"count":0},{"col_start":38,"col_end":55,"count":0}]},{"line":"        Some(account_state_tbl) => MyCowMut::Borrow(account_state_tbl),","counters":[{"col_start":13,"col_end":70,"count":0}]},{"line":"        None => MyCowMut::Own(HashMap::new()),","counters":[{"col_start":16,"col_end":45,"count":0}]},{"line":"    };","counters":[]},{"line":"    let account_state_tbl = Some(&mut *account_state_tbl);","counters":[{"col_start":8,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"    let zkapp_command =","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        super::zkapp_command::gen_zkapp_command_from(super::zkapp_command::GenZkappCommandParams {","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"            failure,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            max_account_updates: Some(max_account_updates),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            max_token_updates: Some(max_token_updates),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            fee_payer_keypair,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            keymap: &keymap,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            account_state_tbl,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            ledger: ledger.clone(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            protocol_state_view: None,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            vk: vk.as_ref(),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"    let zkapp_command = zkapp_command::valid::to_valid(zkapp_command, &ledger).unwrap();","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"    let user_command = valid::UserCommand::ZkAppCommand(Box::new(zkapp_command));","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"","counters":[]},{"line":"    // include generated ledger in result","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"    (user_command, fee_payer_keypair.clone(), keymap, ledger)","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_generators/user_command_generators.ml#L146","counters":[]},{"line":"pub fn sequence_zkapp_command_with_ledger(","counters":[{"col_start":0,"col_end":42,"count":10}]},{"line":"    max_account_updates: Option<usize>,","counters":[{"col_start":0,"col_end":39,"count":10}]},{"line":"    max_token_updates: Option<usize>,","counters":[{"col_start":0,"col_end":37,"count":10}]},{"line":"    length: Option<usize>,","counters":[{"col_start":0,"col_end":26,"count":10}]},{"line":"    vk: Option<WithHash<VerificationKey>>,","counters":[{"col_start":0,"col_end":42,"count":10}]},{"line":"    failure: Option<&Failure>,","counters":[{"col_start":0,"col_end":30,"count":10}]},{"line":") -> (","counters":[{"col_start":0,"col_end":6,"count":10}]},{"line":"    Vec<(","counters":[{"col_start":0,"col_end":9,"count":10}]},{"line":"        valid::UserCommand,","counters":[{"col_start":0,"col_end":27,"count":10}]},{"line":"        Rc<Keypair>,","counters":[{"col_start":0,"col_end":20,"count":10}]},{"line":"        Rc<HashMap<HashableCompressedPubKey, Keypair>>,","counters":[{"col_start":0,"col_end":55,"count":10}]},{"line":"    )>,","counters":[{"col_start":0,"col_end":7,"count":10}]},{"line":"    Mask,","counters":[{"col_start":0,"col_end":9,"count":10}]},{"line":") {","counters":[{"col_start":0,"col_end":3,"count":10}]},{"line":"    let mut rng = rand::thread_rng();","counters":[{"col_start":0,"col_end":37,"count":10}]},{"line":"","counters":[]},{"line":"    let length = length.unwrap_or_else(|| rng.gen::<usize>() % 100);","counters":[{"col_start":0,"col_end":39,"count":10},{"col_start":42,"col_end":66,"count":0},{"col_start":66,"col_end":68,"count":10}]},{"line":"    let max_account_updates = max_account_updates.unwrap_or(MAX_ACCOUNT_UPDATES);","counters":[{"col_start":0,"col_end":81,"count":10}]},{"line":"    let max_token_updates = max_token_updates.unwrap_or(MAX_TOKEN_UPDATES);","counters":[{"col_start":0,"col_end":75,"count":10}]},{"line":"","counters":[]},{"line":"    let num_keypairs = length * max_account_updates * 2;","counters":[{"col_start":0,"col_end":56,"count":10}]},{"line":"","counters":[]},{"line":"    // Keep track of account states across multiple zkapp_command transaction","counters":[{"col_start":0,"col_end":77,"count":10}]},{"line":"    let mut account_state_tbl = HashMap::<AccountId, (Account, Role)>::with_capacity(64);","counters":[{"col_start":0,"col_end":89,"count":10}]},{"line":"","counters":[]},{"line":"    let num_keypairs = Some(num_keypairs);","counters":[{"col_start":0,"col_end":42,"count":10}]},{"line":"    let max_account_updates = Some(max_account_updates);","counters":[{"col_start":0,"col_end":56,"count":10}]},{"line":"    let max_token_updates = Some(max_token_updates);","counters":[{"col_start":0,"col_end":52,"count":10}]},{"line":"    // let account_state_tbl = Some(&mut account_state_tbl);","counters":[{"col_start":0,"col_end":60,"count":10}]},{"line":"","counters":[]},{"line":"    let (zkapp_command, fee_payer_keypair, keymap, ledger) = zkapp_command_with_ledger(","counters":[{"col_start":0,"col_end":87,"count":10}]},{"line":"        num_keypairs,","counters":[{"col_start":0,"col_end":21,"count":10}]},{"line":"        max_account_updates,","counters":[{"col_start":0,"col_end":28,"count":10}]},{"line":"        max_token_updates,","counters":[{"col_start":0,"col_end":26,"count":10}]},{"line":"        Some(&mut account_state_tbl),","counters":[{"col_start":0,"col_end":37,"count":10}]},{"line":"        vk.clone(),","counters":[{"col_start":0,"col_end":19,"count":10}]},{"line":"        failure,","counters":[{"col_start":0,"col_end":16,"count":10}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":10}]},{"line":"","counters":[]},{"line":"    let fee_payer_keypair = Rc::new(fee_payer_keypair);","counters":[{"col_start":0,"col_end":55,"count":10}]},{"line":"    let keymap = Rc::new(keymap);","counters":[{"col_start":0,"col_end":33,"count":10}]},{"line":"","counters":[]},{"line":"    let mut commands = Vec::with_capacity(length);","counters":[{"col_start":0,"col_end":50,"count":10}]},{"line":"","counters":[]},{"line":"    commands.push((","counters":[{"col_start":0,"col_end":19,"count":10}]},{"line":"        zkapp_command,","counters":[{"col_start":0,"col_end":22,"count":10}]},{"line":"        Rc::clone(&fee_payer_keypair),","counters":[{"col_start":0,"col_end":38,"count":10}]},{"line":"        Rc::clone(&keymap),","counters":[{"col_start":0,"col_end":27,"count":10}]},{"line":"    ));","counters":[{"col_start":0,"col_end":7,"count":10}]},{"line":"","counters":[]},{"line":"    (0..length.saturating_sub(1)).for_each(|_| {","counters":[{"col_start":0,"col_end":43,"count":10},{"col_start":47,"col_end":48,"count":0}]},{"line":"        let zkapp_command = super::zkapp_command::gen_zkapp_command_from(GenZkappCommandParams {","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            failure,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            max_account_updates,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            max_token_updates,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            fee_payer_keypair: &fee_payer_keypair,","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            keymap: &keymap,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            account_state_tbl: Some(&mut account_state_tbl),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"            ledger: ledger.clone(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            protocol_state_view: None,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            vk: vk.as_ref(),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"        let zkapp_command = zkapp_command::valid::to_valid(zkapp_command, &ledger).unwrap();","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        let zkapp_command = valid::UserCommand::ZkAppCommand(Box::new(zkapp_command));","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"","counters":[]},{"line":"        commands.push((","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            zkapp_command,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            Rc::clone(&fee_payer_keypair),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            Rc::clone(&keymap),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        ));","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    });","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":7,"count":10}]},{"line":"","counters":[]},{"line":"    (commands, ledger)","counters":[{"col_start":0,"col_end":22,"count":10}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":10}]}]}