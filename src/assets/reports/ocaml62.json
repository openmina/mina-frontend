{"filename":"src/lib/transaction_snark_work/transaction_snark_work.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"module Statement = struct","counters":[]},{"line":"  module Arg = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t = Transaction_snark.Statement.Stable.V2.t One_or_two.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        [@@deriving hash, sexp, compare]","counters":[{"col_start":39,"col_end":39,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = Transaction_snark.Statement.Stable.V2.t One_or_two.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"      [@@deriving equal, compare, hash, sexp, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      type _unused = unit constraint t = Arg.Stable.V2.t","counters":[]},{"line":"","counters":[]},{"line":"      include Hashable.Make_binable (Arg.Stable.V2)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t [@@deriving sexp, hash, compare, yojson, equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"  include Hashable.Make (Stable.Latest)","counters":[]},{"line":"","counters":[]},{"line":"  let gen = One_or_two.gen Transaction_snark.Statement.gen","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let compact_json t =","counters":[]},{"line":"    `List","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( One_or_two.map ~f:(fun s -> `Int (Transaction_snark.Statement.hash s)) t","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"      |> One_or_two.to_list )","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  let work_ids t : int One_or_two.t =","counters":[]},{"line":"    One_or_two.map t ~f:Transaction_snark.Statement.hash","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Info = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { statements : Statement.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; work_ids : int One_or_two.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        ; fee : Fee.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"        ; prover : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":42,"col_end":42,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { statements : Statement.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; work_ids : int One_or_two.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; fee : Fee.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; prover : Public_key.Compressed.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving to_yojson, sexp, compare]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Transaction_snark_work.V2.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { fee : Fee.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"        ; proofs : Ledger_proof.Stable.V2.t One_or_two.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"        ; prover : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":46,"col_end":46,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { fee : Fee.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; proofs : Ledger_proof.t One_or_two.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    ; prover : Public_key.Compressed.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving compare, yojson, sexp]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  let statement t = One_or_two.map t.proofs ~f:Ledger_proof.statement","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let info t =","counters":[]},{"line":"    let statements = One_or_two.map t.proofs ~f:Ledger_proof.statement in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { Info.statements","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; work_ids = One_or_two.map statements ~f:Transaction_snark.Statement.hash","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    ; fee = t.fee","counters":[]},{"line":"    ; prover = t.prover","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"type unchecked = t","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  include T","counters":[]},{"line":"","counters":[]},{"line":"  let create_unsafe = Fn.id","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let forget = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"let fee { fee; _ } = fee","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":23,"col_end":23,"count":2}]}]}