{"filename":"src/lib/inline_test_quiet_logs/inline_test_quiet_logs.ml","lines":[{"line":"(** Including this library will overwrite the callbacks used by","counters":[]},{"line":"    ppx_inline_test, allowing us to silence the logger for successful tests.","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"module Ppx_inline_test_lib = struct","counters":[]},{"line":"  module Runtime = struct","counters":[]},{"line":"    include Ppx_inline_test_lib.Runtime","counters":[]},{"line":"","counters":[]},{"line":"    (* The toplevel stdout file descriptor.","counters":[]},{"line":"       This is captured by the outermost call in each nested hierarchy of calls","counters":[]},{"line":"       instead of at startup. This allows us to perform other stdout redirects","counters":[]},{"line":"       before running tests and still have them apply to tests using this","counters":[]},{"line":"       module.","counters":[]},{"line":"    *)","counters":[]},{"line":"    let stdout_orig_toplevel = ref None","counters":[]},{"line":"","counters":[]},{"line":"    let redirect_to_newfile () =","counters":[]},{"line":"      Random.self_init () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      (* Save original stdout file descriptor.","counters":[]},{"line":"         Note that this may differ from the toplevel stdout file descriptor, if","counters":[]},{"line":"         it has e.g. been overridden by a [test_module] wrapping this test.","counters":[]},{"line":"      *)","counters":[]},{"line":"      let stdout_orig = Unix.dup Unix.stdout in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let has_stdout =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match !stdout_orig_toplevel with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            stdout_orig_toplevel := Some stdout_orig ;","counters":[]},{"line":"            true","counters":[]},{"line":"        | Some _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            false","counters":[]},{"line":"      in","counters":[]},{"line":"      let tempfile =","counters":[]},{"line":"        \"temp-stdout.test.\" ^ string_of_int (Random.int ((1 lsl 30) - 1))","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"      in","counters":[]},{"line":"      let tempfile_channel = open_out tempfile in","counters":[]},{"line":"      (* Overwrite original stdout file descriptor *)","counters":[]},{"line":"      Unix.dup2 (Unix.descr_of_out_channel tempfile_channel) Unix.stdout ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      (tempfile, tempfile_channel, stdout_orig, has_stdout)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let tidy_up ~dump_out (tempfile, tempfile_channel, stdout_orig, has_stdout)","counters":[]},{"line":"        =","counters":[]},{"line":"      close_out tempfile_channel ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if dump_out then (","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        (* Write to the toplevel stdout instead of the original one that we","counters":[]},{"line":"           saw, in case we are nested within calls. This ensures that our","counters":[]},{"line":"           output prints in the correct order compared to the test failure","counters":[]},{"line":"           messages, which appears on stderr.","counters":[]},{"line":"        *)","counters":[]},{"line":"        let stdout_for_output =","counters":[]},{"line":"          match !stdout_orig_toplevel with","counters":[]},{"line":"          | Some stdout ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              stdout","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              stdout_orig","counters":[]},{"line":"        in","counters":[]},{"line":"        Unix.dup2 stdout_for_output Unix.stdout ;","counters":[]},{"line":"        let tempfile_channel = open_in tempfile in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let buf_len = 1024 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let buf = Stdlib.Bytes.create buf_len in","counters":[]},{"line":"        let rec go () =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let len = input tempfile_channel buf 0 buf_len in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          if len > 0 then (output stdout buf 0 len ; go ())","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"        in","counters":[]},{"line":"        go () ;","counters":[]},{"line":"        (* Flush to ensure that the data is printed before the next test","counters":[]},{"line":"           begins.","counters":[]},{"line":"        *)","counters":[]},{"line":"        flush stdout ) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      (* If this originally captured the toplevel stdout, un-capture it. *)","counters":[]},{"line":"      if has_stdout then stdout_orig_toplevel := None ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      Unix.dup2 stdout_orig Unix.stdout ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Unix.unlink tempfile","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let test ~config ~descr ~tags ~filename ~line_number ~start_pos ~end_pos f =","counters":[]},{"line":"      let f () =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let redirect_data = redirect_to_newfile () in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        try","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let b = f () in","counters":[]},{"line":"          tidy_up ~dump_out:(not b) redirect_data ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          b","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        with exn ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          tidy_up ~dump_out:true redirect_data ;","counters":[]},{"line":"          raise exn","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      in","counters":[]},{"line":"      test ~config ~descr ~tags ~filename ~line_number ~start_pos ~end_pos f","counters":[]},{"line":"","counters":[]},{"line":"    let test_unit ~config ~descr ~tags ~filename ~line_number ~start_pos","counters":[]},{"line":"        ~end_pos f =","counters":[]},{"line":"      let f () =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let redirect_data = redirect_to_newfile () in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        try","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f () ;","counters":[]},{"line":"          tidy_up ~dump_out:false redirect_data","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        with exn ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          tidy_up ~dump_out:true redirect_data ;","counters":[]},{"line":"          raise exn","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      in","counters":[]},{"line":"      test_unit ~config ~descr ~tags ~filename ~line_number ~start_pos ~end_pos","counters":[]},{"line":"        f","counters":[]},{"line":"","counters":[]},{"line":"    let test_module ~config ~descr ~tags ~filename ~line_number ~start_pos","counters":[]},{"line":"        ~end_pos f =","counters":[]},{"line":"      let f () =","counters":[{"col_start":6,"col_end":6,"count":13}]},{"line":"        let redirect_data = redirect_to_newfile () in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        try","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f () ;","counters":[]},{"line":"          tidy_up ~dump_out:false redirect_data","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        with exn ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          tidy_up ~dump_out:true redirect_data ;","counters":[]},{"line":"          raise exn","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      in","counters":[]},{"line":"      test_module ~config ~descr ~tags ~filename ~line_number ~start_pos","counters":[]},{"line":"        ~end_pos f","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]}]}