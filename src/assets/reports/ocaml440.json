{"filename":"src/lib/transition_handler/catchup_scheduler.ml","lines":[{"line":"(** [Catchup_scheduler] defines a process which schedules catchup jobs and","counters":[]},{"line":"    monitors them for invalidation. This allows the transition frontier","counters":[]},{"line":"    controller to handle out of order transitions without spinning up and","counters":[]},{"line":"    tearing down catchup jobs constantly. The [Catchup_scheduler] must receive","counters":[]},{"line":"    notifications whenever a new transition is added to the transition frontier","counters":[]},{"line":"    so that it can determine if any pending catchup jobs can be invalidated.","counters":[]},{"line":"    When catchup jobs are invalidated, the catchup scheduler extracts all of","counters":[]},{"line":"    the invalidated catchup jobs and spins up a process to materialize","counters":[]},{"line":"    breadcrumbs from those transitions, which will write the breadcrumbs back","counters":[]},{"line":"    into the processor as if catchup had successfully completed. *)","counters":[]},{"line":"","counters":[]},{"line":"(* Only show stdout for failed inline tests. *)","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"open Inline_test_quiet_logs","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Cache_lib","counters":[]},{"line":"open Otp_lib","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Mina_net2","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  { logger : Logger.t","counters":[]},{"line":"  ; time_controller : Block_time.Controller.t","counters":[]},{"line":"  ; catchup_job_writer :","counters":[]},{"line":"      ( State_hash.t","counters":[]},{"line":"        * ( ( Mina_block.initial_valid_block Envelope.Incoming.t","counters":[]},{"line":"            , State_hash.t )","counters":[]},{"line":"            Cached.t","counters":[]},{"line":"          * Mina_net2.Validation_callback.t option )","counters":[]},{"line":"          Rose_tree.t","counters":[]},{"line":"          list","counters":[]},{"line":"      , crash buffered","counters":[]},{"line":"      , unit )","counters":[]},{"line":"      Writer.t","counters":[]},{"line":"        (** `collected_transitins` stores all seen transitions as its keys,","counters":[]},{"line":"            and values are a list of direct children of those transitions.","counters":[]},{"line":"            The invariant is that every collected transition would appear as","counters":[]},{"line":"            a key in this table. Even if a transition doesn't has a child,","counters":[]},{"line":"            its corresponding value in the hash table would just be an empty","counters":[]},{"line":"            list. *)","counters":[]},{"line":"  ; collected_transitions :","counters":[]},{"line":"      ( Mina_block.initial_valid_block Envelope.Incoming.t","counters":[]},{"line":"      , State_hash.t )","counters":[]},{"line":"      Cached.t","counters":[]},{"line":"      list","counters":[]},{"line":"      State_hash.Table.t","counters":[]},{"line":"        (* Validation callbacks for state hashes that are being processed *)","counters":[]},{"line":"  ; validation_callbacks : Mina_net2.Validation_callback.t State_hash.Table.t","counters":[]},{"line":"        (** `parent_root_timeouts` stores the timeouts for catchup job. The","counters":[]},{"line":"            keys are the missing transitions, and the values are the","counters":[]},{"line":"            timeouts. *)","counters":[]},{"line":"  ; parent_root_timeouts : unit Block_time.Timeout.t State_hash.Table.t","counters":[]},{"line":"  ; breadcrumb_builder_supervisor :","counters":[]},{"line":"      ( State_hash.t","counters":[]},{"line":"      * ( ( Mina_block.initial_valid_block Envelope.Incoming.t","counters":[]},{"line":"          , State_hash.t )","counters":[]},{"line":"          Cached.t","counters":[]},{"line":"        * Mina_net2.Validation_callback.t option )","counters":[]},{"line":"        Rose_tree.t","counters":[]},{"line":"        list )","counters":[]},{"line":"      Capped_supervisor.t","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let create ~logger ~precomputed_values ~verifier ~trust_system ~frontier","counters":[]},{"line":"    ~time_controller ~catchup_job_writer","counters":[]},{"line":"    ~(catchup_breadcrumbs_writer :","counters":[]},{"line":"       ( ( (Transition_frontier.Breadcrumb.t, State_hash.t) Cached.t","counters":[]},{"line":"         * Validation_callback.t option )","counters":[]},{"line":"         Rose_tree.t","counters":[]},{"line":"         list","counters":[]},{"line":"         * [ `Ledger_catchup of unit Ivar.t | `Catchup_scheduler ]","counters":[]},{"line":"       , crash buffered","counters":[]},{"line":"       , unit )","counters":[]},{"line":"       Writer.t ) ~clean_up_signal =","counters":[]},{"line":"  let collected_transitions = State_hash.Table.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let parent_root_timeouts = State_hash.Table.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let validation_callbacks = State_hash.Table.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  upon (Ivar.read clean_up_signal) (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      Hashtbl.iter collected_transitions","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:","counters":[]},{"line":"          (List.iter ~f:(fun b ->","counters":[]},{"line":"               let hash =","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 Cached.peek b |> Envelope.Incoming.data","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"                 |> Validation.block_with_hash","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                 |> State_hash.With_state_hashes.state_hash","counters":[]},{"line":"               in","counters":[]},{"line":"               let vc = Hashtbl.find validation_callbacks hash in","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"               Option.value_map ~default:ignore","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 ~f:Validation_callback.fire_if_not_already_fired vc `Ignore ;","counters":[]},{"line":"               ignore @@ Cached.invalidate_with_failure b ) ) ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"      Hashtbl.iter parent_root_timeouts ~f:(fun timeout ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Block_time.Timeout.cancel time_controller timeout () ) ) ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  let breadcrumb_builder_supervisor =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Capped_supervisor.create ~job_capacity:30","counters":[]},{"line":"      (fun (initial_hash, transition_branches) ->","counters":[]},{"line":"        match%map","counters":[]},{"line":"          Breadcrumb_builder.build_subtrees_of_breadcrumbs","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"            ~logger:","counters":[]},{"line":"              (Logger.extend logger","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                 [ (\"catchup_scheduler\", `String \"Called from catchup scheduler\")","counters":[]},{"line":"                 ] )","counters":[]},{"line":"            ~precomputed_values ~verifier ~trust_system ~frontier ~initial_hash","counters":[]},{"line":"            transition_branches","counters":[]},{"line":"        with","counters":[]},{"line":"        | Ok trees_of_breadcrumbs ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Writer.write catchup_breadcrumbs_writer","counters":[]},{"line":"              (trees_of_breadcrumbs, `Catchup_scheduler)","counters":[]},{"line":"        | Error err ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log debug]","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              !\"Error during buildup breadcrumbs inside catchup_scheduler: \\","counters":[]},{"line":"                $error\"","counters":[]},{"line":"              ~metadata:[ (\"error\", Error_json.error_to_yojson err) ] ;","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"            List.iter transition_branches ~f:(fun subtree ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                Rose_tree.iter subtree ~f:(fun (cached_transition, vc) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                    (* TODO consider rejecting the callback in some cases,","counters":[]},{"line":"                       see https://github.com/MinaProtocol/mina/issues/11087 *)","counters":[]},{"line":"                    Option.value_map vc ~default:ignore","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ~f:Mina_net2.Validation_callback.fire_if_not_already_fired","counters":[]},{"line":"                      `Ignore ;","counters":[]},{"line":"                    ignore","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ( Cached.invalidate_with_failure cached_transition","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                        : Mina_block.initial_valid_block Envelope.Incoming.t ) ) ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  { logger","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; collected_transitions","counters":[]},{"line":"  ; time_controller","counters":[]},{"line":"  ; catchup_job_writer","counters":[]},{"line":"  ; parent_root_timeouts","counters":[]},{"line":"  ; breadcrumb_builder_supervisor","counters":[]},{"line":"  ; validation_callbacks","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let mem t transition =","counters":[]},{"line":"  Hashtbl.mem t.collected_transitions","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Mina_block.header transition","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    |> Header.protocol_state |> Mina_state.Protocol_state.previous_state_hash )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"let mem_parent_hash t parent_hash =","counters":[]},{"line":"  Hashtbl.mem t.collected_transitions parent_hash","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let has_timeout t transition =","counters":[]},{"line":"  Hashtbl.mem t.parent_root_timeouts","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( Mina_block.header transition","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    |> Header.protocol_state |> Mina_state.Protocol_state.previous_state_hash )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"let has_timeout_parent_hash t parent_hash =","counters":[]},{"line":"  Hashtbl.mem t.parent_root_timeouts parent_hash","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let is_empty t =","counters":[]},{"line":"  Hashtbl.is_empty t.collected_transitions","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  && Hashtbl.is_empty t.parent_root_timeouts","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"let cancel_timeout t hash =","counters":[]},{"line":"  let remaining_time =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.map","counters":[]},{"line":"      (Hashtbl.find t.parent_root_timeouts hash)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      ~f:Block_time.Timeout.remaining_time","counters":[]},{"line":"  in","counters":[]},{"line":"  let cancel timeout = Block_time.Timeout.cancel t.time_controller timeout () in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  Hashtbl.change t.parent_root_timeouts hash","counters":[]},{"line":"    ~f:Fn.(compose (const None) (Option.iter ~f:cancel)) ;","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"  remaining_time","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let rec extract_subtree t cached_transition =","counters":[]},{"line":"  let hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let t, _ = Envelope.Incoming.data (Cached.peek cached_transition) in","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"    State_hash.With_state_hashes.state_hash t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  in","counters":[]},{"line":"  let successors =","counters":[]},{"line":"    Option.value ~default:[] (Hashtbl.find t.collected_transitions hash)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  in","counters":[]},{"line":"  Rose_tree.T","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( (cached_transition, Hashtbl.find t.validation_callbacks hash)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"    , List.map successors ~f:(extract_subtree t) )","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"let extract_forest t hash =","counters":[]},{"line":"  let successors =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value ~default:[] (Hashtbl.find t.collected_transitions hash)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  in","counters":[]},{"line":"  (hash, List.map successors ~f:(extract_subtree t))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let rec remove_tree t parent_hash =","counters":[]},{"line":"  let children =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value ~default:[] (Hashtbl.find t.collected_transitions parent_hash)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  in","counters":[]},{"line":"  Hashtbl.remove t.collected_transitions parent_hash ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Mina_metrics.(","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Gauge.dec_one","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      Transition_frontier_controller.transitions_in_catchup_scheduler) ;","counters":[]},{"line":"  List.iter children ~f:(fun child ->","counters":[]},{"line":"      let transition, _ = Envelope.Incoming.data (Cached.peek child) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"      remove_tree t (State_hash.With_state_hashes.state_hash transition) )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"let watch t ~timeout_duration ~cached_transition ~valid_cb =","counters":[]},{"line":"  let transition_with_hash, _ =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Envelope.Incoming.data (Cached.peek cached_transition)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  in","counters":[]},{"line":"  let hash = State_hash.With_state_hashes.state_hash transition_with_hash in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let parent_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    With_hash.data transition_with_hash","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    |> Mina_block.header |> Header.protocol_state","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"    |> Mina_state.Protocol_state.previous_state_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  Option.value_map valid_cb ~default:() ~f:(fun data ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      match Hashtbl.add t.validation_callbacks ~key:hash ~data with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Ok ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* Clean up entry upon callback resolution *)","counters":[]},{"line":"          upon","counters":[]},{"line":"            (Deferred.ignore_m @@ Mina_net2.Validation_callback.await data)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"            (fun () -> Hashtbl.remove t.validation_callbacks hash)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      | `Duplicate ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log' warn t.logger] \"Double validation callback for $state_hash\"","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"            ~metadata:[ (\"state_hash\", Mina_base.State_hash.to_yojson hash) ] ) ;","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"  let make_timeout duration =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Block_time.Timeout.create t.time_controller duration ~f:(fun _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let forest = extract_forest t parent_hash in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Hashtbl.remove t.parent_root_timeouts parent_hash ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Gauge.dec_one","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"            Transition_frontier_controller.transitions_in_catchup_scheduler) ;","counters":[]},{"line":"        remove_tree t parent_hash ;","counters":[]},{"line":"        [%log' info t.logger]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"          ~metadata:","counters":[]},{"line":"            [ (\"parent_hash\", Mina_base.State_hash.to_yojson parent_hash)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"            ; ( \"duration\"","counters":[]},{"line":"              , `Int (Block_time.Span.to_ms duration |> Int64.to_int_trunc) )","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"            ; ( \"cached_transition\"","counters":[]},{"line":"              , With_hash.data transition_with_hash |> Mina_block.to_yojson )","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"            ]","counters":[]},{"line":"          \"Timed out waiting for the parent of $cached_transition after \\","counters":[]},{"line":"           $duration ms, signalling a catchup job\" ;","counters":[]},{"line":"        (* it's ok to create a new thread here because the thread essentially does no work *)","counters":[]},{"line":"        if Writer.is_closed t.catchup_job_writer then","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log' trace t.logger]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"            \"catchup job pipe was closed; attempt to write to closed pipe\"","counters":[]},{"line":"        else Writer.write t.catchup_job_writer forest )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  in","counters":[]},{"line":"  match Hashtbl.find t.collected_transitions parent_hash with","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let remaining_time = cancel_timeout t hash in","counters":[]},{"line":"      Hashtbl.add_exn t.collected_transitions ~key:parent_hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~data:[ cached_transition ] ;","counters":[]},{"line":"      Hashtbl.update t.collected_transitions hash ~f:(Option.value ~default:[]) ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ignore","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( Hashtbl.add t.parent_root_timeouts ~key:parent_hash","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~data:","counters":[]},{"line":"              (make_timeout","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                 (Option.fold remaining_time ~init:timeout_duration","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                    ~f:(fun _ remaining_time ->","counters":[]},{"line":"                      Block_time.Span.min remaining_time timeout_duration ) ) )","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          : [ `Duplicate | `Ok ] ) ;","counters":[]},{"line":"      Mina_metrics.(","counters":[]},{"line":"        Gauge.inc_one","counters":[]},{"line":"          Transition_frontier_controller.transitions_in_catchup_scheduler)","counters":[]},{"line":"  | Some cached_sibling_transitions ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if","counters":[]},{"line":"        List.exists cached_sibling_transitions","counters":[]},{"line":"          ~f:(fun cached_sibling_transition ->","counters":[]},{"line":"            let sibling, _ =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Envelope.Incoming.data (Cached.peek cached_sibling_transition)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"            in","counters":[]},{"line":"            State_hash.equal hash","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (State_hash.With_state_hashes.state_hash sibling) )","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"      then","counters":[]},{"line":"        [%log' debug t.logger]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          ~metadata:[ (\"state_hash\", State_hash.to_yojson hash) ]","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"          \"Received request to watch transition for catchup that already is \\","counters":[]},{"line":"           being watched: $state_hash\"","counters":[]},{"line":"      else","counters":[]},{"line":"        let (_ : Block_time.Span.t option) = cancel_timeout t hash in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Hashtbl.set t.collected_transitions ~key:parent_hash","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~data:(cached_transition :: cached_sibling_transitions) ;","counters":[]},{"line":"        Hashtbl.update t.collected_transitions hash","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~f:(Option.value ~default:[]) ;","counters":[]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Gauge.inc_one","counters":[]},{"line":"            Transition_frontier_controller.transitions_in_catchup_scheduler)","counters":[]},{"line":"","counters":[]},{"line":"let notify t ~hash =","counters":[]},{"line":"  if","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Option.is_none @@ Hashtbl.find t.parent_root_timeouts hash)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    && (Option.is_some @@ Hashtbl.find t.collected_transitions hash)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  then","counters":[]},{"line":"    Or_error.errorf","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      !\"Received notification to kill catchup job on a \\","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"        non-parent_root_transition: %{sexp: State_hash.t}\"","counters":[]},{"line":"      hash","counters":[]},{"line":"  else","counters":[]},{"line":"    let (_ : Block_time.Span.t option) = cancel_timeout t hash in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Option.iter (Hashtbl.find t.collected_transitions hash)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"      ~f:(fun collected_transitions ->","counters":[]},{"line":"        let transition_subtrees =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          List.map collected_transitions ~f:(extract_subtree t)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"        in","counters":[]},{"line":"        Capped_supervisor.dispatch t.breadcrumb_builder_supervisor","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (hash, transition_subtrees) ) ;","counters":[]},{"line":"    remove_tree t hash ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Or_error.return ()","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"let%test_module \"Transition_handler.Catchup_scheduler tests\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"    let () =","counters":[]},{"line":"      Core.Backtrace.elide := false ;","counters":[]},{"line":"      Async.Scheduler.set_record_backtraces true","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let logger = Logger.null ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let precomputed_values = Lazy.force Precomputed_values.for_unit_tests","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let proof_level = precomputed_values.proof_level","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    let trust_system = Trust_system.null ()","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let pids = Child_processes.Termination.create_pid_table ()","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"    let time_controller = Block_time.Controller.basic ~logger","counters":[]},{"line":"","counters":[]},{"line":"    let max_length = 10","counters":[]},{"line":"","counters":[]},{"line":"    let create = create ~logger ~trust_system ~time_controller","counters":[]},{"line":"","counters":[]},{"line":"    let verifier =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          Verifier.create ~logger ~proof_level ~constraint_constants","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~conf_dir:None ~pids )","counters":[]},{"line":"","counters":[]},{"line":"    (* cast a breadcrumb into a cached, enveloped, partially validated transition *)","counters":[]},{"line":"    let downcast_breadcrumb breadcrumb =","counters":[]},{"line":"      let transition =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transition_frontier.Breadcrumb.validated_transition breadcrumb","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"        |> Mina_block.Validated.remember","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        |> Validation.reset_frontier_dependencies_validation","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"        |> Validation.reset_staged_ledger_diff_validation","counters":[]},{"line":"      in","counters":[]},{"line":"      Envelope.Incoming.wrap ~data:transition ~sender:Envelope.Sender.Local","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"catchup jobs fire after the timeout\" =","counters":[]},{"line":"      let timeout_duration = Block_time.Span.of_ms 200L in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let test_delta = Block_time.Span.of_ms 100L in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Quickcheck.test ~trials:3","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.For_tests.gen_with_branch ~precomputed_values","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"           ~verifier ~max_length ~frontier_size:1 ~branch_size:2 () )","counters":[]},{"line":"        ~f:(fun (frontier, branch) ->","counters":[]},{"line":"          let catchup_job_reader, catchup_job_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let _catchup_breadcrumbs_reader, catchup_breadcrumbs_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let disjoint_breadcrumb = List.last_exn branch in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let scheduler =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            create ~frontier ~precomputed_values ~verifier ~catchup_job_writer","counters":[]},{"line":"              ~catchup_breadcrumbs_writer ~clean_up_signal:(Ivar.create ())","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"          in","counters":[]},{"line":"          watch scheduler ~timeout_duration ~valid_cb:None","counters":[]},{"line":"            ~cached_transition:","counters":[]},{"line":"              (Cached.pure @@ downcast_breadcrumb disjoint_breadcrumb) ;","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              match%map","counters":[]},{"line":"                Block_time.Timeout.await","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  ~timeout_duration:","counters":[]},{"line":"                    Block_time.Span.(timeout_duration + test_delta)","counters":[]},{"line":"                  time_controller","counters":[]},{"line":"                  (Strict_pipe.Reader.read catchup_job_reader)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              with","counters":[]},{"line":"              | `Timeout ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"test timed out\"","counters":[]},{"line":"              | `Ok `Eof ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"pipe closed unexpectedly\"","counters":[]},{"line":"              | `Ok (`Ok (job_state_hash, _)) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  [%test_eq: State_hash.t]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                    (Transition_frontier.Breadcrumb.parent_hash","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                       disjoint_breadcrumb )","counters":[]},{"line":"                    job_state_hash","counters":[]},{"line":"                    ~message:","counters":[]},{"line":"                      \"the job emitted from the catchup scheduler should be \\","counters":[]},{"line":"                       for the disjoint breadcrumb\" ;","counters":[]},{"line":"                  if not (is_empty scheduler) then","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                    failwith","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      \"catchup scheduler should be empty after job is emitted\" ;","counters":[]},{"line":"                  Strict_pipe.Writer.close catchup_breadcrumbs_writer ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  Strict_pipe.Writer.close catchup_job_writer ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"catchup jobs do not fire after timeout if they are \\","counters":[]},{"line":"                   invalidated\" =","counters":[]},{"line":"      let timeout_duration = Block_time.Span.of_ms 200L in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let test_delta = Block_time.Span.of_ms 400L in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Quickcheck.test ~trials:3","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.For_tests.gen_with_branch ~precomputed_values","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"           ~verifier ~max_length ~frontier_size:1 ~branch_size:2 () )","counters":[]},{"line":"        ~f:(fun (frontier, branch) ->","counters":[]},{"line":"          let cache = Unprocessed_transition_cache.create ~logger in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let register_breadcrumb breadcrumb =","counters":[]},{"line":"            Unprocessed_transition_cache.register_exn cache","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"              (downcast_breadcrumb breadcrumb)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            |> Cached.transform ~f:(Fn.const breadcrumb)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"          in","counters":[]},{"line":"          let catchup_job_reader, catchup_job_writer =","counters":[]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let catchup_breadcrumbs_reader, catchup_breadcrumbs_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let[@warning \"-8\"] [ breadcrumb_1; breadcrumb_2 ] =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.map ~f:register_breadcrumb branch","counters":[]},{"line":"          in","counters":[]},{"line":"          let scheduler =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            create ~precomputed_values ~frontier ~verifier ~catchup_job_writer","counters":[]},{"line":"              ~catchup_breadcrumbs_writer ~clean_up_signal:(Ivar.create ())","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"          in","counters":[]},{"line":"          watch scheduler ~timeout_duration ~valid_cb:None","counters":[]},{"line":"            ~cached_transition:","counters":[]},{"line":"              (Cached.transform ~f:downcast_breadcrumb breadcrumb_2) ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              Transition_frontier.add_breadcrumb_exn frontier","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (Cached.peek breadcrumb_1) ) ;","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          Or_error.ok_exn","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (notify scheduler","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"               ~hash:","counters":[]},{"line":"                 (Transition_frontier.Breadcrumb.state_hash","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                    (Cached.peek breadcrumb_1) ) ) ;","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              match%map","counters":[]},{"line":"                Block_time.Timeout.await","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  ~timeout_duration:","counters":[]},{"line":"                    Block_time.Span.(timeout_duration + test_delta)","counters":[]},{"line":"                  time_controller","counters":[]},{"line":"                  (Strict_pipe.Reader.read catchup_job_reader)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              with","counters":[]},{"line":"              | `Timeout ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ()","counters":[]},{"line":"              | `Ok `Eof ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"pipe closed unexpectedly\"","counters":[]},{"line":"              | `Ok (`Ok _) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith","counters":[]},{"line":"                    \"job was emitted from the catchup scheduler even though \\","counters":[]},{"line":"                     the job was invalidated\" ) ;","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              match%map","counters":[]},{"line":"                Block_time.Timeout.await ~timeout_duration:test_delta","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  time_controller","counters":[]},{"line":"                  (Strict_pipe.Reader.read catchup_breadcrumbs_reader)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              with","counters":[]},{"line":"              | `Timeout ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"timed out waiting for catchup breadcrumbs\"","counters":[]},{"line":"              | `Ok `Eof ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"pipe closed unexpectedly\"","counters":[]},{"line":"              | `Ok","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (`Ok","counters":[]},{"line":"                    ( [ Rose_tree.T ((received_breadcrumb, _vc), []) ]","counters":[]},{"line":"                    , `Catchup_scheduler ) ) ->","counters":[]},{"line":"                  [%test_eq: State_hash.t]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                    (Transition_frontier.Breadcrumb.state_hash","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                       (Cached.peek received_breadcrumb) )","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                    (Transition_frontier.Breadcrumb.state_hash","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                       (Cached.peek breadcrumb_2) )","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"              | `Ok (`Ok _) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"invalid breadcrumb builder response\" ) ;","counters":[]},{"line":"          ignore","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ( Cached.invalidate_with_success breadcrumb_1","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"              : Transition_frontier.Breadcrumb.t ) ;","counters":[]},{"line":"          ignore","counters":[]},{"line":"            ( Cached.invalidate_with_success breadcrumb_2","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"              : Transition_frontier.Breadcrumb.t ) ;","counters":[]},{"line":"          Strict_pipe.Writer.close catchup_breadcrumbs_writer ;","counters":[]},{"line":"          Strict_pipe.Writer.close catchup_job_writer )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"catchup scheduler should not create duplicate jobs when a \\","counters":[]},{"line":"                   sequence of transitions is added in reverse order\" =","counters":[]},{"line":"      let timeout_duration = Block_time.Span.of_ms 400L in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Quickcheck.test ~trials:3","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.For_tests.gen_with_branch ~precomputed_values","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"           ~verifier ~max_length ~frontier_size:1 ~branch_size:5 () )","counters":[]},{"line":"        ~f:(fun (frontier, branch) ->","counters":[]},{"line":"          let catchup_job_reader, catchup_job_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let _catchup_breadcrumbs_reader, catchup_breadcrumbs_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Crash))","counters":[]},{"line":"          in","counters":[]},{"line":"          let scheduler =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            create ~precomputed_values ~frontier ~verifier ~catchup_job_writer","counters":[]},{"line":"              ~catchup_breadcrumbs_writer ~clean_up_signal:(Ivar.create ())","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"          in","counters":[]},{"line":"          let[@warning \"-8\"] (oldest_breadcrumb :: dependent_breadcrumbs) =","counters":[]},{"line":"            List.rev branch","counters":[]},{"line":"          in","counters":[]},{"line":"          watch scheduler ~timeout_duration ~valid_cb:None","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~cached_transition:","counters":[]},{"line":"              (Cached.pure @@ downcast_breadcrumb oldest_breadcrumb) ;","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          assert (","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"            has_timeout_parent_hash scheduler","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"              (Transition_frontier.Breadcrumb.parent_hash oldest_breadcrumb) ) ;","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"          ignore","counters":[]},{"line":"            ( List.fold dependent_breadcrumbs ~init:oldest_breadcrumb","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                ~f:(fun prev_breadcrumb curr_breadcrumb ->","counters":[]},{"line":"                  watch scheduler ~timeout_duration ~valid_cb:None","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    ~cached_transition:","counters":[]},{"line":"                      (Cached.pure @@ downcast_breadcrumb curr_breadcrumb) ;","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"                  assert (","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"                    not","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                    @@ has_timeout_parent_hash scheduler","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                         (Transition_frontier.Breadcrumb.parent_hash","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                            prev_breadcrumb ) ) ;","counters":[]},{"line":"                  assert (","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                    has_timeout_parent_hash scheduler","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                      (Transition_frontier.Breadcrumb.parent_hash","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                         curr_breadcrumb ) ) ;","counters":[]},{"line":"                  curr_breadcrumb )","counters":[]},{"line":"              : Frontier_base.Breadcrumb.t ) ;","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"              match%map Strict_pipe.Reader.read catchup_job_reader with","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"              | `Eof ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  failwith \"pipe closed unexpectedly\"","counters":[]},{"line":"              | `Ok (job_hash, _) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  [%test_eq: State_hash.t] job_hash","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                    ( Transition_frontier.Breadcrumb.parent_hash","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                    @@ List.hd_exn branch ) ) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}