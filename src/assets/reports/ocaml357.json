{"filename":"src/lib/hex/hex.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Digit = struct","counters":[]},{"line":"  (* A number between 0 and 15 *)","counters":[]},{"line":"  type t =","counters":[]},{"line":"    | H0","counters":[]},{"line":"    | H1","counters":[]},{"line":"    | H2","counters":[]},{"line":"    | H3","counters":[]},{"line":"    | H4","counters":[]},{"line":"    | H5","counters":[]},{"line":"    | H6","counters":[]},{"line":"    | H7","counters":[]},{"line":"    | H8","counters":[]},{"line":"    | H9","counters":[]},{"line":"    | H10","counters":[]},{"line":"    | H11","counters":[]},{"line":"    | H12","counters":[]},{"line":"    | H13","counters":[]},{"line":"    | H14","counters":[]},{"line":"    | H15","counters":[]},{"line":"","counters":[]},{"line":"  let of_char_exn c =","counters":[]},{"line":"    match Char.lowercase c with","counters":[{"col_start":4,"col_end":4,"count":350080}]},{"line":"    | '0' ->","counters":[{"col_start":6,"col_end":6,"count":22818}]},{"line":"        H0","counters":[]},{"line":"    | '1' ->","counters":[{"col_start":6,"col_end":6,"count":22759}]},{"line":"        H1","counters":[]},{"line":"    | '2' ->","counters":[{"col_start":6,"col_end":6,"count":23016}]},{"line":"        H2","counters":[]},{"line":"    | '3' ->","counters":[{"col_start":6,"col_end":6,"count":22971}]},{"line":"        H3","counters":[]},{"line":"    | '4' ->","counters":[{"col_start":6,"col_end":6,"count":21513}]},{"line":"        H4","counters":[]},{"line":"    | '5' ->","counters":[{"col_start":6,"col_end":6,"count":21597}]},{"line":"        H5","counters":[]},{"line":"    | '6' ->","counters":[{"col_start":6,"col_end":6,"count":21593}]},{"line":"        H6","counters":[]},{"line":"    | '7' ->","counters":[{"col_start":6,"col_end":6,"count":21451}]},{"line":"        H7","counters":[]},{"line":"    | '8' ->","counters":[{"col_start":6,"col_end":6,"count":21375}]},{"line":"        H8","counters":[]},{"line":"    | '9' ->","counters":[{"col_start":6,"col_end":6,"count":21741}]},{"line":"        H9","counters":[]},{"line":"    | 'a' ->","counters":[{"col_start":6,"col_end":6,"count":21748}]},{"line":"        H10","counters":[]},{"line":"    | 'b' ->","counters":[{"col_start":6,"col_end":6,"count":21466}]},{"line":"        H11","counters":[]},{"line":"    | 'c' ->","counters":[{"col_start":6,"col_end":6,"count":21517}]},{"line":"        H12","counters":[]},{"line":"    | 'd' ->","counters":[{"col_start":6,"col_end":6,"count":21446}]},{"line":"        H13","counters":[]},{"line":"    | 'e' ->","counters":[{"col_start":6,"col_end":6,"count":21690}]},{"line":"        H14","counters":[]},{"line":"    | 'f' ->","counters":[{"col_start":6,"col_end":6,"count":21379}]},{"line":"        H15","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"bad hex digit %c\" c ()","counters":[]},{"line":"","counters":[]},{"line":"  let to_int = function","counters":[]},{"line":"    | H0 ->","counters":[{"col_start":6,"col_end":6,"count":22818}]},{"line":"        0","counters":[]},{"line":"    | H1 ->","counters":[{"col_start":6,"col_end":6,"count":22759}]},{"line":"        1","counters":[]},{"line":"    | H2 ->","counters":[{"col_start":6,"col_end":6,"count":23016}]},{"line":"        2","counters":[]},{"line":"    | H3 ->","counters":[{"col_start":6,"col_end":6,"count":22971}]},{"line":"        3","counters":[]},{"line":"    | H4 ->","counters":[{"col_start":6,"col_end":6,"count":21513}]},{"line":"        4","counters":[]},{"line":"    | H5 ->","counters":[{"col_start":6,"col_end":6,"count":21597}]},{"line":"        5","counters":[]},{"line":"    | H6 ->","counters":[{"col_start":6,"col_end":6,"count":21593}]},{"line":"        6","counters":[]},{"line":"    | H7 ->","counters":[{"col_start":6,"col_end":6,"count":21451}]},{"line":"        7","counters":[]},{"line":"    | H8 ->","counters":[{"col_start":6,"col_end":6,"count":21375}]},{"line":"        8","counters":[]},{"line":"    | H9 ->","counters":[{"col_start":6,"col_end":6,"count":21741}]},{"line":"        9","counters":[]},{"line":"    | H10 ->","counters":[{"col_start":6,"col_end":6,"count":21748}]},{"line":"        10","counters":[]},{"line":"    | H11 ->","counters":[{"col_start":6,"col_end":6,"count":21466}]},{"line":"        11","counters":[]},{"line":"    | H12 ->","counters":[{"col_start":6,"col_end":6,"count":21517}]},{"line":"        12","counters":[]},{"line":"    | H13 ->","counters":[{"col_start":6,"col_end":6,"count":21446}]},{"line":"        13","counters":[]},{"line":"    | H14 ->","counters":[{"col_start":6,"col_end":6,"count":21690}]},{"line":"        14","counters":[]},{"line":"    | H15 ->","counters":[{"col_start":6,"col_end":6,"count":21379}]},{"line":"        15","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let hex_char_of_int_exn = function","counters":[]},{"line":"  | 0 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '0'","counters":[]},{"line":"  | 1 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '1'","counters":[]},{"line":"  | 2 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '2'","counters":[]},{"line":"  | 3 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '3'","counters":[]},{"line":"  | 4 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '4'","counters":[]},{"line":"  | 5 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '5'","counters":[]},{"line":"  | 6 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '6'","counters":[]},{"line":"  | 7 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '7'","counters":[]},{"line":"  | 8 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '8'","counters":[]},{"line":"  | 9 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      '9'","counters":[]},{"line":"  | 10 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'a'","counters":[]},{"line":"  | 11 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'b'","counters":[]},{"line":"  | 12 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'c'","counters":[]},{"line":"  | 13 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'd'","counters":[]},{"line":"  | 14 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'e'","counters":[]},{"line":"  | 15 ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      'f'","counters":[]},{"line":"  | d ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwithf \"bad hex digit %d\" d ()","counters":[]},{"line":"","counters":[]},{"line":"module Sequence_be = struct","counters":[]},{"line":"  type t = Digit.t array","counters":[]},{"line":"","counters":[]},{"line":"  let decode ?(pos = 0) s =","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    let n = String.length s - pos in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    Array.init n ~f:(fun i -> Digit.of_char_exn s.[pos + i])","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"  let to_bytes_like ~init (t : t) =","counters":[]},{"line":"    let n = Array.length t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let k = n / 2 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    assert (n = k + k) ;","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    init k ~f:(fun i ->","counters":[]},{"line":"        Char.of_int_exn","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ((16 * Digit.to_int t.(2 * i)) + Digit.to_int t.((2 * i) + 1)) )","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"  let to_string = to_bytes_like ~init:String.init","counters":[]},{"line":"","counters":[]},{"line":"  let to_bytes = to_bytes_like ~init:Bytes.init","counters":[]},{"line":"","counters":[]},{"line":"  let to_bigstring = to_bytes_like ~init:Bigstring.init","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let decode ?(reverse = false) ?(pos = 0) ~init t =","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":5470}]},{"line":"  let n = String.length t - pos in","counters":[{"col_start":2,"col_end":2,"count":5470},{"col_start":22,"col_end":22,"count":5470}]},{"line":"  let k = n / 2 in","counters":[]},{"line":"  assert (n = k + k) ;","counters":[{"col_start":9,"col_end":9,"count":5470}]},{"line":"  let h j = Digit.(to_int (of_char_exn t.[pos + j])) in","counters":[{"col_start":12,"col_end":12,"count":350080},{"col_start":37,"col_end":37,"count":350080}]},{"line":"  init k ~f:(fun i ->","counters":[]},{"line":"      let i = if reverse then k - 1 - i else i in","counters":[{"col_start":6,"col_end":6,"count":175040},{"col_start":30,"col_end":30,"count":175040},{"col_start":45,"col_end":45,"count":0}]},{"line":"      Char.of_int_exn ((16 * h (2 * i)) + h ((2 * i) + 1)) )","counters":[{"col_start":29,"col_end":29,"count":175040},{"col_start":42,"col_end":42,"count":175040}]},{"line":"","counters":[]},{"line":"let encode ?(reverse = false) t =","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  let n = String.length t in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  String.init (2 * n) ~f:(fun i ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let c =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let byte = i / 2 in","counters":[]},{"line":"        Char.to_int t.[if reverse then n - 1 - byte else byte]","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      in","counters":[]},{"line":"      let c = if i mod 2 = 0 then (* hi *)","counters":[]},{"line":"                c lsr 4 else (* lo *)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                          c in","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      hex_char_of_int_exn (c land 15) )","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"decode\" =","counters":[]},{"line":"  let t = String.init 100 ~f:(fun _ -> Char.of_int_exn (Random.int 256)) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"  let h = encode t in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  assert (String.equal t (decode ~init:String.init h)) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  assert (","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    String.equal t","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      (decode ~reverse:true ~init:String.init (encode ~reverse:true t)) ) ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"  assert (String.equal t Sequence_be.(to_string (decode h)))","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"(* TODO: Better deduplicate the hex coding between these two implementations #5711 *)","counters":[]},{"line":"module Safe = struct","counters":[]},{"line":"  (** to_hex : {0x0-0xff}* -> [A-F0-9]* *)","counters":[]},{"line":"  let to_hex (data : string) : string =","counters":[]},{"line":"    String.to_list data","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    |> List.map ~f:(fun c ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           let charify u4 =","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             match u4 with","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             | x when x <= 9 && x >= 0 ->","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"                 Char.(of_int_exn @@ (x + to_int '0'))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"             | x when x <= 15 && x >= 10 ->","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                 Char.(of_int_exn @@ (x - 10 + to_int 'A'))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"             | _ ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 failwith \"Unexpected u4 has only 4bits of information\"","counters":[]},{"line":"           in","counters":[]},{"line":"           let high = charify @@ ((Char.to_int c land 0xF0) lsr 4) in","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"           let lo = charify (Char.to_int c land 0x0F) in","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"           String.of_char_list [ high; lo ] )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    |> String.concat","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"to_hex sane\" =","counters":[]},{"line":"    let start = \"a\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let hexified = to_hex start in","counters":[]},{"line":"    let expected = \"61\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    if String.equal expected hexified then ()","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    else","counters":[]},{"line":"      failwithf \"start: %s ; hexified : %s ; expected: %s\" start hexified","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        expected ()","counters":[]},{"line":"","counters":[]},{"line":"  (** of_hex : [a-fA-F0-9]* -> {0x0-0xff}* option *)","counters":[]},{"line":"  let of_hex (hex : string) : string option =","counters":[]},{"line":"    let to_u4 c =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let open Char in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      assert (is_alphanum c) ;","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      match c with","counters":[]},{"line":"      | _ when is_digit c ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"          to_int c - to_int '0'","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"      | _ when is_uppercase c ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"          to_int c - to_int 'A' + 10","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"      | _ (* when is_alpha *) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          to_int c - to_int 'a' + 10","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    in","counters":[]},{"line":"    String.to_list hex |> List.chunks_of ~length:2","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"    |> List.fold_result ~init:[] ~f:(fun acc chunk ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"           match chunk with","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           | [ a; b ] when Char.is_alphanum a && Char.is_alphanum b ->","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"               Or_error.return","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"               @@ (Char.((to_u4 a lsl 4) lor to_u4 b |> of_int_exn) :: acc)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"           | _ ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Or_error.error_string \"invalid hex\" )","counters":[]},{"line":"    |> Or_error.ok","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    |> Option.map ~f:(Fn.compose String.of_char_list List.rev)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"partial isomorphism\" =","counters":[]},{"line":"    Quickcheck.test ~sexp_of:[%sexp_of: string] ~examples:[ \"\\243\"; \"abc\" ]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Quickcheck.Generator.(map (list char) ~f:String.of_char_list)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~f:(fun s ->","counters":[]},{"line":"        let hexified = to_hex s in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let actual = Option.value_exn (of_hex hexified) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        let expected = s in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        if String.equal actual expected then ()","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        else","counters":[]},{"line":"          failwithf","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            !\"expected: %s ; hexified: %s ; actual: %s\"","counters":[]},{"line":"            expected hexified actual () )","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}