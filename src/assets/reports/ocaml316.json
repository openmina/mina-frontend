{"filename":"src/lib/mina_base/fee_transfer_intf.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"module type Full = sig","counters":[]},{"line":"  module Single : sig","counters":[]},{"line":"    module Stable : sig","counters":[]},{"line":"      module V2 : sig","counters":[]},{"line":"        type t = private","counters":[]},{"line":"          { receiver_pk : Public_key.Compressed.Stable.V1.t","counters":[]},{"line":"          ; fee : Currency.Fee.Stable.V1.t","counters":[]},{"line":"          ; fee_token : Token_id.Stable.V2.t","counters":[]},{"line":"          }","counters":[]},{"line":"        [@@deriving bin_io, sexp, compare, equal, yojson, version, hash]","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Latest = V2","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t = Stable.Latest.t = private","counters":[]},{"line":"      { receiver_pk : Public_key.Compressed.t","counters":[]},{"line":"      ; fee : Currency.Fee.t","counters":[]},{"line":"      ; fee_token : Token_id.t","counters":[]},{"line":"      }","counters":[]},{"line":"    [@@deriving sexp, compare, yojson, hash]","counters":[]},{"line":"","counters":[]},{"line":"    include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"    include Codable.Base58_check_intf with type t := t","counters":[]},{"line":"","counters":[]},{"line":"    val create :","counters":[]},{"line":"         receiver_pk:Public_key.Compressed.t","counters":[]},{"line":"      -> fee:Currency.Fee.t","counters":[]},{"line":"      -> fee_token:Token_id.t","counters":[]},{"line":"      -> t","counters":[]},{"line":"","counters":[]},{"line":"    val receiver_pk : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"    val receiver : t -> Account_id.t","counters":[]},{"line":"","counters":[]},{"line":"    val fee : t -> Currency.Fee.t","counters":[]},{"line":"","counters":[]},{"line":"    val fee_token : t -> Token_id.t","counters":[]},{"line":"","counters":[]},{"line":"    module Gen : sig","counters":[]},{"line":"      val with_random_receivers :","counters":[]},{"line":"           ?min_fee:int","counters":[]},{"line":"        -> keys:Signature_keypair.t array","counters":[]},{"line":"        -> max_fee:int","counters":[]},{"line":"        -> token:Token_id.t Quickcheck.Generator.t","counters":[]},{"line":"        -> t Quickcheck.Generator.t","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type t = private Single.Stable.V2.t One_or_two.Stable.V1.t","counters":[]},{"line":"      [@@deriving bin_io, sexp, compare, equal, yojson, version, hash]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V2","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t [@@deriving sexp, compare, yojson, hash]","counters":[]},{"line":"","counters":[]},{"line":"  type single = Single.t = private","counters":[]},{"line":"    { receiver_pk : Public_key.Compressed.t","counters":[]},{"line":"    ; fee : Currency.Fee.t","counters":[]},{"line":"    ; fee_token : Token_id.t","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving sexp, compare, yojson, hash]","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val create : Single.t -> Single.t option -> t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val create_single :","counters":[]},{"line":"       receiver_pk:Public_key.Compressed.t","counters":[]},{"line":"    -> fee:Currency.Fee.t","counters":[]},{"line":"    -> fee_token:Token_id.t","counters":[]},{"line":"    -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_singles : t -> Single.t One_or_two.t","counters":[]},{"line":"","counters":[]},{"line":"  val of_singles : Single.t One_or_two.t -> t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_excess : t -> Fee_excess.t Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_token : single -> Token_id.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee_tokens : t -> Token_id.t One_or_two.t","counters":[]},{"line":"","counters":[]},{"line":"  val receiver_pks : t -> Public_key.Compressed.t list","counters":[]},{"line":"","counters":[]},{"line":"  val receivers : t -> Account_id.t list","counters":[]},{"line":"","counters":[]},{"line":"  val fee_payer_pk : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"  val map : t -> f:(Single.t -> 'b) -> 'b One_or_two.t","counters":[]},{"line":"","counters":[]},{"line":"  val fold : t -> init:'acc -> f:('acc -> Single.t -> 'acc) -> 'acc","counters":[]},{"line":"","counters":[]},{"line":"  val to_list : t -> Single.t list","counters":[]},{"line":"","counters":[]},{"line":"  val to_numbered_list : t -> (int * Single.t) list","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}