{"filename":"src/lib/file_system/file_system.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"let dir_exists dir =","counters":[]},{"line":"  let%bind access_res = Unix.access dir [ `Exists ] in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  if Result.is_ok access_res then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let%map stat = Unix.stat dir in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    Unix.File_kind.equal (Unix.Stats.kind stat) `Directory","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"  else return false","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let remove_dir dir =","counters":[]},{"line":"  let%bind _ =","counters":[]},{"line":"    Monitor.try_with ~here:[%here] (fun () ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        Process.run_exn ~prog:\"rm\" ~args:[ \"-rf\"; dir ] () )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  Deferred.unit","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let rec rmrf path =","counters":[]},{"line":"  match Core.Sys.is_directory path with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Yes ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Core.Sys.readdir path","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      |> Array.iter ~f:(fun name -> rmrf (Filename.concat path name)) ;","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"      Core.Unix.rmdir path","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if [%equal: [ `Yes | `No | `Unknown ]] (Core.Sys.file_exists path) `Yes","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"      then Core.Sys.remove path","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let try_finally ~(f : unit -> 'a Deferred.t) ~(finally : unit -> unit Deferred.t)","counters":[]},{"line":"    =","counters":[]},{"line":"  try_with f","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"  >>= function","counters":[]},{"line":"  | Ok x ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Deferred.map (finally ()) ~f:(Fn.const x)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  | Error exn ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      finally () >>= fun () -> raise exn","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"let with_temp_dir ~f dir =","counters":[]},{"line":"  let%bind temp_dir = Async.Unix.mkdtemp dir in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  try_finally ~f:(fun () -> f temp_dir) ~finally:(fun () -> remove_dir temp_dir)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"let dup_stdout ?(f = Core.Fn.id) (process : Process.t) =","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  Pipe.transfer ~f","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    (Reader.pipe @@ Process.stdout process)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    (Writer.pipe @@ Lazy.force Writer.stdout)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"  |> don't_wait_for","counters":[]},{"line":"","counters":[]},{"line":"let dup_stderr ?(f = Core.Fn.id) (process : Process.t) =","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  Pipe.transfer ~f","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"    (Reader.pipe @@ Process.stderr process)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    (Writer.pipe @@ Lazy.force Writer.stderr)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"  |> don't_wait_for","counters":[]},{"line":"","counters":[]},{"line":"let clear_dir toplevel_dir =","counters":[]},{"line":"  let rec all_files dirname basename =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let fullname = Filename.concat dirname basename in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match%bind Sys.is_directory fullname with","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | `Yes ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%map dirs, files =","counters":[]},{"line":"          Sys.ls_dir fullname","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          >>= Deferred.List.map ~f:(all_files fullname)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          >>| List.unzip","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        in","counters":[]},{"line":"        let dirs =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if String.equal dirname toplevel_dir then List.concat dirs","counters":[{"col_start":52,"col_end":52,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          else List.append (List.concat dirs) [ fullname ]","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        in","counters":[]},{"line":"        (dirs, List.concat files)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Deferred.return ([], [ fullname ])","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind dirs, files = all_files toplevel_dir \"\" in","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  let%bind () = Deferred.List.iter files ~f:(fun file -> Sys.remove file) in","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"  Deferred.List.iter dirs ~f:(fun file -> Unix.rmdir file)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"let create_dir ?(clear_if_exists = false) dir =","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  match Core.Sys.file_exists dir with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Yes ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if clear_if_exists then clear_dir dir else return ()","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      return (Core.Unix.mkdir_p dir)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":35,"col_end":35,"count":2}]}]}