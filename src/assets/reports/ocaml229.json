{"filename":"src/lib/rosetta_lib/amount_of.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Rosetta_models","counters":[]},{"line":"","counters":[]},{"line":"module Token_id = struct","counters":[]},{"line":"  let default : string = Mina_base.Token_id.(to_string default)","counters":[{"col_start":53,"col_end":53,"count":1}]},{"line":"","counters":[]},{"line":"  let is_default token_id = String.equal default token_id","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"  let encode (token_id : string) = `Assoc [ (\"token_id\", `String token_id) ]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  module T (M : Monad_fail.S) = struct","counters":[]},{"line":"    let decode metadata =","counters":[]},{"line":"      match metadata with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some (`Assoc [ (\"token_id\", `String token_id) ])","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        when try","counters":[]},{"line":"               let (_ : Mina_base.Token_id.t) =","counters":[]},{"line":"                 Mina_base.Token_id.of_string token_id","counters":[]},{"line":"               in","counters":[]},{"line":"               true","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"             with Failure _ -> false ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          M.return (Some token_id)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Some bad ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          M.fail","counters":[]},{"line":"            (Errors.create","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"               ~context:","counters":[]},{"line":"                 (sprintf","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                    \"When metadata is provided for account identifiers, \\","counters":[]},{"line":"                     acceptable format is exactly { \\\"token_id\\\": \\","counters":[]},{"line":"                     <base58-encoded-field-element> }. You provided %s\"","counters":[]},{"line":"                    (Yojson.Safe.pretty_to_string bad) )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"               (`Json_parse None) )","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          M.return None","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let negated (t : Amount.t) =","counters":[]},{"line":"  { t with value = (Int64.to_string @@ Int64.(neg @@ of_string t.value)) }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"let mina total =","counters":[]},{"line":"  { Amount.value = Unsigned.UInt64.to_string total","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  ; currency = { Currency.symbol = \"MINA\"; decimals = 9l; metadata = None }","counters":[]},{"line":"  ; metadata = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let token (`Token_id (token_id : string)) total =","counters":[]},{"line":"  if Token_id.is_default token_id then mina total","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"  else","counters":[]},{"line":"    { Amount.value = Unsigned.UInt64.to_string total","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; currency =","counters":[]},{"line":"        { Currency.symbol = \"MINA+\"","counters":[]},{"line":"        ; decimals = 9l","counters":[]},{"line":"        ; metadata = Some (Token_id.encode token_id)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"        }","counters":[]},{"line":"    ; metadata = None","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":4,"count":1}]}]}