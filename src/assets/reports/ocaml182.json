{"filename":"src/lib/cli_lib/flag.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"let json =","counters":[]},{"line":"  Command.Param.(","counters":[]},{"line":"    flag \"--json\" ~aliases:[ \"json\" ] no_arg","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"Use JSON output (default: plaintext)\")","counters":[]},{"line":"","counters":[]},{"line":"let plaintext =","counters":[]},{"line":"  Command.Param.(","counters":[]},{"line":"    flag \"--plaintext\" ~aliases:[ \"plaintext\" ] no_arg","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"Use plaintext input or output (default: JSON)\")","counters":[]},{"line":"","counters":[]},{"line":"let performance =","counters":[]},{"line":"  Command.Param.(","counters":[]},{"line":"    flag \"--performance\" ~aliases:[ \"performance\" ] no_arg","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        \"Include performance histograms in status output (default: don't \\","counters":[]},{"line":"         include)\")","counters":[]},{"line":"","counters":[]},{"line":"let privkey_write_path =","counters":[]},{"line":"  let open Command.Param in","counters":[]},{"line":"  flag \"--privkey-path\" ~aliases:[ \"privkey-path\" ]","counters":[{"col_start":5,"col_end":5,"count":1}]},{"line":"    ~doc:\"FILE File to write private key into (public key will be FILE.pub)\"","counters":[]},{"line":"    (required string)","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"","counters":[]},{"line":"let privkey_read_path =","counters":[]},{"line":"  let open Command.Param in","counters":[]},{"line":"  flag \"--privkey-path\" ~aliases:[ \"privkey-path\" ]","counters":[{"col_start":5,"col_end":5,"count":1}]},{"line":"    ~doc:\"FILE File to read private key from\" (required string)","counters":[{"col_start":54,"col_end":54,"count":1}]},{"line":"","counters":[]},{"line":"let conf_dir =","counters":[]},{"line":"  let open Command.Param in","counters":[]},{"line":"  flag \"--config-directory\" ~aliases:[ \"config-directory\" ]","counters":[{"col_start":5,"col_end":5,"count":1}]},{"line":"    ~doc:\"DIR Configuration directory\" (optional string)","counters":[{"col_start":47,"col_end":47,"count":1}]},{"line":"","counters":[]},{"line":"module Doc_builder = struct","counters":[]},{"line":"  type 'value t =","counters":[]},{"line":"    { type_name : string","counters":[]},{"line":"    ; description : string","counters":[]},{"line":"    ; examples : 'value list","counters":[]},{"line":"    ; display : 'value -> string","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let create ~display ?(examples = []) type_name description =","counters":[{"col_start":35,"col_end":35,"count":5}]},{"line":"    { type_name; description; examples; display }","counters":[{"col_start":4,"col_end":4,"count":9}]},{"line":"","counters":[]},{"line":"  let display ~default { type_name; description; examples; display } =","counters":[]},{"line":"    let open Printf in","counters":[{"col_start":4,"col_end":4,"count":10}]},{"line":"    let example_text =","counters":[]},{"line":"      if List.is_empty examples then \"\"","counters":[{"col_start":37,"col_end":37,"count":5}]},{"line":"      else","counters":[]},{"line":"        sprintf \"(examples: %s)\"","counters":[{"col_start":8,"col_end":8,"count":5},{"col_start":14,"col_end":14,"count":5}]},{"line":"          (String.concat ~sep:\", \" @@ List.map examples ~f:display)","counters":[{"col_start":33,"col_end":33,"count":5},{"col_start":45,"col_end":45,"count":5}]},{"line":"    in","counters":[]},{"line":"    let default_text =","counters":[]},{"line":"      Option.value_map ~default:\"\" default","counters":[]},{"line":"        ~f:(Fn.compose (sprintf !\" (default: %s)\") display)","counters":[{"col_start":21,"col_end":21,"count":10},{"col_start":30,"col_end":30,"count":10}]},{"line":"    in","counters":[]},{"line":"    sprintf !\"%s %s %s%s\" type_name description example_text default_text","counters":[{"col_start":4,"col_end":4,"count":10}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Types = struct","counters":[]},{"line":"  type 'a with_name = { name : string; value : 'a }","counters":[]},{"line":"","counters":[]},{"line":"  type 'a with_name_and_displayed_default =","counters":[]},{"line":"    { name : string; value : 'a option; default : 'a }","counters":[]},{"line":"","counters":[]},{"line":"  (*Difference between Optional and Optional_value is that the name is still accessible if the value is None*)","counters":[]},{"line":"  type ('value, 'output) t =","counters":[]},{"line":"    | Optional : ('value, 'value with_name option) t","counters":[]},{"line":"    | Optional_value : ('value, 'value option with_name) t","counters":[]},{"line":"    | Optional_with_displayed_default :","counters":[]},{"line":"        'value","counters":[]},{"line":"        -> ('value, 'value with_name_and_displayed_default) t","counters":[]},{"line":"    | Resolve_with_default : 'value -> ('value, 'value with_name) t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let setup_flag ~arg_type ~name ?aliases doc =","counters":[]},{"line":"  let open Command.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":10}]},{"line":"  Command.Param.flag name ?aliases ~doc (Command.Param.optional arg_type)","counters":[{"col_start":19,"col_end":19,"count":10},{"col_start":62,"col_end":62,"count":10}]},{"line":"  >>| Option.map ~f:(fun value -> { Types.name; value })","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"let create (type value output) :","counters":[]},{"line":"       name:string","counters":[]},{"line":"    -> ?aliases:string list","counters":[]},{"line":"    -> arg_type:value Command.Arg_type.t","counters":[]},{"line":"    -> value Doc_builder.t","counters":[]},{"line":"    -> (value, output) Types.t","counters":[]},{"line":"    -> output Command.Param.t =","counters":[]},{"line":"  let open Command.Let_syntax in","counters":[]},{"line":"  fun ~name ?aliases ~arg_type doc_builder -> function","counters":[]},{"line":"    | Optional ->","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"        setup_flag ~arg_type ~name ?aliases","counters":[]},{"line":"          (Doc_builder.display ~default:None doc_builder)","counters":[{"col_start":29,"col_end":29,"count":2}]},{"line":"    | Optional_value -> (","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        setup_flag ~arg_type ~name ?aliases","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"          (Doc_builder.display ~default:None doc_builder)","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"        >>| function","counters":[]},{"line":"        | Some { name; value } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { Types.name; value = Some value }","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { name; value = None } )","counters":[]},{"line":"    | Optional_with_displayed_default default -> (","counters":[{"col_start":6,"col_end":6,"count":4}]},{"line":"        setup_flag ~arg_type ~name ?aliases","counters":[{"col_start":17,"col_end":17,"count":4}]},{"line":"          (Doc_builder.display ~default:(Some default) doc_builder)","counters":[{"col_start":29,"col_end":29,"count":4}]},{"line":"        >>| function","counters":[]},{"line":"        | Some { name; value } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { Types.name; value = Some value; default }","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { name; value = None; default } )","counters":[]},{"line":"    | Resolve_with_default default ->","counters":[{"col_start":6,"col_end":6,"count":3}]},{"line":"        setup_flag ~arg_type ~name ?aliases","counters":[{"col_start":17,"col_end":17,"count":3}]},{"line":"          (Doc_builder.display ~default:(Some default) doc_builder)","counters":[{"col_start":29,"col_end":29,"count":3}]},{"line":"        >>| Option.value ~default:{ Types.name; value = default }","counters":[]},{"line":"","counters":[]},{"line":"module Port = struct","counters":[]},{"line":"  let to_string = Int.to_string","counters":[]},{"line":"","counters":[]},{"line":"  let doc_builder description =","counters":[]},{"line":"    Doc_builder.create ~display:to_string \"PORT\" description","counters":[{"col_start":4,"col_end":4,"count":5}]},{"line":"","counters":[]},{"line":"  let create_optional ~name ?aliases description =","counters":[]},{"line":"    create ~name ?aliases (doc_builder description) Optional_value","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":37,"col_end":37,"count":1}]},{"line":"      ~arg_type:Arg_type.int16","counters":[]},{"line":"","counters":[]},{"line":"  let create ~name ?aliases ~default description =","counters":[]},{"line":"    create ~name ?aliases (doc_builder description)","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":37,"col_end":37,"count":4}]},{"line":"      (Optional_with_displayed_default default) ~arg_type:Arg_type.int16","counters":[]},{"line":"","counters":[]},{"line":"  let default_client = 8301","counters":[]},{"line":"","counters":[]},{"line":"  let default_rest = 0xc0d","counters":[]},{"line":"","counters":[]},{"line":"  let default_archive = default_rest + 1","counters":[]},{"line":"","counters":[]},{"line":"  let default_libp2p = 8302","counters":[]},{"line":"","counters":[]},{"line":"  let of_raw raw =","counters":[]},{"line":"    let open Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind () =","counters":[]},{"line":"      Result.ok_if_true","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        (String.for_all raw ~f:Char.is_digit)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        ~error:(Error.of_string \"Not a number\")","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    in","counters":[]},{"line":"    Arg_type.validate_int16 (Int.of_string raw)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let to_host_and_port port = Host_and_port.create ~host:\"127.0.0.1\" ~port","counters":[{"col_start":30,"col_end":30,"count":3}]},{"line":"","counters":[]},{"line":"  let to_uri ~path port =","counters":[]},{"line":"    Uri.of_string (\"http://localhost:\" ^ string_of_int port ^/ path)","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":53,"col_end":53,"count":2},{"col_start":61,"col_end":61,"count":2}]},{"line":"","counters":[]},{"line":"  module Daemon = struct","counters":[]},{"line":"    let external_ =","counters":[]},{"line":"      create ~name:\"--external-port\" ~aliases:[ \"external-port\" ]","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~default:default_libp2p","counters":[]},{"line":"        \"Port to use for all libp2p communications (gossip and RPC)\"","counters":[]},{"line":"","counters":[]},{"line":"    let client =","counters":[]},{"line":"      create ~name:\"--client-port\" ~aliases:[ \"client-port\" ]","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~default:default_client","counters":[]},{"line":"        \"local RPC-server for clients to interact with the daemon\"","counters":[]},{"line":"","counters":[]},{"line":"    let rest_server =","counters":[]},{"line":"      create ~name:\"--rest-port\" ~aliases:[ \"rest-port\" ] ~default:default_rest","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        \"local REST-server for daemon interaction\"","counters":[]},{"line":"","counters":[]},{"line":"    let limited_graphql_server =","counters":[]},{"line":"      create_optional ~name:\"--limited-graphql-port\"","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"        ~aliases:[ \"limited-graphql-port\" ]","counters":[]},{"line":"        \"GraphQL-server for limited daemon interaction\"","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Archive = struct","counters":[]},{"line":"    let server =","counters":[]},{"line":"      create ~name:\"--server-port\" ~aliases:[ \"server-port\" ]","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~default:default_archive \"port to launch the archive server\"","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Host = struct","counters":[]},{"line":"  let localhost = Core.Unix.Host.getbyname_exn \"localhost\"","counters":[{"col_start":45,"col_end":45,"count":1}]},{"line":"","counters":[]},{"line":"  let is_localhost host =","counters":[]},{"line":"    Option.value_map ~default:false (Unix.Host.getbyname host) ~f:(fun host ->","counters":[{"col_start":4,"col_end":4,"count":10},{"col_start":55,"col_end":55,"count":10}]},{"line":"        Core.Unix.Host.have_address_in_common host localhost )","counters":[{"col_start":8,"col_end":8,"count":8}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let example_host = \"154.97.53.97\"","counters":[]},{"line":"","counters":[]},{"line":"module Host_and_port = struct","counters":[]},{"line":"  let parse_host_and_port raw =","counters":[]},{"line":"    match Port.of_raw raw with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok port ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Port.to_host_and_port port","counters":[]},{"line":"    | Error _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Host_and_port.of_string raw","counters":[]},{"line":"","counters":[]},{"line":"  let arg_type : Host_and_port.t Command.Arg_type.t =","counters":[]},{"line":"    Command.Arg_type.map Command.Param.string ~f:parse_host_and_port","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"  let is_localhost (host_and_port : Host_and_port.t) =","counters":[]},{"line":"    Host.is_localhost (Host_and_port.host host_and_port)","counters":[{"col_start":4,"col_end":4,"count":5},{"col_start":40,"col_end":40,"count":5}]},{"line":"","counters":[]},{"line":"  let to_string host_and_port =","counters":[]},{"line":"    if is_localhost host_and_port then","counters":[{"col_start":4,"col_end":4,"count":5}]},{"line":"      Int.to_string @@ Host_and_port.port host_and_port","counters":[{"col_start":6,"col_end":6,"count":3},{"col_start":40,"col_end":40,"count":3}]},{"line":"    else Host_and_port.to_string host_and_port","counters":[{"col_start":9,"col_end":9,"count":2}]},{"line":"","counters":[]},{"line":"  let create_examples port =","counters":[]},{"line":"    [ Port.to_host_and_port port","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":26,"col_end":26,"count":2}]},{"line":"    ; Host_and_port.create ~host:example_host ~port","counters":[]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"  let make_doc_builder description example_port =","counters":[]},{"line":"    Doc_builder.create ~display:to_string","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      ~examples:(create_examples example_port)","counters":[{"col_start":31,"col_end":31,"count":2}]},{"line":"      \"HOST:PORT/LOCALHOST-PORT\"","counters":[]},{"line":"      (sprintf \"%s. If HOST is omitted, then localhost is assumed to be HOST.\"","counters":[{"col_start":13,"col_end":13,"count":2}]},{"line":"         description )","counters":[]},{"line":"","counters":[]},{"line":"  module Client = struct","counters":[]},{"line":"    let daemon =","counters":[]},{"line":"      create ~name:\"--daemon-port\" ~aliases:[ \"daemon-port\" ] ~arg_type","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        (make_doc_builder \"Client to local daemon communication\"","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"           Port.default_client )","counters":[]},{"line":"        (Resolve_with_default (Port.to_host_and_port Port.default_client))","counters":[{"col_start":51,"col_end":51,"count":1}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Daemon = struct","counters":[]},{"line":"    let archive =","counters":[]},{"line":"      create ~name:\"--archive-address\" ~aliases:[ \"archive-address\" ] ~arg_type","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        (make_doc_builder \"Daemon to archive process communication\"","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"           Port.default_archive )","counters":[]},{"line":"        Optional","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Uri = struct","counters":[]},{"line":"  let parse_uri ~path raw =","counters":[]},{"line":"    match Port.of_raw raw with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok port ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Port.to_uri ~path port","counters":[]},{"line":"    | Error _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Uri.of_string raw","counters":[]},{"line":"","counters":[]},{"line":"  let arg_type ~path =","counters":[]},{"line":"    Command.Arg_type.map Command.Param.string ~f:(parse_uri ~path)","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"","counters":[]},{"line":"  let is_localhost (host_and_port : Uri.t) =","counters":[]},{"line":"    Option.value_map ~default:false (Uri.host host_and_port)","counters":[{"col_start":4,"col_end":4,"count":7},{"col_start":44,"col_end":44,"count":7}]},{"line":"      ~f:Host.is_localhost","counters":[]},{"line":"","counters":[]},{"line":"  let to_string uri =","counters":[]},{"line":"    if is_localhost uri then","counters":[{"col_start":4,"col_end":4,"count":7}]},{"line":"      sprintf \"%i or %s\" (Option.value_exn (Uri.port uri)) (Uri.to_string uri)","counters":[{"col_start":6,"col_end":6,"count":3},{"col_start":41,"col_end":41,"count":3},{"col_start":51,"col_end":51,"count":3},{"col_start":72,"col_end":72,"count":3}]},{"line":"    else Uri.to_string uri","counters":[{"col_start":9,"col_end":9,"count":4}]},{"line":"","counters":[]},{"line":"  module Client = struct","counters":[]},{"line":"    let doc_builder =","counters":[]},{"line":"      Doc_builder.create ~display:to_string","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"        ~examples:","counters":[]},{"line":"          [ Port.to_uri ~path:\"graphql\" Port.default_rest","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"          ; Uri.of_string","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"              ( \"/dns4/peer1-rising-phoenix.o1test.net\" ^ \":\"","counters":[]},{"line":"              ^ Int.to_string Port.default_rest","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"              ^/ \"graphql\" )","counters":[{"col_start":15,"col_end":15,"count":1}]},{"line":"          ]","counters":[]},{"line":"        \"URI/LOCALHOST-PORT\" \"graphql rest server for daemon interaction\"","counters":[]},{"line":"","counters":[]},{"line":"    let name = \"rest-server\"","counters":[]},{"line":"","counters":[]},{"line":"    let default = Port.to_uri ~path:\"graphql\" Port.default_rest","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"","counters":[]},{"line":"    let rest_graphql =","counters":[]},{"line":"      create ~name:\"--rest-server\" ~aliases:[ \"rest-server\" ]","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~arg_type:(arg_type ~path:\"graphql\") doc_builder","counters":[]},{"line":"        (Resolve_with_default default)","counters":[]},{"line":"","counters":[]},{"line":"    let rest_graphql_opt =","counters":[]},{"line":"      create ~name:\"--rest-server\" ~aliases:[ \"rest-server\" ]","counters":[{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~arg_type:(arg_type ~path:\"graphql\") doc_builder Optional","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Archive = struct","counters":[]},{"line":"    let postgres =","counters":[]},{"line":"      let doc_builder =","counters":[]},{"line":"        Doc_builder.create ~display:to_string","counters":[]},{"line":"          ~examples:","counters":[]},{"line":"            [ Uri.of_string \"postgres://admin:codarules@postgres:5432/archiver\"","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"            ]","counters":[]},{"line":"          \"URI\" \"URI for postgresql database\"","counters":[]},{"line":"      in","counters":[]},{"line":"      create ~name:\"--postgres-uri\" ~aliases:[ \"postgres-uri\" ]","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ~arg_type:(Command.Arg_type.map Command.Param.string ~f:Uri.of_string)","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"        doc_builder","counters":[]},{"line":"        (Resolve_with_default","counters":[]},{"line":"           (Uri.of_string \"postgres://admin:codarules@postgres:5432/archiver\")","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"        )","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Log = struct","counters":[]},{"line":"  let json =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--log-json\" ~aliases:[ \"log-json\" ] no_arg","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"Print log output as JSON (default: plain text)\"","counters":[]},{"line":"","counters":[]},{"line":"  let all_levels =","counters":[]},{"line":"    String.concat ~sep:\"|\" (List.map ~f:Logger.Level.show Logger.Level.all)","counters":[{"col_start":16,"col_end":16,"count":1},{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"  let level =","counters":[]},{"line":"    let log_level = Arg_type.log_level in","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    let doc = sprintf \"LEVEL Set log level (%s, default: Info)\" all_levels in","counters":[]},{"line":"    flag \"--log-level\" ~aliases:[ \"log-level\" ] ~doc","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":7,"col_end":7,"count":1}]},{"line":"      (optional_with_default Logger.Level.Info log_level)","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"  let file_log_level =","counters":[]},{"line":"    let log_level = Arg_type.log_level in","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    let doc =","counters":[]},{"line":"      sprintf \"LEVEL Set log level for the log file (%s, default: Trace)\"","counters":[]},{"line":"        all_levels","counters":[]},{"line":"    in","counters":[]},{"line":"    flag \"--file-log-level\" ~aliases:[ \"file-log-level\" ] ~doc","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":7,"col_end":7,"count":1}]},{"line":"      (optional_with_default Logger.Level.Trace log_level)","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type signed_command_common =","counters":[]},{"line":"  { sender : Signature_lib.Public_key.Compressed.t","counters":[]},{"line":"  ; fee : Currency.Fee.t","counters":[]},{"line":"  ; nonce : Mina_base.Account.Nonce.t option","counters":[]},{"line":"  ; memo : string option","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let signed_command_common : signed_command_common Command.Param.t =","counters":[]},{"line":"  let open Command.Let_syntax in","counters":[]},{"line":"  let open Arg_type in","counters":[]},{"line":"  let%map_open sender =","counters":[]},{"line":"    flag \"--sender\" ~aliases:[ \"sender\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      (required public_key_compressed)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"      ~doc:\"PUBLICKEY Public key from which you want to send the transaction\"","counters":[]},{"line":"  and fee =","counters":[]},{"line":"    flag \"--fee\" ~aliases:[ \"fee\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        (Printf.sprintf","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"           \"FEE Amount you are willing to pay to process the transaction \\","counters":[]},{"line":"            (default: %s) (minimum: %s)\"","counters":[]},{"line":"           (Currency.Fee.to_formatted_string","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"              Mina_compile_config.default_transaction_fee )","counters":[]},{"line":"           (Currency.Fee.to_formatted_string","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"              Mina_base.Signed_command.minimum_fee ) )","counters":[]},{"line":"      (optional txn_fee)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"  and nonce =","counters":[]},{"line":"    flag \"--nonce\" ~aliases:[ \"nonce\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        \"NONCE Nonce that you would like to set for your transaction (default: \\","counters":[]},{"line":"         nonce of your account on the best ledger or the successor of highest \\","counters":[]},{"line":"         value nonce of your sent transactions from the transaction pool )\"","counters":[]},{"line":"      (optional txn_nonce)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"  and memo =","counters":[]},{"line":"    flag \"--memo\" ~aliases:[ \"memo\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"STRING Memo accompanying the transaction\" (optional string)","counters":[{"col_start":62,"col_end":62,"count":1}]},{"line":"  in","counters":[]},{"line":"  { sender","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; fee = Option.value fee ~default:Mina_compile_config.default_transaction_fee","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; nonce","counters":[]},{"line":"  ; memo","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"module Signed_command = struct","counters":[]},{"line":"  open Arg_type","counters":[]},{"line":"","counters":[]},{"line":"  let hd_index =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--hd-index\" ~aliases:[ \"HD-index\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"HD-INDEX Index used by hardware wallet\" (required hd_index)","counters":[{"col_start":60,"col_end":60,"count":1}]},{"line":"","counters":[]},{"line":"  let receiver_pk =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--receiver\" ~aliases:[ \"receiver\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"PUBLICKEY Public key to which you want to send money\"","counters":[]},{"line":"      (required public_key_compressed)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"  let amount =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--amount\" ~aliases:[ \"amount\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:\"VALUE Payment amount you want to send\" (required txn_amount)","counters":[{"col_start":59,"col_end":59,"count":1}]},{"line":"","counters":[]},{"line":"  let fee =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--fee\" ~aliases:[ \"fee\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        (Printf.sprintf","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"           \"FEE Amount you are willing to pay to process the transaction \\","counters":[]},{"line":"            (default: %s) (minimum: %s)\"","counters":[]},{"line":"           (Currency.Fee.to_formatted_string","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"              Mina_compile_config.default_transaction_fee )","counters":[]},{"line":"           (Currency.Fee.to_formatted_string","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"              Mina_base.Signed_command.minimum_fee ) )","counters":[]},{"line":"      (optional txn_fee)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"  let valid_until =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--valid-until\" ~aliases:[ \"valid-until\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        \"GLOBAL-SLOT The last global-slot at which this transaction will be \\","counters":[]},{"line":"         considered valid. This makes it possible to have transactions which \\","counters":[]},{"line":"         expire if they are not applied before this time. If omitted, the \\","counters":[]},{"line":"         transaction will never expire.\"","counters":[]},{"line":"      (optional global_slot)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"  let nonce =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--nonce\" ~aliases:[ \"nonce\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        \"NONCE Nonce that you would like to set for your transaction (default: \\","counters":[]},{"line":"         nonce of your account on the best ledger or the successor of highest \\","counters":[]},{"line":"         value nonce of your sent transactions from the transaction pool )\"","counters":[]},{"line":"      (optional txn_nonce)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"  let memo =","counters":[]},{"line":"    let open Command.Param in","counters":[]},{"line":"    flag \"--memo\" ~aliases:[ \"memo\" ]","counters":[{"col_start":7,"col_end":7,"count":1}]},{"line":"      ~doc:","counters":[]},{"line":"        (sprintf","counters":[{"col_start":15,"col_end":15,"count":1}]},{"line":"           \"STRING Memo accompanying the transaction (up to %d characters)\"","counters":[]},{"line":"           Mina_base.Signed_command_memo.max_input_length )","counters":[]},{"line":"      (optional string)","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}