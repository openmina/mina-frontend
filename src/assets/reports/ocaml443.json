{"filename":"src/lib/ppx_dhall_type/deriving.ml","lines":[{"line":"(* deriving.ml -- deriving ppx for Dhall types *)","counters":[]},{"line":"","counters":[]},{"line":"(* TODO:","counters":[]},{"line":"    deriver for signatures","counters":[]},{"line":"    default values in records","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Ppxlib","counters":[]},{"line":"","counters":[]},{"line":"let deriver = \"dhall_type\"","counters":[]},{"line":"","counters":[]},{"line":"let field_key_attr =","counters":[]},{"line":"  Attribute.declare (deriver ^ \".key\") Attribute.Context.Label_declaration","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"    Ast_pattern.(single_expr_payload (estring __))","counters":[{"col_start":35,"col_end":35,"count":1},{"col_start":44,"col_end":44,"count":1}]},{"line":"    Fn.id","counters":[]},{"line":"","counters":[]},{"line":"let make_lident_cmp items lident =","counters":[]},{"line":"  List.mem items (Longident.name lident.txt) ~equal:String.equal","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"let is_bool_lident = make_lident_cmp [ \"bool\"; \"Bool.t\" ]","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"let is_int_lident = make_lident_cmp [ \"int\"; \"Int.t\" ]","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"let is_float_lident = make_lident_cmp [ \"float\"; \"Float.t\" ]","counters":[{"col_start":36,"col_end":36,"count":1}]},{"line":"","counters":[]},{"line":"let is_string_lident = make_lident_cmp [ \"string\"; \"String.t\" ]","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"","counters":[]},{"line":"let is_option_lident = make_lident_cmp [ \"option\"; \"Option.t\" ]","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"","counters":[]},{"line":"let is_list_lident = make_lident_cmp [ \"list\"; \"List.t\" ]","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"let rec dhall_type_of_core_type core_type =","counters":[]},{"line":"  let (module Ast_builder) = Ast_builder.make core_type.ptyp_loc in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Ast_builder in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match core_type.ptyp_desc with","counters":[]},{"line":"  | Ptyp_constr (lident, []) when is_bool_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.Bool]","counters":[]},{"line":"  | Ptyp_constr (lident, []) when is_int_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.Integer]","counters":[]},{"line":"  | Ptyp_constr (lident, []) when is_float_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.Double]","counters":[]},{"line":"  | Ptyp_constr (lident, []) when is_string_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.Text]","counters":[]},{"line":"  | Ptyp_constr (lident, [ ty ]) when is_option_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.Optional [%e dhall_type_of_core_type ty]]","counters":[{"col_start":74,"col_end":74,"count":0}]},{"line":"  | Ptyp_constr (lident, [ ty ]) when is_list_lident lident ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      [%expr Ppx_dhall_type.Dhall_type.List [%e dhall_type_of_core_type ty]]","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"  | Ptyp_constr ({ txt = Lident id; _ }, []) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      evar (id ^ \"_dhall_type\")","counters":[]},{"line":"  | Ptyp_constr ({ txt = Lident id; _ }, params) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let dhall_type_fun = evar (id ^ \"_dhall_type\") in","counters":[]},{"line":"      let args = List.map params ~f:dhall_type_of_core_type in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      eapply dhall_type_fun args","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Ptyp_constr ({ txt = Ldot (prefix, nm); _ }, []) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let mod_path = Longident.name prefix in","counters":[]},{"line":"      if String.equal nm \"t\" then evar (mod_path ^ \".dhall_type\")","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      else evar (mod_path ^ \".\" ^ nm ^ \"_dhall_type\")","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  | Ptyp_constr ({ txt = Ldot (prefix, nm); _ }, params) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let mod_path = Longident.name prefix in","counters":[]},{"line":"      let dhall_type_fun =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if String.equal nm \"t\" then evar (mod_path ^ \".dhall_type\")","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        else evar (mod_path ^ \".\" ^ nm ^ \"_dhall_type\")","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      in","counters":[]},{"line":"      let args = List.map params ~f:dhall_type_of_core_type in","counters":[]},{"line":"      eapply dhall_type_fun args","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Ptyp_var a ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      evar a","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Location.raise_errorf ~loc:core_type.ptyp_loc \"Unsupported type\"","counters":[]},{"line":"","counters":[]},{"line":"let dhall_variant_from_constructor_declaration ctor_decl =","counters":[]},{"line":"  let (module Ast_builder) = Ast_builder.make ctor_decl.pcd_name.loc in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Ast_builder in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let name = estring @@ String.lowercase ctor_decl.pcd_name.txt in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  match ctor_decl.pcd_args with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Pcstr_tuple [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%expr [%e name], None]","counters":[]},{"line":"  | Pcstr_tuple [ ty ] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%expr [%e name], Some [%e dhall_type_of_core_type ty]]","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"  | Pcstr_tuple tys ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let tys_expr = elist (List.map tys ~f:dhall_type_of_core_type) in","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      [%expr [%e name], Some (List [%e tys_expr])]","counters":[]},{"line":"  | Pcstr_record _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Location.raise_errorf ~loc:ctor_decl.pcd_name.loc","counters":[]},{"line":"        \"Records not yet supported\"","counters":[]},{"line":"","counters":[]},{"line":"let dhall_field_from_label_declaration label_decl =","counters":[]},{"line":"  let (module Ast_builder) = Ast_builder.make label_decl.pld_name.loc in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Ast_builder in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let name =","counters":[]},{"line":"    match Attribute.get field_key_attr label_decl with","counters":[]},{"line":"    | Some name ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        estring name","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        estring label_decl.pld_name.txt","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  in","counters":[]},{"line":"  let ty = dhall_type_of_core_type label_decl.pld_type in","counters":[]},{"line":"  [%expr [%e name], [%e ty]]","counters":[]},{"line":"","counters":[]},{"line":"let generate_dhall_type type_decl =","counters":[]},{"line":"  let (module Ast_builder) = Ast_builder.make type_decl.ptype_loc in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Ast_builder in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let dhall_type =","counters":[]},{"line":"    match type_decl.ptype_kind with","counters":[]},{"line":"    | Ptype_abstract -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match type_decl.ptype_manifest with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Location.raise_errorf ~loc:type_decl.ptype_loc","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"              \"Abstract type declaration has no manifest (right-hand side)\"","counters":[]},{"line":"        | Some core_type ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            dhall_type_of_core_type core_type )","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    | Ptype_variant ctor_decls ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%expr","counters":[]},{"line":"          Ppx_dhall_type.Dhall_type.Union","counters":[]},{"line":"            [%e","counters":[]},{"line":"              elist","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                (List.map ctor_decls","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                   ~f:dhall_variant_from_constructor_declaration )]]","counters":[]},{"line":"    | Ptype_record label_decls ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%expr","counters":[]},{"line":"          Ppx_dhall_type.Dhall_type.Record","counters":[]},{"line":"            [%e","counters":[]},{"line":"              elist (List.map label_decls ~f:dhall_field_from_label_declaration)]]","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    | Ptype_open ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Location.raise_errorf ~loc:type_decl.ptype_loc","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          \"Open types not supported\"","counters":[]},{"line":"  in","counters":[]},{"line":"  let ty_name =","counters":[]},{"line":"    match type_decl.ptype_name.txt with","counters":[]},{"line":"    | \"t\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        pvar \"dhall_type\"","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    | nm ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        pvar (nm ^ \"_dhall_type\")","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  in","counters":[]},{"line":"  match type_decl.ptype_params with","counters":[]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%stri let [%p ty_name] = [%e dhall_type]]","counters":[]},{"line":"  | params ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let args =","counters":[]},{"line":"        List.map params ~f:(fun (core_type, _variance) ->","counters":[]},{"line":"            match core_type.ptyp_desc with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Ptyp_var a ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                pvar a","counters":[]},{"line":"            | _ ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Location.raise_errorf ~loc:type_decl.ptype_loc","counters":[]},{"line":"                  \"Type parameter not a type variable\" )","counters":[]},{"line":"      in","counters":[]},{"line":"      let abs = eabstract args dhall_type in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%stri let [%p ty_name] = [%e abs]]","counters":[]},{"line":"","counters":[]},{"line":"let generate_dhall_types ~loc:_ ~path:_ (_rec_flag, type_decls) =","counters":[]},{"line":"  List.map type_decls ~f:generate_dhall_type","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let attributes = [ Attribute.T field_key_attr ]","counters":[]},{"line":"","counters":[]},{"line":"let str_type_decl =","counters":[]},{"line":"  Deriving.Generator.make_noarg ~attributes generate_dhall_types","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"let () = Deriving.add deriver ~str_type_decl |> Ppxlib.Deriving.ignore","counters":[{"col_start":48,"col_end":48,"count":1},{"col_start":69,"col_end":69,"count":1}]}]}