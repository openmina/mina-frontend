{"filename":"src/lib/transition_frontier/extensions/new_breadcrumbs.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t = unit","counters":[]},{"line":"","counters":[]},{"line":"  type view = Breadcrumb.t list","counters":[]},{"line":"","counters":[]},{"line":"  let create ~logger:_ frontier = ((), [ Full_frontier.root frontier ])","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  let handle_diffs () _frontier diffs_with_mutants =","counters":[]},{"line":"    let open Diff.Full.With_mutant in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let new_nodes =","counters":[]},{"line":"      List.filter_map diffs_with_mutants ~f:(function","counters":[]},{"line":"        | E (New_node (Full breadcrumb), _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some breadcrumb","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None )","counters":[]},{"line":"    in","counters":[]},{"line":"    Option.some_if (not @@ List.is_empty new_nodes) new_nodes","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"module Broadcasted = Functor.Make_broadcasted (T)","counters":[{"col_start":48,"col_end":48,"count":2}]}]}