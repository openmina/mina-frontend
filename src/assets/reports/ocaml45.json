{"filename":"src/lib/mina_base/zkapp_state.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"module Max_state_size = Nat.N8","counters":[]},{"line":"","counters":[]},{"line":"module V = struct","counters":[]},{"line":"  (* Think about versioning here! These vector types *will* change","counters":[]},{"line":"     serialization if the numbers above change, and so will require a new","counters":[]},{"line":"     version number. Thus, it's important that these are modules with new","counters":[]},{"line":"     versioned types, and not just module aliases to the corresponding vector","counters":[]},{"line":"     implementation.","counters":[]},{"line":"  *)","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type 'a t = 'a Vector.Vector_8.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":3},{"col_start":14,"col_end":14,"count":3},{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"      [@@deriving compare, yojson, sexp, hash, equal]","counters":[{"col_start":52,"col_end":52,"count":7}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type 'a t = 'a Vector.Vector_8.t","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"  [@@deriving compare, yojson, sexp, hash, equal]","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"  let map = Vector.map","counters":[]},{"line":"","counters":[]},{"line":"  let of_list_exn = Vector.Vector_8.of_list_exn","counters":[]},{"line":"","counters":[]},{"line":"  let to_list = Vector.to_list","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let () =","counters":[]},{"line":"  let _f :","counters":[]},{"line":"      type a.","counters":[]},{"line":"      unit -> (a V.t, a Vector.With_length(Max_state_size).t) Type_equal.t =","counters":[]},{"line":"   fun () -> Type_equal.T","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  in","counters":[]},{"line":"  ()","counters":[]},{"line":"","counters":[]},{"line":"let typ t = Vector.typ t Max_state_size.n","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Value = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Zkapp_basic.F.Stable.V1.t V.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Zkapp_basic.F.t V.t [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"","counters":[]},{"line":"  let () =","counters":[]},{"line":"    let _f : unit -> (t, Stable.Latest.t) Type_equal.t =","counters":[]},{"line":"     fun () -> Type_equal.T","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    ()","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let to_input (t : _ V.t) ~f =","counters":[]},{"line":"  Vector.(reduce_exn (map t ~f) ~f:Random_oracle_input.Chunked.append)","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"let deriver inner obj =","counters":[]},{"line":"  let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  iso ~map:V.of_list_exn ~contramap:V.to_list","counters":[]},{"line":"    ((list ~static_length:(Nat.to_int Max_state_size.n) @@ inner @@ o ())","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":63,"col_end":63,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"       (o ()) )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    obj","counters":[{"col_start":6,"col_end":6,"count":1}]}]}