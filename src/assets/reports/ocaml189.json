{"filename":"src/lib/fields_derivers_zkapps/fields_derivers_js.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Fieldslib","counters":[]},{"line":"","counters":[]},{"line":"module Js_layout = struct","counters":[]},{"line":"  module Input = struct","counters":[]},{"line":"    type 'a t =","counters":[]},{"line":"      < js_layout : [> `Assoc of (string * Yojson.Safe.t) list ] ref ; .. >","counters":[]},{"line":"      as","counters":[]},{"line":"      'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Accumulator = struct","counters":[]},{"line":"    type field = { key : string; value : Yojson.Safe.t; docs : Yojson.Safe.t }","counters":[]},{"line":"","counters":[]},{"line":"    let to_key ({ key; _ } : field) = `String key","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let to_entry ({ key; value; _ } : field) : string * Yojson.Safe.t =","counters":[]},{"line":"      (key, value)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let to_doc_entry ({ key; docs; _ } : field) : string * Yojson.Safe.t =","counters":[]},{"line":"      (key, docs)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    type 'a t = < js_layout_accumulator : field option list ref ; .. > as 'a","counters":[]},{"line":"      constraint 'a t = 'a Input.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let docs (s : Fields_derivers.Annotations.Fields.T.t) : Yojson.Safe.t =","counters":[]},{"line":"    match s.doc with Some t -> `String t | None -> `Null","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let add_field ~t_fields_annots t_field field (acc : _ Accumulator.t) :","counters":[]},{"line":"      _ * _ Accumulator.t =","counters":[]},{"line":"    let annotations =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers.Annotations.Fields.of_annots t_fields_annots","counters":[]},{"line":"        (Field.name field)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    in","counters":[]},{"line":"    let rest = !(acc#js_layout_accumulator) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"    let key =","counters":[]},{"line":"      Option.value annotations.name","counters":[]},{"line":"        ~default:(Fields_derivers.name_under_to_camel field)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    in","counters":[]},{"line":"    let value = !(t_field#js_layout) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    let new_field =","counters":[]},{"line":"      if annotations.skip || !(t_field#skip) then None","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"      else Some Accumulator.{ key; value; docs = docs annotations }","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    in","counters":[]},{"line":"    acc#js_layout_accumulator := new_field :: rest ;","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    ((fun _ -> failwith \"Unused\"), acc)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  let finish name ~t_toplevel_annots (_creator, obj) =","counters":[]},{"line":"    let annotations =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers.Annotations.Top.of_annots ~name t_toplevel_annots","counters":[]},{"line":"    in","counters":[]},{"line":"    let accumulator =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.filter_map ~f:Fn.id !(obj#js_layout_accumulator) |> List.rev","counters":[{"col_start":58,"col_end":58,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"    in","counters":[]},{"line":"    obj#js_layout :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      `Assoc","counters":[]},{"line":"        [ (\"type\", `String \"object\")","counters":[]},{"line":"        ; (\"name\", `String annotations.name)","counters":[]},{"line":"        ; ( \"docs\"","counters":[]},{"line":"          , match annotations.doc with Some s -> `String s | None -> `Null )","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        ; (\"keys\", `List (List.map ~f:Accumulator.to_key accumulator))","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        ; (\"entries\", `Assoc (List.map ~f:Accumulator.to_entry accumulator))","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; ( \"docEntries\"","counters":[]},{"line":"          , `Assoc (List.map ~f:Accumulator.to_doc_entry accumulator) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        ] ;","counters":[]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  type leaf_type =","counters":[]},{"line":"    | String","counters":[]},{"line":"    | Number","counters":[]},{"line":"    | Null","counters":[]},{"line":"    | Field","counters":[]},{"line":"    | Bool","counters":[]},{"line":"    | UInt32","counters":[]},{"line":"    | UInt64","counters":[]},{"line":"    | PublicKey","counters":[]},{"line":"    | Custom of string","counters":[]},{"line":"","counters":[]},{"line":"  let leaf_type_to_string = function","counters":[]},{"line":"    | String ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"string\"","counters":[]},{"line":"    | Number ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"number\"","counters":[]},{"line":"    | Null ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"null\"","counters":[]},{"line":"    | Field ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Field\"","counters":[]},{"line":"    | Bool ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Bool\"","counters":[]},{"line":"    | UInt32 ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"UInt32\"","counters":[]},{"line":"    | UInt64 ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"UInt64\"","counters":[]},{"line":"    | PublicKey ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"PublicKey\"","counters":[]},{"line":"    | Custom s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        s","counters":[]},{"line":"","counters":[]},{"line":"  type option_type =","counters":[]},{"line":"    | Flagged_option","counters":[]},{"line":"    | Closed_interval of (string * string)","counters":[]},{"line":"    | Or_undefined","counters":[]},{"line":"","counters":[]},{"line":"  let leaf_type (s : leaf_type) =","counters":[]},{"line":"    `Assoc [ (\"type\", `String (leaf_type_to_string s)) ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let skip obj =","counters":[]},{"line":"    obj#skip := true ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    obj#js_layout := leaf_type Null ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let int obj =","counters":[]},{"line":"    obj#js_layout := leaf_type Number ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let string obj =","counters":[]},{"line":"    obj#js_layout := leaf_type String ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let bool obj =","counters":[]},{"line":"    obj#js_layout := leaf_type Bool ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let list ?static_length x obj : _ Input.t =","counters":[]},{"line":"    let inner = !(x#js_layout) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    let static_length =","counters":[]},{"line":"      match static_length with Some length -> `Int length | None -> `Null","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"    in","counters":[]},{"line":"    obj#js_layout :=","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      `Assoc","counters":[]},{"line":"        [ (\"type\", `String \"array\")","counters":[]},{"line":"        ; (\"inner\", inner)","counters":[]},{"line":"        ; (\"staticLength\", static_length)","counters":[]},{"line":"        ] ;","counters":[]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let option x obj ~(js_type : option_type) : _ Input.t =","counters":[]},{"line":"    let inner = !(x#js_layout) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    let layout =","counters":[]},{"line":"      match js_type with","counters":[]},{"line":"      | Flagged_option ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"type\", `String \"option\")","counters":[]},{"line":"            ; (\"optionType\", `String \"flaggedOption\")","counters":[]},{"line":"            ; (\"inner\", inner)","counters":[]},{"line":"            ]","counters":[]},{"line":"      | Closed_interval (min, max) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"type\", `String \"option\")","counters":[]},{"line":"            ; (\"optionType\", `String \"closedInterval\")","counters":[]},{"line":"            ; (\"rangeMin\", `String min)","counters":[]},{"line":"            ; (\"rangeMax\", `String max)","counters":[]},{"line":"            ; (\"inner\", inner)","counters":[]},{"line":"            ]","counters":[]},{"line":"      | Or_undefined ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            [ (\"type\", `String \"option\")","counters":[]},{"line":"            ; (\"optionType\", `String \"orUndefined\")","counters":[]},{"line":"            ; (\"inner\", inner)","counters":[]},{"line":"            ]","counters":[]},{"line":"    in","counters":[]},{"line":"    obj#js_layout := layout ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let wrapped x obj =","counters":[]},{"line":"    obj#js_layout := !(x#js_layout) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    obj","counters":[]},{"line":"","counters":[]},{"line":"  let with_checked ~name (x : _ Input.t) (obj : _ Input.t) =","counters":[]},{"line":"    match !(obj#js_layout) with","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    | `Assoc layout ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        obj#js_layout :=","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          `Assoc","counters":[]},{"line":"            ( layout","counters":[]},{"line":"            @ [ (\"checkedType\", !(x#js_layout))","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"              ; (\"checkedTypeName\", `String name)","counters":[]},{"line":"              ] ) ;","counters":[]},{"line":"        obj","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"impossible\"","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}