{"filename":"src/lib/transition_router/transition_router.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type Structured_log_events.t += Starting_transition_frontier_controller","counters":[]},{"line":"  [@@deriving","counters":[]},{"line":"    register_event { msg = \"Starting transition frontier controller phase\" }]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":3}]},{"line":"","counters":[]},{"line":"type Structured_log_events.t += Starting_bootstrap_controller","counters":[]},{"line":"  [@@deriving register_event { msg = \"Starting bootstrap controller phase\" }]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"let create_bufferred_pipe ?name ~f () =","counters":[]},{"line":"  Strict_pipe.create ?name (Buffered (`Capacity 50, `Overflow (Drop_head f)))","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let is_transition_for_bootstrap ~context:(module Context : CONTEXT) frontier","counters":[]},{"line":"    new_transition =","counters":[]},{"line":"  let root_consensus_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Transition_frontier.root frontier","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    |> Transition_frontier.Breadcrumb.consensus_state_with_hashes","counters":[]},{"line":"  in","counters":[]},{"line":"  let new_consensus_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Validation.block_with_hash new_transition","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    |> With_hash.map ~f:Mina_block.consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  match","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Consensus.Hooks.select","counters":[]},{"line":"      ~context:(module Context)","counters":[]},{"line":"      ~existing:root_consensus_state ~candidate:new_consensus_state","counters":[]},{"line":"  with","counters":[]},{"line":"  | `Keep ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      false","counters":[]},{"line":"  | `Take ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let slack = 5 in","counters":[]},{"line":"      if","counters":[]},{"line":"        Length.to_int","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          ( Transition_frontier.best_tip frontier","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          |> Transition_frontier.Breadcrumb.consensus_state","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"          |> Consensus.Data.Consensus_state.blockchain_length )","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"        + 290 + slack","counters":[]},{"line":"        < Length.to_int","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"            (Consensus.Data.Consensus_state.blockchain_length","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"               new_consensus_state.data )","counters":[]},{"line":"      then (* Then our entire frontier is useless. *)","counters":[]},{"line":"        true","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else","counters":[]},{"line":"        let module Context = struct","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          include Context","counters":[]},{"line":"","counters":[]},{"line":"          let logger =","counters":[]},{"line":"            Logger.extend logger","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              [ ( \"selection_context\"","counters":[]},{"line":"                , `String \"Transition_router.is_transition_for_bootstrap\" )","counters":[]},{"line":"              ]","counters":[]},{"line":"        end in","counters":[]},{"line":"        Consensus.Hooks.should_bootstrap","counters":[]},{"line":"          ~context:(module Context)","counters":[]},{"line":"          ~existing:root_consensus_state ~candidate:new_consensus_state","counters":[]},{"line":"","counters":[]},{"line":"let start_transition_frontier_controller ~context:(module Context : CONTEXT)","counters":[]},{"line":"    ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"    ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"    ~verified_transition_writer ~clear_reader ~collected_transitions","counters":[]},{"line":"    ~transition_reader_ref ~transition_writer_ref ~frontier_w frontier =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  [%str_log info] Starting_transition_frontier_controller ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  let ( transition_frontier_controller_reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      , transition_frontier_controller_writer ) =","counters":[]},{"line":"    let name = \"transition frontier controller pipe\" in","counters":[]},{"line":"    create_bufferred_pipe ~name","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~f:(fun (`Block block, `Valid_cb valid_cb) ->","counters":[]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Counter.inc_one","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"            Pipe.Drop_on_overflow.router_transition_frontier_controller) ;","counters":[]},{"line":"        Mina_block.handle_dropped_transition","counters":[]},{"line":"          ( With_hash.hash @@ Validation.block_with_hash","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          @@ Network_peer.Envelope.Incoming.data block )","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          ?valid_cb ~pipe_name:name ~logger )","counters":[]},{"line":"      ()","counters":[]},{"line":"  in","counters":[]},{"line":"  transition_reader_ref := transition_frontier_controller_reader ;","counters":[]},{"line":"  transition_writer_ref := transition_frontier_controller_writer ;","counters":[]},{"line":"  let producer_transition_reader, producer_transition_writer =","counters":[]},{"line":"    Strict_pipe.create ~name:\"transition frontier: producer transition\"","counters":[]},{"line":"      Synchronous","counters":[]},{"line":"  in","counters":[]},{"line":"  producer_transition_reader_ref := producer_transition_reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  producer_transition_writer_ref := producer_transition_writer ;","counters":[]},{"line":"  Broadcast_pipe.Writer.write frontier_w (Some frontier) |> don't_wait_for ;","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  let new_verified_transition_reader =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Transition_frontier_controller.run","counters":[]},{"line":"      ~context:(module Context)","counters":[]},{"line":"      ~trust_system ~verifier ~network ~time_controller ~collected_transitions","counters":[]},{"line":"      ~frontier ~network_transition_reader:!transition_reader_ref","counters":[]},{"line":"      ~producer_transition_reader ~clear_reader","counters":[]},{"line":"  in","counters":[]},{"line":"  Strict_pipe.Reader.iter new_verified_transition_reader","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    ~f:","counters":[]},{"line":"      (Fn.compose Deferred.return","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"         (Strict_pipe.Writer.write verified_transition_writer) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  |> don't_wait_for","counters":[]},{"line":"","counters":[]},{"line":"let start_bootstrap_controller ~context:(module Context : CONTEXT) ~trust_system","counters":[]},{"line":"    ~verifier ~network ~time_controller ~producer_transition_reader_ref","counters":[]},{"line":"    ~producer_transition_writer_ref ~verified_transition_writer ~clear_reader","counters":[]},{"line":"    ~transition_reader_ref ~transition_writer_ref ~consensus_local_state","counters":[]},{"line":"    ~frontier_w ~initial_root_transition ~persistent_root ~persistent_frontier","counters":[]},{"line":"    ~best_seen_transition ~catchup_mode =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  [%str_log info] Starting_bootstrap_controller ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  [%log info] \"Starting Bootstrap Controller phase\" ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"  let bootstrap_controller_reader, bootstrap_controller_writer =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let name = \"bootstrap controller pipe\" in","counters":[]},{"line":"    create_bufferred_pipe ~name","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~f:(fun (`Block head, `Valid_cb valid_cb) ->","counters":[]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Counter.inc_one Pipe.Drop_on_overflow.router_bootstrap_controller) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        Mina_block.handle_dropped_transition","counters":[]},{"line":"          ( With_hash.hash @@ Validation.block_with_hash","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          @@ Network_peer.Envelope.Incoming.data head )","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          ~pipe_name:name ~logger ?valid_cb )","counters":[]},{"line":"      ()","counters":[]},{"line":"  in","counters":[]},{"line":"  transition_reader_ref := bootstrap_controller_reader ;","counters":[]},{"line":"  transition_writer_ref := bootstrap_controller_writer ;","counters":[]},{"line":"  let producer_transition_reader, producer_transition_writer =","counters":[]},{"line":"    Strict_pipe.create ~name:\"bootstrap controller: producer transition\"","counters":[]},{"line":"      Synchronous","counters":[]},{"line":"  in","counters":[]},{"line":"  producer_transition_reader_ref := producer_transition_reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  producer_transition_writer_ref := producer_transition_writer ;","counters":[]},{"line":"  Option.iter best_seen_transition ~f:(fun block ->","counters":[]},{"line":"      Strict_pipe.Writer.write bootstrap_controller_writer","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (`Block block, `Valid_cb None) ) ;","counters":[]},{"line":"  don't_wait_for (Broadcast_pipe.Writer.write frontier_w None) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  upon","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Bootstrap_controller.run","counters":[]},{"line":"       ~context:(module Context)","counters":[]},{"line":"       ~trust_system ~verifier ~network ~consensus_local_state","counters":[]},{"line":"       ~transition_reader:!transition_reader_ref ~persistent_frontier","counters":[]},{"line":"       ~persistent_root ~initial_root_transition ~best_seen_transition","counters":[]},{"line":"       ~catchup_mode )","counters":[]},{"line":"    (fun (new_frontier, collected_transitions) ->","counters":[]},{"line":"      Strict_pipe.Writer.kill !transition_writer_ref ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      start_transition_frontier_controller","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~context:(module Context)","counters":[]},{"line":"        ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"        ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"        ~verified_transition_writer ~clear_reader ~collected_transitions","counters":[]},{"line":"        ~transition_reader_ref ~transition_writer_ref ~frontier_w new_frontier","counters":[]},{"line":"      )","counters":[]},{"line":"","counters":[]},{"line":"let download_best_tip ~context:(module Context : CONTEXT) ~notify_online","counters":[]},{"line":"    ~network ~verifier ~trust_system ~most_recent_valid_block_writer","counters":[]},{"line":"    ~genesis_constants =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let num_peers = 16 in","counters":[]},{"line":"  let%bind peers = Mina_networking.random_peers network num_peers in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"  [%log info] \"Requesting peers for their best tip to do initialization\" ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"  let%bind tips =","counters":[]},{"line":"    Deferred.List.filter_map ~how:`Parallel peers ~f:(fun peer ->","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        let open Deferred.Let_syntax in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        match%bind","counters":[]},{"line":"          Mina_networking.get_best_tip","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            ~heartbeat_timeout:(Time_ns.Span.of_min 1.)","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"            ~timeout:(Time.Span.of_min 1.) network peer","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        with","counters":[]},{"line":"        | Error e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log debug]","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"peer\", Network_peer.Peer.to_yojson peer)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                ; (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                ]","counters":[]},{"line":"              \"Couldn't get best tip from peer: $error\" ;","counters":[]},{"line":"            return None","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | Ok peer_best_tip -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log debug]","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"peer\", Network_peer.Peer.to_yojson peer)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                ; ( \"length\"","counters":[]},{"line":"                  , Length.to_yojson","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                      (Mina_block.blockchain_length peer_best_tip.data) )","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                ]","counters":[]},{"line":"              \"Successfully downloaded best tip with $length from $peer\" ;","counters":[]},{"line":"            (* TODO: Use batch verification instead *)","counters":[]},{"line":"            match%bind","counters":[]},{"line":"              Best_tip_prover.verify ~verifier peer_best_tip ~genesis_constants","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                ~precomputed_values","counters":[]},{"line":"            with","counters":[]},{"line":"            | Error e ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log warn]","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  ~metadata:","counters":[]},{"line":"                    [ (\"peer\", Network_peer.Peer.to_yojson peer)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                    ; (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                    ]","counters":[]},{"line":"                  \"Peer sent us bad proof for their best tip\" ;","counters":[]},{"line":"                let%map () =","counters":[]},{"line":"                  Trust_system.(","counters":[]},{"line":"                    record trust_system logger peer","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                      Actions.","counters":[]},{"line":"                        ( Violated_protocol","counters":[]},{"line":"                        , Some (\"Peer sent us bad proof for their best tip\", [])","counters":[]},{"line":"                        ))","counters":[]},{"line":"                in","counters":[]},{"line":"                None","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | Ok (`Root _, `Best_tip candidate_best_tip) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log debug]","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  ~metadata:[ (\"peer\", Network_peer.Peer.to_yojson peer) ]","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                  \"Successfully verified best tip from $peer\" ;","counters":[]},{"line":"                return","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (Some","counters":[]},{"line":"                     (Envelope.Incoming.wrap_peer","counters":[]},{"line":"                        ~data:{ peer_best_tip with data = candidate_best_tip }","counters":[]},{"line":"                        ~sender:peer ) ) ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  [%log debug]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      [ (\"actual\", `Int (List.length tips)); (\"expected\", `Int num_peers) ]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    \"Finished requesting tips. Got $actual / $expected\" ;","counters":[]},{"line":"  let%map () = notify_online () in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  let res =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.fold tips ~init:None ~f:(fun acc enveloped_candidate_best_tip ->","counters":[]},{"line":"        Option.merge acc (Option.return enveloped_candidate_best_tip)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          ~f:(fun enveloped_existing_best_tip enveloped_candidate_best_tip ->","counters":[]},{"line":"            let f x =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Validation.block_with_hash x","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"              |> With_hash.map ~f:Mina_block.consensus_state","counters":[]},{"line":"            in","counters":[]},{"line":"            match","counters":[]},{"line":"              Consensus.Hooks.select","counters":[]},{"line":"                ~context:(module Context)","counters":[]},{"line":"                ~existing:(f enveloped_existing_best_tip.data.data)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                ~candidate:(f enveloped_candidate_best_tip.data.data)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            with","counters":[]},{"line":"            | `Keep ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                enveloped_existing_best_tip","counters":[]},{"line":"            | `Take ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                enveloped_candidate_best_tip ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  Option.iter res ~f:(fun best ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let best_tip_length =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Validation.block best.data.data","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        |> Mina_block.blockchain_length |> Length.to_int","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"      in","counters":[]},{"line":"      Mina_metrics.Transition_frontier.update_max_blocklength_observed","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        best_tip_length ;","counters":[]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      @@ Broadcast_pipe.Writer.write most_recent_valid_block_writer","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           best.data.data ) ;","counters":[]},{"line":"  Option.map res","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:","counters":[]},{"line":"      (Envelope.Incoming.map ~f:(fun (x : _ Proof_carrying_data.t) ->","counters":[]},{"line":"           Ledger_catchup.Best_tip_lru.add x ;","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           x.data ) )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let load_frontier ~context:(module Context : CONTEXT) ~verifier","counters":[]},{"line":"    ~persistent_frontier ~persistent_root ~consensus_local_state ~catchup_mode =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match%map","counters":[]},{"line":"    Transition_frontier.load","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"      ~context:(module Context)","counters":[]},{"line":"      ~verifier ~consensus_local_state ~persistent_root ~persistent_frontier","counters":[]},{"line":"      ~catchup_mode ()","counters":[]},{"line":"  with","counters":[]},{"line":"  | Ok frontier ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log info] \"Successfully loaded frontier\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      Some frontier","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error `Persistent_frontier_malformed ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith","counters":[]},{"line":"        \"persistent frontier unexpectedly malformed -- this should not happen \\","counters":[]},{"line":"         with retry enabled\"","counters":[]},{"line":"  | Error `Bootstrap_required ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log warn]","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        \"Fast forward has not been implemented. Bootstrapping instead.\" ;","counters":[]},{"line":"      None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error (`Failure e) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith (\"failed to initialize transition frontier: \" ^ e)","counters":[]},{"line":"  | Error `Snarked_ledger_mismatch ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log warn] \"Persistent database is out of sync with snarked_ledger\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let wait_for_high_connectivity ~logger ~network ~is_seed =","counters":[]},{"line":"  let connectivity_time_upperbound = 60.0 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let high_connectivity =","counters":[]},{"line":"    Mina_networking.on_first_high_connectivity network ~f:Fn.id","counters":[]},{"line":"  in","counters":[]},{"line":"  Deferred.any","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ ( high_connectivity","counters":[]},{"line":"      >>| fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [%log info] \"Already connected to enough peers, start initialization\" )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; ( after (Time_ns.Span.of_sec connectivity_time_upperbound)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      >>= fun () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Mina_networking.peers network","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"      >>| fun peers ->","counters":[]},{"line":"      if not @@ Deferred.is_determined high_connectivity then","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        if List.length peers = 0 then","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          if is_seed then","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log info]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ ( \"max seconds to wait for high connectivity\"","counters":[]},{"line":"                  , `Float connectivity_time_upperbound )","counters":[]},{"line":"                ]","counters":[]},{"line":"              \"Will start initialization without connecting to any peers\"","counters":[]},{"line":"          else (","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"            [%log error]","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              \"Failed to find any peers during initialization (crashing \\","counters":[]},{"line":"               because this is not a seed node)\" ;","counters":[]},{"line":"            exit 1 )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        else","counters":[]},{"line":"          [%log info]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ (\"num peers\", `Int (List.length peers))","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"              ; ( \"max seconds to wait for high connectivity\"","counters":[]},{"line":"                , `Float connectivity_time_upperbound )","counters":[]},{"line":"              ]","counters":[]},{"line":"            \"Will start initialization without connecting to too many peers\" )","counters":[]},{"line":"    ]","counters":[]},{"line":"","counters":[]},{"line":"let initialize ~context:(module Context : CONTEXT) ~network ~is_seed","counters":[]},{"line":"    ~is_demo_mode ~verifier ~trust_system ~time_controller ~frontier_w","counters":[]},{"line":"    ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"    ~clear_reader ~verified_transition_writer ~transition_reader_ref","counters":[]},{"line":"    ~transition_writer_ref ~most_recent_valid_block_writer ~persistent_root","counters":[]},{"line":"    ~persistent_frontier ~consensus_local_state ~catchup_mode ~notify_online =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () =","counters":[]},{"line":"    if is_demo_mode then return ()","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    else wait_for_high_connectivity ~logger ~network ~is_seed","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"  in","counters":[]},{"line":"  let genesis_constants =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Precomputed_values.genesis_constants precomputed_values","counters":[]},{"line":"  in","counters":[]},{"line":"  match%bind","counters":[]},{"line":"    Deferred.both","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      (download_best_tip","counters":[]},{"line":"         ~context:(module Context)","counters":[]},{"line":"         ~notify_online ~network ~verifier ~trust_system","counters":[]},{"line":"         ~most_recent_valid_block_writer ~genesis_constants )","counters":[]},{"line":"      (load_frontier","counters":[]},{"line":"         ~context:(module Context)","counters":[]},{"line":"         ~verifier ~persistent_frontier ~persistent_root ~consensus_local_state","counters":[]},{"line":"         ~catchup_mode )","counters":[]},{"line":"  with","counters":[]},{"line":"  | best_tip, None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log info] \"Unable to load frontier; starting bootstrap\" ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      let%map initial_root_transition =","counters":[]},{"line":"        Persistent_frontier.(","counters":[]},{"line":"          with_instance_exn persistent_frontier ~f:Instance.get_root_transition)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        >>| Result.ok_or_failwith","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      in","counters":[]},{"line":"      start_bootstrap_controller","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~context:(module Context)","counters":[]},{"line":"        ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"        ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"        ~verified_transition_writer ~clear_reader ~transition_reader_ref","counters":[]},{"line":"        ~consensus_local_state ~transition_writer_ref ~frontier_w","counters":[]},{"line":"        ~persistent_root ~persistent_frontier ~initial_root_transition","counters":[]},{"line":"        ~catchup_mode ~best_seen_transition:best_tip","counters":[]},{"line":"  | best_tip, Some frontier -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match best_tip with","counters":[]},{"line":"      | Some best_tip","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        when is_transition_for_bootstrap","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"               ~context:(module Context)","counters":[]},{"line":"               frontier","counters":[]},{"line":"               (best_tip |> Envelope.Incoming.data) ->","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"          [%log info]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~metadata:","counters":[]},{"line":"              [ ( \"length\"","counters":[]},{"line":"                , `Int","counters":[]},{"line":"                    (Unsigned.UInt32.to_int","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                       ( Mina_block.blockchain_length","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                       @@ Validation.block best_tip.data ) ) )","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              ]","counters":[]},{"line":"            \"Network best tip is too new to catchup to (best_tip with \\","counters":[]},{"line":"             $length); starting bootstrap\" ;","counters":[]},{"line":"          let initial_root_transition =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Transition_frontier.(","counters":[]},{"line":"              Breadcrumb.validated_transition (root frontier))","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          in","counters":[]},{"line":"          let%map () = Transition_frontier.close ~loc:__LOC__ frontier in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          start_bootstrap_controller","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"            ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"            ~verified_transition_writer ~clear_reader ~transition_reader_ref","counters":[]},{"line":"            ~consensus_local_state ~transition_writer_ref ~frontier_w","counters":[]},{"line":"            ~persistent_root ~persistent_frontier ~initial_root_transition","counters":[]},{"line":"            ~catchup_mode ~best_seen_transition:(Some best_tip)","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Option.is_some best_tip then","counters":[]},{"line":"            [%log info]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ ( \"length\"","counters":[]},{"line":"                  , `Int","counters":[]},{"line":"                      (Unsigned.UInt32.to_int","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"                         ( Mina_block.blockchain_length","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                         @@ Validation.block (Option.value_exn best_tip).data ) )","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"                  )","counters":[]},{"line":"                ]","counters":[]},{"line":"              \"Network best tip is recent enough to catchup to (best_tip with \\","counters":[]},{"line":"               $length); syncing local state and starting participation\"","counters":[]},{"line":"          else","counters":[]},{"line":"            [%log info]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"              \"Successfully loaded frontier, but failed downloaded best tip \\","counters":[]},{"line":"               from network\" ;","counters":[]},{"line":"          let curr_best_tip = Transition_frontier.best_tip frontier in","counters":[]},{"line":"          let%map () =","counters":[]},{"line":"            match","counters":[]},{"line":"              Consensus.Hooks.required_local_state_sync","counters":[]},{"line":"                ~constants:precomputed_values.consensus_constants","counters":[]},{"line":"                ~consensus_state:","counters":[]},{"line":"                  (Transition_frontier.Breadcrumb.consensus_state curr_best_tip)","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                ~local_state:consensus_local_state","counters":[]},{"line":"            with","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log info] \"Local state already in sync\" ;","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                Deferred.unit","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | Some sync_jobs -> (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log info] \"Local state is out of sync; \" ;","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                match%map","counters":[]},{"line":"                  Consensus.Hooks.sync_local_state","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                    ~local_state:consensus_local_state","counters":[]},{"line":"                    ~context:(module Context)","counters":[]},{"line":"                    ~trust_system","counters":[]},{"line":"                    ~random_peers:(Mina_networking.random_peers network)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                    ~query_peer:","counters":[]},{"line":"                      { Consensus.Hooks.Rpcs.query =","counters":[]},{"line":"                          (fun peer rpc query ->","counters":[]},{"line":"                            Mina_networking.(","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                              query_peer network peer.peer_id","counters":[]},{"line":"                                (Rpcs.Consensus_rpc rpc) query) )","counters":[]},{"line":"                      }","counters":[]},{"line":"                    sync_jobs","counters":[]},{"line":"                with","counters":[]},{"line":"                | Error e ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Error.tag e ~tag:\"Local state sync failed\" |> Error.raise","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                | Ok () ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    () )","counters":[]},{"line":"          in","counters":[]},{"line":"          let collected_transitions = Option.to_list best_tip in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          start_transition_frontier_controller","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"            ~producer_transition_reader_ref ~producer_transition_writer_ref","counters":[]},{"line":"            ~verified_transition_writer ~clear_reader ~collected_transitions","counters":[]},{"line":"            ~transition_reader_ref ~transition_writer_ref ~frontier_w frontier )","counters":[]},{"line":"","counters":[]},{"line":"let wait_till_genesis ~logger ~time_controller","counters":[]},{"line":"    ~(precomputed_values : Precomputed_values.t) =","counters":[]},{"line":"  let module Time = Block_time in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let now = Time.now time_controller in","counters":[]},{"line":"  let consensus_constants = precomputed_values.consensus_constants in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let genesis_state_timestamp = consensus_constants.genesis_state_timestamp in","counters":[]},{"line":"  try","counters":[]},{"line":"    Consensus.Hooks.is_genesis_epoch ~constants:consensus_constants now","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    |> Fn.const Deferred.unit","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  with Invalid_argument _ ->","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"    let time_till_genesis = Time.diff genesis_state_timestamp now in","counters":[]},{"line":"    [%log warn]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ ( \"time_till_genesis\"","counters":[]},{"line":"          , `Int (Int64.to_int_exn (Time.Span.to_ms time_till_genesis)) )","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        ]","counters":[]},{"line":"      \"Node started before the chain start time: waiting $time_till_genesis \\","counters":[]},{"line":"       milliseconds before starting participation\" ;","counters":[]},{"line":"    let rec logger_loop () =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let%bind () = after (Time_ns.Span.of_sec 30.) in","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      let now = Time.now time_controller in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      try","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Hooks.is_genesis_epoch ~constants:consensus_constants now","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        |> Fn.const Deferred.unit","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      with Invalid_argument _ ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        let tm_remaining = Time.diff genesis_state_timestamp now in","counters":[]},{"line":"        [%log debug]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          \"Time before the chain start time. Waiting $tm_remaining \\","counters":[]},{"line":"           milliseconds before starting participation\"","counters":[]},{"line":"          ~metadata:","counters":[]},{"line":"            [ ( \"tm_remaining\"","counters":[]},{"line":"              , `Int (Int64.to_int_exn @@ Time.Span.to_ms tm_remaining) )","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"            ] ;","counters":[]},{"line":"        logger_loop ()","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    in","counters":[]},{"line":"    Time.Timeout.await ~timeout_duration:time_till_genesis time_controller","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      (logger_loop ())","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    |> Deferred.ignore_m","counters":[]},{"line":"","counters":[]},{"line":"let run ~context:(module Context : CONTEXT) ~trust_system ~verifier ~network","counters":[]},{"line":"    ~is_seed ~is_demo_mode ~time_controller ~consensus_local_state","counters":[]},{"line":"    ~persistent_root_location ~persistent_frontier_location","counters":[]},{"line":"    ~frontier_broadcast_pipe:(frontier_r, frontier_w) ~network_transition_reader","counters":[]},{"line":"    ~producer_transition_reader","counters":[]},{"line":"    ~most_recent_valid_block:","counters":[]},{"line":"      (most_recent_valid_block_reader, most_recent_valid_block_writer)","counters":[]},{"line":"    ~catchup_mode ~notify_online =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let initialization_finish_signal = Ivar.create () in","counters":[]},{"line":"  let clear_reader, clear_writer =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Strict_pipe.create ~name:\"clear\" Synchronous","counters":[]},{"line":"  in","counters":[]},{"line":"  let verified_transition_reader, verified_transition_writer =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let name = \"verified transitions\" in","counters":[]},{"line":"    create_bufferred_pipe ~name","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~f:(fun ( `Transition (head : Mina_block.Validated.t)","counters":[]},{"line":"              , _","counters":[]},{"line":"              , `Valid_cb valid_cb ) ->","counters":[]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Counter.inc_one Pipe.Drop_on_overflow.router_verified_transitions) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        Mina_block.handle_dropped_transition","counters":[]},{"line":"          (Mina_block.Validated.forget head |> With_hash.hash)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"          ~pipe_name:name ~logger ?valid_cb )","counters":[]},{"line":"      ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition_reader, transition_writer =","counters":[]},{"line":"    let name = \"transition pipe\" in","counters":[]},{"line":"    create_bufferred_pipe ~name","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~f:(fun (`Block block, `Valid_cb valid_cb) ->","counters":[]},{"line":"        Mina_metrics.(Counter.inc_one Pipe.Drop_on_overflow.router_transitions) ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        Mina_block.handle_dropped_transition","counters":[]},{"line":"          ( Network_peer.Envelope.Incoming.data block","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"          |> Validation.block_with_hash |> With_hash.hash )","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"          ?valid_cb ~pipe_name:name ~logger )","counters":[]},{"line":"      ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition_reader_ref = ref transition_reader in","counters":[]},{"line":"  let transition_writer_ref = ref transition_writer in","counters":[]},{"line":"  let producer_transition_reader_ref, producer_transition_writer_ref =","counters":[]},{"line":"    let reader, writer =","counters":[]},{"line":"      Strict_pipe.create ~name:\"producer transition\" Synchronous","counters":[]},{"line":"    in","counters":[]},{"line":"    (ref reader, ref writer)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  O1trace.background_thread \"transition_router\" (fun () ->","counters":[]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      @@ Strict_pipe.Reader.iter producer_transition_reader ~f:(fun x ->","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"             Strict_pipe.Writer.write !producer_transition_writer_ref x ) ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        wait_till_genesis ~logger ~time_controller ~precomputed_values","counters":[]},{"line":"      in","counters":[]},{"line":"      let valid_transition_reader, valid_transition_writer =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let name = \"valid transitions\" in","counters":[]},{"line":"        create_bufferred_pipe ~name","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          ~f:(fun head ->","counters":[]},{"line":"            let `Block block, `Valid_cb valid_cb = head in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            Mina_metrics.(","counters":[]},{"line":"              Counter.inc_one Pipe.Drop_on_overflow.router_valid_transitions) ;","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"            Mina_block.handle_dropped_transition","counters":[]},{"line":"              ( Network_peer.Envelope.Incoming.data block","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"              |> Validation.block_with_hash |> With_hash.hash )","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"              ~valid_cb ~pipe_name:name ~logger )","counters":[]},{"line":"          ()","counters":[]},{"line":"      in","counters":[]},{"line":"      Initial_validator.run ~logger ~trust_system ~verifier","counters":[]},{"line":"        ~transition_reader:network_transition_reader ~valid_transition_writer","counters":[]},{"line":"        ~initialization_finish_signal ~precomputed_values ;","counters":[]},{"line":"      let persistent_frontier =","counters":[]},{"line":"        Transition_frontier.Persistent_frontier.create ~logger ~verifier","counters":[]},{"line":"          ~time_controller ~directory:persistent_frontier_location","counters":[]},{"line":"      in","counters":[]},{"line":"      let persistent_root =","counters":[]},{"line":"        Transition_frontier.Persistent_root.create ~logger","counters":[]},{"line":"          ~directory:persistent_root_location","counters":[]},{"line":"          ~ledger_depth:(Precomputed_values.ledger_depth precomputed_values)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%map () =","counters":[]},{"line":"        initialize","counters":[]},{"line":"          ~context:(module Context)","counters":[]},{"line":"          ~network ~is_seed ~is_demo_mode ~verifier ~trust_system","counters":[]},{"line":"          ~persistent_frontier ~persistent_root ~time_controller ~frontier_w","counters":[]},{"line":"          ~producer_transition_reader_ref ~catchup_mode","counters":[]},{"line":"          ~producer_transition_writer_ref ~clear_reader","counters":[]},{"line":"          ~verified_transition_writer ~transition_reader_ref","counters":[]},{"line":"          ~transition_writer_ref ~most_recent_valid_block_writer","counters":[]},{"line":"          ~consensus_local_state ~notify_online","counters":[]},{"line":"      in","counters":[]},{"line":"      Ivar.fill_if_empty initialization_finish_signal () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let valid_transition_reader1, valid_transition_reader2 =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Strict_pipe.Reader.Fork.two valid_transition_reader","counters":[]},{"line":"      in","counters":[]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      @@ Strict_pipe.Reader.iter valid_transition_reader1","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"           ~f:(fun (`Block enveloped_transition, _) ->","counters":[]},{"line":"             let incoming_transition =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Envelope.Incoming.data enveloped_transition","counters":[]},{"line":"             in","counters":[]},{"line":"             let current_transition =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Broadcast_pipe.Reader.peek most_recent_valid_block_reader","counters":[]},{"line":"             in","counters":[]},{"line":"             if","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               Consensus.Hooks.equal_select_status `Take","counters":[]},{"line":"                 (Consensus.Hooks.select","counters":[]},{"line":"                    ~context:(module Context)","counters":[]},{"line":"                    ~existing:","counters":[]},{"line":"                      ( Validation.block_with_hash current_transition","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                      |> With_hash.map ~f:Mina_block.consensus_state )","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                    ~candidate:","counters":[]},{"line":"                      ( Validation.block_with_hash incoming_transition","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                      |> With_hash.map ~f:Mina_block.consensus_state ) )","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             then","counters":[]},{"line":"               (* TODO: do we need to push valid_cb? *)","counters":[]},{"line":"               Broadcast_pipe.Writer.write most_recent_valid_block_writer","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 incoming_transition","counters":[]},{"line":"             else Deferred.unit ) ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      @@ Strict_pipe.Reader.iter_without_pushback valid_transition_reader2","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"           ~f:(fun (`Block enveloped_transition, `Valid_cb vc) ->","counters":[]},{"line":"             don't_wait_for","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             @@ let%map () =","counters":[]},{"line":"                  let incoming_transition =","counters":[]},{"line":"                    Envelope.Incoming.data enveloped_transition","counters":[]},{"line":"                  in","counters":[]},{"line":"                  match Broadcast_pipe.Reader.peek frontier_r with","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  | Some frontier ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      if","counters":[]},{"line":"                        is_transition_for_bootstrap","counters":[]},{"line":"                          ~context:(module Context)","counters":[]},{"line":"                          frontier incoming_transition","counters":[]},{"line":"                      then (","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                        Strict_pipe.Writer.kill !transition_writer_ref ;","counters":[]},{"line":"                        Strict_pipe.Writer.kill !producer_transition_writer_ref ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                        let initial_root_transition =","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          Transition_frontier.(","counters":[]},{"line":"                            Breadcrumb.validated_transition (root frontier))","counters":[{"col_start":58,"col_end":58,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"                        in","counters":[]},{"line":"                        let%bind () =","counters":[]},{"line":"                          Strict_pipe.Writer.write clear_writer `Clear","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                        in","counters":[]},{"line":"                        let%map () =","counters":[]},{"line":"                          Transition_frontier.close ~loc:__LOC__ frontier","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                        in","counters":[]},{"line":"                        start_bootstrap_controller","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          ~context:(module Context)","counters":[]},{"line":"                          ~trust_system ~verifier ~network ~time_controller","counters":[]},{"line":"                          ~producer_transition_reader_ref","counters":[]},{"line":"                          ~producer_transition_writer_ref","counters":[]},{"line":"                          ~verified_transition_writer ~clear_reader","counters":[]},{"line":"                          ~transition_reader_ref ~transition_writer_ref","counters":[]},{"line":"                          ~consensus_local_state ~frontier_w ~persistent_root","counters":[]},{"line":"                          ~persistent_frontier ~initial_root_transition","counters":[]},{"line":"                          ~best_seen_transition:(Some enveloped_transition)","counters":[]},{"line":"                          ~catchup_mode )","counters":[]},{"line":"                      else Deferred.unit","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  | None ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      Deferred.unit","counters":[]},{"line":"                in","counters":[]},{"line":"                Strict_pipe.Writer.write !transition_writer_ref","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (`Block enveloped_transition, `Valid_cb (Some vc)) ) ) ;","counters":[]},{"line":"  (verified_transition_reader, initialization_finish_signal)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":59,"col_end":59,"count":2}]}]}