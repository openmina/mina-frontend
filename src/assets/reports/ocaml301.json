{"filename":"src/lib/daemon_rpcs/types.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"module Git_sha = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = string [@@deriving sexp, to_yojson, equal]","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0},{"col_start":56,"col_end":56,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t [@@deriving sexp, to_yojson, equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"  let of_string s = s","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Status = struct","counters":[]},{"line":"  let digest_entries ~title entries =","counters":[]},{"line":"    let max_key_length =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map ~f:(fun (s, _) -> String.length s) entries","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      |> List.max_elt ~compare:Int.compare","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      |> Option.value ~default:0","counters":[]},{"line":"    in","counters":[]},{"line":"    let output =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map entries ~f:(fun (s, x) ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          let padding =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            String.init (max_key_length - String.length s) ~f:(fun _ -> ' ')","counters":[{"col_start":54,"col_end":54,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"          in","counters":[]},{"line":"          sprintf \"%s: %s %s\" s padding x )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      |> String.concat ~sep:\"\\n\"","counters":[]},{"line":"    in","counters":[]},{"line":"    title ^ \"\\n\" ^ output ^ \"\\n\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let summarize_report","counters":[]},{"line":"      { Perf_histograms.Report.values; intervals; overflow; underflow } =","counters":[]},{"line":"    (* Show the largest 3 buckets *)","counters":[]},{"line":"    let zipped = List.zip_exn values intervals in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let best =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.sort zipped ~compare:(fun (a, _) (a', _) -> -1 * Int.compare a a')","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"      |> Fn.flip List.take 4","counters":[]},{"line":"    in","counters":[]},{"line":"    let msgs =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.map best ~f:(fun (v, (lo, hi)) ->","counters":[]},{"line":"          Printf.sprintf","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            !\"(%{sexp: Time.Span.t}, %{sexp: Time.Span.t}): %d\"","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"            lo hi v )","counters":[]},{"line":"    in","counters":[]},{"line":"    let total = List.sum (module Int) values ~f:Fn.id in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.fold msgs","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"      ~init:","counters":[]},{"line":"        (Printf.sprintf \"\\n\\tTotal: %d (overflow:%d) (underflow:%d)\\n\\t\" total","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"           overflow underflow ) ~f:(fun acc x -> acc ^ \"\\n\\t\" ^ x)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"    ^ \"\\n\\t...\"","counters":[]},{"line":"","counters":[]},{"line":"  module Rpc_timings = struct","counters":[]},{"line":"    module Rpc_pair = struct","counters":[]},{"line":"      type 'a t = { dispatch : 'a; impl : 'a }","counters":[{"col_start":6,"col_end":6,"count":5},{"col_start":14,"col_end":14,"count":4},{"col_start":20,"col_end":20,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":55,"col_end":55,"count":11}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { get_staged_ledger_aux : Perf_histograms.Report.t option Rpc_pair.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"      ; answer_sync_ledger_query : Perf_histograms.Report.t option Rpc_pair.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"      ; get_ancestry : Perf_histograms.Report.t option Rpc_pair.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"      ; get_transition_chain_proof : Perf_histograms.Report.t option Rpc_pair.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"      ; get_transition_chain : Perf_histograms.Report.t option Rpc_pair.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":53,"col_end":53,"count":4}]},{"line":"","counters":[]},{"line":"    let to_text s =","counters":[]},{"line":"      let entries =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let add_rpcs ~name { Rpc_pair.dispatch; impl } acc =","counters":[]},{"line":"          let name k =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let go s = sprintf \"%s (%s)\" name s in","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            match k with `Dispatch -> go \"dispatch\" | `Impl -> go \"impl\"","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          in","counters":[]},{"line":"          let maybe_cons ~f x xs =","counters":[]},{"line":"            match x with Some x -> f x :: xs | None -> xs","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"          in","counters":[]},{"line":"          maybe_cons","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            ~f:(fun dispatch -> (name `Dispatch, summarize_report dispatch))","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"            dispatch acc","counters":[]},{"line":"          |> maybe_cons","counters":[]},{"line":"               ~f:(fun impl -> (name `Impl, summarize_report impl))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"               impl","counters":[]},{"line":"        in","counters":[]},{"line":"        let f x = Field.get x s in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        Fields.fold ~init:[]","counters":[]},{"line":"          ~get_staged_ledger_aux:(fun acc x ->","counters":[]},{"line":"            add_rpcs ~name:\"Get Staged Ledger Aux\" (f x) acc )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ~answer_sync_ledger_query:(fun acc x ->","counters":[]},{"line":"            add_rpcs ~name:\"Answer Sync Ledger Query\" (f x) acc )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          ~get_ancestry:(fun acc x -> add_rpcs ~name:\"Get Ancestry\" (f x) acc)","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"          ~get_transition_chain_proof:(fun acc x ->","counters":[]},{"line":"            add_rpcs ~name:\"Get transition chain proof\" (f x) acc )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          ~get_transition_chain:(fun acc x ->","counters":[]},{"line":"            add_rpcs ~name:\"Get transition chain\" (f x) acc )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        |> List.rev","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      in","counters":[]},{"line":"      digest_entries ~title:\"RPCs\" entries","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Histograms = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { rpc_timings : Rpc_timings.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      ; external_transition_latency : Perf_histograms.Report.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      ; accepted_transition_local_latency : Perf_histograms.Report.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"      ; accepted_transition_remote_latency : Perf_histograms.Report.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"      ; snark_worker_transition_time : Perf_histograms.Report.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"      ; snark_worker_merge_time : Perf_histograms.Report.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":53,"col_end":53,"count":4}]},{"line":"","counters":[]},{"line":"    let to_text s =","counters":[]},{"line":"      let entries =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let f x = Field.get x s in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        Fields.fold ~init:[]","counters":[]},{"line":"          ~rpc_timings:(fun acc x ->","counters":[]},{"line":"            (\"RPC Timings\", Rpc_timings.to_text (f x)) :: acc )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"          ~external_transition_latency:(fun acc x ->","counters":[]},{"line":"            match f x with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                acc","counters":[]},{"line":"            | Some report ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (\"Block Latencies (hist.)\", summarize_report report) :: acc )","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"          ~accepted_transition_local_latency:(fun acc x ->","counters":[]},{"line":"            match f x with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                acc","counters":[]},{"line":"            | Some report ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( \"Accepted local block Latencies (hist.)\"","counters":[]},{"line":"                , summarize_report report )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                :: acc )","counters":[]},{"line":"          ~accepted_transition_remote_latency:(fun acc x ->","counters":[]},{"line":"            match f x with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                acc","counters":[]},{"line":"            | Some report ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( \"Accepted remote block Latencies (hist.)\"","counters":[]},{"line":"                , summarize_report report )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                :: acc )","counters":[]},{"line":"          ~snark_worker_transition_time:(fun acc x ->","counters":[]},{"line":"            match f x with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                acc","counters":[]},{"line":"            | Some report ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (\"Snark Worker a->b (hist.)\", summarize_report report) :: acc )","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"          ~snark_worker_merge_time:(fun acc x ->","counters":[]},{"line":"            match f x with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                acc","counters":[]},{"line":"            | Some report ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (\"Snark Worker Merge (hist.)\", summarize_report report) :: acc","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"            )","counters":[]},{"line":"      in","counters":[]},{"line":"      digest_entries ~title:\"Performance Histograms\" entries","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Next_producer_timing = struct","counters":[]},{"line":"    type slot =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":0},{"col_start":12,"col_end":12,"count":2}]},{"line":"      { slot : Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"      ; global_slot_since_genesis : Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving to_yojson, fields, bin_io_unversioned]","counters":[{"col_start":53,"col_end":53,"count":4}]},{"line":"","counters":[]},{"line":"    (* time is the start-time of for_slot.slot*)","counters":[]},{"line":"    type producing_time = { time : Block_time.Stable.Latest.t; for_slot : slot }","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":0},{"col_start":22,"col_end":22,"count":2},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":63,"col_end":63,"count":0},{"col_start":74,"col_end":74,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"    [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":53,"col_end":53,"count":4}]},{"line":"","counters":[]},{"line":"    type timing =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":14,"col_end":14,"count":2}]},{"line":"      | Check_again of Block_time.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      | Produce of producing_time","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      | Produce_now of producing_time","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      | Evaluating_vrf of Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"    [@@deriving to_yojson, bin_io_unversioned]","counters":[{"col_start":45,"col_end":45,"count":4}]},{"line":"","counters":[]},{"line":"    type t = { generated_from_consensus_at : slot; timing : timing }","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2},{"col_start":45,"col_end":45,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"    [@@deriving to_yojson, bin_io_unversioned]","counters":[{"col_start":45,"col_end":45,"count":4}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Metrics = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { block_production_delay : int list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      ; transaction_pool_diff_received : int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; transaction_pool_diff_broadcasted : int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      ; transactions_added_to_pool : int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      ; transaction_pool_size : int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":53,"col_end":53,"count":4}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Make_entries (FieldT : sig","counters":[]},{"line":"    type 'a t","counters":[]},{"line":"","counters":[]},{"line":"    val get : 'a t -> 'a","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let map_entry (name : string) ~f field = Some (name, f @@ FieldT.get field)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"    let string_entry (name : string) (field : string FieldT.t) =","counters":[]},{"line":"      map_entry ~f:Fn.id name field","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let int_entry = map_entry ~f:Int.to_string","counters":[]},{"line":"","counters":[]},{"line":"    let bool_entry = map_entry ~f:Bool.to_string","counters":[]},{"line":"","counters":[]},{"line":"    let option_entry ~(f : 'a -> string) (name : string)","counters":[]},{"line":"        (field : 'a option FieldT.t) =","counters":[]},{"line":"      Option.map (FieldT.get field) ~f:(fun x -> (name, f x))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"    let string_option_entry = option_entry ~f:Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let int_option_entry = option_entry ~f:Int.to_string","counters":[]},{"line":"","counters":[]},{"line":"    let list_mapper ~to_string list =","counters":[]},{"line":"      let len = List.length list in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let list_str =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if len > 0 then \" \" ^ List.to_string ~f:to_string list else \"\"","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"      in","counters":[]},{"line":"      Printf.sprintf \"%d%s\" len list_str","counters":[]},{"line":"","counters":[]},{"line":"    let list_string_entry name ~to_string =","counters":[]},{"line":"      map_entry name ~f:(list_mapper ~to_string)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let num_accounts = int_option_entry \"Global number of accounts\"","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let blockchain_length = int_option_entry \"Block height\"","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    let highest_block_length_received = int_entry \"Max observed block height\"","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    let highest_unvalidated_block_length_received =","counters":[]},{"line":"      int_entry \"Max observed unvalidated block height\"","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let uptime_secs =","counters":[]},{"line":"      map_entry \"Local uptime\" ~f:(fun secs ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          Time.Span.to_string (Time.Span.of_int_sec secs) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"    let ledger_merkle_root = string_option_entry \"Ledger Merkle root\"","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"    let staged_ledger_hash = string_option_entry \"Staged-ledger hash\"","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"    let state_hash = string_option_entry \"Protocol state hash\"","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let chain_id = string_entry \"Chain id\"","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let commit_id = string_entry \"Git SHA-1\"","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"    let conf_dir = string_entry \"Configuration directory\"","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let peers field =","counters":[]},{"line":"      Some (\"Peers\", string_of_int @@ List.length (FieldT.get field))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"    let user_commands_sent = int_entry \"User_commands sent\"","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let snark_worker =","counters":[]},{"line":"      map_entry \"SNARK worker\" ~f:(Option.value ~default:\"None\")","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let snark_work_fee = int_entry \"SNARK work fee\"","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"    let sync_status = map_entry \"Sync status\" ~f:Sync_status.to_string","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let block_production_keys =","counters":[]},{"line":"      list_string_entry \"Block producers running\" ~to_string:Fn.id","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    let coinbase_receiver =","counters":[]},{"line":"      map_entry \"Coinbase receiver\" ~f:(function","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            \"Block producer\"","counters":[]},{"line":"        | Some pk ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            pk )","counters":[]},{"line":"","counters":[]},{"line":"    let histograms = option_entry \"Histograms\" ~f:Histograms.to_text","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"    let next_block_production =","counters":[]},{"line":"      option_entry \"Next block will be produced in\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~f:(fun (producer_timing : Next_producer_timing.t) ->","counters":[]},{"line":"          let str time =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let open Block_time in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let current_time =","counters":[]},{"line":"              (* TODO: We will temporarily have to create a time controller","counters":[]},{"line":"                  until the inversion relationship between GraphQL and the RPC code inverts *)","counters":[]},{"line":"              Block_time.now","counters":[]},{"line":"              @@ Block_time.Controller.basic ~logger:(Logger.null ())","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"            in","counters":[]},{"line":"            let diff = diff time current_time in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            if Block_time.(time > current_time) then","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf \"in %s\" (Span.to_string_hum diff)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"            else \"Producing a block now...\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          in","counters":[]},{"line":"          let slot_str (slot : Next_producer_timing.slot) =","counters":[]},{"line":"            sprintf \"slot: %s slot-since-genesis: %s\"","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (Mina_numbers.Global_slot.to_string slot.slot)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"              (Mina_numbers.Global_slot.to_string slot.global_slot_since_genesis)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          in","counters":[]},{"line":"          let generated_from =","counters":[]},{"line":"            sprintf \"Generated from consensus at %s\"","counters":[]},{"line":"              (slot_str producer_timing.generated_from_consensus_at)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          in","counters":[]},{"line":"          match producer_timing.timing with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Check_again time ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf \"None this epoch… checking at %s (%s)\" (str time)","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                generated_from","counters":[]},{"line":"          | Evaluating_vrf last_checked_slot ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf \"Evaluating VRF… Last checked global slot %s (%s)\"","counters":[]},{"line":"                (Mina_numbers.Global_slot.to_string last_checked_slot)","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                generated_from","counters":[]},{"line":"          | Produce { time; for_slot } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf \"%s for %s (%s)\" (str time) (slot_str for_slot)","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"                generated_from","counters":[]},{"line":"          | Produce_now { for_slot; _ } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              sprintf \"Now (for %s %s)\" (slot_str for_slot) generated_from )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    let consensus_time_best_tip =","counters":[]},{"line":"      option_entry \"Best tip consensus time\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~f:Consensus.Data.Consensus_time.to_string_hum","counters":[]},{"line":"","counters":[]},{"line":"    let global_slot_since_genesis_best_tip =","counters":[]},{"line":"      int_option_entry \"Best tip global slot (across all hard-forks)\"","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    let consensus_time_now =","counters":[]},{"line":"      map_entry \"Consensus time now\"","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        ~f:Consensus.Data.Consensus_time.to_string_hum","counters":[]},{"line":"","counters":[]},{"line":"    let consensus_mechanism = string_entry \"Consensus mechanism\"","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"    let consensus_configuration =","counters":[]},{"line":"      let ms_to_string i =","counters":[]},{"line":"        float_of_int i |> Time.Span.of_ms |> Time.Span.to_string","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      in","counters":[]},{"line":"      (* Time.to_string is safe here because this is for display. *)","counters":[]},{"line":"      let time_to_string = Fn.compose Time.to_string Block_time.to_time_exn in","counters":[]},{"line":"      let render conf =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let fmt_field name op field = (name, op (Field.get field conf)) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        Consensus.Configuration.Fields.to_list","counters":[]},{"line":"          ~delta:(fmt_field \"Delta\" string_of_int)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"          ~k:(fmt_field \"k\" string_of_int)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          ~slots_per_epoch:(fmt_field \"Slots per epoch\" string_of_int)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          ~slot_duration:(fmt_field \"Slot duration\" ms_to_string)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          ~epoch_duration:(fmt_field \"Epoch duration\" ms_to_string)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          ~acceptable_network_delay:","counters":[]},{"line":"            (fmt_field \"Acceptable network delay\" ms_to_string)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"          ~genesis_state_timestamp:","counters":[]},{"line":"            (fmt_field \"Chain start timestamp\" time_to_string)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        |> List.map ~f:(fun (s, v) -> (\"\\t\" ^ s, v))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        |> digest_entries ~title:\"\"","counters":[]},{"line":"      in","counters":[]},{"line":"      map_entry \"Consensus configuration\" ~f:render","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let addrs_and_ports =","counters":[]},{"line":"      let render conf =","counters":[]},{"line":"        let fmt_field name op field = [ (name, op (Field.get field conf)) ] in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        Node_addrs_and_ports.Display.Stable.V1.Fields.to_list","counters":[]},{"line":"          ~external_ip:(fmt_field \"External IP\" Fn.id)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"          ~bind_ip:(fmt_field \"Bind IP\" Fn.id)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          ~client_port:(fmt_field \"Client port\" string_of_int)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"          ~libp2p_port:(fmt_field \"Libp2p port\" string_of_int)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"          ~peer:(fun field ->","counters":[]},{"line":"            let peer = Field.get field conf in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            match peer with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Some peer ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [ (\"Libp2p PeerID\", peer.peer_id) ]","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [] )","counters":[]},{"line":"        |> List.concat","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        |> List.map ~f:(fun (s, v) -> (\"\\t\" ^ s, v))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        |> digest_entries ~title:\"\"","counters":[]},{"line":"      in","counters":[]},{"line":"      map_entry \"Addresses and ports\" ~f:render","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let catchup_status =","counters":[]},{"line":"      let render xs =","counters":[]},{"line":"        List.map xs ~f:(fun (s, n) ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"            let s =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match","counters":[]},{"line":"                (s : Transition_frontier.Full_catchup_tree.Node.State.Enum.t)","counters":[]},{"line":"              with","counters":[]},{"line":"              | Failed ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"Failed\"","counters":[]},{"line":"              | To_download ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"To download\"","counters":[]},{"line":"              | To_initial_validate ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"To initial validate\"","counters":[]},{"line":"              | To_build_breadcrumb ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"To build breadcrumb\"","counters":[]},{"line":"              | Root ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"Root\"","counters":[]},{"line":"              | Finished ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"Finished\"","counters":[]},{"line":"              | To_verify ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"To verify\"","counters":[]},{"line":"              | Wait_for_parent ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  \"Waiting for parent to finish\"","counters":[]},{"line":"            in","counters":[]},{"line":"            (\"\\t\" ^ s, Int.to_string n) )","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        |> digest_entries ~title:\"\"","counters":[]},{"line":"      in","counters":[]},{"line":"      option_entry \"Catchup status\" ~f:render","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let metrics =","counters":[]},{"line":"      let render conf =","counters":[]},{"line":"        let fmt_field name op field = [ (name, op (Field.get field conf)) ] in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        let block_production_delay =","counters":[]},{"line":"          fmt_field \"block_production_delay\"","counters":[]},{"line":"          @@ list_mapper ~to_string:string_of_int","counters":[]},{"line":"        in","counters":[]},{"line":"        let transaction_pool_diff_received =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fmt_field \"transaction_pool_diff_received\" string_of_int","counters":[]},{"line":"        in","counters":[]},{"line":"        let transaction_pool_diff_broadcasted =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fmt_field \"transaction_pool_diff_broadcasted\" string_of_int","counters":[]},{"line":"        in","counters":[]},{"line":"        let transactions_added_to_pool =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fmt_field \"transactions_added_to_pool\" string_of_int","counters":[]},{"line":"        in","counters":[]},{"line":"        let transaction_pool_size =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fmt_field \"transaction_pool_size\" string_of_int","counters":[]},{"line":"        in","counters":[]},{"line":"        Metrics.Fields.to_list ~block_production_delay","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~transaction_pool_diff_received ~transaction_pool_diff_broadcasted","counters":[]},{"line":"          ~transactions_added_to_pool ~transaction_pool_size","counters":[]},{"line":"        |> List.concat","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        |> List.map ~f:(fun (s, v) -> (\"\\t\" ^ s, v))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        |> digest_entries ~title:\"\"","counters":[]},{"line":"      in","counters":[]},{"line":"      map_entry \"Metrics\" ~f:render","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { num_accounts : int option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    ; blockchain_length : int option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; highest_block_length_received : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; highest_unvalidated_block_length_received : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    ; uptime_secs : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; ledger_merkle_root : string option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"    ; state_hash : string option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    ; chain_id : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; commit_id : Git_sha.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; conf_dir : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; peers : Network_peer.Peer.Display.Stable.Latest.t list","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    ; user_commands_sent : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; snark_worker : string option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; snark_work_fee : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    ; sync_status : Sync_status.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    ; catchup_status :","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.Full_catchup_tree.Node.State.Enum.t * int) list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":63,"col_end":63,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":69,"col_end":69,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"        option","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    ; block_production_keys : string list","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; coinbase_receiver : string option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    ; histograms : Histograms.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    ; consensus_time_best_tip :","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Data.Consensus_time.Stable.Latest.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    ; global_slot_since_genesis_best_tip : int option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    ; next_block_production : Next_producer_timing.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    ; consensus_time_now : Consensus.Data.Consensus_time.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"    ; consensus_mechanism : string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; consensus_configuration : Consensus.Configuration.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    ; addrs_and_ports : Node_addrs_and_ports.Display.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"    ; metrics : Metrics.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving to_yojson, bin_io_unversioned, fields]","counters":[{"col_start":51,"col_end":51,"count":4}]},{"line":"","counters":[]},{"line":"  let entries (s : t) =","counters":[]},{"line":"    let module M = Make_entries (struct","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      type nonrec 'a t = ([ `Read | `Set_and_create ], t, 'a) Field.t_with_perm","counters":[]},{"line":"","counters":[]},{"line":"      let get field = Field.get field s","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    end) in","counters":[]},{"line":"    let open M in","counters":[]},{"line":"    Fields.to_list ~sync_status ~num_accounts ~blockchain_length","counters":[]},{"line":"      ~highest_unvalidated_block_length_received ~highest_block_length_received","counters":[]},{"line":"      ~uptime_secs ~ledger_merkle_root ~state_hash ~chain_id ~commit_id","counters":[]},{"line":"      ~conf_dir ~peers ~user_commands_sent ~snark_worker ~block_production_keys","counters":[]},{"line":"      ~coinbase_receiver ~histograms ~consensus_time_best_tip","counters":[]},{"line":"      ~global_slot_since_genesis_best_tip ~consensus_time_now","counters":[]},{"line":"      ~consensus_mechanism ~consensus_configuration ~next_block_production","counters":[]},{"line":"      ~snark_work_fee ~addrs_and_ports ~catchup_status ~metrics","counters":[]},{"line":"    |> List.filter_map ~f:Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let to_text (t : t) =","counters":[]},{"line":"    let title = \"Mina daemon status\\n-----------------------------------\\n\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    digest_entries ~title (entries t)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}