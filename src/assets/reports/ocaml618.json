{"filename":"src/lib/crypto/kimchi_backend/common/scalar_challenge.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type 'f t = 'f Kimchi_types.scalar_challenge = { inner : 'f }","counters":[{"col_start":4,"col_end":4,"count":265},{"col_start":12,"col_end":12,"count":4},{"col_start":53,"col_end":53,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"    [@@deriving sexp, compare, equal, yojson, hash]","counters":[{"col_start":50,"col_end":50,"count":11}]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let create t = { inner = t }","counters":[{"col_start":15,"col_end":15,"count":31}]},{"line":"","counters":[]},{"line":"let typ f =","counters":[]},{"line":"  let there { inner = x } = x in","counters":[{"col_start":2,"col_end":2,"count":2},{"col_start":28,"col_end":28,"count":0}]},{"line":"  let back x = create x in","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"  Snarky_backendless.Typ.(transport_var (transport f ~there ~back) ~there ~back)","counters":[{"col_start":49,"col_end":49,"count":2}]},{"line":"","counters":[]},{"line":"let map { inner = x } ~f = create (f x)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":38,"col_end":38,"count":2}]}]}