{"filename":"src/lib/node_addrs_and_ports/node_addrs_and_ports.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"(** Network information for speaking to this daemon. *)","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":5,"col_end":5,"count":0}]},{"line":"  { external_ip : Unix.Inet_addr.Blocking_sexp.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  ; bind_ip : Unix.Inet_addr.Blocking_sexp.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        (** When peer is [None], the peer_id will be auto-generated and this field","counters":[]},{"line":"      replaced with [Some] after libp2p initialization. *)","counters":[]},{"line":"  ; mutable peer : Peer.Stable.Latest.t option","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  ; libp2p_port : int","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  ; client_port : int","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving fields, sexp]","counters":[]},{"line":"","counters":[]},{"line":"module Display = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { external_ip : string","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; bind_ip : string","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; peer : Peer.Display.Stable.V1.t option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        ; libp2p_port : int","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ; client_port : int","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving fields, yojson, sexp]","counters":[{"col_start":38,"col_end":38,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let to_display (t : t) =","counters":[]},{"line":"  Display.","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { external_ip = Unix.Inet_addr.to_string t.external_ip","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    ; bind_ip = Unix.Inet_addr.to_string t.bind_ip","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"    ; peer = Option.map ~f:Peer.to_display t.peer","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; libp2p_port = t.libp2p_port","counters":[]},{"line":"    ; client_port = t.client_port","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"let of_display (d : Display.t) : t =","counters":[]},{"line":"  { external_ip = Unix.Inet_addr.of_string d.external_ip","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"  ; bind_ip = Unix.Inet_addr.of_string d.bind_ip","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  ; peer = Option.map ~f:Peer.of_display d.peer","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  ; libp2p_port = d.libp2p_port","counters":[]},{"line":"  ; client_port = d.client_port","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let to_multiaddr (t : t) =","counters":[]},{"line":"  match t.peer with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Some peer ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Some","counters":[]},{"line":"        (sprintf \"/ip4/%s/tcp/%d/p2p/%s\"","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"           (Unix.Inet_addr.to_string t.external_ip)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           t.libp2p_port peer.peer_id )","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      None","counters":[]},{"line":"","counters":[]},{"line":"let to_multiaddr_exn t =","counters":[]},{"line":"  Option.value_exn","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~message:\"cannot format peer as multiaddr before libp2p key generated\"","counters":[]},{"line":"    (to_multiaddr t)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"let to_yojson = Fn.compose Display.Stable.V1.to_yojson to_display","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"let to_peer_exn : t -> Peer.t = function","counters":[]},{"line":"  | { peer = Some peer; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      peer","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith \"to_peer_exn: no peer yet\"","counters":[{"col_start":40,"col_end":40,"count":2}]}]}