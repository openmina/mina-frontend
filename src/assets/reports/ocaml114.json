{"filename":"src/lib/mina_base/verification_key_wire.ml","lines":[{"line":"(* verification_key_wire.ml *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Zkapp_basic","counters":[]},{"line":"","counters":[]},{"line":"(* the digest functions are declared locally in Zkapp_account, which depends on","counters":[]},{"line":"   this module; the definitions here avoid a cyclic dependency","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"let digest_vk (t : Side_loaded_verification_key.t) =","counters":[]},{"line":"  Random_oracle.(","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    hash ~init:Hash_prefix_states.side_loaded_vk","counters":[]},{"line":"      (pack_input (Side_loaded_verification_key.to_input t)))","counters":[{"col_start":16,"col_end":16,"count":1},{"col_start":55,"col_end":55,"count":1}]},{"line":"","counters":[]},{"line":"let dummy_vk_hash =","counters":[]},{"line":"  Memo.unit (fun () -> digest_vk Side_loaded_verification_key.dummy)","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"[%%versioned_binable","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    module T = struct","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      type t = (Side_loaded_verification_key.t, F.t) With_hash.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      [@@deriving sexp, yojson, equal, compare, hash]","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"","counters":[]},{"line":"    include T","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    module M = struct","counters":[]},{"line":"      type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"      (* don't send hash over the wire; restore hash on receipt *)","counters":[]},{"line":"","counters":[]},{"line":"      let to_binable (t : t) = t.data","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"      let of_binable vk : t =","counters":[]},{"line":"        let data = vk in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let hash = digest_vk vk in","counters":[]},{"line":"        { data; hash }","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include","counters":[]},{"line":"      Binable.Of_binable_without_uuid","counters":[]},{"line":"        (Side_loaded_verification_key.Stable.V2)","counters":[]},{"line":"        (M)","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":3,"col_end":3,"count":1}]}]}