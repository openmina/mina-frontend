{"filename":"src/lib/transition_frontier_controller/transition_frontier_controller.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let run ~context:(module Context : CONTEXT) ~trust_system ~verifier ~network","counters":[]},{"line":"    ~time_controller ~collected_transitions ~frontier ~network_transition_reader","counters":[]},{"line":"    ~producer_transition_reader ~clear_reader =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let valid_transition_pipe_capacity = 50 in","counters":[]},{"line":"  let start_time = Time.now () in","counters":[]},{"line":"  let f_drop_head name head valid_cb =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let block : Mina_block.initial_valid_block =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Network_peer.Envelope.Incoming.data @@ Cache_lib.Cached.peek head","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"    in","counters":[]},{"line":"    Mina_block.handle_dropped_transition","counters":[]},{"line":"      (Validation.block_with_hash block |> With_hash.hash)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"      ?valid_cb ~pipe_name:name ~logger","counters":[]},{"line":"  in","counters":[]},{"line":"  let valid_transition_reader, valid_transition_writer =","counters":[]},{"line":"    let name = \"valid transitions\" in","counters":[]},{"line":"    Strict_pipe.create ~name","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      (Buffered","counters":[]},{"line":"         ( `Capacity valid_transition_pipe_capacity","counters":[]},{"line":"         , `Overflow","counters":[]},{"line":"             (Drop_head","counters":[]},{"line":"                (fun (`Block head, `Valid_cb vc) ->","counters":[]},{"line":"                  Mina_metrics.(","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Counter.inc_one","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                      Pipe.Drop_on_overflow","counters":[]},{"line":"                      .transition_frontier_valid_transitions) ;","counters":[]},{"line":"                  f_drop_head name head vc ) ) ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  let primary_transition_pipe_capacity =","counters":[]},{"line":"    valid_transition_pipe_capacity + List.length collected_transitions","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"  in","counters":[]},{"line":"  (* Ok to drop on overflow- catchup will be triggered if required*)","counters":[]},{"line":"  let primary_transition_reader, primary_transition_writer =","counters":[]},{"line":"    let name = \"primary transitions\" in","counters":[]},{"line":"    Strict_pipe.create ~name","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      (Buffered","counters":[]},{"line":"         ( `Capacity primary_transition_pipe_capacity","counters":[]},{"line":"         , `Overflow","counters":[]},{"line":"             (Drop_head","counters":[]},{"line":"                (fun (`Block head, `Valid_cb vc) ->","counters":[]},{"line":"                  Mina_metrics.(","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Counter.inc_one","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                      Pipe.Drop_on_overflow","counters":[]},{"line":"                      .transition_frontier_primary_transitions) ;","counters":[]},{"line":"                  f_drop_head name head vc ) ) ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  let processed_transition_reader, processed_transition_writer =","counters":[]},{"line":"    Strict_pipe.create ~name:\"processed transitions\"","counters":[]},{"line":"      (Buffered (`Capacity 30, `Overflow Crash))","counters":[]},{"line":"  in","counters":[]},{"line":"  let catchup_job_reader, catchup_job_writer =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Strict_pipe.create ~name:\"catchup jobs\"","counters":[]},{"line":"      (Buffered (`Capacity 30, `Overflow Crash))","counters":[]},{"line":"  in","counters":[]},{"line":"  let catchup_breadcrumbs_reader, catchup_breadcrumbs_writer =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Strict_pipe.create ~name:\"catchup breadcrumbs\"","counters":[]},{"line":"      (Buffered (`Capacity 30, `Overflow Crash))","counters":[]},{"line":"  in","counters":[]},{"line":"  let unprocessed_transition_cache =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Transition_handler.Unprocessed_transition_cache.create ~logger","counters":[]},{"line":"  in","counters":[]},{"line":"  List.iter collected_transitions ~f:(fun t ->","counters":[]},{"line":"      (* since the cache was just built, it's safe to assume","counters":[]},{"line":"       * registering these will not fail, so long as there","counters":[]},{"line":"       * are no duplicates in the list *)","counters":[]},{"line":"      let block_cached =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transition_handler.Unprocessed_transition_cache.register_exn","counters":[]},{"line":"          unprocessed_transition_cache t","counters":[]},{"line":"      in","counters":[]},{"line":"      Strict_pipe.Writer.write primary_transition_writer","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (`Block block_cached, `Valid_cb None) ) ;","counters":[]},{"line":"  let initial_state_hashes =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.map collected_transitions ~f:(fun envelope ->","counters":[]},{"line":"        Network_peer.Envelope.Incoming.data envelope","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        |> Validation.block_with_hash","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        |> Mina_base.State_hash.With_state_hashes.state_hash )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    |> Mina_base.State_hash.Set.of_list","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"  in","counters":[]},{"line":"  let extensions = Transition_frontier.extensions frontier in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@ Pipe_lib.Broadcast_pipe.Reader.iter_until","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"       (Transition_frontier.Extensions.get_view_pipe extensions New_breadcrumbs)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"       ~f:(fun new_breadcrumbs ->","counters":[]},{"line":"         let open Mina_base.State_hash in","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         let new_state_hashes =","counters":[]},{"line":"           List.map new_breadcrumbs ~f:Transition_frontier.Breadcrumb.state_hash","counters":[]},{"line":"           |> Set.of_list","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"         in","counters":[]},{"line":"         if Set.is_empty @@ Set.inter initial_state_hashes new_state_hashes then","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"           Deferred.return false","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"         else (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           Mina_metrics.(","counters":[]},{"line":"             Gauge.set Catchup.initial_catchup_time","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"               Time.(Span.to_min @@ diff (now ()) start_time)) ;","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"           Deferred.return true ) ) ;","counters":[]},{"line":"  Transition_handler.Validator.run","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~context:(module Context)","counters":[]},{"line":"    ~trust_system ~time_controller ~frontier","counters":[]},{"line":"    ~transition_reader:network_transition_reader ~valid_transition_writer","counters":[]},{"line":"    ~unprocessed_transition_cache ;","counters":[]},{"line":"  Strict_pipe.Reader.iter_without_pushback valid_transition_reader","counters":[]},{"line":"    ~f:(fun (`Block b, `Valid_cb vc) ->","counters":[]},{"line":"      Strict_pipe.Writer.write primary_transition_writer (`Block b, `Valid_cb vc) )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  |> don't_wait_for ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  let clean_up_catchup_scheduler = Ivar.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Transition_handler.Processor.run","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~context:(module Context)","counters":[]},{"line":"    ~time_controller ~trust_system ~verifier ~frontier","counters":[]},{"line":"    ~primary_transition_reader ~producer_transition_reader","counters":[]},{"line":"    ~clean_up_catchup_scheduler ~catchup_job_writer ~catchup_breadcrumbs_reader","counters":[]},{"line":"    ~catchup_breadcrumbs_writer ~processed_transition_writer ;","counters":[]},{"line":"  Ledger_catchup.run","counters":[]},{"line":"    ~context:(module Context)","counters":[]},{"line":"    ~trust_system ~verifier ~network ~frontier ~catchup_job_reader","counters":[]},{"line":"    ~catchup_breadcrumbs_writer ~unprocessed_transition_cache ;","counters":[]},{"line":"  Strict_pipe.Reader.iter_without_pushback clear_reader ~f:(fun _ ->","counters":[]},{"line":"      let open Strict_pipe.Writer in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      kill valid_transition_writer ;","counters":[]},{"line":"      kill primary_transition_writer ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      kill processed_transition_writer ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      kill catchup_job_writer ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      kill catchup_breadcrumbs_writer ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if Ivar.is_full clean_up_catchup_scheduler then","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log error] \"Ivar.fill bug is here LLL !\" ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      Ivar.fill clean_up_catchup_scheduler () )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  |> don't_wait_for ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  processed_transition_reader","counters":[{"col_start":2,"col_end":2,"count":0}]}]}