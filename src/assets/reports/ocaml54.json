{"filename":"src/lib/key_cache/async/key_cache_async.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Key_cache","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"include T (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"let on_disk to_string read write prefix =","counters":[]},{"line":"  let path k = prefix ^/ to_string k in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"  let read k =","counters":[]},{"line":"    let p = path k in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match%bind Sys.file_exists p with","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    | `No | `Unknown ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"        return (Or_error.errorf \"file %s does not exist or cannot be read\" p)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | `Yes ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        read k ~path:p","counters":[]},{"line":"  in","counters":[]},{"line":"  let write key v =","counters":[]},{"line":"    match%bind Sys.is_directory prefix with","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    | `No | `Unknown ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"        return","counters":[]},{"line":"          (Or_error.errorf \"directory %s does not exist or cannot be read\"","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"             prefix )","counters":[]},{"line":"    | `Yes ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        write key v (path key)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  in","counters":[]},{"line":"  { read; write }","counters":[]},{"line":"","counters":[]},{"line":"let s3 to_string read ~bucket_prefix ~install_path =","counters":[]},{"line":"  let read k =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let label = to_string k in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let uri_string = bucket_prefix ^/ label in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let file_path = install_path ^/ label in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let logger = Logger.create () in","counters":[]},{"line":"    [%log trace] \"Downloading key to key cache\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"url\", `String uri_string); (\"local_file_path\", `String file_path) ] ;","counters":[]},{"line":"    let%bind result =","counters":[]},{"line":"      Monitor.try_with_join_or_error ~here:[%here] (fun () ->","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"          Process.run ~prog:\"curl\"","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~args:","counters":[]},{"line":"              [ \"--fail\"","counters":[]},{"line":"              ; \"--silent\"","counters":[]},{"line":"              ; \"--show-error\"","counters":[]},{"line":"              ; \"-o\"","counters":[]},{"line":"              ; file_path","counters":[]},{"line":"              ; uri_string","counters":[]},{"line":"              ]","counters":[]},{"line":"            ()","counters":[]},{"line":"          |> Deferred.Result.map_error ~f:(fun err ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"                 [%log debug] \"Could not download key to key cache\"","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"                   ~metadata:","counters":[]},{"line":"                     [ (\"url\", `String uri_string)","counters":[]},{"line":"                     ; (\"local_file_path\", `String file_path)","counters":[]},{"line":"                     ] ;","counters":[]},{"line":"                 err ) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    in","counters":[]},{"line":"    [%log trace] \"Downloaded key to key cache\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"url\", `String uri_string)","counters":[]},{"line":"        ; (\"local_file_path\", `String file_path)","counters":[]},{"line":"        ; (\"result\", `String result)","counters":[]},{"line":"        ] ;","counters":[]},{"line":"    read k ~path:file_path","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let write _ _ = Deferred.Or_error.return () in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  { read; write }","counters":[]},{"line":"","counters":[]},{"line":"module Disk_storable = struct","counters":[]},{"line":"  include Disk_storable (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  let of_binable (type t) to_string (module B : Binable.S with type t = t) =","counters":[]},{"line":"    let read _ ~path = Reader.load_bin_prot path B.bin_reader_t in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    let write _ t path =","counters":[]},{"line":"      Deferred.map","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Writer.save_bin_prot path B.bin_writer_t t)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        ~f:Or_error.return","counters":[]},{"line":"    in","counters":[]},{"line":"    { to_string; read; write }","counters":[]},{"line":"","counters":[]},{"line":"  let simple to_string read write =","counters":[]},{"line":"    { to_string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; read = (fun k ~path -> read k ~path)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; write = (fun v s -> write v s)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let read spec { Disk_storable.to_string; read = r; write = w } k =","counters":[]},{"line":"  Deferred.Or_error.find_map_ok spec ~f:(fun s ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      match s with","counters":[]},{"line":"      | Spec.On_disk { directory; should_write } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%map res = (on_disk to_string r w directory).read k in","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"          (res, if should_write then `Locally_generated else `Cache_hit)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"      | S3 _ when not (may_download ()) ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"          Deferred.Or_error.errorf \"Downloading from S3 is disabled\"","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | S3 { bucket_prefix; install_path } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%bind.Deferred () = Unix.mkdir ~p:() install_path in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          let%map res = (s3 to_string r ~bucket_prefix ~install_path).read k in","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"          (res, `Cache_hit) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"let write spec { Disk_storable.to_string; read = r; write = w } k v =","counters":[]},{"line":"  let%map errs =","counters":[]},{"line":"    Deferred.List.filter_map spec ~f:(fun s ->","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        let res =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match s with","counters":[]},{"line":"          | Spec.On_disk { directory; should_write } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              if should_write then","counters":[]},{"line":"                let%bind () = Unix.mkdir ~p:() directory in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                (on_disk to_string r w directory).write k v","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              else Deferred.Or_error.return ()","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          | S3 { bucket_prefix = _; install_path = _ } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.Or_error.return ()","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        in","counters":[]},{"line":"        match%map res with Error e -> Some e | Ok () -> None )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"  in","counters":[]},{"line":"  match errs with [] -> Ok () | errs -> Error (Error.of_list errs)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":59,"col_end":59,"count":0}]}]}