{"filename":"src/lib/rosetta_lib/user_command_info.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Fee_currency = Currency.Fee","counters":[]},{"line":"module Amount_currency = Currency.Amount","counters":[]},{"line":"open Rosetta_models","counters":[]},{"line":"module Signed_command = Mina_base.Signed_command","counters":[]},{"line":"module Token_id = Mina_base.Token_id","counters":[]},{"line":"module Public_key = Signature_lib.Public_key","counters":[]},{"line":"module Signed_command_memo = Mina_base.Signed_command_memo","counters":[]},{"line":"module Payment_payload = Mina_base.Payment_payload","counters":[]},{"line":"module Stake_delegation = Mina_base.Stake_delegation","counters":[]},{"line":"","counters":[]},{"line":"let pk_to_public_key ~context (`Pk pk) =","counters":[]},{"line":"  Public_key.Compressed.of_base58_check pk","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  |> Result.map_error ~f:(fun _ ->","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"         Errors.create ~context `Public_key_format_not_valid )","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"let account_id (`Pk pk) (`Token_id token_id) =","counters":[]},{"line":"  { Account_identifier.address = pk","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; sub_account = None","counters":[]},{"line":"  ; metadata = Some (Amount_of.Token_id.encode token_id)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let token_id_of_account (account : Account_identifier.t) =","counters":[]},{"line":"  let module Decoder = Amount_of.Token_id.T (Result) in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Decoder.decode account.metadata","counters":[]},{"line":"  |> Result.map ~f:(Option.value ~default:Amount_of.Token_id.default)","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  |> Result.ok","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"module Op = struct","counters":[]},{"line":"  type 'a t = { label : 'a; related_to : 'a option } [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  module T (M : Monad.S2) = struct","counters":[]},{"line":"    let build ~a_eq ~plan ~f =","counters":[]},{"line":"      let open M.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%map _, rev_data =","counters":[]},{"line":"        List.fold plan","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          ~init:(M.return (0, []))","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          ~f:(fun macc op ->","counters":[]},{"line":"            let open M.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let%bind i, acc = macc in","counters":[]},{"line":"            let operation_identifier i =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              { Operation_identifier.index = Int64.of_int_exn i","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"              ; network_index = None","counters":[]},{"line":"              }","counters":[]},{"line":"            in","counters":[]},{"line":"            let related_operations =","counters":[]},{"line":"              op.related_to","counters":[]},{"line":"              |> Option.bind ~f:(fun relate ->","counters":[]},{"line":"                     List.findi plan ~f:(fun _ a -> a_eq relate a.label) )","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"              |> Option.map ~f:(fun (i, _) -> [ operation_identifier i ])","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"            in","counters":[]},{"line":"            let%map a =","counters":[]},{"line":"              f ~related_operations","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~operation_identifier:(operation_identifier i) op","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"            in","counters":[]},{"line":"            (i + 1, a :: acc) )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"      in","counters":[]},{"line":"      List.rev rev_data","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Ident2 = struct","counters":[]},{"line":"    type ('a, 'e) t = 'a","counters":[]},{"line":"","counters":[]},{"line":"    module T = struct","counters":[]},{"line":"      type ('a, 'e) t = 'a","counters":[]},{"line":"","counters":[]},{"line":"      let map = `Define_using_bind","counters":[]},{"line":"","counters":[]},{"line":"      let return a = a","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"      let bind a ~f = f a","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Monad.Make2 (T)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T (Ident2)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Kind = struct","counters":[]},{"line":"  type t = [ `Payment | `Delegation ] [@@deriving yojson, equal, sexp, compare]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Account_creation_fees_paid = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | By_no_one","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | By_fee_payer of Unsigned_extended.UInt64.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    | By_receiver of Unsigned_extended.UInt64.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  [@@deriving equal, to_yojson, sexp, compare]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Failure_status = struct","counters":[]},{"line":"  type t = [ `Applied of Account_creation_fees_paid.t | `Failed of string ]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"  [@@deriving equal, to_yojson, sexp, compare]","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { kind : Kind.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; fee_payer : [ `Pk of string ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"  ; source : [ `Pk of string ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; receiver : [ `Pk of string ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  ; fee_token : [ `Token_id of string ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; token : [ `Token_id of string ]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; fee : Unsigned_extended.UInt64.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":6,"col_end":6,"count":0},{"col_start":10,"col_end":10,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; nonce : Unsigned_extended.UInt32.t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  ; amount : Unsigned_extended.UInt64.t option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"  ; valid_until : Unsigned_extended.UInt32.t option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  ; memo : string option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; hash : string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; failure_status : Failure_status.t option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson, equal, sexp, compare]","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"module Partial = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { kind : Kind.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"    ; fee_payer : [ `Pk of string ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    ; source : [ `Pk of string ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"    ; receiver : [ `Pk of string ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; fee_token : [ `Token_id of string ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; token : [ `Token_id of string ]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; fee : Unsigned_extended.UInt64.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    ; amount : Unsigned_extended.UInt64.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    ; valid_until : Unsigned_extended.UInt32.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    ; memo : string option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving to_yojson, sexp, compare, equal]","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  module Reason = Errors.Partial_reason","counters":[]},{"line":"","counters":[]},{"line":"  let to_user_command_payload :","counters":[]},{"line":"         t","counters":[]},{"line":"      -> nonce:Unsigned_extended.UInt32.t","counters":[]},{"line":"      -> (Signed_command.Payload.t, Errors.t) Result.t =","counters":[]},{"line":"   fun t ~nonce ->","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind fee_payer_pk = pk_to_public_key ~context:\"Fee payer\" t.fee_payer in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    let%bind source_pk = pk_to_public_key ~context:\"Source\" t.source in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    let%bind receiver_pk = pk_to_public_key ~context:\"Receiver\" t.receiver in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    let%bind memo =","counters":[]},{"line":"      match t.memo with","counters":[]},{"line":"      | Some memo -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          try Ok (Signed_command_memo.create_from_string_exn memo)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"          with _ -> Error (Errors.create `Memo_invalid) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok Signed_command_memo.empty","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map body =","counters":[]},{"line":"      match t.kind with","counters":[]},{"line":"      | `Payment ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%map amount =","counters":[]},{"line":"            Result.of_option t.amount","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              ~error:","counters":[]},{"line":"                (Errors.create","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                   (`Operations_not_valid","counters":[]},{"line":"                     [ Errors.Partial_reason.Amount_not_some ] ) )","counters":[]},{"line":"          in","counters":[]},{"line":"          let payload =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { Payment_payload.Poly.source_pk","counters":[]},{"line":"            ; receiver_pk","counters":[]},{"line":"            ; amount = Amount_currency.of_uint64 amount","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"            }","counters":[]},{"line":"          in","counters":[]},{"line":"          Signed_command.Payload.Body.Payment payload","counters":[]},{"line":"      | `Delegation ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let payload =","counters":[]},{"line":"            Stake_delegation.Set_delegate","counters":[]},{"line":"              { delegator = source_pk; new_delegate = receiver_pk }","counters":[]},{"line":"          in","counters":[]},{"line":"          Result.return @@ Signed_command.Payload.Body.Stake_delegation payload","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    in","counters":[]},{"line":"    Signed_command.Payload.create","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~fee:(Fee_currency.of_uint64 t.fee)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      ~fee_payer_pk ~nonce ~body ~memo","counters":[]},{"line":"      ~valid_until:","counters":[]},{"line":"        (Option.map ~f:Mina_numbers.Global_slot.of_uint32 t.valid_until)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let forget (t : t) : Partial.t =","counters":[]},{"line":"  { kind = t.kind","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; fee_payer = t.fee_payer","counters":[]},{"line":"  ; source = t.source","counters":[]},{"line":"  ; receiver = t.receiver","counters":[]},{"line":"  ; fee_token = t.fee_token","counters":[]},{"line":"  ; token = t.token","counters":[]},{"line":"  ; fee = t.fee","counters":[]},{"line":"  ; amount = t.amount","counters":[]},{"line":"  ; valid_until = t.valid_until","counters":[]},{"line":"  ; memo = t.memo","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let remember ~nonce ~hash t =","counters":[]},{"line":"  { kind = t.kind","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; fee_payer = t.fee_payer","counters":[]},{"line":"  ; source = t.source","counters":[]},{"line":"  ; receiver = t.receiver","counters":[]},{"line":"  ; fee_token = t.fee_token","counters":[]},{"line":"  ; token = t.token","counters":[]},{"line":"  ; fee = t.fee","counters":[]},{"line":"  ; amount = t.amount","counters":[]},{"line":"  ; valid_until = t.valid_until","counters":[]},{"line":"  ; memo = t.memo","counters":[]},{"line":"  ; hash","counters":[]},{"line":"  ; nonce","counters":[]},{"line":"  ; failure_status = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let of_operations ?memo ?valid_until (ops : Operation.t list) :","counters":[]},{"line":"    (Partial.t, Partial.Reason.t) Validation.t =","counters":[]},{"line":"  (* TODO: If we care about DoS attacks, break early if length too large *)","counters":[]},{"line":"  (* Note: It's better to have nice errors with the validation than micro-optimize searching through a small list a minimal number of times. *)","counters":[]},{"line":"  let find_kind k (ops : Operation.t list) =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let name = Operation_types.name k in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    List.find ops ~f:(fun op -> String.equal op.Operation._type name)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    |> Result.of_option ~error:[ Partial.Reason.Can't_find_kind name ]","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"  in","counters":[]},{"line":"  let module V = Validation in","counters":[]},{"line":"  let open V.Let_syntax in","counters":[]},{"line":"  let open Partial.Reason in","counters":[]},{"line":"  (* For a payment we demand:","counters":[]},{"line":"     *","counters":[]},{"line":"     * ops = length exactly 3","counters":[]},{"line":"     *","counters":[]},{"line":"     * payment_source_dec with account 'a, some amount 'x, status=None","counters":[]},{"line":"     * fee_payment with account 'a, some amount 'y, status=None","counters":[]},{"line":"     * payment_receiver_inc with account 'b, some amount 'x, status=None","counters":[]},{"line":"  *)","counters":[]},{"line":"  let payment =","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      if Mina_stdlib.List.Length.Compare.(ops = 3) then V.return ()","counters":[{"col_start":56,"col_end":56,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      else V.fail Length_mismatch","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    and account_a =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Payment_source_dec ops","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      and { account = account'; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      match (account, account') with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some x, Some y when Account_identifier.equal x y ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          V.return x","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Some _, Some _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Fee_payer_and_source_mismatch","counters":[]},{"line":"      | None, _ | _, None ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"          V.fail Account_not_some","counters":[]},{"line":"    and token =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Payment_source_dec ops in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      match account with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some account -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match token_id_of_account account with","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.fail Incorrect_token_id","counters":[]},{"line":"          | Some token ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.return (`Token_id token) )","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Account_not_some","counters":[]},{"line":"    and fee_token =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      match account with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some account -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match token_id_of_account account with","counters":[]},{"line":"          | Some token_id ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.return (`Token_id token_id)","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.fail Incorrect_token_id )","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Account_not_some","counters":[]},{"line":"    and account_b =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Payment_receiver_inc ops in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      Result.of_option account ~error:[ Account_not_some ]","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    and () =","counters":[]},{"line":"      if","counters":[]},{"line":"        List.for_all ops ~f:(fun op ->","counters":[]},{"line":"            let p = Option.equal String.equal op.status in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            p None || p (Some \"\") )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      then V.return ()","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      else V.fail Status_not_pending","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    and payment_amount_x =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { amount; _ } = find_kind `Payment_source_dec ops","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      and { amount = amount'; _ } = find_kind `Payment_receiver_inc ops in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      match (amount, amount') with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some x, Some y when Amount.equal (Amount_of.negated x) y ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          V.return y","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Some _, Some _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Amount_inc_dec_mismatch","counters":[]},{"line":"      | None, _ | _, None ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"          V.fail Amount_not_some","counters":[]},{"line":"    and payment_amount_y =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { amount; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      match amount with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.return (Amount_of.negated x)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Amount_not_some","counters":[]},{"line":"    in","counters":[]},{"line":"    { Partial.kind = `Payment","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; fee_payer = `Pk account_a.address","counters":[]},{"line":"    ; source = `Pk account_a.address","counters":[]},{"line":"    ; receiver = `Pk account_b.address","counters":[]},{"line":"    ; fee_token","counters":[]},{"line":"    ; token (* TODO: Catch exception properly on these uint64 decodes *)","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_string payment_amount_y.Amount.value","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_string payment_amount_x.Amount.value)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; valid_until","counters":[]},{"line":"    ; memo","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  (* For a delegation we demand:","counters":[]},{"line":"     *","counters":[]},{"line":"     * ops = length exactly 2","counters":[]},{"line":"     *","counters":[]},{"line":"     * fee_payment with account 'a, some amount 'y, status=None","counters":[]},{"line":"     * delegate_change with account 'a, metadata:{delegate_change_target:'b}, status=\"Pending\"","counters":[]},{"line":"  *)","counters":[]},{"line":"  let delegation =","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      if Mina_stdlib.List.Length.Compare.(ops = 2) then V.return ()","counters":[{"col_start":56,"col_end":56,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      else V.fail Length_mismatch","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    and account_a =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      Option.value_map account ~default:(V.fail Account_not_some) ~f:V.return","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    and fee_token =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { account; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      match account with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some account -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match token_id_of_account account with","counters":[]},{"line":"          | Some token_id ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.return (`Token_id token_id)","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.fail Incorrect_token_id )","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Account_not_some","counters":[]},{"line":"    and account_b =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { metadata; _ } = find_kind `Delegate_change ops in","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"      match metadata with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some metadata -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match metadata with","counters":[]},{"line":"          | `Assoc [ (\"delegate_change_target\", `String s) ] ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return s","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              V.fail Invalid_metadata )","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Account_not_some","counters":[]},{"line":"    and () =","counters":[]},{"line":"      if","counters":[]},{"line":"        List.for_all ops ~f:(fun op ->","counters":[]},{"line":"            let p = Option.equal String.equal op.status in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            p None || p (Some \"\") )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      then V.return ()","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      else V.fail Status_not_pending","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    and payment_amount_y =","counters":[]},{"line":"      let open Result.Let_syntax in","counters":[]},{"line":"      let%bind { amount; _ } = find_kind `Fee_payment ops in","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      match amount with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.return (Amount_of.negated x)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          V.fail Amount_not_some","counters":[]},{"line":"    in","counters":[]},{"line":"    { Partial.kind = `Delegation","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; fee_payer = `Pk account_a.address","counters":[]},{"line":"    ; source = `Pk account_a.address","counters":[]},{"line":"    ; receiver = `Pk account_b","counters":[]},{"line":"    ; fee_token","counters":[]},{"line":"    ; token =","counters":[]},{"line":"        `Token_id Token_id.(default |> to_string)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"        (* only default token can be delegated *)","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_string payment_amount_y.Amount.value","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; amount = None","counters":[]},{"line":"    ; valid_until","counters":[]},{"line":"    ; memo","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let partials = [ payment; delegation ] in","counters":[]},{"line":"  let oks, errs = List.partition_map partials ~f:Result.to_either in","counters":[]},{"line":"  match (oks, errs) with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [], errs ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* no Oks *)","counters":[]},{"line":"      Error (List.concat errs)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  | [ partial ], _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* exactly one Ok *)","counters":[]},{"line":"      Ok partial","counters":[]},{"line":"  | _, _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* more than one Ok, a bug in our implementation *)","counters":[]},{"line":"      failwith","counters":[]},{"line":"        \"A sequence of operations must represent exactly one user command\"","counters":[]},{"line":"","counters":[]},{"line":"let to_operations ~failure_status (t : Partial.t) : Operation.t list =","counters":[]},{"line":"  (* First build a plan. The plan specifies all operations ahead of time so","counters":[]},{"line":"     * we can later compute indices and relations when we're building the full","counters":[]},{"line":"     * models.","counters":[]},{"line":"     *","counters":[]},{"line":"     * For now, relations will be defined only on the two sides of a given","counters":[]},{"line":"     * transfer. ie. Source decreases, and receiver increases.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let plan : 'a Op.t list =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ( if not Unsigned.UInt64.(equal t.fee zero) then","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      [ { Op.label = `Fee_payment; related_to = None } ]","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    else [] )","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    @ ( match failure_status with","counters":[]},{"line":"      | Some (`Applied (Account_creation_fees_paid.By_receiver amount)) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [ { Op.label = `Account_creation_fee_via_payment amount","counters":[]},{"line":"            ; related_to = None","counters":[]},{"line":"            }","counters":[]},{"line":"          ]","counters":[]},{"line":"      | Some (`Applied (Account_creation_fees_paid.By_fee_payer amount)) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [ { Op.label = `Account_creation_fee_via_fee_payer amount","counters":[]},{"line":"            ; related_to = None","counters":[]},{"line":"            }","counters":[]},{"line":"          ]","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [] )","counters":[]},{"line":"    @","counters":[]},{"line":"    match t.kind with","counters":[]},{"line":"    | `Payment -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* When amount is not none, we move the amount from source to receiver -- unless it's a failure, we will capture that below *)","counters":[]},{"line":"        match t.amount with","counters":[]},{"line":"        | Some amount ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ { Op.label = `Payment_source_dec amount; related_to = None }","counters":[]},{"line":"            ; { Op.label = `Payment_receiver_inc amount","counters":[]},{"line":"              ; related_to = Some (`Payment_source_dec amount)","counters":[]},{"line":"              }","counters":[]},{"line":"            ]","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [] )","counters":[]},{"line":"    | `Delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ { Op.label = `Delegate_change; related_to = None } ]","counters":[]},{"line":"  in","counters":[]},{"line":"  Op.build","counters":[]},{"line":"    ~a_eq:","counters":[]},{"line":"      [%eq:","counters":[]},{"line":"        [ `Fee_payment","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | `Payment_source_dec of Unsigned.UInt64.t","counters":[]},{"line":"        | `Payment_receiver_inc of Unsigned.UInt64.t ]] ~plan","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"    ~f:(fun ~related_operations ~operation_identifier op ->","counters":[]},{"line":"      let status, metadata, did_fail =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match (op.label, failure_status) with","counters":[]},{"line":"        (* If we're looking at mempool transactions, it's always pending *)","counters":[]},{"line":"        | _, None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (None, None, false)","counters":[]},{"line":"        | _, Some (`Applied _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Some `Success, None, false)","counters":[]},{"line":"        | _, Some (`Failed reason) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Some `Failed, Some (`Assoc [ (\"reason\", `String reason) ]), true)","counters":[]},{"line":"      in","counters":[]},{"line":"      let pending_or_success_only = function","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | Some (`Success | `Failed) ->","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"            Some `Success","counters":[]},{"line":"      in","counters":[]},{"line":"      let merge_metadata m1 m2 =","counters":[]},{"line":"        match (m1, m2) with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | None, None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | Some x, None | None, Some x ->","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"            Some x","counters":[]},{"line":"        | Some (`Assoc xs), Some (`Assoc ys) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some (`Assoc (xs @ ys))","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwith \"Unexpected pattern\"","counters":[]},{"line":"      in","counters":[]},{"line":"      match op.label with","counters":[]},{"line":"      | `Fee_payment ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status =","counters":[]},{"line":"              status |> pending_or_success_only","counters":[]},{"line":"              |> Option.map ~f:Operation_statuses.name","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"          ; account = Some (account_id t.fee_payer t.fee_token)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; _type = Operation_types.name `Fee_payment","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount = Some Amount_of.(negated @@ token t.fee_token t.fee)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata","counters":[]},{"line":"          }","counters":[]},{"line":"      | `Payment_source_dec amount ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status = Option.map ~f:Operation_statuses.name status","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; account = Some (account_id t.source t.token)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; _type = Operation_types.name `Payment_source_dec","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount =","counters":[]},{"line":"              ( if did_fail then None","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              else Some Amount_of.(negated @@ token t.token amount) )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata","counters":[]},{"line":"          }","counters":[]},{"line":"      | `Payment_receiver_inc amount ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status = Option.map ~f:Operation_statuses.name status","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; account = Some (account_id t.receiver t.token)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; _type = Operation_types.name `Payment_receiver_inc","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount =","counters":[]},{"line":"              (if did_fail then None else Some (Amount_of.token t.token amount))","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata","counters":[]},{"line":"          }","counters":[]},{"line":"      | `Account_creation_fee_via_payment account_creation_fee ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status = Option.map ~f:Operation_statuses.name status","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; account = Some (account_id t.receiver t.token)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; _type = Operation_types.name `Account_creation_fee_via_payment","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount = Some Amount_of.(negated @@ mina account_creation_fee)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata","counters":[]},{"line":"          }","counters":[]},{"line":"      | `Account_creation_fee_via_fee_payer account_creation_fee ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status = Option.map ~f:Operation_statuses.name status","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; account = Some (account_id t.fee_payer t.fee_token)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; _type = Operation_types.name `Account_creation_fee_via_fee_payer","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount = Some Amount_of.(negated @@ mina account_creation_fee)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata","counters":[]},{"line":"          }","counters":[]},{"line":"      | `Delegate_change ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Operation.operation_identifier","counters":[]},{"line":"          ; related_operations","counters":[]},{"line":"          ; status = Option.map ~f:Operation_statuses.name status","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; account =","counters":[]},{"line":"              Some (account_id t.source (`Token_id Amount_of.Token_id.default))","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          ; _type = Operation_types.name `Delegate_change","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; amount = None","counters":[]},{"line":"          ; coin_change = None","counters":[]},{"line":"          ; metadata =","counters":[]},{"line":"              merge_metadata metadata","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                (Some","counters":[]},{"line":"                   (`Assoc","counters":[]},{"line":"                     [ ( \"delegate_change_target\"","counters":[]},{"line":"                       , `String","counters":[]},{"line":"                           (let (`Pk r) = t.receiver in","counters":[]},{"line":"                            r ) )","counters":[]},{"line":"                     ] ) )","counters":[]},{"line":"          } )","counters":[]},{"line":"","counters":[]},{"line":"let to_operations' (t : t) : Operation.t list =","counters":[]},{"line":"  to_operations ~failure_status:t.failure_status (forget t)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"payment_round_trip\" =","counters":[]},{"line":"  let start =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { kind = `Payment (* default token *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    ; failure_status = None","counters":[]},{"line":"    ; hash = \"TXN_1_HASH\"","counters":[]},{"line":"    ; valid_until = Some (Unsigned.UInt32.of_int 10_000)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let ops = to_operations' start in","counters":[]},{"line":"  match of_operations ?valid_until:start.valid_until ?memo:start.memo ops with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Ok partial ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%test_eq: Partial.t] partial (forget start)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwithf !\"Mismatch because %{sexp: Partial.Reason.t list}\" e ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"delegation_round_trip\" =","counters":[]},{"line":"  let start =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { kind = `Delegation","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 1_000_000_000","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 42","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; amount = None","counters":[]},{"line":"    ; failure_status = None","counters":[]},{"line":"    ; hash = \"TXN_2_HASH\"","counters":[]},{"line":"    ; valid_until = Some (Unsigned.UInt32.of_int 867888)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let ops = to_operations' start in","counters":[]},{"line":"  match of_operations ops ?valid_until:start.valid_until ?memo:start.memo with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Ok partial ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%test_eq: Partial.t] partial (forget start)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwithf !\"Mismatch because %{sexp: Partial.Reason.t list}\" e ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let non_default_token =","counters":[]},{"line":"  `Token_id","counters":[]},{"line":"    (Token_id.to_string (Quickcheck.random_value Token_id.gen_non_default))","counters":[{"col_start":22,"col_end":22,"count":1},{"col_start":47,"col_end":47,"count":1}]},{"line":"","counters":[]},{"line":"let dummies =","counters":[]},{"line":"  [ { kind = `Payment (* default token *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"    ; failure_status = Some (`Applied Account_creation_fees_paid.By_no_one)","counters":[]},{"line":"    ; hash = \"TXN_1_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ; { kind = `Payment (* new account created *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"    ; failure_status =","counters":[]},{"line":"        Some","counters":[]},{"line":"          (`Applied","counters":[]},{"line":"            (Account_creation_fees_paid.By_receiver","counters":[]},{"line":"               (Unsigned.UInt64.of_int 1_000_000) ) )","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"    ; hash = \"TXN_1new_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ; { kind = `Payment (* failed payment *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"    ; failure_status = Some (`Failed \"Failure\")","counters":[]},{"line":"    ; hash = \"TXN_1fail_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ; { kind = `Payment (* custom token *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = non_default_token","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"    ; failure_status = Some (`Applied Account_creation_fees_paid.By_no_one)","counters":[]},{"line":"    ; hash = \"TXN_1a_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ; { kind = `Payment (* custom fee-token *)","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; fee_token = non_default_token","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = Some (Unsigned.UInt64.of_int 2_000_000_000)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"    ; failure_status = Some (`Applied Account_creation_fees_paid.By_no_one)","counters":[]},{"line":"    ; hash = \"TXN_1b_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ; { kind = `Delegation","counters":[]},{"line":"    ; fee_payer = `Pk \"Alice\"","counters":[]},{"line":"    ; source = `Pk \"Alice\"","counters":[]},{"line":"    ; token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee_token = `Token_id Amount_of.Token_id.default","counters":[]},{"line":"    ; fee = Unsigned.UInt64.of_int 2_000_000_000","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    ; receiver = `Pk \"Bob\"","counters":[]},{"line":"    ; nonce = Unsigned.UInt32.of_int 3","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"    ; amount = None","counters":[]},{"line":"    ; failure_status = Some (`Applied Account_creation_fees_paid.By_no_one)","counters":[]},{"line":"    ; hash = \"TXN_2_HASH\"","counters":[]},{"line":"    ; valid_until = None","counters":[]},{"line":"    ; memo = Some \"hello\"","counters":[]},{"line":"    }","counters":[]},{"line":"  ]","counters":[{"col_start":2,"col_end":2,"count":1}]}]}