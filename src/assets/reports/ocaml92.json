{"filename":"src/lib/mina_base/transaction_status.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Failure = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Transaction_status.Failure.V2.t =","counters":[{"col_start":6,"col_end":6,"count":11},{"col_start":11,"col_end":11,"count":2}]},{"line":"        | Predicate [@value 1]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Source_not_present","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Receiver_not_present","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Amount_insufficient_to_create_account","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Cannot_pay_creation_fee_in_token","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Source_insufficient_balance","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Source_minimum_balance_violation","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Receiver_already_exists","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Token_owner_not_caller","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Overflow","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Global_excess_overflow","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Local_excess_overflow","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Local_supply_increase_overflow","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Global_supply_increase_overflow","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Signed_command_on_zkapp_account","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Zkapp_account_not_present","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_balance","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_timing_existing_account","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_delegate","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_app_state","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_verification_key","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_sequence_state","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_zkapp_uri","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_token_symbol","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_permissions","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_nonce","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Update_not_permitted_voting_for","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Zkapp_command_replay_check_failed","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Fee_payer_nonce_must_increase","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Fee_payer_must_be_signed","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_balance_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_nonce_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_receipt_chain_hash_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_delegate_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_sequence_state_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_app_state_precondition_unsatisfied of int","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        | Account_proved_state_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Account_is_new_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Protocol_state_precondition_unsatisfied","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Incorrect_nonce","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Invalid_fee_excess","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        | Cancelled","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      [@@deriving sexp, yojson, equal, compare, variants, hash]","counters":[{"col_start":62,"col_end":62,"count":46}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  module Collection = struct","counters":[]},{"line":"    module Display = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        module V1 = struct","counters":[]},{"line":"          type t = (int * Stable.V2.t list) list","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":1},{"col_start":19,"col_end":19,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"          [@@deriving equal, compare, yojson, sexp, hash]","counters":[{"col_start":56,"col_end":56,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = Stable.V2.t list list","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        [@@deriving equal, compare, yojson, sexp, hash]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let to_display t : Display.t =","counters":[]},{"line":"      let _, display =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        List.fold_left t ~init:(0, []) ~f:(fun (index, acc) bucket ->","counters":[]},{"line":"            if List.is_empty bucket then (index + 1, acc)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"            else (index + 1, (index, bucket) :: acc) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      display","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let empty = []","counters":[]},{"line":"","counters":[]},{"line":"    let of_single_failure f : t = [ [ f ] ]","counters":[{"col_start":34,"col_end":34,"count":3}]},{"line":"","counters":[]},{"line":"    let is_empty : t -> bool = Fn.compose List.is_empty List.concat","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type failure = t","counters":[]},{"line":"","counters":[]},{"line":"  let failure_min = min","counters":[]},{"line":"","counters":[]},{"line":"  let failure_max = max","counters":[]},{"line":"","counters":[]},{"line":"  let all =","counters":[]},{"line":"    let add acc var = var.Variantslib.Variant.constructor :: acc in","counters":[{"col_start":22,"col_end":22,"count":41}]},{"line":"    Variants.fold ~init:[] ~predicate:add ~source_not_present:add","counters":[]},{"line":"      ~receiver_not_present:add ~amount_insufficient_to_create_account:add","counters":[]},{"line":"      ~cannot_pay_creation_fee_in_token:add ~source_insufficient_balance:add","counters":[]},{"line":"      ~source_minimum_balance_violation:add ~receiver_already_exists:add","counters":[]},{"line":"      ~token_owner_not_caller:add ~overflow:add ~global_excess_overflow:add","counters":[]},{"line":"      ~local_excess_overflow:add ~local_supply_increase_overflow:add","counters":[]},{"line":"      ~global_supply_increase_overflow:add ~signed_command_on_zkapp_account:add","counters":[]},{"line":"      ~zkapp_account_not_present:add ~update_not_permitted_balance:add","counters":[]},{"line":"      ~update_not_permitted_timing_existing_account:add","counters":[]},{"line":"      ~update_not_permitted_delegate:add ~update_not_permitted_app_state:add","counters":[]},{"line":"      ~update_not_permitted_verification_key:add","counters":[]},{"line":"      ~update_not_permitted_sequence_state:add","counters":[]},{"line":"      ~update_not_permitted_zkapp_uri:add ~update_not_permitted_token_symbol:add","counters":[]},{"line":"      ~update_not_permitted_permissions:add ~update_not_permitted_nonce:add","counters":[]},{"line":"      ~update_not_permitted_voting_for:add","counters":[]},{"line":"      ~zkapp_command_replay_check_failed:add ~fee_payer_nonce_must_increase:add","counters":[]},{"line":"      ~fee_payer_must_be_signed:add","counters":[]},{"line":"      ~account_balance_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_nonce_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_receipt_chain_hash_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_delegate_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_sequence_state_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_app_state_precondition_unsatisfied:(fun acc var ->","counters":[]},{"line":"        List.init 8 ~f:var.constructor @ acc )","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":16,"col_end":16,"count":1}]},{"line":"      ~account_proved_state_precondition_unsatisfied:add","counters":[]},{"line":"      ~account_is_new_precondition_unsatisfied:add","counters":[]},{"line":"      ~protocol_state_precondition_unsatisfied:add ~incorrect_nonce:add","counters":[]},{"line":"      ~invalid_fee_excess:add ~cancelled:add","counters":[]},{"line":"","counters":[]},{"line":"  let gen = Quickcheck.Generator.of_list all","counters":[{"col_start":39,"col_end":39,"count":1}]},{"line":"","counters":[]},{"line":"  let to_string = function","counters":[]},{"line":"    | Predicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Predicate\"","counters":[]},{"line":"    | Source_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Source_not_present\"","counters":[]},{"line":"    | Receiver_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Receiver_not_present\"","counters":[]},{"line":"    | Amount_insufficient_to_create_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Amount_insufficient_to_create_account\"","counters":[]},{"line":"    | Cannot_pay_creation_fee_in_token ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Cannot_pay_creation_fee_in_token\"","counters":[]},{"line":"    | Source_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Source_insufficient_balance\"","counters":[]},{"line":"    | Source_minimum_balance_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Source_minimum_balance_violation\"","counters":[]},{"line":"    | Receiver_already_exists ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Receiver_already_exists\"","counters":[]},{"line":"    | Token_owner_not_caller ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Token_owner_not_caller\"","counters":[]},{"line":"    | Overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Overflow\"","counters":[]},{"line":"    | Global_excess_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Global_excess_overflow\"","counters":[]},{"line":"    | Local_excess_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Local_excess_overflow\"","counters":[]},{"line":"    | Local_supply_increase_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Local_supply_increase_overflow\"","counters":[]},{"line":"    | Global_supply_increase_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Global_supply_increase_overflow\"","counters":[]},{"line":"    | Signed_command_on_zkapp_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Signed_command_on_zkapp_account\"","counters":[]},{"line":"    | Zkapp_account_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Zkapp_account_not_present\"","counters":[]},{"line":"    | Update_not_permitted_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_balance\"","counters":[]},{"line":"    | Update_not_permitted_timing_existing_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_timing_existing_account\"","counters":[]},{"line":"    | Update_not_permitted_delegate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"update_not_permitted_delegate\"","counters":[]},{"line":"    | Update_not_permitted_app_state ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_app_state\"","counters":[]},{"line":"    | Update_not_permitted_verification_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_verification_key\"","counters":[]},{"line":"    | Update_not_permitted_sequence_state ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_sequence_state\"","counters":[]},{"line":"    | Update_not_permitted_zkapp_uri ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_zkapp_uri\"","counters":[]},{"line":"    | Update_not_permitted_token_symbol ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_token_symbol\"","counters":[]},{"line":"    | Update_not_permitted_permissions ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_permissions\"","counters":[]},{"line":"    | Update_not_permitted_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_nonce\"","counters":[]},{"line":"    | Update_not_permitted_voting_for ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Update_not_permitted_voting_for\"","counters":[]},{"line":"    | Zkapp_command_replay_check_failed ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Zkapp_command_replay_check_failed\"","counters":[]},{"line":"    | Fee_payer_nonce_must_increase ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Fee_payer_nonce_must_increase\"","counters":[]},{"line":"    | Fee_payer_must_be_signed ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Fee_payer_must_be_signed\"","counters":[]},{"line":"    | Account_balance_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_balance_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_nonce_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_nonce_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_receipt_chain_hash_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_receipt_chain_hash_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_delegate_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_delegate_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_sequence_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_sequence_state_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_app_state_precondition_unsatisfied i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        sprintf \"Account_app_state_%i_precondition_unsatisfied\" i","counters":[]},{"line":"    | Account_proved_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_proved_state_precondition_unsatisfied\"","counters":[]},{"line":"    | Account_is_new_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account_is_new_precondition_unsatisfied\"","counters":[]},{"line":"    | Protocol_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Protocol_state_precondition_unsatisfied\"","counters":[]},{"line":"    | Incorrect_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Incorrect_nonce\"","counters":[]},{"line":"    | Invalid_fee_excess ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Invalid_fee_excess\"","counters":[]},{"line":"    | Cancelled ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Cancelled\"","counters":[]},{"line":"","counters":[]},{"line":"  let of_string = function","counters":[]},{"line":"    | \"Predicate\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Predicate","counters":[]},{"line":"    | \"Source_not_present\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Source_not_present","counters":[]},{"line":"    | \"Receiver_not_present\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Receiver_not_present","counters":[]},{"line":"    | \"Amount_insufficient_to_create_account\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Amount_insufficient_to_create_account","counters":[]},{"line":"    | \"Cannot_pay_creation_fee_in_token\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Cannot_pay_creation_fee_in_token","counters":[]},{"line":"    | \"Source_insufficient_balance\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Source_insufficient_balance","counters":[]},{"line":"    | \"Source_minimum_balance_violation\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Source_minimum_balance_violation","counters":[]},{"line":"    | \"Receiver_already_exists\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Receiver_already_exists","counters":[]},{"line":"    | \"Token_owner_not_caller\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Token_owner_not_caller","counters":[]},{"line":"    | \"Overflow\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Overflow","counters":[]},{"line":"    | \"Global_excess_overflow\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Global_excess_overflow","counters":[]},{"line":"    | \"Local_excess_overflow\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Local_excess_overflow","counters":[]},{"line":"    | \"Local_supply_increase_overflow\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Local_supply_increase_overflow","counters":[]},{"line":"    | \"Global_supply_increase_overflow\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Global_supply_increase_overflow","counters":[]},{"line":"    | \"Signed_command_on_zkapp_account\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Signed_command_on_zkapp_account","counters":[]},{"line":"    | \"Zkapp_account_not_present\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Zkapp_account_not_present","counters":[]},{"line":"    | \"Update_not_permitted_balance\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_balance","counters":[]},{"line":"    | \"Update_not_permitted_timing_existing_account\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_timing_existing_account","counters":[]},{"line":"    | \"update_not_permitted_delegate\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_delegate","counters":[]},{"line":"    | \"Update_not_permitted_app_state\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_app_state","counters":[]},{"line":"    | \"Update_not_permitted_verification_key\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_verification_key","counters":[]},{"line":"    | \"Update_not_permitted_sequence_state\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_sequence_state","counters":[]},{"line":"    | \"Update_not_permitted_zkapp_uri\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_zkapp_uri","counters":[]},{"line":"    | \"Update_not_permitted_token_symbol\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_token_symbol","counters":[]},{"line":"    | \"Update_not_permitted_permissions\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_permissions","counters":[]},{"line":"    | \"Update_not_permitted_nonce\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_nonce","counters":[]},{"line":"    | \"Update_not_permitted_voting_for\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Update_not_permitted_voting_for","counters":[]},{"line":"    | \"Zkapp_command_replay_check_failed\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Zkapp_command_replay_check_failed","counters":[]},{"line":"    | \"Fee_payer_nonce_must_increase\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Fee_payer_nonce_must_increase","counters":[]},{"line":"    | \"Fee_payer_must_be_signed\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Fee_payer_must_be_signed","counters":[]},{"line":"    | \"Account_balance_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_balance_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_nonce_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_nonce_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_receipt_chain_hash_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_receipt_chain_hash_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_delegate_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_delegate_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_sequence_state_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_sequence_state_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_proved_state_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_proved_state_precondition_unsatisfied","counters":[]},{"line":"    | \"Account_is_new_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Account_is_new_precondition_unsatisfied","counters":[]},{"line":"    | \"Protocol_state_precondition_unsatisfied\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Protocol_state_precondition_unsatisfied","counters":[]},{"line":"    | \"Incorrect_nonce\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Incorrect_nonce","counters":[]},{"line":"    | \"Invalid_fee_excess\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Invalid_fee_excess","counters":[]},{"line":"    | \"Cancelled\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok Cancelled","counters":[]},{"line":"    | str -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let res =","counters":[]},{"line":"          List.find_map","counters":[]},{"line":"            ~f:(fun (prefix, suffix, parse) ->","counters":[]},{"line":"              Option.try_with (fun () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  assert (","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"                    String.length str","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                    >= String.length prefix + String.length suffix ) ;","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"                  for i = 0 to String.length prefix - 1 do","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                    assert (Char.equal prefix.[i] str.[i])","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                  done ;","counters":[]},{"line":"                  let offset = String.length str - String.length suffix in","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"                  for i = 0 to String.length suffix - 1 do","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                    assert (Char.equal suffix.[i] str.[offset + i])","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"                  done ;","counters":[]},{"line":"                  parse","counters":[]},{"line":"                    (String.sub str ~pos:(String.length prefix)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"                       ~len:(offset - String.length prefix) ) ) )","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"            [ ( \"Account_app_state_\"","counters":[]},{"line":"              , \"_precondition_unsatisfied\"","counters":[]},{"line":"              , fun str ->","counters":[]},{"line":"                  Account_app_state_precondition_unsatisfied (int_of_string str)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"              )","counters":[]},{"line":"            ]","counters":[]},{"line":"        in","counters":[]},{"line":"        match res with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Some res ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok res","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error \"Transaction_status.Failure.of_string: Unknown value\" )","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"of_string(to_string) roundtrip\" =","counters":[]},{"line":"    List.iter all ~f:(fun failure ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        [%test_eq: (t, string) Result.t]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"          (of_string (to_string failure))","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          (Ok failure) )","counters":[]},{"line":"","counters":[]},{"line":"  let describe = function","counters":[]},{"line":"    | Predicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"A predicate failed\"","counters":[]},{"line":"    | Source_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The source account does not exist\"","counters":[]},{"line":"    | Receiver_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The receiver account does not exist\"","counters":[]},{"line":"    | Amount_insufficient_to_create_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Cannot create account: transaction amount is smaller than the account \\","counters":[]},{"line":"         creation fee\"","counters":[]},{"line":"    | Cannot_pay_creation_fee_in_token ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Cannot create account: account creation fees cannot be paid in \\","counters":[]},{"line":"         non-default tokens\"","counters":[]},{"line":"    | Source_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The source account has an insufficient balance\"","counters":[]},{"line":"    | Source_minimum_balance_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The source account requires a minimum balance\"","counters":[]},{"line":"    | Receiver_already_exists ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Attempted to create an account that already exists\"","counters":[]},{"line":"    | Token_owner_not_caller ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"An account update used a non-default token but its caller was not the \\","counters":[]},{"line":"         token owner\"","counters":[]},{"line":"    | Overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The resulting balance is too large to store\"","counters":[]},{"line":"    | Global_excess_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The resulting global fee excess is too large to store\"","counters":[]},{"line":"    | Local_excess_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The resulting local fee excess is too large to store\"","counters":[]},{"line":"    | Local_supply_increase_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The resulting local supply increase is too large to store\"","counters":[]},{"line":"    | Global_supply_increase_overflow ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The resulting global supply increase is too large to store\"","counters":[]},{"line":"    | Signed_command_on_zkapp_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The source of a signed command cannot be a snapp account\"","counters":[]},{"line":"    | Zkapp_account_not_present ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"A zkApp account does not exist\"","counters":[]},{"line":"    | Update_not_permitted_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its balance\"","counters":[]},{"line":"    | Update_not_permitted_timing_existing_account ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The timing of an existing account cannot be updated\"","counters":[]},{"line":"    | Update_not_permitted_delegate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its delegate\"","counters":[]},{"line":"    | Update_not_permitted_app_state ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its app state\"","counters":[]},{"line":"    | Update_not_permitted_verification_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its verification key\"","counters":[]},{"line":"    | Update_not_permitted_sequence_state ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its sequence state\"","counters":[]},{"line":"    | Update_not_permitted_zkapp_uri ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its snapp URI\"","counters":[]},{"line":"    | Update_not_permitted_token_symbol ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its token symbol\"","counters":[]},{"line":"    | Update_not_permitted_permissions ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its permissions\"","counters":[]},{"line":"    | Update_not_permitted_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its nonce\"","counters":[]},{"line":"    | Update_not_permitted_voting_for ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The authentication for an account didn't allow the requested update \\","counters":[]},{"line":"         to its voted-for state hash\"","counters":[]},{"line":"    | Zkapp_command_replay_check_failed ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Check to avoid replays failed. The account update must increment \\","counters":[]},{"line":"         nonce or use full commitment if the authorization is a signature\"","counters":[]},{"line":"    | Fee_payer_nonce_must_increase ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Fee payer account update must increment its nonce\"","counters":[]},{"line":"    | Fee_payer_must_be_signed ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Fee payer account update must have a valid signature\"","counters":[]},{"line":"    | Account_balance_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account balance precondition was unsatisfied\"","counters":[]},{"line":"    | Account_nonce_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account nonce precondition was unsatisfied\"","counters":[]},{"line":"    | Account_receipt_chain_hash_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account receipt-chain hash precondition was \\","counters":[]},{"line":"         unsatisfied\"","counters":[]},{"line":"    | Account_delegate_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account delegate precondition was unsatisfied\"","counters":[]},{"line":"    | Account_sequence_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account sequence state precondition was \\","counters":[]},{"line":"         unsatisfied\"","counters":[]},{"line":"    | Account_app_state_precondition_unsatisfied i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        sprintf","counters":[]},{"line":"          \"The account update's account app state (%i) precondition was \\","counters":[]},{"line":"           unsatisfied\"","counters":[]},{"line":"          i","counters":[]},{"line":"    | Account_proved_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account proved state precondition was unsatisfied\"","counters":[]},{"line":"    | Account_is_new_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's account is-new state precondition was unsatisfied\"","counters":[]},{"line":"    | Protocol_state_precondition_unsatisfied ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update's protocol state precondition unsatisfied\"","counters":[]},{"line":"    | Incorrect_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Incorrect nonce\"","counters":[]},{"line":"    | Invalid_fee_excess ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Fee excess from zkapp_command transaction more than the transaction \\","counters":[]},{"line":"         fees\"","counters":[]},{"line":"    | Cancelled ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The account update is cancelled because there's a failure in the \\","counters":[]},{"line":"         zkApp transaction\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t = Mina_wire_types.Mina_base.Transaction_status.V2.t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      | Applied","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Failed of Failure.Collection.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"    [@@deriving sexp, yojson, equal, compare]","counters":[{"col_start":44,"col_end":44,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":3,"col_end":3,"count":1}]}]}