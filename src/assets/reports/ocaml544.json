{"filename":"src/lib/work_selector/inputs.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Currency","counters":[]},{"line":"","counters":[]},{"line":"module Test_inputs = struct","counters":[]},{"line":"  module Transaction_witness = Int","counters":[]},{"line":"  module Ledger_hash = Int","counters":[]},{"line":"  module Sparse_ledger = Int","counters":[]},{"line":"  module Transaction = Int","counters":[]},{"line":"  module Ledger_proof_statement = Fee","counters":[]},{"line":"","counters":[]},{"line":"  module Transaction_protocol_state = struct","counters":[]},{"line":"    type 'a t = 'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Ledger_proof = struct","counters":[]},{"line":"    type t = Fee.t [@@deriving hash, compare, sexp]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Transaction_snark_work = struct","counters":[]},{"line":"    type t = Fee.t","counters":[]},{"line":"","counters":[]},{"line":"    let fee = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    module Statement = struct","counters":[]},{"line":"      type t = Transaction_snark.Statement.t One_or_two.t","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Snark_pool = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t = Transaction_snark.Statement.Stable.V2.t One_or_two.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        [@@deriving hash, compare, sexp]","counters":[{"col_start":39,"col_end":39,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    module Work = Hashable.Make_binable (Stable.Latest)","counters":[]},{"line":"","counters":[]},{"line":"    type t = Currency.Fee.t Work.Table.t","counters":[]},{"line":"","counters":[]},{"line":"    let get_completed_work (t : t) = Work.Table.find t","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let create () = Work.Table.create ()","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"    let add_snark t ~work ~fee =","counters":[]},{"line":"      Work.Table.update t work ~f:(function","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fee","counters":[]},{"line":"        | Some fee' ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Currency.Fee.min fee fee' )","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Staged_ledger = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      (int, Transaction_snark_work.t) Snark_work_lib.Work.Single.Spec.t List.t","counters":[]},{"line":"","counters":[]},{"line":"    let work = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let all_work_pairs t ~get_state:_ = Ok (One_or_two.group_list t)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Transition_frontier = struct","counters":[]},{"line":"    type t = Staged_ledger.t","counters":[]},{"line":"","counters":[]},{"line":"    type best_tip_view = unit","counters":[]},{"line":"","counters":[]},{"line":"    let best_tip_pipe : t -> best_tip_view Pipe_lib.Broadcast_pipe.Reader.t =","counters":[]},{"line":"     fun _t ->","counters":[]},{"line":"      let reader, _writer = Pipe_lib.Broadcast_pipe.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      reader","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let best_tip_staged_ledger = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let get_protocol_state _t _hash =","counters":[]},{"line":"      Ok","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Lazy.force Precomputed_values.for_unit_tests)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          .protocol_state_with_hashes","counters":[]},{"line":"          .data","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Implementation_inputs = struct","counters":[]},{"line":"  open Mina_base","counters":[]},{"line":"  open Mina_transaction","counters":[]},{"line":"  module Ledger_hash = Ledger_hash","counters":[]},{"line":"  module Sparse_ledger = Mina_ledger.Sparse_ledger","counters":[]},{"line":"  module Transaction = Transaction","counters":[]},{"line":"  module Transaction_witness = Transaction_witness","counters":[]},{"line":"  module Ledger_proof = Ledger_proof","counters":[]},{"line":"  module Transaction_snark_work = Transaction_snark_work","counters":[]},{"line":"  module Snark_pool = Network_pool.Snark_pool","counters":[]},{"line":"  module Staged_ledger = Staged_ledger","counters":[]},{"line":"  module Transaction_protocol_state = Transaction_protocol_state","counters":[]},{"line":"","counters":[]},{"line":"  module Transition_frontier = struct","counters":[]},{"line":"    type t = Transition_frontier.t","counters":[]},{"line":"","counters":[]},{"line":"    type best_tip_view = Extensions.Best_tip_diff.view","counters":[]},{"line":"","counters":[]},{"line":"    let best_tip_pipe : t -> best_tip_view Pipe_lib.Broadcast_pipe.Reader.t =","counters":[]},{"line":"     fun t ->","counters":[]},{"line":"      let open Transition_frontier.Extensions in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let extensions = Transition_frontier.extensions t in","counters":[]},{"line":"      get_view_pipe extensions Best_tip_diff","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let best_tip_staged_ledger t =","counters":[]},{"line":"      Transition_frontier.(best_tip t |> Breadcrumb.staged_ledger)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"    let get_protocol_state t state_hash =","counters":[]},{"line":"      match Transition_frontier.find_protocol_state t state_hash with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Some p ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok p","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Or_error.errorf","counters":[]},{"line":"            !\"Protocol state with hash %{sexp: State_hash.t} not found\"","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"            state_hash","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}