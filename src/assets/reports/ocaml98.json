{"filename":"src/lib/genesis_constants/genesis_constants.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Proof_level = struct","counters":[]},{"line":"  type t = Full | Check | None [@@deriving bin_io_unversioned, equal]","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2},{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":68,"col_end":68,"count":4}]},{"line":"","counters":[]},{"line":"  let to_string = function Full -> \"full\" | Check -> \"check\" | None -> \"none\"","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let of_string = function","counters":[]},{"line":"    | \"full\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Full","counters":[]},{"line":"    | \"check\" ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        Check","counters":[]},{"line":"    | \"none\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"unrecognised proof level %s\" s ()","counters":[]},{"line":"","counters":[]},{"line":"  [%%inject \"compiled\", proof_level]","counters":[]},{"line":"","counters":[]},{"line":"  let compiled = of_string compiled","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let for_unit_tests = Check","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Fork_constants = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { previous_state_hash : Pickles.Backend.Tick.Field.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"    ; previous_length : Mina_numbers.Length.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    ; previous_global_slot : Mina_numbers.Global_slot.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned, sexp, equal, compare, yojson]","counters":[{"col_start":62,"col_end":62,"count":4}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(** Constants that affect the constraint systems for proofs (and thus also key","counters":[]},{"line":"    generation).","counters":[]},{"line":"","counters":[]},{"line":"    Care must be taken to ensure that these match against the proving/","counters":[]},{"line":"    verification keys when [proof_level=Full], otherwise generated proofs will","counters":[]},{"line":"    be invalid.","counters":[]},{"line":"*)","counters":[]},{"line":"module Constraint_constants = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":12},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { sub_windows_per_window : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; ledger_depth : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"    ; work_delay : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; block_window_duration_ms : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    ; transaction_capacity_log_2 : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    ; pending_coinbase_depth : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    ; coinbase_amount : Currency.Amount.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"    ; supercharged_coinbase_factor : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"    ; account_creation_fee : Currency.Fee.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"    ; fork : Fork_constants.t option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving bin_io_unversioned, sexp, equal, compare, yojson]","counters":[{"col_start":62,"col_end":62,"count":4}]},{"line":"","counters":[]},{"line":"  let to_snark_keys_header (t : t) : Snark_keys_header.Constraint_constants.t =","counters":[]},{"line":"    { sub_windows_per_window = t.sub_windows_per_window","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; ledger_depth = t.ledger_depth","counters":[]},{"line":"    ; work_delay = t.work_delay","counters":[]},{"line":"    ; block_window_duration_ms = t.block_window_duration_ms","counters":[]},{"line":"    ; transaction_capacity = Log_2 t.transaction_capacity_log_2","counters":[]},{"line":"    ; pending_coinbase_depth = t.pending_coinbase_depth","counters":[]},{"line":"    ; coinbase_amount = Currency.Amount.to_uint64 t.coinbase_amount","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"    ; supercharged_coinbase_factor = t.supercharged_coinbase_factor","counters":[]},{"line":"    ; account_creation_fee = Currency.Fee.to_uint64 t.account_creation_fee","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"    ; fork =","counters":[]},{"line":"        ( match t.fork with","counters":[]},{"line":"        | Some { previous_length; previous_state_hash; previous_global_slot } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              { previous_length = Unsigned.UInt32.to_int previous_length","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"              ; previous_state_hash =","counters":[]},{"line":"                  Pickles.Backend.Tick.Field.to_string previous_state_hash","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"              ; previous_global_slot =","counters":[]},{"line":"                  Unsigned.UInt32.to_int previous_global_slot","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              }","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None )","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (* Generate the compile-time constraint constants, using a signature to hide","counters":[]},{"line":"     the optcomp constants that we import.","counters":[]},{"line":"  *)","counters":[]},{"line":"  include (","counters":[]},{"line":"    struct","counters":[]},{"line":"      [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"sub_windows_per_window\", sub_windows_per_window]","counters":[]},{"line":"","counters":[]},{"line":"      [%%else]","counters":[]},{"line":"","counters":[]},{"line":"      (* Invalid value, this should not be used by nonconsensus nodes. *)","counters":[]},{"line":"      let sub_windows_per_window = -1","counters":[]},{"line":"","counters":[]},{"line":"      [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"ledger_depth\", ledger_depth]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"coinbase_amount_string\", coinbase]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"account_creation_fee_string\", account_creation_fee_int]","counters":[]},{"line":"","counters":[]},{"line":"      (** All the proofs before the last [work_delay] blocks must be","counters":[]},{"line":"            completed to add transactions. [work_delay] is the minimum number","counters":[]},{"line":"            of blocks and will increase if the throughput is less.","counters":[]},{"line":"            - If [work_delay = 0], all the work that was added to the scan","counters":[]},{"line":"              state in the previous block is expected to be completed and","counters":[]},{"line":"              included in the current block if any transactions/coinbase are to","counters":[]},{"line":"              be included.","counters":[]},{"line":"            - [work_delay >= 1] means that there's at least two block times for","counters":[]},{"line":"              completing the proofs.","counters":[]},{"line":"        *)","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"work_delay\", scan_state_work_delay]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"block_window_duration_ms\", block_window_duration]","counters":[]},{"line":"","counters":[]},{"line":"      [%%if scan_state_with_tps_goal]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"tps_goal_x10\", scan_state_tps_goal_x10]","counters":[]},{"line":"","counters":[]},{"line":"      let max_coinbases = 2","counters":[]},{"line":"","counters":[]},{"line":"      (* block_window_duration is in milliseconds, so divide by 1000 divide","counters":[]},{"line":"         by 10 again because we have tps * 10","counters":[]},{"line":"      *)","counters":[]},{"line":"      let max_user_commands_per_block =","counters":[]},{"line":"        tps_goal_x10 * block_window_duration_ms / (1000 * 10)","counters":[]},{"line":"","counters":[]},{"line":"      (** Log of the capacity of transactions per transition.","counters":[]},{"line":"            - 1 will only work if we don't have prover fees.","counters":[]},{"line":"            - 2 will work with prover fees, but not if we want a transaction","counters":[]},{"line":"              included in every block.","counters":[]},{"line":"            - At least 3 ensures a transaction per block and the staged-ledger","counters":[]},{"line":"              unit tests pass.","counters":[]},{"line":"        *)","counters":[]},{"line":"      let transaction_capacity_log_2 =","counters":[]},{"line":"        1","counters":[]},{"line":"        + Core_kernel.Int.ceil_log2 (max_user_commands_per_block + max_coinbases)","counters":[]},{"line":"","counters":[]},{"line":"      [%%else]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject","counters":[]},{"line":"      \"transaction_capacity_log_2\", scan_state_transaction_capacity_log_2]","counters":[]},{"line":"","counters":[]},{"line":"      [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"supercharged_coinbase_factor\", supercharged_coinbase_factor]","counters":[]},{"line":"","counters":[]},{"line":"      let pending_coinbase_depth =","counters":[]},{"line":"        Core_kernel.Int.ceil_log2","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"          (((transaction_capacity_log_2 + 1) * (work_delay + 1)) + 1)","counters":[]},{"line":"","counters":[]},{"line":"      [%%ifndef fork_previous_length]","counters":[]},{"line":"","counters":[]},{"line":"      let fork = None","counters":[]},{"line":"","counters":[]},{"line":"      [%%else]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"fork_previous_length\", fork_previous_length]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"fork_previous_state_hash\", fork_previous_state_hash]","counters":[]},{"line":"","counters":[]},{"line":"      [%%inject \"fork_previous_global_slot\", fork_previous_global_slot]","counters":[]},{"line":"","counters":[]},{"line":"      let fork =","counters":[]},{"line":"        Some","counters":[]},{"line":"          { Fork_constants.previous_length =","counters":[]},{"line":"              Mina_numbers.Length.of_int fork_previous_length","counters":[]},{"line":"          ; previous_state_hash =","counters":[]},{"line":"              Data_hash_lib.State_hash.of_base58_check_exn","counters":[]},{"line":"                fork_previous_state_hash","counters":[]},{"line":"          ; previous_global_slot =","counters":[]},{"line":"              Mina_numbers.Global_slot.of_int fork_previous_global_slot","counters":[]},{"line":"          }","counters":[]},{"line":"","counters":[]},{"line":"      [%%endif]","counters":[]},{"line":"","counters":[]},{"line":"      let compiled =","counters":[]},{"line":"        { sub_windows_per_window","counters":[]},{"line":"        ; ledger_depth","counters":[]},{"line":"        ; work_delay","counters":[]},{"line":"        ; block_window_duration_ms","counters":[]},{"line":"        ; transaction_capacity_log_2","counters":[]},{"line":"        ; pending_coinbase_depth","counters":[]},{"line":"        ; coinbase_amount =","counters":[]},{"line":"            Currency.Amount.of_formatted_string coinbase_amount_string","counters":[{"col_start":46,"col_end":46,"count":1}]},{"line":"        ; supercharged_coinbase_factor","counters":[]},{"line":"        ; account_creation_fee =","counters":[]},{"line":"            Currency.Fee.of_formatted_string account_creation_fee_string","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"        ; fork","counters":[]},{"line":"        }","counters":[]},{"line":"    end :","counters":[]},{"line":"      sig","counters":[]},{"line":"        val compiled : t","counters":[]},{"line":"      end )","counters":[]},{"line":"","counters":[]},{"line":"  let for_unit_tests = compiled","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(*Constants that can be specified for generating the base proof (that are not required for key-generation) in runtime_genesis_ledger.exe and that can be configured at runtime.","counters":[]},{"line":"  The types are defined such that this module doesn't depend on any of the coda libraries (except blake2 and module_version) to avoid dependency cycles.","counters":[]},{"line":"  TODO: #4659 move key generation to runtime_genesis_ledger.exe to include scan_state constants, consensus constants (c and  block_window_duration) and ledger depth here*)","counters":[]},{"line":"","counters":[]},{"line":"let genesis_timestamp_of_string str =","counters":[]},{"line":"  let default_zone = Time.Zone.of_utc_offset ~hours:(-8) in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  Time.of_string_gen","counters":[]},{"line":"    ~find_zone:(fun _ -> assert false)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    ~default_zone:(fun () -> default_zone)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    str","counters":[]},{"line":"","counters":[]},{"line":"let of_time t = Time.to_span_since_epoch t |> Time.Span.to_ms |> Int64.of_float","counters":[{"col_start":16,"col_end":16,"count":1},{"col_start":46,"col_end":46,"count":1},{"col_start":65,"col_end":65,"count":1}]},{"line":"","counters":[]},{"line":"let validate_time time_str =","counters":[]},{"line":"  match","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Result.try_with (fun () ->","counters":[]},{"line":"        Option.value_map ~default:(Time.now ()) ~f:genesis_timestamp_of_string","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          time_str )","counters":[]},{"line":"  with","counters":[]},{"line":"  | Ok time ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ok (of_time time)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  | Error _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error","counters":[]},{"line":"        \"Invalid timestamp. Please specify timestamp in \\\"%Y-%m-%d \\","counters":[]},{"line":"         %H:%M:%S%z\\\". For example, \\\"2019-01-30 12:00:00-0800\\\" for UTC-08:00 \\","counters":[]},{"line":"         timezone\"","counters":[]},{"line":"","counters":[]},{"line":"let genesis_timestamp_to_string time =","counters":[]},{"line":"  Int64.to_float time |> Time.Span.of_ms |> Time.of_span_since_epoch","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  |> Time.to_string_iso8601_basic ~zone:(Time.Zone.of_utc_offset ~hours:(-8))","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"(*Protocol constants required for consensus and snarks. Consensus constants is generated using these*)","counters":[]},{"line":"module Protocol = struct","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type ('length, 'delta, 'genesis_state_timestamp) t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":57,"col_end":57,"count":6}]},{"line":"              ( 'length","counters":[]},{"line":"              , 'delta","counters":[]},{"line":"              , 'genesis_state_timestamp )","counters":[]},{"line":"              Mina_wire_types.Genesis_constants.Protocol.Poly.V1.t =","counters":[]},{"line":"          { k : 'length","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"          ; slots_per_epoch : 'length","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          ; slots_per_sub_window : 'length","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ; delta : 'delta","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"          ; genesis_state_timestamp : 'genesis_state_timestamp","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving equal, ord, hash, sexp, yojson, hlist, fields]","counters":[{"col_start":65,"col_end":65,"count":5}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = (int, int, (Int64.t[@version_asserted])) Poly.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"      [@@deriving equal, ord, hash]","counters":[{"col_start":34,"col_end":34,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      let to_yojson (t : t) =","counters":[]},{"line":"        `Assoc","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [ (\"k\", `Int t.k)","counters":[]},{"line":"          ; (\"slots_per_epoch\", `Int t.slots_per_epoch)","counters":[]},{"line":"          ; (\"slots_per_sub_window\", `Int t.slots_per_sub_window)","counters":[]},{"line":"          ; (\"delta\", `Int t.delta)","counters":[]},{"line":"          ; ( \"genesis_state_timestamp\"","counters":[]},{"line":"            , `String","counters":[]},{"line":"                (Time.to_string_abs","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                   (Time.of_span_since_epoch","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                      (Time.Span.of_ms","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                         (Int64.to_float t.genesis_state_timestamp) ) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                   ~zone:Time.Zone.utc ) )","counters":[]},{"line":"          ]","counters":[]},{"line":"","counters":[]},{"line":"      let of_yojson = function","counters":[]},{"line":"        | `Assoc","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ (\"k\", `Int k)","counters":[]},{"line":"            ; (\"slots_per_epoch\", `Int slots_per_epoch)","counters":[]},{"line":"            ; (\"slots_per_sub_window\", `Int slots_per_sub_window)","counters":[]},{"line":"            ; (\"delta\", `Int delta)","counters":[]},{"line":"            ; (\"genesis_state_timestamp\", `String time_str)","counters":[]},{"line":"            ] -> (","counters":[]},{"line":"            match validate_time time_str with","counters":[]},{"line":"            | Ok genesis_state_timestamp ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Ok","counters":[]},{"line":"                  { Poly.k","counters":[]},{"line":"                  ; slots_per_epoch","counters":[]},{"line":"                  ; slots_per_sub_window","counters":[]},{"line":"                  ; delta","counters":[]},{"line":"                  ; genesis_state_timestamp","counters":[]},{"line":"                  }","counters":[]},{"line":"            | Error e ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Error (sprintf !\"Genesis_constants.Protocol.of_yojson: %s\" e) )","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error \"Genesis_constants.Protocol.of_yojson: unexpected JSON\"","counters":[]},{"line":"","counters":[]},{"line":"      let t_of_sexp _ = failwith \"t_of_sexp: not implemented\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"      let sexp_of_t (t : t) =","counters":[]},{"line":"        let module T = struct","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          type t = (int, int, string) Poly.Stable.V1.t [@@deriving sexp]","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        end in","counters":[]},{"line":"        let t' : T.t =","counters":[]},{"line":"          { k = t.k","counters":[]},{"line":"          ; delta = t.delta","counters":[]},{"line":"          ; slots_per_epoch = t.slots_per_epoch","counters":[]},{"line":"          ; slots_per_sub_window = t.slots_per_sub_window","counters":[]},{"line":"          ; genesis_state_timestamp =","counters":[]},{"line":"              Time.to_string_abs","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                (Time.of_span_since_epoch","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                   (Time.Span.of_ms (Int64.to_float t.genesis_state_timestamp)) )","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"                ~zone:Time.Zone.utc","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        T.sexp_of_t t'","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%define_locally Stable.Latest.(to_yojson)]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  (* bin_io is for printing chain id inputs *)","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":1},{"col_start":7,"col_end":7,"count":2}]},{"line":"    { protocol : Protocol.Stable.Latest.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; txpool_max_size : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; num_accounts : int option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    ; transaction_expiry_hr : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; zkapp_proof_update_cost : float","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; zkapp_signed_single_update_cost : float","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"    ; zkapp_signed_pair_update_cost : float","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"    ; zkapp_transaction_cost_limit : float","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    ; max_event_elements : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    ; max_sequence_event_elements : int","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    }","counters":[]},{"line":"  [@@deriving to_yojson, sexp_of, bin_io_unversioned]","counters":[{"col_start":52,"col_end":52,"count":4}]},{"line":"","counters":[]},{"line":"  (*Note: not including transaction_expiry_hr in the chain id to give nodes the","counters":[]},{"line":"    flexibility to update it when required but having different expiry times","counters":[]},{"line":"    will cause inconsistent pools*)","counters":[]},{"line":"  let hash (t : t) =","counters":[]},{"line":"    let str =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( List.map","counters":[]},{"line":"          (* TODO: *)","counters":[]},{"line":"          [ t.protocol.k","counters":[]},{"line":"          ; t.protocol.slots_per_epoch","counters":[]},{"line":"          ; t.protocol.slots_per_sub_window","counters":[]},{"line":"          ; t.protocol.delta","counters":[]},{"line":"          ; t.txpool_max_size","counters":[]},{"line":"          ]","counters":[]},{"line":"          ~f:Int.to_string","counters":[]},{"line":"      |> String.concat ~sep:\"\" )","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"      ^ Time.to_string_abs ~zone:Time.Zone.utc","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"          (Time.of_span_since_epoch","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"             (Time.Span.of_ms","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                (Int64.to_float t.protocol.genesis_state_timestamp) ) )","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    in","counters":[]},{"line":"    Blake2.digest_string str |> Blake2.to_hex","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"genesis_state_timestamp_string\", genesis_state_timestamp]","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"k\", k]","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"slots_per_epoch\", slots_per_epoch]","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"slots_per_sub_window\", slots_per_sub_window]","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"delta\", delta]","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"pool_max_size\", pool_max_size]","counters":[]},{"line":"","counters":[]},{"line":"let compiled : t =","counters":[]},{"line":"  { protocol =","counters":[]},{"line":"      { k","counters":[]},{"line":"      ; slots_per_epoch","counters":[]},{"line":"      ; slots_per_sub_window","counters":[]},{"line":"      ; delta","counters":[]},{"line":"      ; genesis_state_timestamp =","counters":[]},{"line":"          genesis_timestamp_of_string genesis_state_timestamp_string |> of_time","counters":[{"col_start":72,"col_end":72,"count":1},{"col_start":78,"col_end":78,"count":1}]},{"line":"      }","counters":[]},{"line":"  ; txpool_max_size = pool_max_size","counters":[]},{"line":"  ; num_accounts = None","counters":[]},{"line":"  ; transaction_expiry_hr = Mina_compile_config.transaction_expiry_hr","counters":[]},{"line":"  ; zkapp_proof_update_cost = Mina_compile_config.zkapp_proof_update_cost","counters":[]},{"line":"  ; zkapp_signed_single_update_cost =","counters":[]},{"line":"      Mina_compile_config.zkapp_signed_single_update_cost","counters":[]},{"line":"  ; zkapp_signed_pair_update_cost =","counters":[]},{"line":"      Mina_compile_config.zkapp_signed_pair_update_cost","counters":[]},{"line":"  ; zkapp_transaction_cost_limit =","counters":[]},{"line":"      Mina_compile_config.zkapp_transaction_cost_limit","counters":[]},{"line":"  ; max_event_elements = Mina_compile_config.max_event_elements","counters":[]},{"line":"  ; max_sequence_event_elements =","counters":[]},{"line":"      Mina_compile_config.max_sequence_event_elements","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let for_unit_tests = compiled","counters":[{"col_start":28,"col_end":28,"count":1}]}]}