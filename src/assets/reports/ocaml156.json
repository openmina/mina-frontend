{"filename":"src/lib/merkle_ledger/syncable_intf.ml","lines":[{"line":"module type S = sig","counters":[]},{"line":"  type root_hash","counters":[]},{"line":"","counters":[]},{"line":"  type hash","counters":[]},{"line":"","counters":[]},{"line":"  type account","counters":[]},{"line":"","counters":[]},{"line":"  type addr","counters":[]},{"line":"","counters":[]},{"line":"  type t [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  type path","counters":[]},{"line":"","counters":[]},{"line":"  val depth : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val num_accounts : t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val merkle_path_at_addr_exn : t -> addr -> path","counters":[]},{"line":"","counters":[]},{"line":"  val get_inner_hash_at_addr_exn : t -> addr -> hash","counters":[]},{"line":"","counters":[]},{"line":"  val set_inner_hash_at_addr_exn : t -> addr -> hash -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val set_all_accounts_rooted_at_exn : t -> addr -> account list -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val set_batch_accounts : t -> (addr * account) list -> unit","counters":[]},{"line":"","counters":[]},{"line":"  (** Get all of the accounts that are in a subtree of the underlying Merkle","counters":[]},{"line":"    tree rooted at `address`. The accounts are ordered by their addresses. *)","counters":[]},{"line":"  val get_all_accounts_rooted_at_exn : t -> addr -> (addr * account) list","counters":[]},{"line":"","counters":[]},{"line":"  val merkle_root : t -> root_hash","counters":[]},{"line":"","counters":[]},{"line":"  val make_space_for : t -> int -> unit","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}