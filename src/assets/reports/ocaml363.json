{"filename":"src/lib/fields_derivers_zkapps/fields_derivers_zkapps.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"module Field = Snark_params.Tick.Field","counters":[]},{"line":"","counters":[]},{"line":"module Make (Schema : Graphql_intf.Schema) = struct","counters":[]},{"line":"  module Graphql = Fields_derivers_graphql.Graphql_raw.Make (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  let derivers () =","counters":[]},{"line":"    let graphql_fields =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ref Graphql.Fields.Input.T.{ run = (fun () -> failwith \"unimplemented\") }","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    in","counters":[]},{"line":"    let nullable_graphql_fields =","counters":[]},{"line":"      ref Graphql.Fields.Input.T.{ run = (fun () -> failwith \"unimplemented\") }","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    in","counters":[]},{"line":"    let graphql_fields_accumulator = ref [] in","counters":[]},{"line":"    let graphql_arg = ref (fun () -> failwith \"unimplemented\") in","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"    let nullable_graphql_arg = ref (fun () -> failwith \"unimplemented\") in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"    let graphql_arg_accumulator = ref Graphql.Args.Acc.T.Init in","counters":[]},{"line":"    let graphql_creator = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    let graphql_query = ref None in","counters":[]},{"line":"    let graphql_query_accumulator = ref [] in","counters":[]},{"line":"","counters":[]},{"line":"    let to_json = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    let of_json = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    let to_json_accumulator = ref [] in","counters":[]},{"line":"    let of_json_creator = ref String.Map.empty in","counters":[]},{"line":"","counters":[]},{"line":"    let js_layout = ref (`Assoc []) in","counters":[]},{"line":"    let js_layout_accumulator = ref [] in","counters":[]},{"line":"","counters":[]},{"line":"    let contramap = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    let map = ref (fun _ -> failwith \"unimplemented\") in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    let skip = ref false in","counters":[]},{"line":"","counters":[]},{"line":"    object","counters":[]},{"line":"      method skip = skip","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_fields = graphql_fields","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"      method nullable_graphql_fields = nullable_graphql_fields","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_fields_accumulator = graphql_fields_accumulator","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_arg = graphql_arg","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"      method nullable_graphql_arg = nullable_graphql_arg","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_arg_accumulator = graphql_arg_accumulator","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_creator = graphql_creator","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_query = graphql_query","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"      method graphql_query_accumulator = graphql_query_accumulator","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"      method to_json = to_json","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"      method of_json = of_json","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"      method to_json_accumulator = to_json_accumulator","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"      method of_json_creator = of_json_creator","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"      method js_layout = js_layout","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      method js_layout_accumulator = js_layout_accumulator","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"      method contramap = contramap","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"      method map = map","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"  let o () = derivers ()","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"  module Unified_input = struct","counters":[]},{"line":"    type 'a t = < .. > as 'a","counters":[]},{"line":"      constraint 'a = _ Fields_derivers_json.To_yojson.Input.t","counters":[]},{"line":"      constraint 'a = _ Fields_derivers_json.Of_yojson.Input.t","counters":[]},{"line":"      constraint 'a = _ Graphql.Fields.Input.t","counters":[]},{"line":"      constraint 'a = _ Graphql.Args.Input.t","counters":[]},{"line":"      constraint 'a = _ Fields_derivers_graphql.Graphql_query.Input.t","counters":[]},{"line":"      constraint 'a = _ Fields_derivers_js.Js_layout.Input.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let yojson obj ?doc ~name ~js_type ~map ~contramap : _ Unified_input.t =","counters":[]},{"line":"    (obj#graphql_fields :=","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"       let open Schema in","counters":[]},{"line":"       Graphql.Fields.Input.T.","counters":[]},{"line":"         { run =","counters":[]},{"line":"             (fun () ->","counters":[]},{"line":"               scalar name ?doc ~coerce:Yojson.Safe.to_basic |> non_null )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"         } ) ;","counters":[]},{"line":"","counters":[]},{"line":"    (obj#nullable_graphql_fields :=","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"       let open Schema in","counters":[]},{"line":"       Graphql.Fields.Input.T.","counters":[]},{"line":"         { run = (fun () -> scalar name ?doc ~coerce:Yojson.Safe.to_basic) } ) ;","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    (obj#graphql_arg :=","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"       fun () ->","counters":[]},{"line":"         Schema.Arg.scalar name ?doc ~coerce:Graphql.arg_to_yojson","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         |> Schema.Arg.non_null ) ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"    (obj#nullable_graphql_arg :=","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"       fun () -> Schema.Arg.scalar name ?doc ~coerce:Graphql.arg_to_yojson ) ;","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    obj#to_json := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    obj#of_json := Fn.id ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    obj#contramap := contramap ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"    obj#map := map ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"    obj#js_layout := Fields_derivers_js.Js_layout.leaf_type js_type ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"    Fields_derivers_graphql.Graphql_query.scalar obj","counters":[]},{"line":"","counters":[]},{"line":"  let invalid_scalar_to_string = function","counters":[]},{"line":"    | `Uint ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Uint\"","counters":[]},{"line":"    | `Field ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Field\"","counters":[]},{"line":"    | `Token_id ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Token_id\"","counters":[]},{"line":"    | `Public_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Public_key\"","counters":[]},{"line":"    | `Amount ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Amount\"","counters":[]},{"line":"    | `Balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Balance\"","counters":[]},{"line":"    | `Unit ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Unit\"","counters":[]},{"line":"    | `Proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Proof\"","counters":[]},{"line":"    | `Verification_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Verification_key\"","counters":[]},{"line":"    | `Signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Signature\"","counters":[]},{"line":"","counters":[]},{"line":"  let raise_invalid_scalar t s =","counters":[]},{"line":"    failwith (\"Invalid rich scalar: \" ^ invalid_scalar_to_string t ^ \" \" ^ s)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let except ~f v (x : string) = try f x with _ -> raise_invalid_scalar v x","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let iso_string ?doc ~name ~js_type obj ~(to_string : 'a -> string)","counters":[]},{"line":"      ~(of_string : string -> 'a) =","counters":[]},{"line":"    yojson obj ?doc ~name ~js_type","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~map:(function","counters":[]},{"line":"        | `String x ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            of_string x","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            raise (Fields_derivers_json.Of_yojson.Invalid_json_scalar `String)","counters":[]},{"line":"        )","counters":[]},{"line":"      ~contramap:(fun x -> `String (to_string x))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"  let uint64 obj : _ Unified_input.t =","counters":[]},{"line":"    iso_string obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~doc:\"Unsigned 64-bit integer represented as a string in base10\"","counters":[]},{"line":"      ~name:\"UInt64\" ~js_type:UInt64 ~to_string:Unsigned.UInt64.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Unsigned.UInt64.of_string `Uint)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let uint32 obj : _ Unified_input.t =","counters":[]},{"line":"    iso_string obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~doc:\"Unsigned 32-bit integer represented as a string in base10\"","counters":[]},{"line":"      ~name:\"UInt32\" ~js_type:UInt32 ~to_string:Unsigned.UInt32.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Unsigned.UInt32.of_string `Uint)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let field obj : _ Unified_input.t =","counters":[]},{"line":"    iso_string obj ~name:\"Field\" ~js_type:Field","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~doc:\"String representing an Fp Field element\" ~to_string:Field.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Field.of_string `Field)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let public_key obj : _ Unified_input.t =","counters":[]},{"line":"    iso_string obj ~name:\"PublicKey\" ~js_type:PublicKey","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~doc:\"String representing a public key in base58\"","counters":[]},{"line":"      ~to_string:Signature_lib.Public_key.Compressed.to_string","counters":[]},{"line":"      ~of_string:","counters":[]},{"line":"        (except ~f:Signature_lib.Public_key.Compressed.of_base58_check_exn","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           `Public_key )","counters":[]},{"line":"","counters":[]},{"line":"  let skip obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.skip obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let js_only js_layout obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.skip obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    obj#js_layout := js_layout ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.skip obj","counters":[]},{"line":"","counters":[]},{"line":"  let int obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.int obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.int obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.int obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.int obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.int obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.int obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let string obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.string obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.string obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.string obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.string obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.string obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.string obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let bool obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.bool obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.bool obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.bool obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.bool obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.bool obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.bool obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let global_slot obj =","counters":[]},{"line":"    iso_string obj ~name:\"GlobalSlot\" ~js_type:UInt32","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~to_string:Unsigned.UInt32.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Unsigned.UInt32.of_string `Uint)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let amount obj =","counters":[]},{"line":"    iso_string obj ~name:\"CurrencyAmount\" ~js_type:UInt64","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~to_string:Currency.Amount.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Currency.Amount.of_string `Amount)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let balance obj =","counters":[]},{"line":"    iso_string obj ~name:\"Balance\" ~js_type:UInt64","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~to_string:Currency.Balance.to_string","counters":[]},{"line":"      ~of_string:(except ~f:Currency.Balance.of_string `Balance)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let option (x : _ Unified_input.t) ~js_type obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.option x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.option x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.option x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.option x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.option ~js_type x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.option x obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let list ?(static_length : int option) (x : _ Unified_input.t) obj :","counters":[]},{"line":"      _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.list x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.list x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.list x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.list x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.list ?static_length x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.list x obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let iso ~map ~contramap (x : _ Unified_input.t) obj : _ Unified_input.t =","counters":[]},{"line":"    let _a = Graphql.Fields.contramap ~f:contramap x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _b = Graphql.Args.map ~f:map x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _c = Fields_derivers_json.To_yojson.contramap ~f:contramap x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _d = Fields_derivers_graphql.Graphql_query.wrapped x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let _e = Fields_derivers_js.Js_layout.wrapped x obj in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Fields_derivers_json.Of_yojson.map ~f:map x obj","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let iso_record ~of_record ~to_record record_deriver obj =","counters":[]},{"line":"    iso ~map:of_record ~contramap:to_record (record_deriver @@ o ()) obj","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let array inner obj : _ Unified_input.t =","counters":[]},{"line":"    iso ~map:Array.of_list ~contramap:Array.to_list","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ((list @@ inner @@ o ()) (o ()))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      obj","counters":[]},{"line":"","counters":[]},{"line":"  let add_field ?skip_data ~t_fields_annots (x : _ Unified_input.t) fd acc =","counters":[]},{"line":"    let _, acc' = Graphql.Fields.add_field ~t_fields_annots x fd acc in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let c1, acc'' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Graphql.Args.add_field ?skip_data ~t_fields_annots x fd acc'","counters":[]},{"line":"    in","counters":[]},{"line":"    let _, acc''' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_json.To_yojson.add_field ~t_fields_annots x fd acc''","counters":[]},{"line":"    in","counters":[]},{"line":"    let c2, acc'''' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_json.Of_yojson.add_field ?skip_data ~t_fields_annots x fd","counters":[]},{"line":"        acc'''","counters":[]},{"line":"    in","counters":[]},{"line":"    let _, acc''''' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_graphql.Graphql_query.add_field ~t_fields_annots x fd","counters":[]},{"line":"        acc''''","counters":[]},{"line":"    in","counters":[]},{"line":"    let _, acc'''''' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_js.Js_layout.add_field ~t_fields_annots x fd acc'''''","counters":[]},{"line":"    in","counters":[]},{"line":"    ((function `Left x -> c1 x | `Right x -> c2 x), acc'''''')","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let ( !. ) ?skip_data x fd acc = add_field ?skip_data (x @@ o ()) fd acc","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"  let finish name ~t_toplevel_annots (f, acc) =","counters":[]},{"line":"    let _a =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Graphql.Fields.finish name ~t_toplevel_annots ((fun x -> f (`Left x)), acc)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"    in","counters":[]},{"line":"    let _b =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Graphql.Args.finish name ~t_toplevel_annots ((fun x -> f (`Left x)), acc)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"    in","counters":[]},{"line":"    let _c =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_json.To_yojson.finish ((fun x -> f (`Right x)), acc)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"    in","counters":[]},{"line":"    let _d =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_graphql.Graphql_query.finish ((fun x -> f (`Left x)), acc)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"    in","counters":[]},{"line":"    let _e =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fields_derivers_js.Js_layout.finish name ~t_toplevel_annots","counters":[]},{"line":"        ((fun x -> f (`Left x)), acc)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"    in","counters":[]},{"line":"    Fields_derivers_json.Of_yojson.finish ((fun x -> f (`Right x)), acc)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"  let with_checked ~checked ~name deriver obj =","counters":[]},{"line":"    Fields_derivers_js.Js_layout.with_checked ~name","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (checked @@ o ())","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      (deriver obj)","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"  let balance_change obj =","counters":[]},{"line":"    let sign_to_string = function","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      | Sgn.Pos ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          \"Positive\"","counters":[]},{"line":"      | Sgn.Neg ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          \"Negative\"","counters":[]},{"line":"    in","counters":[]},{"line":"    let sign_of_string = function","counters":[]},{"line":"      | \"Positive\" ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Sgn.Pos","counters":[]},{"line":"      | \"Negative\" ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Sgn.Neg","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"impossible\"","counters":[]},{"line":"    in","counters":[]},{"line":"    let sign_deriver =","counters":[]},{"line":"      iso_string ~name:\"Sign\" ~js_type:(Custom \"Sign\") ~to_string:sign_to_string","counters":[]},{"line":"        ~of_string:sign_of_string","counters":[]},{"line":"    in","counters":[]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots:Currency.Signed_poly.t_fields_annots in","counters":[]},{"line":"    Currency.Signed_poly.Fields.make_creator obj ~magnitude:!.amount","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"      ~sgn:!.sign_deriver","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    |> finish \"BalanceChange\"","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"         ~t_toplevel_annots:Currency.Signed_poly.t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let to_json obj x = !(obj#to_json) @@ !(obj#contramap) x","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let of_json obj x = !(obj#map) @@ !(obj#of_json) x","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let js_layout deriver = !((deriver @@ o ())#js_layout)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let typ obj = !(obj#graphql_fields).Graphql.Fields.Input.T.run ()","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let arg_typ obj = !(obj#graphql_arg) ()","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let inner_query obj = Fields_derivers_graphql.Graphql_query.inner_query obj","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"  let rec json_to_safe : Yojson.Basic.t -> Yojson.Safe.t = function","counters":[]},{"line":"    | `Assoc kv ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Assoc (List.map kv ~f:(fun (k, v) -> (k, json_to_safe v)))","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    | `Bool b ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Bool b","counters":[]},{"line":"    | `Float f ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Float f","counters":[]},{"line":"    | `Int i ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Int i","counters":[]},{"line":"    | `List xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `List (List.map xs ~f:json_to_safe)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    | `Null ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `Null","counters":[]},{"line":"    | `String s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        `String s","counters":[]},{"line":"","counters":[]},{"line":"  (* TODO: remove this or move to a %test_module once the deriver code is stable *)","counters":[]},{"line":"  (* Can be used to print the graphql schema, like this:","counters":[]},{"line":"     Fields_derivers_zkapps.Test.print_schema full ;","counters":[]},{"line":"  *)","counters":[]},{"line":"  module Test = struct","counters":[]},{"line":"    module M = struct","counters":[]},{"line":"      let ( let* ) = Schema.Io.bind","counters":[]},{"line":"","counters":[]},{"line":"      let return = Schema.Io.return","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let print_schema (full : _ Unified_input.t) =","counters":[]},{"line":"      let typ = !(full#graphql_fields).run () in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      let query_top_level =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Schema.(","counters":[]},{"line":"          field \"query\" ~typ:(non_null typ)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"            ~args:Arg.[]","counters":[]},{"line":"            ~doc:\"sample query\"","counters":[]},{"line":"            ~resolve:(fun _ _ -> ()))","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      in","counters":[]},{"line":"      let schema =","counters":[]},{"line":"        Schema.(schema [ query_top_level ] ~mutations:[] ~subscriptions:[])","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      in","counters":[]},{"line":"      let res : 'a Schema.Io.t =","counters":[]},{"line":"        Schema.execute schema ()","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"          (Fields_derivers_graphql.Test.introspection_query ())","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      in","counters":[]},{"line":"      let open Schema.Io in","counters":[]},{"line":"      bind res (function","counters":[]},{"line":"        | Ok (`Response data) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            data |> Yojson.Basic.to_string |> printf \"%s\" |> return","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwith \"Unexpected response\" )","counters":[]},{"line":"","counters":[]},{"line":"    module Loop = struct","counters":[]},{"line":"      let rec json_to_string_gql : Yojson.Safe.t -> string = function","counters":[]},{"line":"        | `Assoc kv ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf \"{\\n%s\\n}\"","counters":[]},{"line":"              ( List.map kv ~f:(fun (k, v) ->","counters":[]},{"line":"                    sprintf \"%s: %s\"","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      (Fields_derivers.under_to_camel k)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                      (json_to_string_gql v) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"              |> String.concat ~sep:\",\\n\" )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        | `List xs ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf \"[\\n%s\\n]\"","counters":[]},{"line":"              (List.map xs ~f:json_to_string_gql |> String.concat ~sep:\",\\n\")","counters":[{"col_start":52,"col_end":52,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        | x ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Yojson.Safe.to_string x","counters":[]},{"line":"","counters":[]},{"line":"      let arg_query json =","counters":[]},{"line":"        Printf.sprintf","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          {graphql|query LoopIn {","counters":[]},{"line":"            arg(","counters":[]},{"line":"              input : %s","counters":[]},{"line":"            )","counters":[]},{"line":"          }|graphql}","counters":[]},{"line":"          (json_to_string_gql json)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"      let out_query keys =","counters":[]},{"line":"        Printf.sprintf","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          {graphql|","counters":[]},{"line":"          query LoopOut {","counters":[]},{"line":"            out %s","counters":[]},{"line":"          }","counters":[]},{"line":"        |graphql}","counters":[]},{"line":"          keys","counters":[]},{"line":"","counters":[]},{"line":"      let run deriver (a : 'a) =","counters":[]},{"line":"        let schema =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let in_schema : ('a option ref, unit) Schema.field =","counters":[]},{"line":"            Schema.(","counters":[]},{"line":"              field \"arg\" ~typ:(non_null int)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"                ~args:Arg.[ arg \"input\" ~typ:(arg_typ deriver) ]","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"                ~doc:\"sample args query\"","counters":[]},{"line":"                ~resolve:(fun { ctx; _ } () (input : 'a) ->","counters":[]},{"line":"                  ctx := Some input ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  0 ))","counters":[]},{"line":"          in","counters":[]},{"line":"          let out_schema : ('a option ref, unit) Schema.field =","counters":[]},{"line":"            Schema.(","counters":[]},{"line":"              field \"out\" ~typ:(typ deriver)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"                ~args:Arg.[]","counters":[]},{"line":"                ~doc:\"sample query\"","counters":[]},{"line":"                ~resolve:(fun { ctx; _ } () -> Option.value_exn !ctx))","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          in","counters":[]},{"line":"          Schema.(","counters":[]},{"line":"            schema [ in_schema; out_schema ] ~mutations:[] ~subscriptions:[])","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        in","counters":[]},{"line":"        let ctx = ref None in","counters":[]},{"line":"        let open M in","counters":[]},{"line":"        let run_query q =","counters":[]},{"line":"          let x = Graphql_parser.parse q in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          match x with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Ok res ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Schema.execute schema ctx res","counters":[]},{"line":"          | Error err ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwithf \"Failed to parse query: %s %s\" q err ()","counters":[]},{"line":"        in","counters":[]},{"line":"        (* send json in *)","counters":[]},{"line":"        let* () =","counters":[]},{"line":"          let json = to_json deriver a in","counters":[]},{"line":"          let q = arg_query json in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let* res = run_query q in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          match res with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Ok (`Response _) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return @@ ()","counters":[]},{"line":"          | Error e ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwithf \"Unexpected response in: %s\"","counters":[]},{"line":"                (e |> Yojson.Basic.to_string)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                ()","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith \"Unexpected stream in\"","counters":[]},{"line":"        in","counters":[]},{"line":"        (* get query *)","counters":[]},{"line":"        let inner_query =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Option.value_exn","counters":[]},{"line":"            (Fields_derivers_graphql.Graphql_query.inner_query deriver)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"        in","counters":[]},{"line":"        (* read json out *)","counters":[]},{"line":"        let* a' =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let* res = run_query (out_query inner_query) in","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          match res with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Ok (`Response json) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let unwrap k json =","counters":[]},{"line":"                match json with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | `Assoc kv ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    List.Assoc.find_exn kv ~equal:String.equal k","counters":[]},{"line":"                | _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    failwithf \"Expected wrapping %s\" k ()","counters":[]},{"line":"              in","counters":[]},{"line":"              let inner = json |> unwrap \"data\" |> unwrap \"out\" in","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"              of_json deriver (json_to_safe inner) |> return","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"          | Error e ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwithf \"Unexpected response out: %s\"","counters":[]},{"line":"                (e |> Yojson.Basic.to_string)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                ()","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              failwith \"Unexpected stream out\"","counters":[]},{"line":"        in","counters":[]},{"line":"        [%test_eq: string]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          (Yojson.Safe.to_string (to_json deriver a))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          (Yojson.Safe.to_string (to_json deriver a')) ;","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        return ()","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Derivers = Make (Fields_derivers_graphql.Schema)","counters":[]},{"line":"include Derivers","counters":[]},{"line":"module Js_layout = Fields_derivers_js.Js_layout","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"let proof obj : _ Unified_input.t =","counters":[]},{"line":"  let of_string s =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match Pickles.Side_loaded.Proof.of_base64 s with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        proof","counters":[]},{"line":"    | Error _err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        raise_invalid_scalar `Proof s","counters":[]},{"line":"  in","counters":[]},{"line":"  iso_string obj ~name:\"SnappProof\" ~js_type:String","counters":[]},{"line":"    ~to_string:Pickles.Side_loaded.Proof.to_base64 ~of_string","counters":[]},{"line":"","counters":[]},{"line":"let verification_key_with_hash obj =","counters":[]},{"line":"  let verification_key obj =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let of_string s =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match Pickles.Side_loaded.Verification_key.of_base64 s with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Ok vk ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          vk","counters":[]},{"line":"      | Error _err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          raise_invalid_scalar `Verification_key s","counters":[]},{"line":"    in","counters":[]},{"line":"    Pickles.Side_loaded.Verification_key.(","counters":[]},{"line":"      iso_string obj ~name:\"VerificationKey\" ~js_type:String","counters":[]},{"line":"        ~to_string:to_base64 ~of_string ~doc:\"Verification key in Base64 format\")","counters":[]},{"line":"  in","counters":[]},{"line":"  let ( !. ) =","counters":[]},{"line":"    ( !. ) ~t_fields_annots:With_hash.Stable.Latest.t_fields_annots","counters":[]},{"line":"  in","counters":[]},{"line":"  With_hash.Stable.Latest.Fields.make_creator ~data:!.verification_key","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"    ~hash:!.field obj","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  |> finish \"VerificationKeyWithHash\"","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"       ~t_toplevel_annots:With_hash.Stable.Latest.t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"verification key with hash, roundtrip json\" =","counters":[]},{"line":"  let open Pickles.Side_loaded.Verification_key in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (* we do this because the dummy doesn't have a wrap_vk on it *)","counters":[]},{"line":"  let data = dummy |> to_base58_check |> of_base58_check_exn in","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  let v = { With_hash.data; hash = Field.one } in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let o = verification_key_with_hash @@ o () in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"  [%test_eq: (t, Field.t) With_hash.t] v (of_json o (to_json o v))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Test\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    module IO = struct","counters":[]},{"line":"      type +'a t = 'a","counters":[]},{"line":"","counters":[]},{"line":"      let bind t f = f t","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"      let return t = t","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"      module Stream = struct","counters":[]},{"line":"        type 'a t = 'a Seq.t","counters":[]},{"line":"","counters":[]},{"line":"        let map t f = Seq.map f t","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        let iter t f = Seq.iter f t","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        let close _t = ()","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Field_error = struct","counters":[]},{"line":"      type t = string","counters":[]},{"line":"","counters":[]},{"line":"      let message_of_field_error t = t","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"      let extensions_of_field_error _t = None","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Schema = Graphql_schema.Make (IO) (Field_error)","counters":[]},{"line":"    module Derivers = Make (Schema)","counters":[]},{"line":"    include Derivers","counters":[]},{"line":"    module Public_key = Signature_lib.Public_key.Compressed","counters":[]},{"line":"","counters":[]},{"line":"    module Or_ignore_test = struct","counters":[]},{"line":"      type 'a t = Check of 'a | Ignore [@@deriving compare, sexp, equal]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"      let of_option = function None -> Ignore | Some x -> Check x","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"      let to_option = function Ignore -> None | Check x -> Some x","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"      let to_yojson a x = [%to_yojson: 'a option] a (to_option x)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"      let of_yojson a x = Result.map ~f:of_option ([%of_yojson: 'a option] a x)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":64,"col_end":64,"count":0},{"col_start":65,"col_end":65,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"      let derived inner init =","counters":[]},{"line":"        iso ~map:of_option ~contramap:to_option","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ((option ~js_type:Flagged_option @@ inner @@ o ()) (o ()))","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          init","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module V = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        { foo : int","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"        ; foo1 : Unsigned_extended.UInt64.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        ; bar : Unsigned_extended.UInt64.t Or_ignore_test.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"        ; baz : Unsigned_extended.UInt32.t list","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, compare, sexp, equal, fields, yojson]","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"      let v =","counters":[]},{"line":"        { foo = 1","counters":[]},{"line":"        ; foo1 = Unsigned.UInt64.of_int 10","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        ; bar = Or_ignore_test.Check (Unsigned.UInt64.of_int 10)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"        ; baz = Unsigned.UInt32.[ of_int 11; of_int 12 ]","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots","counters":[]},{"line":"","counters":[]},{"line":"      let derivers obj =","counters":[]},{"line":"        Fields.make_creator obj ~foo:!.int ~foo1:!.uint64","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"          ~bar:!.(Or_ignore_test.derived uint64)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ~baz:!.(list @@ uint32 @@ o ())","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        |> finish \"V\" ~t_toplevel_annots","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let v1 = V.derivers @@ o ()","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"full roundtrips\" = Test.Loop.run v1 V.v","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = { field : Field.t; nothing : unit [@skip] }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      [@@deriving annot, compare, sexp, equal, fields]","counters":[]},{"line":"","counters":[]},{"line":"      let v = { field = Field.of_int 10; nothing = () }","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"      let derivers obj =","counters":[]},{"line":"        let open Derivers in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let ( !. ) ?skip_data = ( !. ) ?skip_data ~t_fields_annots in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        Fields.make_creator obj ~field:!.field","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"          ~nothing:(( !. ) ~skip_data:() skip)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        |> finish \"V2\" ~t_toplevel_annots","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let v2 = V2.derivers @@ Derivers.o ()","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"to_json'\" =","counters":[]},{"line":"      let open Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: string]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (Yojson.Safe.to_string (to_json v2 V2.v))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        {|{\"field\":\"10\"}|}","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"roundtrip json'\" =","counters":[]},{"line":"      let open Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: V2.t] (of_json v2 (to_json v2 V2.v)) V2.v","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    module V3 = struct","counters":[]},{"line":"      type t = { public_key : Public_key.t }","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      [@@deriving annot, compare, sexp, equal, fields]","counters":[]},{"line":"","counters":[]},{"line":"      let v =","counters":[]},{"line":"        { public_key =","counters":[]},{"line":"            Public_key.of_base58_check_exn","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              \"B62qoTqMG41DFgkyQmY2Pos1x671Gfzs9k8NKqUdSg7wQasEV6qnXQP\"","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"      let derivers obj =","counters":[]},{"line":"        let open Derivers in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"        Fields.make_creator obj ~public_key:!.public_key","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        |> finish \"V3\" ~t_toplevel_annots","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let v3 = V3.derivers @@ Derivers.o ()","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"to_json'\" =","counters":[]},{"line":"      let open Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: string]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (Yojson.Safe.to_string (to_json v3 V3.v))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        {|{\"publicKey\":\"B62qoTqMG41DFgkyQmY2Pos1x671Gfzs9k8NKqUdSg7wQasEV6qnXQP\"}|}","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"roundtrip json'\" =","counters":[]},{"line":"      let open Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: V3.t] (of_json v3 (to_json v3 V3.v)) V3.v","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]}]}