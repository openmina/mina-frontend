{"filename":"src/database/database.rs","lines":[{"line":"use std::{","counters":[]},{"line":"    collections::HashSet,","counters":[]},{"line":"    path::PathBuf,","counters":[]},{"line":"    sync::{Arc, Mutex},","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    account::{Account, AccountId, TokenId},","counters":[]},{"line":"    address::Address,","counters":[]},{"line":"    base::{AccountIndex, BaseLedger, GetOrCreated, MerklePath, Uuid},","counters":[]},{"line":"    // tree::{Database, DatabaseError},","counters":[]},{"line":"    tree_version::V2,","counters":[]},{"line":"    TreeVersion,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"use crate::HashesMatrix;","counters":[]},{"line":"","counters":[]},{"line":"use super::database_impl::DatabaseImpl;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, PartialEq, Eq)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub enum DatabaseError {","counters":[]},{"line":"    OutOfLeaves,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct Database<T: TreeVersion> {","counters":[]},{"line":"    // Using a mutex for now but this can be replaced with a RefCell","counters":[]},{"line":"    pub inner: Arc<Mutex<DatabaseImpl<T>>>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// #[derive(Debug)]","counters":[]},{"line":"// pub enum UnregisterBehavior {","counters":[]},{"line":"//     Check,","counters":[]},{"line":"//     Recursive,","counters":[]},{"line":"//     IPromiseIAmReparentingThisDatabase,","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"impl Database<V2> {","counters":[]},{"line":"    pub fn with<F, R>(&self, fun: F) -> R","counters":[{"col_start":4,"col_end":41,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnOnce(&mut DatabaseImpl<V2>) -> R,","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"        let mut inner = self.inner.try_lock().expect(\"lock failed\");","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        fun(&mut inner)","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Database<V2> {","counters":[]},{"line":"    pub fn create_with_dir(depth: u8, dir_name: Option<PathBuf>) -> Self {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        //println!(\"rust_print_backtrace=\\n{}\", crate::short_backtrace());","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"        //println!(\"create_with_dir called\");","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        let db = DatabaseImpl::<V2>::create_with_dir(depth, dir_name);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            inner: Arc::new(Mutex::new(db)),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create(depth: u8) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        Self::create_with_dir(depth, None)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn root_hash(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        self.with(|this| this.root_hash())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":41,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // Do not use","counters":[]},{"line":"    pub fn naccounts(&self) -> usize {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        self.with(|this| this.naccounts())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":41,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create_checkpoint(&self, directory_name: String) {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        self.with(|this| this.create_checkpoint(directory_name))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn make_checkpoint(&self, directory_name: String) {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        self.with(|this| this.make_checkpoint(directory_name))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":61,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn clone_db(&self, directory_name: PathBuf) -> Self {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        //println!(\"clone_db called\");","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        let db = self.with(|this| this.clone_db(directory_name));","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":34,"col_end":63,"count":0},{"col_start":63,"col_end":65,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            inner: Arc::new(Mutex::new(db)),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_cached_hash(&self, addr: &Address) -> Option<Fp> {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        self.with(|this| this.get_cached_hash(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":51,"count":0},{"col_start":51,"col_end":52,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn set_cached_hash(&mut self, addr: &Address, hash: Fp) {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        self.with(|this| this.set_cached_hash(addr, hash))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":57,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty_hash_at_depth(&mut self, depth: usize) -> Fp {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        self.with(|this| this.empty_hash_at_depth(depth))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":56,"count":0},{"col_start":56,"col_end":57,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn invalidate_hashes(&mut self, account_index: AccountIndex) {","counters":[{"col_start":4,"col_end":70,"count":0}]},{"line":"        self.with(|this| this.invalidate_hashes(account_index))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    #[cfg(test)]","counters":[]},{"line":"    pub fn test_matrix(&self) -> HashesMatrix {","counters":[]},{"line":"        self.with(|this| this.hashes_matrix.clone())","counters":[]},{"line":"        // match self {","counters":[]},{"line":"        //     Root { database, .. } => database,","counters":[]},{"line":"        //     Unattached { hashes, .. } | Attached { hashes, .. } => hashes.clone(),","counters":[]},{"line":"        // }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl BaseLedger for Database<V2> {","counters":[]},{"line":"    fn to_list(&self) -> Vec<Account> {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        self.with(|this| this.to_list())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":39,"count":0},{"col_start":39,"col_end":40,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn iter<F>(&self, fun: F)","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(&Account),","counters":[]},{"line":"    {","counters":[]},{"line":"        self.with(|this| this.iter(fun))","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold<B, F>(&self, init: B, fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        self.with(|this| this.fold(init, fun))","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_with_ignored_accounts<B, F>(&self, ignoreds: HashSet<AccountId>, init: B, fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        self.with(|this| this.fold_with_ignored_accounts(ignoreds, init, fun))","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_until<B, F>(&self, init: B, fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> std::ops::ControlFlow<B, B>,","counters":[]},{"line":"    {","counters":[]},{"line":"        self.with(|this| this.fold_until(init, fun))","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn accounts(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.with(|this| this.accounts())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":40,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn token_owner(&self, token_id: TokenId) -> Option<AccountId> {","counters":[{"col_start":4,"col_end":67,"count":1}]},{"line":"        self.with(|this| this.token_owner(token_id))","counters":[{"col_start":0,"col_end":18,"count":1},{"col_start":25,"col_end":51,"count":46},{"col_start":51,"col_end":52,"count":1}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1}]},{"line":"","counters":[]},{"line":"    fn token_owners(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":50,"count":44}]},{"line":"        self.with(|this| this.token_owners())","counters":[{"col_start":0,"col_end":18,"count":44},{"col_start":25,"col_end":44,"count":2},{"col_start":44,"col_end":45,"count":44}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":44}]},{"line":"","counters":[]},{"line":"    fn tokens(&self, public_key: CompressedPubKey) -> HashSet<TokenId> {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        self.with(|this| this.tokens(public_key))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":48,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account(&self, account_id: &AccountId) -> Option<Address> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        self.with(|this| this.location_of_account(account_id))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":61,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account_batch(","counters":[{"col_start":4,"col_end":33,"count":0}]},{"line":"        &self,","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        account_ids: &[AccountId],","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    ) -> Vec<(AccountId, Option<Address>)> {","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        self.with(|this| this.location_of_account_batch(account_ids))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":68,"count":0},{"col_start":68,"col_end":69,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_or_create_account(","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        account_id: AccountId,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        account: Account,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    ) -> Result<GetOrCreated, DatabaseError> {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        self.with(|this| this.get_or_create_account(account_id, account))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":72,"count":0},{"col_start":72,"col_end":73,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn close(&self) {","counters":[{"col_start":4,"col_end":21,"count":0}]},{"line":"        // Drop self","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn last_filled(&self) -> Option<Address> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.with(|this| this.last_filled())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":43,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_uuid(&self) -> Uuid {","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"        self.with(|this| this.get_uuid())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":40,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_directory(&self) -> Option<PathBuf> {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        self.with(|this| this.get_directory())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":45,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_account_hash(&mut self, account_index: AccountIndex) -> Option<Fp> {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        self.with(|this| this.get_account_hash(account_index))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":61,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get(&self, addr: Address) -> Option<Account> {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        self.with(|this| this.get(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":39,"count":0},{"col_start":39,"col_end":40,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_batch(&self, addr: &[Address]) -> Vec<(Address, Option<Account>)> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        self.with(|this| this.get_batch(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":45,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set(&mut self, addr: Address, account: Account) {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        self.with(|this| this.set(addr, account))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":48,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_batch(&mut self, list: &[(Address, Account)]) {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        self.with(|this| this.set_batch(list))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":45,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_at_index(&self, index: AccountIndex) -> Option<Account> {","counters":[{"col_start":4,"col_end":68,"count":0}]},{"line":"        self.with(|this| this.get_at_index(index))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":49,"count":0},{"col_start":49,"col_end":50,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_at_index(&mut self, index: AccountIndex, account: Account) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        self.with(|this| this.set_at_index(index, account))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":58,"count":0},{"col_start":58,"col_end":59,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn index_of_account(&self, account_id: AccountId) -> Option<AccountIndex> {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        self.with(|this| this.index_of_account(account_id))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":58,"count":0},{"col_start":58,"col_end":59,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_root(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        self.with(|this| this.merkle_root())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":43,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        self.with(|this| this.merkle_path(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":47,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_index(&mut self, index: AccountIndex) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        self.with(|this| this.merkle_path_at_index(index))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":57,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove_accounts(&mut self, ids: &[AccountId]) {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        self.with(|this| this.remove_accounts(ids))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":50,"count":0},{"col_start":50,"col_end":51,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn detached_signal(&mut self) {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        self.with(|this| this.detached_signal())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":47,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn depth(&self) -> u8 {","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        self.with(|this| this.depth())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":37,"count":0},{"col_start":37,"col_end":38,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn num_accounts(&self) -> usize {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        self.with(|this| this.num_accounts())","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":44,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_addr(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        self.with(|this| this.merkle_path_at_addr(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":55,"count":0},{"col_start":55,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_inner_hash_at_addr(&mut self, addr: Address) -> Result<Fp, ()> {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        self.with(|this| this.get_inner_hash_at_addr(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":58,"count":0},{"col_start":58,"col_end":59,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_inner_hash_at_addr(&mut self, addr: Address, hash: Fp) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":85,"count":0}]},{"line":"        self.with(|this| this.set_inner_hash_at_addr(addr, hash))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":64,"count":0},{"col_start":64,"col_end":65,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_all_accounts_rooted_at(","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        accounts: &[Account],","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    ) -> Result<(), ()> {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        self.with(|this| this.set_all_accounts_rooted_at(addr, accounts))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":72,"count":0},{"col_start":72,"col_end":73,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_all_accounts_rooted_at(&self, addr: Address) -> Option<Vec<(Address, Account)>> {","counters":[{"col_start":4,"col_end":92,"count":0}]},{"line":"        self.with(|this| this.get_all_accounts_rooted_at(addr))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn make_space_for(&mut self, space: usize) {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        self.with(|this| this.make_space_for(space))","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":25,"col_end":51,"count":0},{"col_start":51,"col_end":52,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn commit(&mut self) {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        // no-op","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use ark_ff::One;","counters":[]},{"line":"    use o1_utils::FieldHelpers;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"    use crate::{","counters":[]},{"line":"        account::Account,","counters":[]},{"line":"        tree_version::{account_empty_legacy_hash, V1, V2},","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    // #[test]","counters":[]},{"line":"    // fn test_legacy_db() {","counters":[]},{"line":"    //     let two: usize = 2;","counters":[]},{"line":"","counters":[]},{"line":"    //     for depth in 2..15 {","counters":[]},{"line":"    //         let mut db = Database::<V1>::create(depth);","counters":[]},{"line":"","counters":[]},{"line":"    //         for _ in 0..two.pow(depth as u32) {","counters":[]},{"line":"    //             db.create_account((), AccountLegacy::create()).unwrap();","counters":[]},{"line":"    //         }","counters":[]},{"line":"","counters":[]},{"line":"    //         let naccounts = db.naccounts();","counters":[]},{"line":"    //         assert_eq!(naccounts, two.pow(depth as u32));","counters":[]},{"line":"","counters":[]},{"line":"    //         assert_eq!(","counters":[]},{"line":"    //             db.create_account((), AccountLegacy::create()).unwrap_err(),","counters":[]},{"line":"    //             DatabaseError::OutOfLeaves","counters":[]},{"line":"    //         );","counters":[]},{"line":"","counters":[]},{"line":"    //         elog!(\"depth={:?} naccounts={:?}\", depth, naccounts);","counters":[]},{"line":"    //     }","counters":[]},{"line":"    // }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_matrix() {","counters":[]},{"line":"        const DEPTH: usize = 4;","counters":[]},{"line":"","counters":[]},{"line":"        let mut matrix = HashesMatrix::new(DEPTH);","counters":[]},{"line":"        let one = Fp::one();","counters":[]},{"line":"","counters":[]},{"line":"        for index in 0..16 {","counters":[]},{"line":"            let account_index = AccountIndex::from(index);","counters":[]},{"line":"            let addr = Address::from_index(account_index, DEPTH);","counters":[]},{"line":"            matrix.set(&addr, one);","counters":[]},{"line":"","counters":[]},{"line":"            elog!(\"{:?} MATRIX {:#?}\", index + 1, matrix);","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let addr = Address::root();","counters":[]},{"line":"","counters":[]},{"line":"        matrix.set(&addr, one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"","counters":[]},{"line":"        matrix.set(&addr.child_left(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"        matrix.set(&addr.child_right(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"","counters":[]},{"line":"        matrix.set(&addr.child_left().child_left(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"        matrix.set(&addr.child_left().child_right(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"        matrix.set(&addr.child_right().child_left(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"        matrix.set(&addr.child_right().child_right(), one);","counters":[]},{"line":"        elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_db_v2() {","counters":[]},{"line":"        let two: usize = 2;","counters":[]},{"line":"","counters":[]},{"line":"        for depth in 2..15 {","counters":[]},{"line":"            let mut db = Database::<V2>::create(depth);","counters":[]},{"line":"","counters":[]},{"line":"            for _ in 0..two.pow(depth as u32) {","counters":[]},{"line":"                let account = Account::rand();","counters":[]},{"line":"                let id = account.id();","counters":[]},{"line":"                db.get_or_create_account(id, account).unwrap();","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            let naccounts = db.naccounts();","counters":[]},{"line":"            assert_eq!(naccounts, two.pow(depth as u32));","counters":[]},{"line":"","counters":[]},{"line":"            let account = Account::create();","counters":[]},{"line":"            let id = account.id();","counters":[]},{"line":"            assert_eq!(","counters":[]},{"line":"                db.get_or_create_account(id, account).unwrap_err(),","counters":[]},{"line":"                DatabaseError::OutOfLeaves","counters":[]},{"line":"            );","counters":[]},{"line":"","counters":[]},{"line":"            elog!(\"depth={:?} naccounts={:?}\", depth, naccounts);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // RUSTFLAGS=\"-C target-feature=+atomics,+bulk-memory,+mutable-globals\" wasm-pack test --release --chrome -- -Z build-std=std,panic_abort -- hashing","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_hashing_tree_with_web_workers() {","counters":[]},{"line":"        use web_sys::console;","counters":[]},{"line":"","counters":[]},{"line":"        use std::time::Duration;","counters":[]},{"line":"        use wasm_thread as thread;","counters":[]},{"line":"","counters":[]},{"line":"        use crate::account;","counters":[]},{"line":"","counters":[]},{"line":"        let mut msg = format!(\"hello\");","counters":[]},{"line":"","counters":[]},{"line":"        const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"        const NTHREADS: usize = 8;","counters":[]},{"line":"","counters":[]},{"line":"        let mut accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"        use wasm_bindgen::prelude::*;","counters":[]},{"line":"","counters":[]},{"line":"        fn perf_to_duration(amt: f64) -> std::time::Duration {","counters":[]},{"line":"            let secs = (amt as u64) / 1_000;","counters":[]},{"line":"            let nanos = (((amt as u64) % 1_000) as u32) * 1_000_000;","counters":[]},{"line":"            std::time::Duration::new(secs, nanos)","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        #[cfg(target_arch = \"wasm32\")]","counters":[]},{"line":"        #[wasm_bindgen(inline_js = r#\"","counters":[]},{"line":"export function performance_now() {","counters":[]},{"line":"  return performance.now();","counters":[]},{"line":"}\"#)]","counters":[]},{"line":"        extern \"C\" {","counters":[]},{"line":"            fn performance_now() -> f64;","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        thread::spawn(move || {","counters":[]},{"line":"            console::time_with_label(\"threads\");","counters":[]},{"line":"            console::log_1(&format!(\"hello from first thread {:?}\", thread::current().id()).into());","counters":[]},{"line":"","counters":[]},{"line":"            let start = performance_now();","counters":[]},{"line":"","counters":[]},{"line":"            let mut joins = Vec::with_capacity(NTHREADS);","counters":[]},{"line":"","counters":[]},{"line":"            for _ in 0..NTHREADS {","counters":[]},{"line":"                let accounts = accounts.split_off(accounts.len() - (NACCOUNTS as usize / NTHREADS));","counters":[]},{"line":"","counters":[]},{"line":"                let join = thread::spawn(move || {","counters":[]},{"line":"                    console::log_1(","counters":[]},{"line":"                        &format!(\"hello from thread {:?}\", thread::current().id()).into(),","counters":[]},{"line":"                    );","counters":[]},{"line":"","counters":[]},{"line":"                    let hash = accounts.iter().map(|a| a.hash()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"                    console::log_1(","counters":[]},{"line":"                        &format!(\"ending from thread {:?}\", thread::current().id()).into(),","counters":[]},{"line":"                    );","counters":[]},{"line":"","counters":[]},{"line":"                    hash.len()","counters":[]},{"line":"                });","counters":[]},{"line":"","counters":[]},{"line":"                joins.push(join);","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            let nhashes: usize = joins.into_iter().map(|j| j.join().unwrap()).sum();","counters":[]},{"line":"","counters":[]},{"line":"            assert_eq!(nhashes, NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"            let end = performance_now();","counters":[]},{"line":"","counters":[]},{"line":"            console::log_1(","counters":[]},{"line":"                &format!(","counters":[]},{"line":"                    \"nhashes={:?} nthreads={:?} time={:?}\",","counters":[]},{"line":"                    nhashes,","counters":[]},{"line":"                    NTHREADS,","counters":[]},{"line":"                    perf_to_duration(end - start)","counters":[]},{"line":"                )","counters":[]},{"line":"                .into(),","counters":[]},{"line":"            );","counters":[]},{"line":"            console::time_end_with_label(\"threads\");","counters":[]},{"line":"        });","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_hashing_tree() {","counters":[]},{"line":"        use web_sys::console;","counters":[]},{"line":"","counters":[]},{"line":"        const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"","counters":[]},{"line":"        console::time_with_label(\"generate random accounts\");","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(20);","counters":[]},{"line":"","counters":[]},{"line":"        console::log_1(&format!(\"{:?} accounts in nodejs\", NACCOUNTS).into());","counters":[]},{"line":"","counters":[]},{"line":"        let accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"        for (index, mut account) in accounts.into_iter().enumerate() {","counters":[]},{"line":"            account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"            let id = account.id();","counters":[]},{"line":"            db.get_or_create_account(id, account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        console::time_end_with_label(\"generate random accounts\");","counters":[]},{"line":"        assert_eq!(db.naccounts(), NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"        console::time_with_label(\"compute merkle root\");","counters":[]},{"line":"        db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        console::time_end_with_label(\"compute merkle root\");","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(not(target_family = \"wasm\"))]","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_hashing_tree() {","counters":[]},{"line":"        const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        let mut db = Database::<V2>::create(20);","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"{:?} accounts natively\", NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"        let accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"        for (index, mut account) in accounts.into_iter().enumerate() {","counters":[]},{"line":"            account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"            let id = account.id();","counters":[]},{"line":"            db.get_or_create_account(id, account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"generate random accounts {:?}\", now.elapsed());","counters":[]},{"line":"        assert_eq!(db.naccounts(), NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"        let now = std::time::Instant::now();","counters":[]},{"line":"        db.merkle_root();","counters":[]},{"line":"        elog!(\"compute merkle root {:?}\", now.elapsed());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_legacy_hash_empty() {","counters":[]},{"line":"        let account_empty_hash = account_empty_legacy_hash();","counters":[]},{"line":"        assert_eq!(","counters":[]},{"line":"            account_empty_hash.to_hex(),","counters":[]},{"line":"            \"70ccdba14f829608e59a37ed98ffcaeef06dad928d568a9adbde13e3dd104a20\"","counters":[]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        for (depth, s) in [","counters":[]},{"line":"            (","counters":[]},{"line":"                0,","counters":[]},{"line":"                \"70ccdba14f829608e59a37ed98ffcaeef06dad928d568a9adbde13e3dd104a20\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                5,","counters":[]},{"line":"                \"4590712e4bd873ba93d01b665940e0edc48db1a7c90859948b7799f45a443b15\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                10,","counters":[]},{"line":"                \"ba083b16b757794c81233d4ebf1ab000ba4a174a8174c1e8ee8bf0846ec2e10d\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                11,","counters":[]},{"line":"                \"5d65e7d5f4c5441ac614769b913400aa3201f3bf9c0f33441dbf0a33a1239822\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                100,","counters":[]},{"line":"                \"0e4ecb6104658cf8c06fca64f7f1cb3b0f1a830ab50c8c7ed9de544b8e6b2530\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                2000,","counters":[]},{"line":"                \"b05105f8281f75efaf3c6b324563685c8be3a01b1c7d3f314ae733d869d95209\",","counters":[]},{"line":"            ),","counters":[]},{"line":"        ] {","counters":[]},{"line":"            let hash = V1::empty_hash_at_depth(depth);","counters":[]},{"line":"            assert_eq!(hash.to_hex(), s, \"invalid hash at depth={:?}\", depth);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_hash_empty() {","counters":[]},{"line":"        let depths = [0, 5, 10, 11, 100, 2000];","counters":[]},{"line":"","counters":[]},{"line":"        let hexs = [","counters":[]},{"line":"            \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"            \"2eea32889ccf9091284c7b76ad0daaacac399ec872d305100387f3c29a81af2e\",","counters":[]},{"line":"            \"6a6118625352d2fab65198327eb52c2f86c84ce25df7dfa815daeda7e51b3014\",","counters":[]},{"line":"            \"9eef56dbbdbe723f6a1a5321a5ac1b3cad9f551297d7cefe9db1c6e439b71534\",","counters":[]},{"line":"            \"66e301cefd6c5dbc77f8573832803d4ef69c46e4a1f6b6a0fbd2248a8a387b1b\",","counters":[]},{"line":"            \"b40bfc496c1bae16f56fa633b830f697bfb23939afea498e2a44f0c1325c6a0a\",","counters":[]},{"line":"        ];","counters":[]},{"line":"","counters":[]},{"line":"        let result: Vec<_> = depths","counters":[]},{"line":"            .iter()","counters":[]},{"line":"            .map(|depth| V2::empty_hash_at_depth(*depth).to_hex())","counters":[]},{"line":"            .collect();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(result, hexs);","counters":[]},{"line":"","counters":[]},{"line":"        let account_empty_hash = Account::empty().hash();","counters":[]},{"line":"        assert_eq!(account_empty_hash.to_hex(), hexs[0]);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // /// An empty tree produces the same hash than a tree full of empty accounts","counters":[]},{"line":"    // #[test]","counters":[]},{"line":"    // fn test_root_hash_v2() {","counters":[]},{"line":"    //     let mut db = Database::<V2>::create(4);","counters":[]},{"line":"    //     for _ in 0..16 {","counters":[]},{"line":"    //         db.create_account((), Account::empty()).unwrap();","counters":[]},{"line":"    //     }","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         db.create_account((), Account::empty()).unwrap_err(),","counters":[]},{"line":"    //         DatabaseError::OutOfLeaves","counters":[]},{"line":"    //     );","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     elog!(\"ROOT_HASH={:?}\", hash.to_string());","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"","counters":[]},{"line":"    //     let mut db = Database::<V2>::create(4);","counters":[]},{"line":"    //     for _ in 0..1 {","counters":[]},{"line":"    //         db.create_account((), Account::empty()).unwrap();","counters":[]},{"line":"    //     }","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"","counters":[]},{"line":"    //     let db = Database::<V2>::create(4);","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"    // }","counters":[]},{"line":"","counters":[]},{"line":"    /// Accounts inserted in a different order produce different root hash","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_root_hash_different_orders() {","counters":[]},{"line":"        let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"        let accounts = (0..16).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"        for account in &accounts {","counters":[]},{"line":"            db.get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"                .unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"        let root_hash_1 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(4);","counters":[]},{"line":"        for account in accounts.iter().rev() {","counters":[]},{"line":"            db.get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"                .unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"        let root_hash_2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        // Different orders, different root hash","counters":[]},{"line":"        assert_ne!(root_hash_1, root_hash_2);","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(4);","counters":[]},{"line":"        for account in accounts {","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"        let root_hash_3 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        // Same orders, same root hash","counters":[]},{"line":"        assert_eq!(root_hash_1, root_hash_3);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // /// An empty tree produces the same hash than a tree full of empty accounts","counters":[]},{"line":"    // #[test]","counters":[]},{"line":"    // fn test_root_hash_legacy() {","counters":[]},{"line":"    //     let mut db = Database::<V1>::create(4);","counters":[]},{"line":"    //     for _ in 0..16 {","counters":[]},{"line":"    //         db.create_account((), AccountLegacy::empty()).unwrap();","counters":[]},{"line":"    //     }","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         db.create_account((), AccountLegacy::empty()).unwrap_err(),","counters":[]},{"line":"    //         DatabaseError::OutOfLeaves","counters":[]},{"line":"    //     );","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"","counters":[]},{"line":"    //     let mut db = Database::<V1>::create(4);","counters":[]},{"line":"    //     for _ in 0..1 {","counters":[]},{"line":"    //         db.create_account((), AccountLegacy::empty()).unwrap();","counters":[]},{"line":"    //     }","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"","counters":[]},{"line":"    //     let db = Database::<V1>::create(4);","counters":[]},{"line":"    //     let hash = db.root_hash();","counters":[]},{"line":"    //     assert_eq!(","counters":[]},{"line":"    //         hash.to_hex(),","counters":[]},{"line":"    //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"    //     );","counters":[]},{"line":"    // }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests_ocaml {","counters":[]},{"line":"    use std::ops::ControlFlow;","counters":[]},{"line":"","counters":[]},{"line":"    use o1_utils::FieldHelpers;","counters":[]},{"line":"    use rand::Rng;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"    use crate::scan_state::currency::Balance;","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    // \"add and retrieve an account\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_add_retrieve_account() {","counters":[]},{"line":"        let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"        let account = Account::rand();","counters":[]},{"line":"        let location = db","counters":[]},{"line":"            .get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"            .unwrap();","counters":[]},{"line":"        let get_account = db.get(location.addr()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(account, get_account);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"accounts are atomic\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_accounts_are_atomic() {","counters":[]},{"line":"        let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"        let account = Account::rand();","counters":[]},{"line":"        let location: Address = db","counters":[]},{"line":"            .get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"            .unwrap()","counters":[]},{"line":"            .addr();","counters":[]},{"line":"","counters":[]},{"line":"        db.set(location.clone(), account.clone());","counters":[]},{"line":"        let loc = db.location_of_account(&account.id()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(location, loc);","counters":[]},{"line":"        assert_eq!(db.get(location), db.get(loc));","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"length\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_lengths() {","counters":[]},{"line":"        for naccounts in 50..100 {","counters":[]},{"line":"            let mut db = Database::<V2>::create(10);","counters":[]},{"line":"            let mut unique = HashSet::with_capacity(naccounts);","counters":[]},{"line":"","counters":[]},{"line":"            for _ in 0..naccounts {","counters":[]},{"line":"                let account = loop {","counters":[]},{"line":"                    let account = Account::rand();","counters":[]},{"line":"                    if unique.insert(account.id()) {","counters":[]},{"line":"                        break account;","counters":[]},{"line":"                    }","counters":[]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            assert_eq!(db.num_accounts(), naccounts);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"get_or_create_acount does not update an account if key already\"\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_no_update_if_exist() {","counters":[]},{"line":"        let mut db = Database::<V2>::create(10);","counters":[]},{"line":"","counters":[]},{"line":"        let mut account1 = Account::rand();","counters":[]},{"line":"        account1.balance = Balance::from_u64(100);","counters":[]},{"line":"","counters":[]},{"line":"        let location1 = db","counters":[]},{"line":"            .get_or_create_account(account1.id(), account1.clone())","counters":[]},{"line":"            .unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        let mut account2 = account1;","counters":[]},{"line":"        account2.balance = Balance::from_u64(200);","counters":[]},{"line":"","counters":[]},{"line":"        let location2 = db","counters":[]},{"line":"            .get_or_create_account(account2.id(), account2.clone())","counters":[]},{"line":"            .unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        let addr1: Address = location1.clone().addr();","counters":[]},{"line":"        let addr2: Address = location2.clone().addr();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(addr1, addr2);","counters":[]},{"line":"        assert!(matches!(location2, GetOrCreated::Existed(_)));","counters":[]},{"line":"        assert_ne!(db.get(location1.addr()).unwrap(), account2);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"get_or_create_account t account = location_of_account account.key\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_location_of_account() {","counters":[]},{"line":"        for naccounts in 50..100 {","counters":[]},{"line":"            let mut db = Database::<V2>::create(10);","counters":[]},{"line":"","counters":[]},{"line":"            for _ in 0..naccounts {","counters":[]},{"line":"                let account = Account::rand();","counters":[]},{"line":"","counters":[]},{"line":"                let account_id = account.id();","counters":[]},{"line":"                let location = db","counters":[]},{"line":"                    .get_or_create_account(account_id.clone(), account)","counters":[]},{"line":"                    .unwrap();","counters":[]},{"line":"                let addr: Address = location.addr();","counters":[]},{"line":"","counters":[]},{"line":"                assert_eq!(addr, db.location_of_account(&account_id).unwrap());","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"    //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_set_inner_hash() {","counters":[]},{"line":"        // TODO","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn create_full_db(depth: usize) -> Database<V2> {","counters":[]},{"line":"        let mut db = Database::<V2>::create(depth as u8);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..2u64.pow(depth as u32) {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        db","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"    //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_get_set_all_same_root_hash() {","counters":[]},{"line":"        let mut db = create_full_db(7);","counters":[]},{"line":"","counters":[]},{"line":"        let merkle_root1 = db.merkle_root();","counters":[]},{"line":"        let root = Address::root();","counters":[]},{"line":"","counters":[]},{"line":"        let accounts = db.get_all_accounts_rooted_at(root.clone()).unwrap();","counters":[]},{"line":"        let accounts = accounts.into_iter().map(|acc| acc.1).collect::<Vec<_>>();","counters":[]},{"line":"        db.set_all_accounts_rooted_at(root, &accounts).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        let merkle_root2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(merkle_root1, merkle_root2);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"    //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_set_batch_accounts_change_root_hash() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..5 {","counters":[]},{"line":"            let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"            let addr = Address::rand_nonleaf(DEPTH);","counters":[]},{"line":"            let children = addr.iter_children(DEPTH);","counters":[]},{"line":"            let accounts = children","counters":[]},{"line":"                .map(|addr| (addr, Account::rand()))","counters":[]},{"line":"                .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"            let merkle_root1 = db.merkle_root();","counters":[]},{"line":"            elog!(\"naccounts={:?}\", accounts.len());","counters":[]},{"line":"            db.set_batch_accounts(&accounts);","counters":[]},{"line":"            let merkle_root2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"            assert_ne!(merkle_root1, merkle_root2);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"We can retrieve accounts by their by key after using","counters":[]},{"line":"    //  set_batch_accounts\"\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_retrieve_account_after_set_batch() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"        let mut addr = Address::root();","counters":[]},{"line":"        for _ in 0..63 {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            addr = db","counters":[]},{"line":"                .get_or_create_account(account.id(), account)","counters":[]},{"line":"                .unwrap()","counters":[]},{"line":"                .addr();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let last_location = db.last_filled().unwrap();","counters":[]},{"line":"        assert_eq!(addr, last_location);","counters":[]},{"line":"","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(2u64.pow(DEPTH as u32) as usize);","counters":[]},{"line":"","counters":[]},{"line":"        while let Some(next_addr) = addr.next() {","counters":[]},{"line":"            accounts.push((next_addr.clone(), Account::rand()));","counters":[]},{"line":"            addr = next_addr;","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        db.set_batch_accounts(&accounts);","counters":[]},{"line":"","counters":[]},{"line":"        for (addr, account) in &accounts {","counters":[]},{"line":"            let account_id = account.id();","counters":[]},{"line":"            let location = db.location_of_account(&account_id).unwrap();","counters":[]},{"line":"            let queried_account = db.get(location.clone()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"            assert_eq!(*addr, location);","counters":[]},{"line":"            assert_eq!(*account, queried_account);","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let expected_last_location = last_location.to_index().0 + accounts.len() as u64;","counters":[]},{"line":"        let actual_last_location = db.last_filled().unwrap().to_index().0;","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(expected_last_location, actual_last_location);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"If the entire database is full,","counters":[]},{"line":"    //  set_all_accounts_rooted_at_exn(address,accounts);get_all_accounts_rooted_at_exn(address)","counters":[]},{"line":"    //  = accounts\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_set_accounts_rooted_equal_get_accounts_rooted() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..5 {","counters":[]},{"line":"            let addr = Address::rand_nonleaf(DEPTH);","counters":[]},{"line":"            let children = addr.iter_children(DEPTH);","counters":[]},{"line":"            let accounts = children.map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"            db.set_all_accounts_rooted_at(addr.clone(), &accounts)","counters":[]},{"line":"                .unwrap();","counters":[]},{"line":"            let list = db","counters":[]},{"line":"                .get_all_accounts_rooted_at(addr)","counters":[]},{"line":"                .unwrap()","counters":[]},{"line":"                .into_iter()","counters":[]},{"line":"                .map(|(_, acc)| acc)","counters":[]},{"line":"                .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"            assert!(!accounts.is_empty());","counters":[]},{"line":"            assert_eq!(accounts, list);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"create_empty doesn't modify the hash\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_create_empty_doesnt_modify_hash() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"        let start_hash = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        let account = Account::empty();","counters":[]},{"line":"        assert!(matches!(","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap(),","counters":[]},{"line":"            GetOrCreated::Added(_)","counters":[]},{"line":"        ));","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(start_hash, db.merkle_root());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"get_at_index_exn t (index_of_account_exn t public_key) =","counters":[]},{"line":"    // account\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_get_indexed() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            accounts.push(account.clone());","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        for account in accounts {","counters":[]},{"line":"            let account_id = account.id();","counters":[]},{"line":"            let index_of_account = db.index_of_account(account_id).unwrap();","counters":[]},{"line":"            let indexed_account = db.get_at_index(index_of_account).unwrap();","counters":[]},{"line":"            assert_eq!(account, indexed_account);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"set_at_index_exn t index  account; get_at_index_exn t","counters":[]},{"line":"    // index = account\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_set_get_indexed_equal() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..50 {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            let index = rand::thread_rng().gen_range(0..NACCOUNTS);","counters":[]},{"line":"            let index = AccountIndex(index as u64);","counters":[]},{"line":"","counters":[]},{"line":"            db.set_at_index(index.clone(), account.clone()).unwrap();","counters":[]},{"line":"            let at_index = db.get_at_index(index).unwrap();","counters":[]},{"line":"            assert_eq!(account, at_index);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"iter\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_iter() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            accounts.push(account.clone());","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(accounts, db.to_list(),)","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"Add 2^d accounts (for testing, d is small)\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_retrieve() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            accounts.push(account.clone());","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let retrieved = db","counters":[]},{"line":"            .get_all_accounts_rooted_at(Address::root())","counters":[]},{"line":"            .unwrap()","counters":[]},{"line":"            .into_iter()","counters":[]},{"line":"            .map(|(_, acc)| acc)","counters":[]},{"line":"            .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(accounts, retrieved);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"removing accounts restores Merkle root\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_remove_restore_root_hash() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"        let root_hash = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            accounts.push(account.id());","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"        assert_ne!(root_hash, db.merkle_root());","counters":[]},{"line":"","counters":[]},{"line":"        db.remove_accounts(&accounts);","counters":[]},{"line":"        assert_eq!(root_hash, db.merkle_root());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"fold over account balances\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_fold_over_account_balance() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        let mut total_balance: u128 = 0;","counters":[]},{"line":"","counters":[]},{"line":"        for _ in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            total_balance += account.balance.as_u64() as u128;","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let retrieved = db.fold(0u128, |acc, account| acc + account.balance.as_u64() as u128);","counters":[]},{"line":"        assert_eq!(total_balance, retrieved);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"fold_until over account balances\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_fold_until_over_account_balance() {","counters":[]},{"line":"        const DEPTH: usize = 7;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        let mut total_balance: u128 = 0;","counters":[]},{"line":"        let mut last_id: AccountId = Account::empty().id();","counters":[]},{"line":"","counters":[]},{"line":"        for i in 0..NACCOUNTS {","counters":[]},{"line":"            let account = Account::rand();","counters":[]},{"line":"            if i <= 30 {","counters":[]},{"line":"                total_balance += account.balance.as_u64() as u128;","counters":[]},{"line":"                last_id = account.id();","counters":[]},{"line":"            }","counters":[]},{"line":"            db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let retrieved = db.fold_until(0u128, |mut acc, account| {","counters":[]},{"line":"            acc += account.balance.as_u64() as u128;","counters":[]},{"line":"","counters":[]},{"line":"            if account.id() != last_id {","counters":[]},{"line":"                ControlFlow::Continue(acc)","counters":[]},{"line":"            } else {","counters":[]},{"line":"                ControlFlow::Break(acc)","counters":[]},{"line":"            }","counters":[]},{"line":"        });","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(total_balance, retrieved);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_merkle_path_long() {","counters":[]},{"line":"        const DEPTH: usize = 4;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"        for index in 0..NACCOUNTS / 2 {","counters":[]},{"line":"            let mut account = Account::empty();","counters":[]},{"line":"            account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"","counters":[]},{"line":"            // elog!(\"account{}={}\", index, account.hash().to_hex());","counters":[]},{"line":"","counters":[]},{"line":"            let res = db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"            assert!(matches!(res, GetOrCreated::Added(_)));","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"naccounts={:?}\", db.last_filled());","counters":[]},{"line":"","counters":[]},{"line":"        let expected = [","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"784e0bb0e40713d89266de8881b4bc4b2566b2858ad1f255a5a2cf10f0d1ea1b\",","counters":[]},{"line":"                \"1b4c34a1ee5fbe29f03b9b15f7723f2a5fa5387b819c7691c3e2121a1371f539\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"3a14251568da6a01225c7f1285966f2f233fd9ce9d7d0a19cc92f2e261350f2b\",","counters":[]},{"line":"                \"784e0bb0e40713d89266de8881b4bc4b2566b2858ad1f255a5a2cf10f0d1ea1b\",","counters":[]},{"line":"                \"1b4c34a1ee5fbe29f03b9b15f7723f2a5fa5387b819c7691c3e2121a1371f539\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"b4a0c64b24772bbd4bd07b22196739b285572eb5b9d7b068baaa91c13e3e9d3d\",","counters":[]},{"line":"                \"a0f30d76eba83c4b845a8884f89a657e4e59e9df7efd659db9b387c338dccb33\",","counters":[]},{"line":"                \"1b4c34a1ee5fbe29f03b9b15f7723f2a5fa5387b819c7691c3e2121a1371f539\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"01d6d295248d7f210cb86c7aa6af29fa05ee27e1aab0e05e392274e760e9072e\",","counters":[]},{"line":"                \"a0f30d76eba83c4b845a8884f89a657e4e59e9df7efd659db9b387c338dccb33\",","counters":[]},{"line":"                \"1b4c34a1ee5fbe29f03b9b15f7723f2a5fa5387b819c7691c3e2121a1371f539\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"393132d9ea6906f817774cece139580bcf3bd4c5bce04d7dd68cddfa9b02c71e\",","counters":[]},{"line":"                \"f2d9a6dbc6d5b8784735775867cfbb16e209dff4e3e121bc12b2bd098b6a4420\",","counters":[]},{"line":"                \"f1dba4a13602c0b9e31eb10a2290fc3d5dda6b7aa34cdca935e456bf8bbbb817\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"d139253ca13bdd8bc93f832fcf6d2ad0f3bed835bc94c6285991261c9383072d\",","counters":[]},{"line":"                \"f2d9a6dbc6d5b8784735775867cfbb16e209dff4e3e121bc12b2bd098b6a4420\",","counters":[]},{"line":"                \"f1dba4a13602c0b9e31eb10a2290fc3d5dda6b7aa34cdca935e456bf8bbbb817\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"245bea3b8b1d370ceba6840fe34aef690a7aa4a1ba239e0c49806bba74c14b2d\",","counters":[]},{"line":"                \"70909d25d1d0161285f5b2784688b6fc7ba726fc3b122c68783b4ee9de82721a\",","counters":[]},{"line":"                \"f1dba4a13602c0b9e31eb10a2290fc3d5dda6b7aa34cdca935e456bf8bbbb817\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"0bacf1b6b1c0516c9f3a14caef585ee538ddb01a87e058d80d5f1b5c7c44bb3f\",","counters":[]},{"line":"                \"70909d25d1d0161285f5b2784688b6fc7ba726fc3b122c68783b4ee9de82721a\",","counters":[]},{"line":"                \"f1dba4a13602c0b9e31eb10a2290fc3d5dda6b7aa34cdca935e456bf8bbbb817\",","counters":[]},{"line":"                \"c48e7d8cef7db579979b526c374b1009c7f2a99f589bad6c5e3f3f13ad643137\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"            &[","counters":[]},{"line":"                \"76787ad364f994895364bda6d99589e8aab33e028bd307090c54d063211dee14\",","counters":[]},{"line":"                \"2a4b60955c494ef2229b0217cb49f158adf9ef1a39a70b373db5cd361e7f222a\",","counters":[]},{"line":"                \"d6a7b21284ed64c0312999fd93bd350b968a7e83e601044c70f13732dbd53420\",","counters":[]},{"line":"                \"a1dc9f4f77bf3d0d631b4971030b45b9629337611083184dfaf2ff5ef6555022\",","counters":[]},{"line":"            ][..],","counters":[]},{"line":"        ];","counters":[]},{"line":"","counters":[]},{"line":"        let mut hashes = Vec::with_capacity(100);","counters":[]},{"line":"","counters":[]},{"line":"        let root = Address::root();","counters":[]},{"line":"        let nchild = root.iter_children(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"        for child in nchild {","counters":[]},{"line":"            let path = db.merkle_path(child);","counters":[]},{"line":"            let path = path.iter().map(|p| p.hash().to_hex()).collect::<Vec<_>>();","counters":[]},{"line":"            hashes.push(path);","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"expected={:#?}\", expected);","counters":[]},{"line":"        // elog!(\"computed={:#?}\", hashes);","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(&expected[..], hashes.as_slice());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"fold_until over account balances\"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_merkle_path_test2() {","counters":[]},{"line":"        const DEPTH: usize = 20;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        db.merkle_path(Address::first(20));","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    // \"fold_until over account balances\"","counters":[]},{"line":"    // #[test]","counters":[]},{"line":"    fn test_merkle_path_test() {","counters":[]},{"line":"        const DEPTH: usize = 4;","counters":[]},{"line":"        const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"empty={}\", Account::empty().hash());","counters":[]},{"line":"        elog!(\"depth1={}\", V2::empty_hash_at_depth(1));","counters":[]},{"line":"        elog!(\"depth2={}\", V2::empty_hash_at_depth(2));","counters":[]},{"line":"        elog!(\"depth3={}\", V2::empty_hash_at_depth(3));","counters":[]},{"line":"        elog!(\"depth4={}\", V2::empty_hash_at_depth(4));","counters":[]},{"line":"","counters":[]},{"line":"        // let db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        // db.merkle_root();","counters":[]},{"line":"        // db.merkle_path(Address::first(DEPTH));","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"WITH_ACC\");","counters":[]},{"line":"","counters":[]},{"line":"        // let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"        // let mut account = Account::empty();","counters":[]},{"line":"        // account.token_symbol = \"seb\".to_string();","counters":[]},{"line":"        // db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        // db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"        // for _ in 0..NACCOUNTS {","counters":[]},{"line":"        //     let account = Account::rand();","counters":[]},{"line":"        //     db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"        // }","counters":[]},{"line":"","counters":[]},{"line":"        db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        db.merkle_path(Address::first(DEPTH));","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_0={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"0000\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_0={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"0001\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_0={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"0010\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_0={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"0101\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"A\");","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_3={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"000\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_3={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"001\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_3={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"010\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_3={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"101\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"A\");","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_2={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"10\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_2={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"01\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"A\");","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_1={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"1\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_1={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"0\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(\"A\");","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"INNER_AT_0={}\",","counters":[]},{"line":"        //     db.get_inner_hash_at_addr(Address::try_from(\"\").unwrap())","counters":[]},{"line":"        //         .unwrap()","counters":[]},{"line":"        // );","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]}]}