{"filename":"src/lib/key_cache/key_cache.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"module Spec = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    | On_disk of { directory : string; should_write : bool }","counters":[]},{"line":"    | S3 of { bucket_prefix : string; install_path : string }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%inject \"may_download\", download_snark_keys]","counters":[]},{"line":"","counters":[]},{"line":"let may_download = ref may_download","counters":[]},{"line":"","counters":[]},{"line":"let set_downloads_enabled b = may_download := b","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"let may_download () = !may_download","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"module T (M : sig","counters":[]},{"line":"  type _ t","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  type ('a, 'b) t = { write : 'a -> 'b -> unit M.t; read : 'a -> 'b M.t }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Disk_storable (M : sig","counters":[]},{"line":"  type _ t","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  type ('k, 'v) t =","counters":[]},{"line":"    { to_string : 'k -> string","counters":[]},{"line":"    ; read : 'k -> path:string -> 'v M.t","counters":[]},{"line":"    ; write : 'k -> 'v -> string -> unit M.t","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  module M : sig","counters":[]},{"line":"    type _ t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type ('a, 'b) t = ('a, 'b) T(M).t =","counters":[]},{"line":"    { write : 'a -> 'b -> unit M.t; read : 'a -> 'b M.t }","counters":[]},{"line":"","counters":[]},{"line":"  module Disk_storable : sig","counters":[]},{"line":"    type ('k, 'v) t = ('k, 'v) Disk_storable(M).t =","counters":[]},{"line":"      { to_string : 'k -> string","counters":[]},{"line":"      ; read : 'k -> path:string -> 'v M.t","counters":[]},{"line":"      ; write : 'k -> 'v -> string -> unit M.t","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    val of_binable :","counters":[]},{"line":"      ('k -> string) -> (module Binable.S with type t = 'v) -> ('k, 'v) t","counters":[]},{"line":"","counters":[]},{"line":"    val simple :","counters":[]},{"line":"         ('k -> string)","counters":[]},{"line":"      -> ('k -> path:string -> 'v M.t)","counters":[]},{"line":"      -> ('k -> 'v -> string -> unit M.t)","counters":[]},{"line":"      -> ('k, 'v) t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  val read :","counters":[]},{"line":"       Spec.t list","counters":[]},{"line":"    -> ('k, 'v) Disk_storable.t","counters":[]},{"line":"    -> 'k","counters":[]},{"line":"    -> ('v * [> `Cache_hit | `Locally_generated ]) M.t","counters":[]},{"line":"","counters":[]},{"line":"  val write : Spec.t list -> ('k, 'v) Disk_storable.t -> 'k -> 'v -> unit M.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Sync = S with module M := Or_error","counters":[]},{"line":"","counters":[]},{"line":"module type Async = S with module M := Deferred.Or_error","counters":[]},{"line":"","counters":[]},{"line":"module Trivial : Sync = struct","counters":[]},{"line":"  include T (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  module Disk_storable = struct","counters":[]},{"line":"    include Disk_storable (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"    let of_binable to_string _m =","counters":[]},{"line":"      let read _ ~path:_ =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Or_error.error_string \"Key_cache: Trivial store cannot read\"","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      let write _k _t _path = Ok () in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      { to_string; read; write }","counters":[]},{"line":"","counters":[]},{"line":"    let simple to_string read write = { to_string; read; write }","counters":[{"col_start":38,"col_end":38,"count":3}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let read _spec { Disk_storable.to_string = _; read = _; write = _ } _k =","counters":[]},{"line":"    Or_error.error_string \"Key_cache: Trivial store cannot read\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let write _spec { Disk_storable.to_string = _; read = _; write = _ } _k _v =","counters":[]},{"line":"    Ok ()","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Trivial_async : Async = struct","counters":[]},{"line":"  include T (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  module Disk_storable = struct","counters":[]},{"line":"    include Disk_storable (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"    let of_binable to_string _m =","counters":[]},{"line":"      let read _ ~path:_ =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Deferred.Or_error.error_string \"Key_cache: Trivial store cannot read\"","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      let write _k _t _path = Deferred.Or_error.return () in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      { to_string; read; write }","counters":[]},{"line":"","counters":[]},{"line":"    let simple to_string read write = { to_string; read; write }","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let read _spec { Disk_storable.to_string = _; read = _; write = _ } _k =","counters":[]},{"line":"    Deferred.Or_error.error_string \"Key_cache: Trivial store cannot read\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let write _spec { Disk_storable.to_string = _; read = _; write = _ } _k _v =","counters":[]},{"line":"    Deferred.Or_error.return ()","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let sync = ref (module Trivial : Sync)","counters":[]},{"line":"","counters":[]},{"line":"let async = ref (module Trivial_async : Async)","counters":[]},{"line":"","counters":[]},{"line":"let set_sync_implementation x = sync := x","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"","counters":[]},{"line":"let set_async_implementation x = async := x","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"","counters":[]},{"line":"module Sync : Sync = struct","counters":[]},{"line":"  include T (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  module Disk_storable = struct","counters":[]},{"line":"    include Disk_storable (Or_error)","counters":[]},{"line":"","counters":[]},{"line":"    let of_binable to_string binable =","counters":[]},{"line":"      let (module M) = !sync in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      M.Disk_storable.of_binable to_string binable","counters":[]},{"line":"","counters":[]},{"line":"    let simple to_string read write =","counters":[]},{"line":"      let (module M) = !sync in","counters":[{"col_start":6,"col_end":6,"count":3}]},{"line":"      M.Disk_storable.simple to_string read write","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let read spec ds k =","counters":[]},{"line":"    let (module M) = !sync in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    M.read spec ds k","counters":[]},{"line":"","counters":[]},{"line":"  let write spec ds k v =","counters":[]},{"line":"    let (module M) = !sync in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    M.write spec ds k v","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Async : Async = struct","counters":[]},{"line":"  include T (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"  module Disk_storable = struct","counters":[]},{"line":"    include Disk_storable (Deferred.Or_error)","counters":[]},{"line":"","counters":[]},{"line":"    let of_binable to_string binable =","counters":[]},{"line":"      let (module M) = !async in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      M.Disk_storable.of_binable to_string binable","counters":[]},{"line":"","counters":[]},{"line":"    let simple to_string read write =","counters":[]},{"line":"      let (module M) = !async in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      M.Disk_storable.simple to_string read write","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let read spec ds k =","counters":[]},{"line":"    let (module M) = !async in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    M.read spec ds k","counters":[]},{"line":"","counters":[]},{"line":"  let write spec ds k v =","counters":[]},{"line":"    let (module M) = !async in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    M.write spec ds k v","counters":[]},{"line":"end","counters":[]}]}