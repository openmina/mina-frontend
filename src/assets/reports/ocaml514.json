{"filename":"src/lib/network_pool/network_pool_base.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"module Make (Transition_frontier : sig","counters":[]},{"line":"  type t","counters":[]},{"line":"end)","counters":[]},{"line":"(Resource_pool : Intf.Resource_pool_intf","counters":[]},{"line":"                   with type transition_frontier := Transition_frontier.t) :","counters":[]},{"line":"  Intf.Network_pool_base_intf","counters":[]},{"line":"    with type resource_pool := Resource_pool.t","counters":[]},{"line":"     and type resource_pool_diff := Resource_pool.Diff.t","counters":[]},{"line":"     and type resource_pool_diff_verified := Resource_pool.Diff.verified","counters":[]},{"line":"     and type transition_frontier := Transition_frontier.t","counters":[]},{"line":"     and type transition_frontier_diff := Resource_pool.transition_frontier_diff","counters":[]},{"line":"     and type config := Resource_pool.Config.t","counters":[]},{"line":"     and type rejected_diff := Resource_pool.Diff.rejected = struct","counters":[]},{"line":"  let apply_and_broadcast_thread_label =","counters":[]},{"line":"    \"apply_and_broadcast_\" ^ Resource_pool.label ^ \"_diffs\"","counters":[]},{"line":"","counters":[]},{"line":"  let processing_diffs_thread_label =","counters":[]},{"line":"    \"processing_\" ^ Resource_pool.label ^ \"_diffs\"","counters":[]},{"line":"","counters":[]},{"line":"  let processing_transition_frontier_diffs_thread_label =","counters":[]},{"line":"    \"processing_\" ^ Resource_pool.label ^ \"_transition_frontier_diffs\"","counters":[]},{"line":"","counters":[]},{"line":"  let rebroadcast_loop_thread_label = Resource_pool.label ^ \"_rebroadcast_loop\"","counters":[]},{"line":"","counters":[]},{"line":"  module Broadcast_callback = struct","counters":[]},{"line":"    type resource_pool_diff = Resource_pool.Diff.t","counters":[]},{"line":"","counters":[]},{"line":"    type rejected_diff = Resource_pool.Diff.rejected","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[]},{"line":"      | Local of","counters":[]},{"line":"          (   ( [ `Broadcasted | `Not_broadcasted ]","counters":[]},{"line":"              * Resource_pool.Diff.t","counters":[]},{"line":"              * Resource_pool.Diff.rejected )","counters":[]},{"line":"              Or_error.t","counters":[]},{"line":"           -> unit )","counters":[]},{"line":"      | External of Mina_net2.Validation_callback.t","counters":[]},{"line":"","counters":[]},{"line":"    let is_expired = function","counters":[]},{"line":"      | Local _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"      | External cb ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Mina_net2.Validation_callback.is_expired cb","counters":[]},{"line":"","counters":[]},{"line":"    open Mina_net2.Validation_callback","counters":[]},{"line":"","counters":[]},{"line":"    let error err =","counters":[]},{"line":"      Fn.compose Deferred.return (function","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | Local f ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            f (Error err)","counters":[]},{"line":"        | External cb ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fire_if_not_already_fired cb `Reject )","counters":[]},{"line":"","counters":[]},{"line":"    let reject accepted rejected =","counters":[]},{"line":"      Fn.compose Deferred.return (function","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | Local f ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            f (Ok (`Not_broadcasted, accepted, rejected))","counters":[]},{"line":"        | External cb ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fire_if_not_already_fired cb `Reject )","counters":[]},{"line":"","counters":[]},{"line":"    let drop accepted rejected =","counters":[]},{"line":"      Fn.compose Deferred.return (function","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | Local f ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            f (Ok (`Not_broadcasted, accepted, rejected))","counters":[]},{"line":"        | External cb ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fire_if_not_already_fired cb `Ignore )","counters":[]},{"line":"","counters":[]},{"line":"    let forward broadcast_pipe accepted rejected = function","counters":[]},{"line":"      | Local f ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f (Ok (`Broadcasted, accepted, rejected)) ;","counters":[]},{"line":"          Linear_pipe.write broadcast_pipe accepted","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | External cb ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          fire_if_not_already_fired cb `Accept ;","counters":[]},{"line":"          Deferred.unit","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Remote_sink =","counters":[]},{"line":"    Pool_sink.Remote_sink","counters":[]},{"line":"      (struct","counters":[]},{"line":"        include Resource_pool.Diff","counters":[]},{"line":"","counters":[]},{"line":"        type pool = Resource_pool.t","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Broadcast_callback)","counters":[]},{"line":"","counters":[]},{"line":"  module Local_sink =","counters":[]},{"line":"    Pool_sink.Local_sink","counters":[]},{"line":"      (struct","counters":[]},{"line":"        include Resource_pool.Diff","counters":[]},{"line":"","counters":[]},{"line":"        type pool = Resource_pool.t","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Broadcast_callback)","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { resource_pool : Resource_pool.t","counters":[]},{"line":"    ; logger : Logger.t","counters":[]},{"line":"    ; write_broadcasts : Resource_pool.Diff.t Linear_pipe.Writer.t","counters":[]},{"line":"    ; read_broadcasts : Resource_pool.Diff.t Linear_pipe.Reader.t","counters":[]},{"line":"    ; constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let resource_pool { resource_pool; _ } = resource_pool","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let broadcasts { read_broadcasts; _ } = read_broadcasts","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"  let create_rate_limiter () =","counters":[]},{"line":"    Rate_limiter.create","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~capacity:","counters":[]},{"line":"        (Resource_pool.Diff.max_per_15_seconds, `Per (Time.Span.of_sec 15.0))","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"  let apply_and_broadcast t","counters":[]},{"line":"      (diff : Resource_pool.Diff.verified Envelope.Incoming.t) cb =","counters":[]},{"line":"    let rebroadcast (diff', rejected) =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let open Broadcast_callback in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if Resource_pool.Diff.is_empty diff' then (","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"        [%log' trace t.logger]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          \"Refusing to rebroadcast $diff. Pool diff apply feedback: empty diff\"","counters":[]},{"line":"          ~metadata:","counters":[]},{"line":"            [ ( \"diff\"","counters":[]},{"line":"              , Resource_pool.Diff.verified_to_yojson","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                @@ Envelope.Incoming.data diff )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"            ] ;","counters":[]},{"line":"        drop diff' rejected cb )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else (","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        [%log' debug t.logger] \"Rebroadcasting diff %s\"","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          (Resource_pool.Diff.summary diff') ;","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        forward t.write_broadcasts diff' rejected cb )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    in","counters":[]},{"line":"    O1trace.sync_thread apply_and_broadcast_thread_label (fun () ->","counters":[]},{"line":"        match%bind Resource_pool.Diff.unsafe_apply t.resource_pool diff with","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"        | Ok (`Accept, accepted, rejected) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            rebroadcast (accepted, rejected)","counters":[]},{"line":"        | Ok (`Reject, accepted, rejected) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Broadcast_callback.reject accepted rejected cb","counters":[]},{"line":"        | Error (`Locally_generated res) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            rebroadcast res","counters":[]},{"line":"        | Error (`Other e) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log' debug t.logger]","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              \"Refusing to rebroadcast. Pool diff apply feedback: $error\"","counters":[]},{"line":"              ~metadata:[ (\"error\", Error_json.error_to_yojson e) ] ;","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"            Broadcast_callback.error e cb )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"  let log_rate_limiter_occasionally t rl =","counters":[]},{"line":"    let time = Time_ns.Span.of_min 1. in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    every time (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        [%log' debug t.logger]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          ~metadata:[ (\"rate_limiter\", Rate_limiter.summary rl) ]","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"          !\"%s $rate_limiter\" Resource_pool.label )","counters":[]},{"line":"","counters":[]},{"line":"  type wrapped_t =","counters":[]},{"line":"    | Diff of","counters":[]},{"line":"        (Resource_pool.Diff.verified Envelope.Incoming.t * Broadcast_callback.t)","counters":[]},{"line":"    | Transition_frontier_extension of Resource_pool.transition_frontier_diff","counters":[]},{"line":"","counters":[]},{"line":"  let of_resource_pool_and_diffs resource_pool ~logger ~constraint_constants","counters":[]},{"line":"      ~tf_diffs ~log_gossip_heard ~on_remote_push =","counters":[]},{"line":"    let read_broadcasts, write_broadcasts = Linear_pipe.create () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let network_pool =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { resource_pool","counters":[]},{"line":"      ; logger","counters":[]},{"line":"      ; read_broadcasts","counters":[]},{"line":"      ; write_broadcasts","counters":[]},{"line":"      ; constraint_constants","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let remote_r, remote_w, remote_rl =","counters":[]},{"line":"      Remote_sink.create ~log_gossip_heard ~on_push:on_remote_push","counters":[]},{"line":"        ~wrap:(fun m -> Diff m)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        ~unwrap:(function","counters":[]},{"line":"          | Diff m -> m | _ -> failwith \"unexpected message type\" )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ~trace_label:Resource_pool.label ~logger resource_pool","counters":[]},{"line":"    in","counters":[]},{"line":"    let local_r, local_w, _ =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Local_sink.create","counters":[]},{"line":"        ~wrap:(fun m -> Diff m)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        ~unwrap:(function","counters":[]},{"line":"          | Diff m -> m | _ -> failwith \"unexpected message type\" )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ~trace_label:Resource_pool.label ~logger resource_pool","counters":[]},{"line":"    in","counters":[]},{"line":"    log_rate_limiter_occasionally network_pool remote_rl ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (*priority: Transition frontier diffs > local diffs > incoming diffs*)","counters":[]},{"line":"    Deferred.don't_wait_for","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (O1trace.thread Resource_pool.label (fun () ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"           Strict_pipe.Reader.Merge.iter","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             [ Strict_pipe.Reader.map tf_diffs ~f:(fun diff ->","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                   Transition_frontier_extension diff )","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"             ; remote_r","counters":[]},{"line":"             ; local_r","counters":[]},{"line":"             ]","counters":[]},{"line":"             ~f:(fun diff_source ->","counters":[]},{"line":"               match diff_source with","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"               | Diff ((verified_diff, cb) : Remote_sink.unwrapped_t) ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   O1trace.thread processing_diffs_thread_label (fun () ->","counters":[]},{"line":"                       apply_and_broadcast network_pool verified_diff cb )","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"               | Transition_frontier_extension diff ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   O1trace.thread","counters":[]},{"line":"                     processing_transition_frontier_diffs_thread_label","counters":[]},{"line":"                     (fun () ->","counters":[]},{"line":"                       Resource_pool.handle_transition_frontier_diff diff","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                         resource_pool ) ) ) ) ;","counters":[]},{"line":"    (network_pool, remote_w, local_w)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (* Rebroadcast locally generated pool items every 10 minutes. Do so for 50","counters":[]},{"line":"     minutes - at most 5 rebroadcasts - before giving up.","counters":[]},{"line":"","counters":[]},{"line":"     The goal here is to be resilient to short term network failures and","counters":[]},{"line":"     partitions. Note that with gossip we don't know anything about the state of","counters":[]},{"line":"     other peers' pools (we know if something made it into a block, but that can","counters":[]},{"line":"     take a long time and it's possible for things to be successfully received","counters":[]},{"line":"     but never used in a block), so in a healthy network all repetition is spam.","counters":[]},{"line":"     We need to balance reliability with efficiency. Exponential \"backoff\" would","counters":[]},{"line":"     be better, but it'd complicate the interface between this module and the","counters":[]},{"line":"     specific pool implementations.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let rebroadcast_loop : t -> Logger.t -> unit Deferred.t =","counters":[]},{"line":"   fun t logger ->","counters":[]},{"line":"    let rebroadcast_interval = Time.Span.of_min 10. in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let rebroadcast_window = Time.Span.scale rebroadcast_interval 5. in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let has_timed_out time =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if Time.(add time rebroadcast_window < now ()) then `Timed_out else `Ok","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"    in","counters":[]},{"line":"    let rec go () =","counters":[]},{"line":"      let rebroadcastable =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Resource_pool.get_rebroadcastable t.resource_pool ~has_timed_out","counters":[]},{"line":"      in","counters":[]},{"line":"      if List.is_empty rebroadcastable then","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log trace] \"Nothing to rebroadcast\"","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"      else","counters":[]},{"line":"        [%log debug]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          \"Preparing to rebroadcast locally generated resource pool diffs \\","counters":[]},{"line":"           $diffs\"","counters":[]},{"line":"          ~metadata:","counters":[]},{"line":"            [ (\"count\", `Int (List.length rebroadcastable))","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"            ; ( \"diffs\"","counters":[]},{"line":"              , `List","counters":[]},{"line":"                  (List.map","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                     ~f:(fun d -> `String (Resource_pool.Diff.summary d))","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"                     rebroadcastable ) )","counters":[]},{"line":"            ] ;","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        Deferred.List.iter rebroadcastable","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"          ~f:(Linear_pipe.write t.write_broadcasts)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind () = Async.after rebroadcast_interval in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      go ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    go ()","counters":[]},{"line":"","counters":[]},{"line":"  let create ~config ~constraint_constants ~consensus_constants ~time_controller","counters":[]},{"line":"      ~expiry_ns ~frontier_broadcast_pipe ~logger ~log_gossip_heard","counters":[]},{"line":"      ~on_remote_push =","counters":[]},{"line":"    (* Diffs from transition frontier extensions *)","counters":[]},{"line":"    let tf_diff_reader, tf_diff_writer =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Strict_pipe.(","counters":[]},{"line":"        create ~name:\"Network pool transition frontier diffs\" Synchronous)","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    in","counters":[]},{"line":"    let t, locals, remotes =","counters":[]},{"line":"      of_resource_pool_and_diffs","counters":[]},{"line":"        (Resource_pool.create ~constraint_constants ~consensus_constants","counters":[]},{"line":"           ~time_controller ~expiry_ns ~config ~logger ~frontier_broadcast_pipe","counters":[]},{"line":"           ~tf_diff_writer )","counters":[]},{"line":"        ~constraint_constants ~logger ~tf_diffs:tf_diff_reader ~log_gossip_heard","counters":[]},{"line":"        ~on_remote_push","counters":[]},{"line":"    in","counters":[]},{"line":"    O1trace.background_thread rebroadcast_loop_thread_label (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        rebroadcast_loop t logger ) ;","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    (t, locals, remotes)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}