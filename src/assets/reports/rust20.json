{"filename":"src/scan_state/zkapp_logic.rs","lines":[{"line":"use ark_ff::Zero;","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    check_permission, hash_with_kimchi,","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{Amount, Balance, Fee, Index, Magnitude, Sgn, Signed, Slot},","counters":[]},{"line":"        scan_state::ConstraintConstants,","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            account_check_timing, get_account, is_timed,","counters":[]},{"line":"            local_state::{CallStack, LocalStateEnv, StackFrame},","counters":[]},{"line":"            protocol_state::GlobalState,","counters":[]},{"line":"            set_account,","counters":[]},{"line":"            zkapp_command::{self, AccountUpdate, CallForest, CheckAuthorizationResult, OrIgnore, SetOrKeep},","counters":[]},{"line":"            Env, TimingValidation, TransactionFailure, cons_zkapp_command_commitment,","counters":[]},{"line":"        },","counters":[]},{"line":"    },","counters":[]},{"line":"    staged_ledger::sparse_ledger::LedgerIntf,","counters":[]},{"line":"    Account, AuthRequired, ControlTag, Inputs, Mask, ReceiptChainHash, Timing, TokenId,","counters":[]},{"line":"    ZkAppAccount,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::transaction_logic::{zkapp_command::SequenceEvents, Eff, ExistingOrNew, PerformResult};","counters":[]},{"line":"","counters":[]},{"line":"/*","counters":[]},{"line":"    In the OCaml code \"asserts\" are used to raise an \"Assert_failure\" exception that is","counters":[]},{"line":"    catched and turn into an error code. We will mimic a similar behaviour using the Result","counters":[]},{"line":"    type and an \"__assert\" macro.","counters":[]},{"line":"    This code won't panic!","counters":[]},{"line":"*/","counters":[]},{"line":"","counters":[]},{"line":"macro_rules! __assert {","counters":[]},{"line":"    ($cond:expr $(,)?) => {{","counters":[]},{"line":"        if !$cond {","counters":[]},{"line":"            let file = file!();","counters":[]},{"line":"            let line = line!();","counters":[]},{"line":"            return Err(format!(\"Assert_failure {file}:{line}\"));","counters":[]},{"line":"        }","counters":[]},{"line":"        Ok::<(), String>(())","counters":[]},{"line":"    }};","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"pub struct StartData {","counters":[]},{"line":"    pub zkapp_command: CallForest<AccountUpdate>,","counters":[]},{"line":"    pub memo_hash: Fp,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub enum IsStart {","counters":[]},{"line":"    Yes(StartData),","counters":[]},{"line":"    No,","counters":[]},{"line":"    Compute(StartData),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct Handler<L: LedgerIntf + Clone> {","counters":[]},{"line":"    pub perform: fn(Eff<L>) -> PerformResult<L>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn commitment(account_updates: CallForest<AccountUpdate>) -> ReceiptChainHash {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"    ReceiptChainHash(account_updates.hash())","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn full_commitment(","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    account_update: AccountUpdate,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    memo_hash: Fp,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    commitment: ReceiptChainHash,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":") -> ReceiptChainHash {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    let fee_payer_hash = account_update.digest();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"    //println!(\"full_commitment memo {:?} fee_payer {:?} commitment {:?}\", memo_hash, fee_payer_hash, commitment.0);","counters":[{"col_start":0,"col_end":116,"count":0}]},{"line":"","counters":[]},{"line":"    let ret = ReceiptChainHash(hash_with_kimchi(","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        \"MinaAcctUpdateCons\",","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        &[memo_hash, fee_payer_hash, commitment.0],","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"    ));","counters":[{"col_start":0,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"    //println!(\"full_commitment {:?}\", ret);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    ret","counters":[{"col_start":0,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub struct TimingAsRecord {","counters":[]},{"line":"    is_timed: bool,","counters":[]},{"line":"    initial_minimum_balance: Balance,","counters":[]},{"line":"    cliff_time: Slot,","counters":[]},{"line":"    cliff_amount: Amount,","counters":[]},{"line":"    vesting_period: Slot,","counters":[]},{"line":"    vesting_increment: Amount,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn to_record(t: Timing) -> TimingAsRecord {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    match t {","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"        Timing::Untimed => TimingAsRecord {","counters":[{"col_start":27,"col_end":43,"count":0}]},{"line":"            is_timed: false,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            initial_minimum_balance: Balance::zero(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            cliff_time: Slot::zero(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            cliff_amount: Amount::zero(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            vesting_period: Slot::from_u32(1),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            vesting_increment: Amount::zero(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        Timing::Timed {","counters":[]},{"line":"            initial_minimum_balance,","counters":[{"col_start":12,"col_end":36,"count":0}]},{"line":"            cliff_time,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            cliff_amount,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            vesting_period,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            vesting_increment,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        } => TimingAsRecord {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            is_timed: true,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            initial_minimum_balance,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            cliff_time,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            cliff_amount,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            vesting_period,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            vesting_increment,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn controller_check(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    proof_verifies: bool,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    signature_verifies: bool,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    perm: AuthRequired,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":") -> Result<bool, String> {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    __assert!(!(proof_verifies && signature_verifies))?;","counters":[{"col_start":4,"col_end":13,"count":0},{"col_start":16,"col_end":30,"count":0},{"col_start":34,"col_end":52,"count":0},{"col_start":54,"col_end":55,"count":0}]},{"line":"    let tag = if proof_verifies {","counters":[{"col_start":8,"col_end":11,"count":522},{"col_start":17,"col_end":31,"count":0}]},{"line":"        ControlTag::Proof","counters":[{"col_start":8,"col_end":25,"count":261}]},{"line":"    } else if signature_verifies {","counters":[{"col_start":14,"col_end":32,"count":-261}]},{"line":"        ControlTag::Signature","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        ControlTag::NoneGiven","counters":[{"col_start":8,"col_end":29,"count":261}]},{"line":"    };","counters":[]},{"line":"    Ok(check_permission(perm, tag))","counters":[{"col_start":4,"col_end":35,"count":522}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":522}]},{"line":"","counters":[]},{"line":"#[derive(Clone)]","counters":[{"col_start":9,"col_end":14,"count":116}]},{"line":"pub enum ZkAppCommandElt {","counters":[]},{"line":"    ZkAppCommandCommitment(ReceiptChainHash),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/*pub fn cons_zkapp_command_commitment(index: u32, e: ZkAppCommandElt, t: ReceiptChainHash) -> Fp {","counters":[]},{"line":"    let mut inputs = Inputs::new();","counters":[]},{"line":"","counters":[]},{"line":"    let ZkAppCommandElt::ZkAppCommandCommitment(receipt) = &e;","counters":[]},{"line":"","counters":[]},{"line":"    inputs.append(&t);","counters":[]},{"line":"    inputs.append(receipt);","counters":[]},{"line":"    inputs.append_u32(index);","counters":[]},{"line":"","counters":[]},{"line":"    println!(\"cons_zkapp_command_commitment Inputs {:?}\", inputs);","counters":[]},{"line":"","counters":[]},{"line":"    hash_with_kimchi(\"MinaReceiptUC\", &inputs.to_fields())","counters":[]},{"line":"}","counters":[]},{"line":"*/","counters":[]},{"line":"","counters":[]},{"line":"fn assert_with_failure_status_tbl(b: bool, failure_status_tbl: Vec<Vec<TransactionFailure>>) -> Result<(), String> {","counters":[{"col_start":0,"col_end":116,"count":261}]},{"line":"    if !b && !(failure_status_tbl.is_empty()) {","counters":[{"col_start":0,"col_end":9,"count":261},{"col_start":13,"col_end":45,"count":0}]},{"line":"       Err(format!(\"{:?}\", failure_status_tbl))","counters":[{"col_start":7,"col_end":47,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        __assert!(b)","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn set_ledger<L>(should_update: bool, mut t: GlobalState<L>, ledger: L) -> GlobalState<L>","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"where","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    L: LedgerIntf + Clone,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"{","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"    if should_update {","counters":[{"col_start":0,"col_end":20,"count":0},{"col_start":21,"col_end":22,"count":0}]},{"line":"        t.ledger.apply_mask(ledger);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":6,"count":0}]},{"line":"    t","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"// https://github.com/MinaProtocol/mina/blob/32a91613c388a71f875581ad72276e762242f802/src/lib/mina_ledger/ledger.ml#L211","counters":[]},{"line":"fn empty_ledger(depth: usize) -> Mask {","counters":[]},{"line":"    let mask = Mask::new_unattached(depth);","counters":[]},{"line":"    //mask.set_parent(parent, None)","counters":[]},{"line":"    mask","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn pop_call_stack(s: &CallStack) -> (StackFrame, CallStack) {","counters":[]},{"line":"    if let Some(a) = s.pop() {","counters":[{"col_start":16,"col_end":17,"count":0},{"col_start":21,"col_end":28,"count":0}]},{"line":"        a","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        (StackFrame::default(), CallStack::new())","counters":[{"col_start":8,"col_end":49,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub struct GetNextAccountUpdateResult {","counters":[]},{"line":"    pub account_update: AccountUpdate,","counters":[]},{"line":"    pub account_update_forest: CallForest<AccountUpdate>,","counters":[]},{"line":"    pub new_call_stack: CallStack,","counters":[]},{"line":"    pub new_frame: StackFrame,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn get_next_account_update(","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    current_forest: StackFrame,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    call_stack: CallStack,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":") -> Result<GetNextAccountUpdateResult, String> {","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"    let (next_forest, next_call_stack) = pop_call_stack(&call_stack);","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"    let (current_forest, call_stack) = if let true = current_forest.calls.is_empty() {","counters":[{"col_start":9,"col_end":35,"count":0},{"col_start":53,"col_end":84,"count":0}]},{"line":"        (next_forest, next_call_stack)","counters":[{"col_start":8,"col_end":38,"count":1}]},{"line":"    } else {","counters":[]},{"line":"        (current_forest, call_stack)","counters":[{"col_start":8,"col_end":36,"count":-1}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let ((account_update, account_update_forest), remainder_of_current_forest) =","counters":[{"col_start":10,"col_end":80,"count":0}]},{"line":"        current_forest.calls.pop_exn();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    let account_update_caller = account_update.caller();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"    let is_normal_call = account_update_caller == current_forest.caller;","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"    let is_delegate_call = account_update_caller == current_forest.caller_caller;","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"","counters":[]},{"line":"    __assert!(is_normal_call || is_delegate_call)?;","counters":[{"col_start":4,"col_end":13,"count":0},{"col_start":14,"col_end":28,"count":0},{"col_start":32,"col_end":48,"count":0},{"col_start":49,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"    let account_update_forest_empty = account_update_forest.is_empty();","counters":[{"col_start":8,"col_end":71,"count":0}]},{"line":"    let remainder_of_current_forest_empty = remainder_of_current_forest.is_empty();","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"    let (newly_popped_frame, popped_call_stack) = pop_call_stack(&call_stack);","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"    let remainder_of_current_forest_frame = StackFrame {","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        caller: current_forest.caller.clone(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        caller_caller: current_forest.caller_caller,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        calls: remainder_of_current_forest,","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let new_call_stack = if account_update_forest_empty == true {","counters":[{"col_start":8,"col_end":22,"count":0},{"col_start":28,"col_end":63,"count":0}]},{"line":"        if remainder_of_current_forest_empty == true {","counters":[{"col_start":11,"col_end":52,"count":0}]},{"line":"            popped_call_stack","counters":[{"col_start":12,"col_end":29,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            call_stack","counters":[{"col_start":12,"col_end":22,"count":0}]},{"line":"        }","counters":[]},{"line":"    } else {","counters":[]},{"line":"        if remainder_of_current_forest_empty == true {","counters":[{"col_start":11,"col_end":52,"count":0}]},{"line":"            call_stack","counters":[{"col_start":12,"col_end":22,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            call_stack.push(&remainder_of_current_forest_frame)","counters":[{"col_start":12,"col_end":63,"count":0}]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let new_frame = if account_update_forest_empty == true {","counters":[{"col_start":8,"col_end":17,"count":0},{"col_start":23,"col_end":58,"count":0}]},{"line":"        if remainder_of_current_forest_empty == true {","counters":[{"col_start":11,"col_end":52,"count":0}]},{"line":"            newly_popped_frame","counters":[{"col_start":12,"col_end":30,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            remainder_of_current_forest_frame","counters":[{"col_start":12,"col_end":45,"count":0}]},{"line":"        }","counters":[]},{"line":"    } else {","counters":[]},{"line":"        let caller = if is_normal_call == true {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":24,"col_end":46,"count":0}]},{"line":"            account_update.account_id().derive_token_id()","counters":[{"col_start":12,"col_end":57,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            current_forest.caller.clone()","counters":[{"col_start":12,"col_end":41,"count":0}]},{"line":"        };","counters":[]},{"line":"        StackFrame {","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"            caller,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            caller_caller: account_update_caller,","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            calls: account_update_forest.clone(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    };","counters":[]},{"line":"    Ok(GetNextAccountUpdateResult {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        account_update,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        account_update_forest,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        new_frame,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        new_call_stack,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    })","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn check_account<L>(","counters":[]},{"line":"    public_key: CompressedPubKey,","counters":[]},{"line":"    token_id: TokenId,","counters":[]},{"line":"    (account, loc): (&Account, &ExistingOrNew<L::Location>),","counters":[]},{"line":") -> Result<bool, String>","counters":[]},{"line":"where","counters":[]},{"line":"    L: LedgerIntf,","counters":[]},{"line":"{","counters":[]},{"line":"    __assert!(public_key == account.public_key)?;","counters":[{"col_start":4,"col_end":47,"count":6180782},{"col_start":47,"col_end":48,"count":1321804}]},{"line":"    __assert!(token_id == account.token_id)?;","counters":[{"col_start":4,"col_end":43,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"    // IsNew?","counters":[]},{"line":"    match loc {","counters":[{"col_start":10,"col_end":13,"count":0}]},{"line":"        ExistingOrNew::Existing(_) => Ok(false),","counters":[{"col_start":38,"col_end":47,"count":0}]},{"line":"        ExistingOrNew::New => Ok(true),","counters":[{"col_start":30,"col_end":38,"count":0}]},{"line":"    }","counters":[]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":1321804}]},{"line":"","counters":[]},{"line":"pub fn make_zkapp(a: Account) -> Account {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"    let zkapp = if let zkapp @ Some(_) = a.zkapp {","counters":[{"col_start":8,"col_end":13,"count":0},{"col_start":23,"col_end":28,"count":0},{"col_start":41,"col_end":48,"count":0}]},{"line":"        zkapp","counters":[{"col_start":8,"col_end":13,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        Some(ZkAppAccount::default())","counters":[{"col_start":8,"col_end":37,"count":0}]},{"line":"    };","counters":[]},{"line":"    Account { zkapp, ..a }","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn update_sequence_state(","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    sequence_state: [Fp; 5],","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    sequence_events: SequenceEvents,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    txn_global_slot: Slot,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    last_sequence_slot: Slot,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":") -> ([Fp; 5], Slot) {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    let [_s1, _s2, _s3, _s4, _s5] = sequence_state;","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"    let is_empty = sequence_events.is_empty();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    let s1_updated = sequence_events.push_events(_s1);","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"    let s1 = if let true = is_empty { _s1 } else { s1_updated };","counters":[{"col_start":8,"col_end":10,"count":0},{"col_start":27,"col_end":35,"count":0},{"col_start":38,"col_end":41,"count":0},{"col_start":51,"col_end":61,"count":0}]},{"line":"    let is_this_slot = txn_global_slot == last_sequence_slot;","counters":[{"col_start":8,"col_end":60,"count":0}]},{"line":"    let is_empty_or_this_slot = is_empty || is_this_slot;","counters":[{"col_start":8,"col_end":29,"count":0},{"col_start":32,"col_end":40,"count":0},{"col_start":44,"col_end":56,"count":0}]},{"line":"    let (s5, s4, s3, s2) = if let true = is_empty_or_this_slot {","counters":[{"col_start":9,"col_end":23,"count":0},{"col_start":41,"col_end":62,"count":0}]},{"line":"        (_s5, _s4, _s3, _s2)","counters":[{"col_start":8,"col_end":28,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        (_s4, _s3, _s2, _s1)","counters":[{"col_start":8,"col_end":28,"count":0}]},{"line":"    };","counters":[]},{"line":"    let last_sequence_slot = if let true = is_empty {","counters":[{"col_start":8,"col_end":26,"count":0},{"col_start":43,"col_end":51,"count":0}]},{"line":"        last_sequence_slot","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        txn_global_slot","counters":[{"col_start":8,"col_end":23,"count":0}]},{"line":"    };","counters":[]},{"line":"    ([s1, s2, s3, s4, s5], last_sequence_slot)","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn unmake_zkapp(a: Account) -> Account {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    let zkapp = if let Some(zkapp) = a.zkapp {","counters":[{"col_start":8,"col_end":13,"count":0},{"col_start":28,"col_end":33,"count":0},{"col_start":37,"col_end":44,"count":0}]},{"line":"        if let true = ZkAppAccount::default() == zkapp {","counters":[{"col_start":22,"col_end":54,"count":0}]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Some(zkapp)","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"        }","counters":[]},{"line":"    } else {","counters":[]},{"line":"        None","counters":[{"col_start":8,"col_end":12,"count":0}]},{"line":"    };","counters":[]},{"line":"    Account { zkapp, ..a }","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"pub fn apply<L>(","counters":[]},{"line":"    constraint_constants: &ConstraintConstants,","counters":[]},{"line":"    is_start: IsStart,","counters":[]},{"line":"    _h: Handler<L>,","counters":[]},{"line":"    (global_state, local_state): (GlobalState<L>, LocalStateEnv<L>),","counters":[]},{"line":") -> Result<(GlobalState<L>, LocalStateEnv<L>), String>","counters":[]},{"line":"where","counters":[]},{"line":"    L: LedgerIntf + Clone,","counters":[]},{"line":"{","counters":[]},{"line":"    let is_start_ = local_state.stack_frame.calls.is_empty();","counters":[{"col_start":8,"col_end":61,"count":1870770}]},{"line":"","counters":[]},{"line":"    match is_start {","counters":[{"col_start":0,"col_end":18,"count":1870770}]},{"line":"        IsStart::Compute(_) => (),","counters":[{"col_start":31,"col_end":33,"count":1870770}]},{"line":"        IsStart::Yes(_) => __assert!(is_start_)?,","counters":[{"col_start":27,"col_end":47,"count":0},{"col_start":47,"col_end":48,"count":0}]},{"line":"        IsStart::No => __assert!(is_start_ != true)?,","counters":[{"col_start":23,"col_end":51,"count":623590},{"col_start":51,"col_end":52,"count":44}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let is_start_ = match is_start {","counters":[{"col_start":8,"col_end":17,"count":1870770},{"col_start":26,"col_end":34,"count":1870770}]},{"line":"        IsStart::Yes(_) => true,","counters":[{"col_start":27,"col_end":31,"count":1870770}]},{"line":"        IsStart::No => false,","counters":[{"col_start":23,"col_end":28,"count":38}]},{"line":"        IsStart::Compute(_) => is_start_,","counters":[{"col_start":31,"col_end":40,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let mut local_state = local_state.clone();","counters":[{"col_start":8,"col_end":46,"count":1870770}]},{"line":"","counters":[]},{"line":"    if is_start_ {","counters":[{"col_start":0,"col_end":16,"count":1870770},{"col_start":17,"col_end":18,"count":0}]},{"line":"        local_state.ledger = global_state.ledger.create_masked();","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":6,"count":1870770}]},{"line":"","counters":[]},{"line":"    let (","counters":[]},{"line":"        (account_update, remaining, call_stack),","counters":[{"col_start":9,"col_end":48,"count":1870770}]},{"line":"        account_update_forest,","counters":[{"col_start":0,"col_end":30,"count":1870770}]},{"line":"        local_state,","counters":[{"col_start":0,"col_end":20,"count":1870770}]},{"line":"        (a, inclusion_proof),","counters":[{"col_start":0,"col_end":27,"count":1870770}]},{"line":"    ) = {","counters":[]},{"line":"        let (to_pop, call_stack) = match &is_start {","counters":[{"col_start":13,"col_end":31,"count":1870770},{"col_start":41,"col_end":50,"count":1870770}]},{"line":"            IsStart::Compute(start_data) => {","counters":[{"col_start":29,"col_end":45,"count":0}]},{"line":"                if is_start_ == true {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                    (","counters":[{"col_start":20,"col_end":21,"count":0}]},{"line":"                        StackFrame {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                            caller: TokenId::default(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            caller_caller: TokenId::default(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                            calls: start_data.zkapp_command.clone(),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        CallStack::new(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    )","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    (","counters":[{"col_start":20,"col_end":21,"count":0}]},{"line":"                        local_state.stack_frame.clone(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                        local_state.call_stack.clone(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                    )","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            IsStart::Yes(start_data) => (","counters":[{"col_start":25,"col_end":41,"count":1870770}]},{"line":"                StackFrame {","counters":[{"col_start":0,"col_end":28,"count":1870770}]},{"line":"                    caller: TokenId::default(),","counters":[{"col_start":0,"col_end":47,"count":1870770}]},{"line":"                    caller_caller: TokenId::default(),","counters":[{"col_start":0,"col_end":54,"count":1870770}]},{"line":"                    calls: start_data.zkapp_command.clone(),","counters":[{"col_start":0,"col_end":60,"count":1870770}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":1870770}]},{"line":"                CallStack::new(),","counters":[{"col_start":0,"col_end":33,"count":1870770}]},{"line":"            ),","counters":[{"col_start":0,"col_end":13,"count":1870770}]},{"line":"            IsStart::No => (","counters":[{"col_start":27,"col_end":28,"count":0}]},{"line":"                local_state.stack_frame.clone(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                local_state.call_stack.clone(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let GetNextAccountUpdateResult {","counters":[]},{"line":"            account_update,","counters":[{"col_start":12,"col_end":27,"count":1870770}]},{"line":"            account_update_forest,","counters":[{"col_start":0,"col_end":34,"count":1870770}]},{"line":"            new_frame,","counters":[{"col_start":0,"col_end":21,"count":1870770}]},{"line":"            new_call_stack: _,","counters":[]},{"line":"        } = get_next_account_update(to_pop, call_stack.clone())?;","counters":[{"col_start":12,"col_end":63,"count":1870770},{"col_start":63,"col_end":64,"count":0}]},{"line":"        let remaining = new_frame;","counters":[{"col_start":12,"col_end":33,"count":1870770}]},{"line":"","counters":[]},{"line":"        let mut local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":27,"count":1870770}]},{"line":"            TransactionFailure::TokenOwnerNotCaller,","counters":[{"col_start":12,"col_end":52,"count":1870770}]},{"line":"            account_update.token_id() == TokenId::default()","counters":[{"col_start":0,"col_end":59,"count":1870770}]},{"line":"                || account_update.token_id() == account_update.caller(),","counters":[{"col_start":19,"col_end":71,"count":1870770}]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        let (a, inclusion_proof) =","counters":[{"col_start":13,"col_end":34,"count":1870770}]},{"line":"            get_account(&mut local_state.ledger, account_update.account_id());","counters":[{"col_start":0,"col_end":78,"count":1870770}]},{"line":"","counters":[]},{"line":"        let acct = (a, inclusion_proof);","counters":[{"col_start":0,"col_end":39,"count":1870770}]},{"line":"","counters":[]},{"line":"        let (transaction_commitment, full_transaction_commitment) = match &is_start {","counters":[{"col_start":13,"col_end":64,"count":1870770},{"col_start":74,"col_end":83,"count":1870770}]},{"line":"            IsStart::No => (","counters":[{"col_start":27,"col_end":28,"count":0}]},{"line":"                local_state.transaction_commitment,","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                local_state.full_transaction_commitment,","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            IsStart::Yes(start_data) | IsStart::Compute(start_data) => {","counters":[{"col_start":25,"col_end":35,"count":1870770},{"col_start":56,"col_end":66,"count":0}]},{"line":"                let tx_commitment_on_start = commitment(remaining.calls.clone());","counters":[{"col_start":20,"col_end":81,"count":1870770}]},{"line":"                let full_tx_commitment_on_start = full_commitment(","counters":[{"col_start":0,"col_end":66,"count":1870770}]},{"line":"                    account_update.clone(),","counters":[{"col_start":0,"col_end":43,"count":1870770}]},{"line":"                    start_data.memo_hash,","counters":[{"col_start":0,"col_end":41,"count":1870770}]},{"line":"                    tx_commitment_on_start.clone(),","counters":[{"col_start":0,"col_end":51,"count":1870770}]},{"line":"                );","counters":[{"col_start":0,"col_end":18,"count":1870770}]},{"line":"                if let true = is_start_ {","counters":[{"col_start":0,"col_end":39,"count":1870770}]},{"line":"                    (tx_commitment_on_start, full_tx_commitment_on_start)","counters":[{"col_start":20,"col_end":73,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    (","counters":[{"col_start":20,"col_end":21,"count":1870770}]},{"line":"                        local_state.transaction_commitment,","counters":[{"col_start":0,"col_end":59,"count":1870770}]},{"line":"                        local_state.full_transaction_commitment,","counters":[{"col_start":0,"col_end":64,"count":1870770}]},{"line":"                    )","counters":[{"col_start":0,"col_end":21,"count":1870770}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let local_state = LocalStateEnv {","counters":[{"col_start":12,"col_end":23,"count":1870770}]},{"line":"            transaction_commitment,","counters":[{"col_start":12,"col_end":35,"count":1870770}]},{"line":"            full_transaction_commitment,","counters":[{"col_start":0,"col_end":40,"count":1870770}]},{"line":"            token_id: if let true = is_start_ {","counters":[{"col_start":0,"col_end":45,"count":1870770}]},{"line":"                TokenId::default()","counters":[{"col_start":16,"col_end":34,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                local_state.token_id","counters":[{"col_start":16,"col_end":36,"count":1870770}]},{"line":"            },","counters":[]},{"line":"            ..local_state","counters":[]},{"line":"        };","counters":[]},{"line":"        (","counters":[{"col_start":8,"col_end":9,"count":1870770}]},{"line":"            (account_update, remaining, call_stack),","counters":[{"col_start":0,"col_end":52,"count":1870770}]},{"line":"            account_update_forest,","counters":[{"col_start":0,"col_end":34,"count":1870770}]},{"line":"            local_state,","counters":[{"col_start":0,"col_end":24,"count":1870770}]},{"line":"            acct,","counters":[{"col_start":0,"col_end":17,"count":1870770}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":1870770}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":1870770}]},{"line":"","counters":[]},{"line":"    let local_state = LocalStateEnv {","counters":[{"col_start":0,"col_end":37,"count":1870770}]},{"line":"        stack_frame: remaining.clone(),","counters":[{"col_start":0,"col_end":39,"count":1870770}]},{"line":"        call_stack,","counters":[{"col_start":0,"col_end":19,"count":1870770}]},{"line":"        ..local_state","counters":[{"col_start":0,"col_end":21,"count":1870770}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":1870770}]},{"line":"    let local_state = local_state.add_new_failure_status_bucket();","counters":[{"col_start":0,"col_end":65,"count":1870770}]},{"line":"    let account_is_new = check_account::<L>(","counters":[{"col_start":8,"col_end":22,"count":1859432},{"col_start":25,"col_end":44,"count":1870770}]},{"line":"        account_update.public_key(),","counters":[{"col_start":0,"col_end":36,"count":1870770}]},{"line":"        account_update.token_id(),","counters":[{"col_start":0,"col_end":34,"count":1870770}]},{"line":"        (&a, &inclusion_proof),","counters":[{"col_start":0,"col_end":31,"count":1870770}]},{"line":"    )?;","counters":[{"col_start":0,"col_end":5,"count":1870770},{"col_start":5,"col_end":6,"count":11338}]},{"line":"","counters":[]},{"line":"    let local_state = match Env::perform(Eff::CheckAccountPrecondition(","counters":[{"col_start":8,"col_end":19,"count":1859432},{"col_start":28,"col_end":71,"count":1859432}]},{"line":"        account_update.clone(),","counters":[{"col_start":0,"col_end":31,"count":1859432}]},{"line":"        a.clone(),","counters":[{"col_start":0,"col_end":18,"count":1859432}]},{"line":"        account_is_new,","counters":[{"col_start":0,"col_end":23,"count":1859432}]},{"line":"        local_state,","counters":[{"col_start":0,"col_end":20,"count":1859432}]},{"line":"    )) {","counters":[{"col_start":0,"col_end":6,"count":1859432}]},{"line":"        PerformResult::LocalState(local_state) => local_state,","counters":[{"col_start":34,"col_end":61,"count":1859432}]},{"line":"        _ => unreachable!(),","counters":[{"col_start":13,"col_end":27,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let protocol_state_predicate_satisfied =","counters":[{"col_start":8,"col_end":44,"count":1859432}]},{"line":"        if let PerformResult::Bool(protocol_state_predicate_satisfied) =","counters":[{"col_start":0,"col_end":69,"count":1859432}]},{"line":"            Env::perform(Eff::CheckProtocolStatePrecondition(","counters":[{"col_start":12,"col_end":61,"count":1859432}]},{"line":"                account_update.protocol_state_precondition(),","counters":[{"col_start":0,"col_end":61,"count":1859432}]},{"line":"                global_state.clone(),","counters":[{"col_start":0,"col_end":37,"count":1859432}]},{"line":"            ))","counters":[{"col_start":0,"col_end":14,"count":1859432}]},{"line":"        {","counters":[]},{"line":"            protocol_state_predicate_satisfied","counters":[{"col_start":12,"col_end":46,"count":1859432}]},{"line":"        } else {","counters":[]},{"line":"            unreachable!()","counters":[{"col_start":12,"col_end":26,"count":0}]},{"line":"        };","counters":[]},{"line":"    /*","counters":[]},{"line":"    println!(","counters":[]},{"line":"        \"[rust] protocol_state_predicate_satisfied {}\",","counters":[]},{"line":"        protocol_state_predicate_satisfied","counters":[]},{"line":"    );","counters":[]},{"line":"    */","counters":[]},{"line":"","counters":[]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":44,"count":1859432}]},{"line":"        TransactionFailure::ProtocolStatePreconditionUnsatisfied,","counters":[{"col_start":0,"col_end":65,"count":1859432}]},{"line":"        protocol_state_predicate_satisfied,","counters":[{"col_start":0,"col_end":43,"count":1859432}]},{"line":"    );","counters":[{"col_start":0,"col_end":5,"count":1859432}]},{"line":"","counters":[]},{"line":"    let CheckAuthorizationResult {","counters":[]},{"line":"        proof_verifies,","counters":[{"col_start":8,"col_end":23,"count":1859432}]},{"line":"        signature_verifies,","counters":[{"col_start":0,"col_end":27,"count":1859432}]},{"line":"    } = {","counters":[{"col_start":0,"col_end":9,"count":1859432}]},{"line":"        let commitment = if let true = account_update.use_full_commitment() {","counters":[{"col_start":0,"col_end":22,"count":1859432},{"col_start":39,"col_end":75,"count":1859432}]},{"line":"            local_state.full_transaction_commitment.clone()","counters":[{"col_start":12,"col_end":59,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            local_state.transaction_commitment.clone()","counters":[{"col_start":12,"col_end":54,"count":1859432}]},{"line":"        };","counters":[]},{"line":"        account_update.check_authorization(commitment.0, account_update_forest)","counters":[{"col_start":8,"col_end":79,"count":1859432}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":1859432}]},{"line":"","counters":[]},{"line":"    //println!(\"[rust] proof_verifies {:?}\", proof_verifies);","counters":[{"col_start":0,"col_end":61,"count":1859432}]},{"line":"    //println!(\"[rust] signature_verifies {:?}\", signature_verifies);","counters":[{"col_start":0,"col_end":69,"count":1859432}]},{"line":"","counters":[]},{"line":"    __assert!(proof_verifies == account_update.is_proved())?;","counters":[{"col_start":0,"col_end":59,"count":1859432},{"col_start":59,"col_end":60,"count":0}]},{"line":"    __assert!(signature_verifies == account_update.is_signed())?;","counters":[{"col_start":4,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":11224620}]},{"line":"","counters":[]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        TransactionFailure::FeePayerNonceMustIncrease,","counters":[{"col_start":8,"col_end":54,"count":0}]},{"line":"        account_update.increment_nonce() || !is_start_,","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":44,"col_end":54,"count":0}]},{"line":"    );","counters":[]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        TransactionFailure::FeePayerMustBeSigned,","counters":[{"col_start":8,"col_end":49,"count":0}]},{"line":"        signature_verifies || !is_start_,","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":30,"col_end":40,"count":0}]},{"line":"    );","counters":[]},{"line":"","counters":[]},{"line":"    let precondition_has_constant_nonce = match account_update.account_precondition().nonce() {","counters":[{"col_start":8,"col_end":39,"count":0},{"col_start":48,"col_end":93,"count":0}]},{"line":"        OrIgnore::Check(x) => x.is_constant(),","counters":[{"col_start":24,"col_end":45,"count":0}]},{"line":"        OrIgnore::Ignore => false,","counters":[{"col_start":28,"col_end":33,"count":0}]},{"line":"    };","counters":[]},{"line":"    let increments_nonce_and_constrains_its_old_value =","counters":[{"col_start":8,"col_end":53,"count":0}]},{"line":"        account_update.increment_nonce() && precondition_has_constant_nonce;","counters":[{"col_start":8,"col_end":40,"count":0},{"col_start":44,"col_end":75,"count":0}]},{"line":"    let depends_on_the_fee_payers_nonce_and_isnt_the_fee_payer =","counters":[{"col_start":8,"col_end":62,"count":0}]},{"line":"        account_update.use_full_commitment() && !is_start_;","counters":[{"col_start":8,"col_end":44,"count":0},{"col_start":48,"col_end":58,"count":0}]},{"line":"    let does_not_use_a_signature = !signature_verifies;","counters":[{"col_start":8,"col_end":54,"count":0}]},{"line":"    /*","counters":[]},{"line":"    println!(","counters":[]},{"line":"        \"[rust] increments_nonce_and_constrains_its_old_value {}\",","counters":[]},{"line":"        increments_nonce_and_constrains_its_old_value","counters":[]},{"line":"    );","counters":[]},{"line":"    println!(","counters":[]},{"line":"        \"[rust] depends_on_the_fee_payers_nonce_and_isnt_the_fee_payer {}\",","counters":[]},{"line":"        depends_on_the_fee_payers_nonce_and_isnt_the_fee_payer","counters":[]},{"line":"    );","counters":[]},{"line":"    println!(","counters":[]},{"line":"        \"[rust] does_not_use_a_signature {}\",","counters":[]},{"line":"        does_not_use_a_signature","counters":[]},{"line":"    );","counters":[]},{"line":"    */","counters":[]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        TransactionFailure::ZkappCommandReplayCheckFailed,","counters":[{"col_start":8,"col_end":58,"count":0}]},{"line":"        increments_nonce_and_constrains_its_old_value","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            || depends_on_the_fee_payers_nonce_and_isnt_the_fee_payer","counters":[{"col_start":15,"col_end":69,"count":0}]},{"line":"            || does_not_use_a_signature,","counters":[{"col_start":15,"col_end":39,"count":0}]},{"line":"    );","counters":[]},{"line":"    let a = Account {","counters":[{"col_start":8,"col_end":21,"count":0}]},{"line":"        token_id: account_update.token_id(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        ..a.clone()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    let account_update_token_is_default = account_update.token_id() == TokenId::default();","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"    let account_is_untimed = !is_timed(&a);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    let timing = account_update.timing();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        TransactionFailure::UpdateNotPermittedTimingExistingAccount,","counters":[{"col_start":8,"col_end":68,"count":0}]},{"line":"        timing.is_keep() || (account_is_untimed && signature_verifies),","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":29,"col_end":47,"count":0},{"col_start":51,"col_end":69,"count":0}]},{"line":"    );","counters":[]},{"line":"    let timing = timing","counters":[{"col_start":8,"col_end":23,"count":0}]},{"line":"        .into_map(Some)","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        .set_or_keep(zkapp_command::Timing::of_account_timing(a.timing.clone()));","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"","counters":[]},{"line":"    // https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/transaction_logic/mina_transaction_logic.ml#L1197","counters":[]},{"line":"    let vesting_period = match &timing {","counters":[{"col_start":8,"col_end":22,"count":0},{"col_start":31,"col_end":38,"count":0}]},{"line":"        Some(timing) => timing.vesting_period,","counters":[{"col_start":13,"col_end":45,"count":0}]},{"line":"        None => to_record(Timing::Untimed).vesting_period,","counters":[{"col_start":16,"col_end":57,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    __assert!(vesting_period > Slot::zero())?;","counters":[{"col_start":4,"col_end":44,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"    let a = Account {","counters":[{"col_start":8,"col_end":21,"count":0}]},{"line":"        timing: timing","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            .map(|timing| timing.to_account_timing())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":26,"col_end":52,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"            .unwrap_or(Timing::Untimed),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        ..a.clone()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":0}]},{"line":"        let balance_change = account_update.balance_change();","counters":[{"col_start":12,"col_end":61,"count":0}]},{"line":"        let (balance, failed1) = a.balance.add_signed_amount_flagged(balance_change.clone());","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"        //println!(\"[rust] failed1 {}\", failed1);","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        let local_state = local_state.add_check(TransactionFailure::Overflow, !failed1);","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"        let local_state = {","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"            let account_creation_fee = constraint_constants.account_creation_fee;","counters":[{"col_start":16,"col_end":81,"count":0}]},{"line":"            let (excess_minus_creation_fee, excess_update_failed) =","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                local_state.excess.add_flagged(Signed::<Fee> {","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    magnitude: account_creation_fee,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                    sgn: Sgn::Neg,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                });","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            let local_state = local_state.add_check(","counters":[{"col_start":16,"col_end":27,"count":0}]},{"line":"                TransactionFailure::AmountInsufficientToCreateAccount,","counters":[{"col_start":16,"col_end":70,"count":0}]},{"line":"                !(account_is_new && excess_update_failed),","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":56,"count":0}]},{"line":"            );","counters":[]},{"line":"            LocalStateEnv {","counters":[]},{"line":"                excess: if let true = account_is_new {","counters":[{"col_start":38,"col_end":52,"count":0}]},{"line":"                    excess_minus_creation_fee","counters":[{"col_start":20,"col_end":45,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    local_state.excess","counters":[{"col_start":20,"col_end":38,"count":0}]},{"line":"                },","counters":[]},{"line":"                ..local_state","counters":[]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"        let is_receiver = balance_change.is_pos();","counters":[{"col_start":12,"col_end":49,"count":0}]},{"line":"        let local_state = {","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"            let controller = if let true = is_receiver {","counters":[{"col_start":16,"col_end":26,"count":0},{"col_start":43,"col_end":54,"count":0}]},{"line":"                a.permissions.receive","counters":[{"col_start":16,"col_end":37,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                a.permissions.send","counters":[{"col_start":16,"col_end":34,"count":0}]},{"line":"            };","counters":[]},{"line":"            let has_permission = controller_check(proof_verifies, signature_verifies, controller)?;","counters":[{"col_start":16,"col_end":30,"count":0},{"col_start":33,"col_end":97,"count":0},{"col_start":97,"col_end":98,"count":11338}]},{"line":"            //println!(\"[rust] has_permission {:?}\", has_permission);","counters":[]},{"line":"            //println!(\"[rust] balance_change {:?}\", balance_change);","counters":[]},{"line":"            local_state.add_check(","counters":[]},{"line":"                TransactionFailure::UpdateNotPermittedBalance,","counters":[{"col_start":16,"col_end":62,"count":0}]},{"line":"                has_permission || balance_change.is_zero2(),","counters":[{"col_start":0,"col_end":30,"count":0},{"col_start":34,"col_end":59,"count":0}]},{"line":"            )","counters":[]},{"line":"        };","counters":[]},{"line":"        let a = Account { balance, ..a };","counters":[{"col_start":12,"col_end":41,"count":0}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    let txn_global_slot = global_state.protocol_state.global_slot_since_genesis;","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":28,"count":0}]},{"line":"        let (invalid_timing, timing) = match account_check_timing(&txn_global_slot, &a) {","counters":[{"col_start":0,"col_end":35,"count":0},{"col_start":45,"col_end":87,"count":0}]},{"line":"            (TimingValidation::InsufficientBalance(true), _) => {","counters":[]},{"line":"                panic!(\"Did not propose a balance change at this timing check!\")","counters":[{"col_start":16,"col_end":80,"count":0}]},{"line":"            }","counters":[]},{"line":"            (TimingValidation::InvalidTiming(true), timing) => (true, timing),","counters":[{"col_start":52,"col_end":77,"count":0}]},{"line":"            (_, timing) => (false, timing),","counters":[{"col_start":16,"col_end":42,"count":0}]},{"line":"        };","counters":[]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":48,"count":0}]},{"line":"            TransactionFailure::SourceMinimumBalanceViolation,","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            !invalid_timing,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        let a = Account {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            timing,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            ..a.clone()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    let a = make_zkapp(a);","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let app_state = account_update.app_state();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    let keeping_app_state = app_state.iter().all(|x| x.is_keep());","counters":[{"col_start":0,"col_end":49,"count":0},{"col_start":53,"col_end":64,"count":0},{"col_start":64,"col_end":66,"count":0}]},{"line":"    let changing_entire_app_state = app_state.iter().all(|x| x.is_set());","counters":[{"col_start":0,"col_end":57,"count":0},{"col_start":61,"col_end":71,"count":0},{"col_start":71,"col_end":73,"count":0}]},{"line":"    let zkapp = a.zkapp.unwrap();","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"    let proved_state = if let true = keeping_app_state {","counters":[{"col_start":8,"col_end":20,"count":0},{"col_start":37,"col_end":54,"count":0}]},{"line":"        zkapp.proved_state","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    } else {","counters":[]},{"line":"        if let true = proof_verifies {","counters":[{"col_start":22,"col_end":36,"count":0}]},{"line":"            if let true = changing_entire_app_state {","counters":[{"col_start":26,"col_end":51,"count":0}]},{"line":"                true","counters":[{"col_start":16,"col_end":20,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                zkapp.proved_state","counters":[{"col_start":16,"col_end":34,"count":0}]},{"line":"            }","counters":[]},{"line":"        } else {","counters":[]},{"line":"            false","counters":[{"col_start":12,"col_end":17,"count":0}]},{"line":"        }","counters":[]},{"line":"    };","counters":[]},{"line":"    let zkapp = ZkAppAccount {","counters":[{"col_start":8,"col_end":30,"count":0}]},{"line":"        proved_state,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        ..zkapp","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    let a = Account {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        zkapp: Some(zkapp.clone()),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        ..a","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    let has_permission =","counters":[{"col_start":8,"col_end":22,"count":0}]},{"line":"        controller_check(proof_verifies, signature_verifies, a.permissions.edit_state)?;","counters":[{"col_start":8,"col_end":86,"count":0},{"col_start":86,"col_end":87,"count":30}]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        TransactionFailure::UpdateNotPermittedAppState,","counters":[{"col_start":8,"col_end":55,"count":0}]},{"line":"        keeping_app_state || has_permission,","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":43,"count":0}]},{"line":"    );","counters":[]},{"line":"    let app_state: Vec<Fp> = app_state","counters":[{"col_start":8,"col_end":38,"count":0}]},{"line":"        .iter()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        .zip(zkapp.app_state.iter())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        .map(|(x, y)| x.set_or_keep(*y))","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":22,"col_end":39,"count":0},{"col_start":39,"col_end":40,"count":0}]},{"line":"        .collect();","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    let app_state = [","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[0],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[1],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[2],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[3],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[4],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[5],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[6],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        app_state[7],","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    ];","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let zkapp = ZkAppAccount { app_state, ..zkapp };","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    let a = Account {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        zkapp: Some(zkapp.clone()),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        ..a","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let verification_key = account_update.verification_key();","counters":[{"col_start":12,"col_end":64,"count":0}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":0}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            a.permissions.set_verification_key,","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":2860}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedVerificationKey,","counters":[{"col_start":12,"col_end":66,"count":-8}]},{"line":"            verification_key.is_keep() || has_permission,","counters":[{"col_start":0,"col_end":38,"count":-8},{"col_start":42,"col_end":56,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let verification_key = match zkapp.verification_key {","counters":[{"col_start":12,"col_end":28,"count":-8},{"col_start":37,"col_end":59,"count":-8}]},{"line":"            Some(vk) => Some(verification_key.set_or_keep(vk)),","counters":[{"col_start":17,"col_end":62,"count":0}]},{"line":"            None => if let SetOrKeep::Set(vk) = verification_key {","counters":[{"col_start":42,"col_end":44,"count":-8},{"col_start":48,"col_end":64,"count":-8}]},{"line":"                Some(vk)","counters":[{"col_start":16,"col_end":24,"count":-8}]},{"line":"            }","counters":[]},{"line":"            else {","counters":[]},{"line":"                None","counters":[{"col_start":16,"col_end":20,"count":3}]},{"line":"            },","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let zkapp = ZkAppAccount {","counters":[{"col_start":12,"col_end":34,"count":-8}]},{"line":"            verification_key,","counters":[{"col_start":0,"col_end":29,"count":-8}]},{"line":"            ..zkapp","counters":[{"col_start":0,"col_end":19,"count":-8}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":-8}]},{"line":"        let a = Account {","counters":[{"col_start":0,"col_end":25,"count":-8}]},{"line":"            zkapp: Some(zkapp),","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            ..a","counters":[{"col_start":0,"col_end":15,"count":-8}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let sequence_events = account_update.sequence_events();","counters":[{"col_start":12,"col_end":63,"count":-8}]},{"line":"        let zkapp = a.zkapp.unwrap();","counters":[{"col_start":0,"col_end":37,"count":-8}]},{"line":"        let last_sequence_slot = zkapp.last_sequence_slot;","counters":[{"col_start":0,"col_end":58,"count":-8}]},{"line":"        let (sequence_state, last_sequence_slot) = update_sequence_state(","counters":[{"col_start":0,"col_end":73,"count":-8}]},{"line":"            zkapp.sequence_state,","counters":[{"col_start":0,"col_end":33,"count":-8}]},{"line":"            sequence_events.clone(),","counters":[{"col_start":0,"col_end":36,"count":-8}]},{"line":"            txn_global_slot,","counters":[{"col_start":0,"col_end":28,"count":-8}]},{"line":"            last_sequence_slot,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":-8}]},{"line":"        let is_empty = sequence_events.is_empty();","counters":[{"col_start":0,"col_end":49,"count":-8}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.edit_sequence_state,","counters":[{"col_start":0,"col_end":46,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":0}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedAppState,","counters":[{"col_start":12,"col_end":59,"count":-8}]},{"line":"            is_empty || has_permission,","counters":[{"col_start":0,"col_end":20,"count":-8},{"col_start":24,"col_end":38,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let zkapp = ZkAppAccount {","counters":[{"col_start":12,"col_end":34,"count":-8}]},{"line":"            sequence_state,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            last_sequence_slot,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            ..zkapp","counters":[{"col_start":0,"col_end":19,"count":-8}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":-8}]},{"line":"        let a = Account {","counters":[{"col_start":0,"col_end":25,"count":-8}]},{"line":"            zkapp: Some(zkapp),","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            ..a","counters":[{"col_start":0,"col_end":15,"count":-8}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":-8}]},{"line":"","counters":[]},{"line":"    let a = unmake_zkapp(a);","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let zkapp_uri = account_update.zkapp_uri();","counters":[{"col_start":12,"col_end":50,"count":-8}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.set_zkapp_uri,","counters":[{"col_start":0,"col_end":40,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":5448}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedZkappUri,","counters":[{"col_start":12,"col_end":59,"count":-8}]},{"line":"            zkapp_uri.is_keep() || has_permission,","counters":[{"col_start":0,"col_end":31,"count":-8},{"col_start":35,"col_end":49,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let zkapp = a.zkapp.map(|x| ZkAppAccount {","counters":[{"col_start":12,"col_end":32,"count":-8},{"col_start":36,"col_end":50,"count":0}]},{"line":"            zkapp_uri: zkapp_uri.set_or_keep(x.zkapp_uri),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            ..x","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":-8}]},{"line":"        let a = Account { zkapp, ..a };","counters":[{"col_start":0,"col_end":39,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let token_symbol = account_update.token_symbol();","counters":[{"col_start":12,"col_end":56,"count":-8}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.set_token_symbol,","counters":[{"col_start":0,"col_end":43,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":5448}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedTokenSymbol,","counters":[{"col_start":12,"col_end":62,"count":-8}]},{"line":"            token_symbol.is_keep() || has_permission,","counters":[{"col_start":0,"col_end":34,"count":-8},{"col_start":38,"col_end":52,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let token_symbol = token_symbol.set_or_keep(a.token_symbol);","counters":[{"col_start":12,"col_end":68,"count":-8}]},{"line":"        let a = Account { token_symbol, ..a };","counters":[{"col_start":0,"col_end":46,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let delegate = account_update.delegate();","counters":[{"col_start":12,"col_end":48,"count":-8}]},{"line":"        let base_delegate = if let true = account_is_new {","counters":[{"col_start":12,"col_end":25,"count":-8},{"col_start":42,"col_end":56,"count":-8}]},{"line":"            Some(account_update.public_key())","counters":[{"col_start":12,"col_end":45,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            a.delegate","counters":[{"col_start":12,"col_end":22,"count":-8}]},{"line":"        };","counters":[]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.set_delegate,","counters":[{"col_start":0,"col_end":39,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":19506}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedDelegate,","counters":[{"col_start":12,"col_end":59,"count":-8}]},{"line":"            delegate.is_keep() || (has_permission && account_update_token_is_default),","counters":[{"col_start":0,"col_end":30,"count":-8},{"col_start":35,"col_end":49,"count":-8},{"col_start":53,"col_end":84,"count":0}]},{"line":"        );","counters":[]},{"line":"        let delegate = base_delegate.map(|x| delegate.set_or_keep(x));","counters":[{"col_start":12,"col_end":41,"count":-8},{"col_start":45,"col_end":68,"count":0},{"col_start":68,"col_end":70,"count":-8}]},{"line":"        let a = Account { delegate, ..a };","counters":[{"col_start":0,"col_end":42,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let nonce = a.nonce;","counters":[{"col_start":12,"col_end":28,"count":-8}]},{"line":"        let increment_nonce = account_update.increment_nonce();","counters":[{"col_start":0,"col_end":62,"count":-8}]},{"line":"        let nonce = if let true = increment_nonce {","counters":[{"col_start":12,"col_end":17,"count":-8},{"col_start":34,"col_end":49,"count":-8}]},{"line":"            nonce.incr()","counters":[{"col_start":12,"col_end":24,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            nonce","counters":[{"col_start":12,"col_end":17,"count":-8}]},{"line":"        };","counters":[]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.increment_nonce,","counters":[{"col_start":0,"col_end":42,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":2588}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedNonce,","counters":[{"col_start":12,"col_end":56,"count":-8}]},{"line":"            !increment_nonce || has_permission,","counters":[{"col_start":0,"col_end":28,"count":-8},{"col_start":32,"col_end":46,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let a = Account { nonce, ..a };","counters":[{"col_start":12,"col_end":39,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":-8}]},{"line":"        let voting_for = account_update.voting_for();","counters":[{"col_start":12,"col_end":52,"count":-8}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":-8},{"col_start":29,"col_end":46,"count":-8}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":-8}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":-8}]},{"line":"            a.permissions.set_voting_for,","counters":[{"col_start":0,"col_end":41,"count":-8}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":-8},{"col_start":9,"col_end":10,"count":5890}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":-8}]},{"line":"            TransactionFailure::UpdateNotPermittedVotingFor,","counters":[{"col_start":12,"col_end":60,"count":-8}]},{"line":"            voting_for.is_keep() || has_permission,","counters":[{"col_start":0,"col_end":32,"count":-8},{"col_start":36,"col_end":50,"count":-8}]},{"line":"        );","counters":[]},{"line":"        let voting_for = voting_for.set_or_keep(a.voting_for);","counters":[{"col_start":12,"col_end":62,"count":-8}]},{"line":"        let a = Account { voting_for, ..a };","counters":[{"col_start":0,"col_end":44,"count":-8}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":-8}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let a = {","counters":[{"col_start":8,"col_end":13,"count":0}]},{"line":"        let new_hash = {","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            let old_hash = a.receipt_chain_hash;","counters":[{"col_start":16,"col_end":48,"count":-8}]},{"line":"            if signature_verifies == true || proof_verifies == true {","counters":[{"col_start":0,"col_end":41,"count":-8},{"col_start":45,"col_end":67,"count":-8}]},{"line":"                let elt = ZkAppCommandElt::ZkAppCommandCommitment(","counters":[{"col_start":20,"col_end":66,"count":0}]},{"line":"                    local_state.full_transaction_commitment.clone(),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                );","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                cons_zkapp_command_commitment(","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    local_state.account_update_index,","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    elt,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    &old_hash,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                )","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                old_hash","counters":[{"col_start":16,"col_end":24,"count":0}]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"        Account {","counters":[{"col_start":8,"col_end":17,"count":0}]},{"line":"            receipt_chain_hash: new_hash,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            ..a","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let (a, local_state) = {","counters":[{"col_start":9,"col_end":23,"count":0}]},{"line":"        let permissions = account_update.permissions();","counters":[{"col_start":12,"col_end":54,"count":0}]},{"line":"        let has_permission = controller_check(","counters":[{"col_start":12,"col_end":26,"count":0},{"col_start":29,"col_end":46,"count":0}]},{"line":"            proof_verifies,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            signature_verifies,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            a.permissions.set_permissions,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        )?;","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        let local_state = local_state.add_check(","counters":[{"col_start":12,"col_end":23,"count":0}]},{"line":"            TransactionFailure::UpdateNotPermittedPermissions,","counters":[{"col_start":12,"col_end":62,"count":0}]},{"line":"            permissions.is_keep() || has_permission,","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":37,"col_end":51,"count":0}]},{"line":"        );","counters":[]},{"line":"        let permissions = permissions.set_or_keep(a.permissions);","counters":[{"col_start":12,"col_end":65,"count":0}]},{"line":"        let a = Account { permissions, ..a };","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        (a, local_state)","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let a = match Env::perform(Eff::<L>::InitAccount(account_update.clone(), a)) {","counters":[{"col_start":8,"col_end":9,"count":0},{"col_start":18,"col_end":80,"count":0}]},{"line":"        PerformResult::Account(a) => a,","counters":[{"col_start":31,"col_end":38,"count":0}]},{"line":"        _ => unreachable!(),","counters":[{"col_start":13,"col_end":27,"count":0}]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let local_delta = account_update.balance_change().negate();","counters":[{"col_start":8,"col_end":62,"count":0}]},{"line":"    let (new_local_fee_excess, overflowed) = {","counters":[{"col_start":9,"col_end":41,"count":0}]},{"line":"        let curr_token = local_state.token_id.clone();","counters":[{"col_start":12,"col_end":54,"count":0}]},{"line":"        let curr_is_default = curr_token == TokenId::default();","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        assert!(curr_is_default);","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        /*","counters":[]},{"line":"        println!(","counters":[]},{"line":"            \"[rust] is_start_ {:?}, account_update_token_is_default {:?}, local_delta.is_pos {:?}\",","counters":[]},{"line":"            is_start_,","counters":[]},{"line":"            account_update_token_is_default,","counters":[]},{"line":"            local_delta.is_pos()","counters":[]},{"line":"        );","counters":[]},{"line":"        println!(\"[rust] failure {:?}\", local_state.failure_status_tbl);","counters":[]},{"line":"        */","counters":[]},{"line":"        assert!(!is_start_ || (account_update_token_is_default && local_delta.is_pos()));","counters":[{"col_start":8,"col_end":15,"count":0},{"col_start":16,"col_end":26,"count":0},{"col_start":31,"col_end":62,"count":0},{"col_start":66,"col_end":86,"count":0}]},{"line":"        let (new_local_fee_excess, overflow) = local_state.excess.add_flagged(Signed::<Fee> {","counters":[{"col_start":13,"col_end":93,"count":0}]},{"line":"            magnitude: Fee::from_u64(local_delta.magnitude.as_u64()),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"            sgn: local_delta.sgn,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let new_local_fee_excess = if account_update_token_is_default {","counters":[{"col_start":12,"col_end":32,"count":0},{"col_start":38,"col_end":69,"count":0}]},{"line":"            new_local_fee_excess","counters":[{"col_start":12,"col_end":32,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            local_state.excess.clone()","counters":[{"col_start":12,"col_end":38,"count":0}]},{"line":"        };","counters":[]},{"line":"        (","counters":[]},{"line":"            new_local_fee_excess,","counters":[{"col_start":12,"col_end":33,"count":0}]},{"line":"            account_update_token_is_default && overflow,","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":47,"col_end":55,"count":0}]},{"line":"        )","counters":[]},{"line":"    };","counters":[]},{"line":"    let local_state = LocalStateEnv {","counters":[{"col_start":8,"col_end":37,"count":0}]},{"line":"        excess: new_local_fee_excess,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        ..local_state","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    let mut local_state =","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        local_state.add_check(TransactionFailure::LocalExcessOverflow, !overflowed);","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"","counters":[]},{"line":"    let new_ledger = set_account(&mut local_state.ledger, (a, &inclusion_proof));","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"    let is_last_account_update = remaining.calls.is_empty();","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"    let local_state = LocalStateEnv {","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        ledger: new_ledger.clone(),","counters":[{"col_start":16,"col_end":35,"count":0}]},{"line":"        transaction_commitment: if is_last_account_update {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            ReceiptChainHash(Fp::zero())","counters":[{"col_start":12,"col_end":40,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            local_state.transaction_commitment","counters":[{"col_start":12,"col_end":46,"count":0}]},{"line":"        },","counters":[]},{"line":"        full_transaction_commitment: if is_last_account_update {","counters":[{"col_start":40,"col_end":62,"count":0}]},{"line":"            ReceiptChainHash(Fp::zero())","counters":[{"col_start":12,"col_end":40,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            local_state.full_transaction_commitment","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"        },","counters":[]},{"line":"        ..local_state","counters":[]},{"line":"    };","counters":[]},{"line":"","counters":[]},{"line":"    let valid_fee_excess = {","counters":[{"col_start":8,"col_end":24,"count":0}]},{"line":"        //println!(\"[rust] local_state.excess {:?}\", local_state.excess);","counters":[]},{"line":"        //println!(\"[rust] is_last_account_update {:?}\", is_last_account_update);","counters":[]},{"line":"        let delta_settled = local_state.excess == Signed::<Fee>::zero();","counters":[{"col_start":12,"col_end":72,"count":0}]},{"line":"        is_start_ || !is_last_account_update || delta_settled","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":44,"count":0},{"col_start":48,"col_end":61,"count":0}]},{"line":"    };","counters":[]},{"line":"    let local_state = local_state.add_check(TransactionFailure::InvalidFeeExcess, valid_fee_excess);","counters":[{"col_start":8,"col_end":99,"count":0}]},{"line":"    let update_local_excess = is_start_ || is_last_account_update;","counters":[{"col_start":8,"col_end":27,"count":0},{"col_start":30,"col_end":39,"count":0},{"col_start":43,"col_end":65,"count":0}]},{"line":"    let update_global_state = update_local_excess && local_state.success;","counters":[{"col_start":8,"col_end":27,"count":0},{"col_start":30,"col_end":49,"count":0},{"col_start":53,"col_end":72,"count":3}]},{"line":"","counters":[]},{"line":"    let (global_state, global_excess_update_failed, update_global_state) = {","counters":[{"col_start":9,"col_end":71,"count":0}]},{"line":"        let amt = global_state.fee_excess.clone();","counters":[{"col_start":12,"col_end":50,"count":0}]},{"line":"        let (res, overflow) = amt.add_flagged(local_state.excess.clone());","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"        let global_excess_update_failed = update_global_state && overflow;","counters":[{"col_start":12,"col_end":39,"count":0},{"col_start":42,"col_end":61,"count":0},{"col_start":65,"col_end":73,"count":0}]},{"line":"        let update_global_state = update_global_state && !overflow;","counters":[{"col_start":12,"col_end":31,"count":0},{"col_start":34,"col_end":53,"count":0},{"col_start":57,"col_end":66,"count":2860}]},{"line":"        let new_amt = if update_global_state { res } else { amt };","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":25,"col_end":44,"count":0},{"col_start":47,"col_end":50,"count":0},{"col_start":60,"col_end":63,"count":0}]},{"line":"        (","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"            GlobalState {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                fee_excess: new_amt,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                ..global_state.clone()","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            global_excess_update_failed,","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            update_global_state,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    };","counters":[]},{"line":"    let local_state = LocalStateEnv {","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"        excess: if update_local_excess {","counters":[{"col_start":19,"col_end":38,"count":0}]},{"line":"            Signed::<Fee>::zero()","counters":[{"col_start":12,"col_end":33,"count":623590}]},{"line":"        } else {","counters":[]},{"line":"            local_state.excess","counters":[{"col_start":12,"col_end":30,"count":0}]},{"line":"        },","counters":[]},{"line":"        ..local_state","counters":[]},{"line":"    };","counters":[]},{"line":"    let local_state = local_state.add_check(","counters":[{"col_start":8,"col_end":44,"count":0}]},{"line":"        TransactionFailure::GlobalExcessOverflow,","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        !global_excess_update_failed,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"    );","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"    assert_with_failure_status_tbl(","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        !is_start_ || local_state.success,","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":22,"col_end":41,"count":0}]},{"line":"        local_state.failure_status_tbl.clone(),","counters":[{"col_start":8,"col_end":46,"count":0}]},{"line":"    )?;","counters":[{"col_start":5,"col_end":6,"count":5448}]},{"line":"    let global_state = set_ledger(","counters":[{"col_start":8,"col_end":34,"count":0}]},{"line":"        update_global_state,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        global_state,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"        local_state.ledger.clone(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    );","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    let local_state = LocalStateEnv {","counters":[{"col_start":8,"col_end":19,"count":7}]},{"line":"        token_id: if is_last_account_update {","counters":[{"col_start":21,"col_end":43,"count":0}]},{"line":"            TokenId::default()","counters":[{"col_start":12,"col_end":30,"count":623590}]},{"line":"        } else {","counters":[]},{"line":"            local_state.token_id","counters":[{"col_start":12,"col_end":32,"count":0}]},{"line":"        },","counters":[]},{"line":"        ledger: if is_last_account_update {","counters":[{"col_start":19,"col_end":41,"count":0}]},{"line":"            L::empty(constraint_constants.ledger_depth as usize)","counters":[{"col_start":12,"col_end":64,"count":5612310}]},{"line":"            // empty_ledger(constraint_constants.ledger_depth as usize)","counters":[]},{"line":"        } else {","counters":[]},{"line":"            local_state.ledger","counters":[{"col_start":12,"col_end":30,"count":0}]},{"line":"        },","counters":[]},{"line":"        success: if is_last_account_update {","counters":[{"col_start":20,"col_end":42,"count":0}]},{"line":"            true","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            local_state.success","counters":[{"col_start":12,"col_end":31,"count":0}]},{"line":"        },","counters":[]},{"line":"        account_update_index: if is_last_account_update {","counters":[{"col_start":33,"col_end":55,"count":0}]},{"line":"            Index::zero()","counters":[{"col_start":12,"col_end":25,"count":7}]},{"line":"        } else {","counters":[]},{"line":"            local_state.account_update_index.incr()","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"        },","counters":[]},{"line":"        ..local_state","counters":[]},{"line":"    };","counters":[]},{"line":"    Ok((global_state, local_state))","counters":[{"col_start":4,"col_end":35,"count":7}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":16283204}]}]}