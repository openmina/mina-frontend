{"filename":"src/lib/genesis_ledger_helper/lib/genesis_ledger_helper_lib.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"let () = Key_cache_native.linkme (* Ensure that we use the native key cache. *)","counters":[]},{"line":"","counters":[]},{"line":"module Accounts = struct","counters":[]},{"line":"  module Single = struct","counters":[]},{"line":"    let to_account_with_pk :","counters":[]},{"line":"        Runtime_config.Accounts.Single.t -> Mina_base.Account.t Or_error.t =","counters":[]},{"line":"     fun t ->","counters":[]},{"line":"      let open Or_error.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind pk =","counters":[]},{"line":"        match t.pk with","counters":[]},{"line":"        | Some pk ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok (Signature_lib.Public_key.Compressed.of_base58_check_exn pk)","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Or_error.errorf","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"              !\"No public key to create the account from runtime config \\","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                %{sexp: Runtime_config.Accounts.Single.t}\"","counters":[]},{"line":"              t","counters":[]},{"line":"      in","counters":[]},{"line":"      let delegate =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Option.map ~f:Signature_lib.Public_key.Compressed.of_base58_check_exn","counters":[]},{"line":"          t.delegate","counters":[]},{"line":"      in","counters":[]},{"line":"      let token_id =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Option.value_map t.token ~default:Token_id.default","counters":[]},{"line":"          ~f:Mina_base.Token_id.of_string","counters":[]},{"line":"      in","counters":[]},{"line":"      let account_id = Mina_base.Account_id.create pk token_id in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let account =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match t.timing with","counters":[]},{"line":"        | Some","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { initial_minimum_balance","counters":[]},{"line":"            ; cliff_time","counters":[]},{"line":"            ; cliff_amount","counters":[]},{"line":"            ; vesting_period","counters":[]},{"line":"            ; vesting_increment","counters":[]},{"line":"            } ->","counters":[]},{"line":"            Mina_base.Account.create_timed account_id t.balance","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"              ~initial_minimum_balance ~cliff_time ~cliff_amount ~vesting_period","counters":[]},{"line":"              ~vesting_increment","counters":[]},{"line":"            |> Or_error.ok_exn","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Mina_base.Account.create account_id t.balance","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      in","counters":[]},{"line":"      let permissions =","counters":[]},{"line":"        match t.permissions with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            account.permissions","counters":[]},{"line":"        | Some","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { edit_state","counters":[]},{"line":"            ; send","counters":[]},{"line":"            ; receive","counters":[]},{"line":"            ; set_delegate","counters":[]},{"line":"            ; set_permissions","counters":[]},{"line":"            ; set_verification_key","counters":[]},{"line":"            ; set_zkapp_uri","counters":[]},{"line":"            ; edit_sequence_state","counters":[]},{"line":"            ; set_token_symbol","counters":[]},{"line":"            ; increment_nonce","counters":[]},{"line":"            ; set_voting_for","counters":[]},{"line":"            } ->","counters":[]},{"line":"            let auth_required a =","counters":[]},{"line":"              match a with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | Runtime_config.Accounts.Single.Permissions.Auth_required.None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Mina_base.Permissions.Auth_required.None","counters":[]},{"line":"              | Either ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Either","counters":[]},{"line":"              | Proof ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Proof","counters":[]},{"line":"              | Signature ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Signature","counters":[]},{"line":"              | Impossible ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Impossible","counters":[]},{"line":"            in","counters":[]},{"line":"            { Mina_base.Permissions.Poly.edit_state = auth_required edit_state","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"            ; send = auth_required send","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; receive = auth_required receive","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"            ; set_delegate = auth_required set_delegate","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"            ; set_permissions = auth_required set_permissions","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"            ; set_verification_key = auth_required set_verification_key","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"            ; set_zkapp_uri = auth_required set_zkapp_uri","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"            ; edit_sequence_state = auth_required edit_sequence_state","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"            ; set_token_symbol = auth_required set_token_symbol","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"            ; increment_nonce = auth_required increment_nonce","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"            ; set_voting_for = auth_required set_voting_for","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"            }","counters":[]},{"line":"      in","counters":[]},{"line":"      let token_permissions =","counters":[]},{"line":"        Option.value_map t.token_permissions ~default:account.token_permissions","counters":[]},{"line":"          ~f:(fun { token_owned; disable_new_accounts; account_disabled } ->","counters":[]},{"line":"            if token_owned then","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_base.Token_permissions.Token_owned { disable_new_accounts }","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"            else Not_owned { account_disabled } )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind token_symbol =","counters":[]},{"line":"        try","counters":[]},{"line":"          let token_symbol =","counters":[]},{"line":"            Option.value ~default:Mina_base.Account.Token_symbol.default","counters":[]},{"line":"              t.token_symbol","counters":[]},{"line":"          in","counters":[]},{"line":"          Mina_base.Account.Token_symbol.check token_symbol ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          return token_symbol","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"        with _ ->","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          Or_error.errorf \"Token symbol exceeds max length: %d > %d\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"            (String.length (Option.value_exn t.token_symbol))","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"            Mina_base.Account.Token_symbol.max_length","counters":[]},{"line":"      in","counters":[]},{"line":"      let%map zkapp =","counters":[]},{"line":"        match t.zkapp with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Ok None","counters":[]},{"line":"        | Some","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            { state","counters":[]},{"line":"            ; verification_key","counters":[]},{"line":"            ; zkapp_version","counters":[]},{"line":"            ; sequence_state","counters":[]},{"line":"            ; last_sequence_slot","counters":[]},{"line":"            ; proved_state","counters":[]},{"line":"            ; zkapp_uri","counters":[]},{"line":"            } ->","counters":[]},{"line":"            let%bind app_state =","counters":[]},{"line":"              if","counters":[]},{"line":"                Mina_stdlib.List.Length.Compare.(","counters":[]},{"line":"                  state = Pickles_types.Nat.to_int Zkapp_state.Max_state_size.n)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"              then Ok (Zkapp_state.V.of_list_exn state)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"              else","counters":[]},{"line":"                Or_error.errorf","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                  !\"Snap account state has invalid length %{sexp: \\","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                    Runtime_config.Accounts.Single.t} length: %d\"","counters":[]},{"line":"                  t (List.length state)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"            in","counters":[]},{"line":"","counters":[]},{"line":"            let verification_key =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Option.map verification_key","counters":[]},{"line":"                ~f:(With_hash.of_data ~hash_data:Zkapp_account.digest_vk)","counters":[]},{"line":"            in","counters":[]},{"line":"            let%map sequence_state =","counters":[]},{"line":"              if","counters":[]},{"line":"                Mina_stdlib.List.Length.Compare.(","counters":[]},{"line":"                  sequence_state","counters":[]},{"line":"                  = Pickles_types.Nat.to_int Pickles_types.Nat.N5.n)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"              then Ok (Pickles_types.Vector.Vector_5.of_list_exn sequence_state)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"              else","counters":[]},{"line":"                Or_error.errorf","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                  !\"Snap account sequence_state has invalid length %{sexp: \\","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                    Runtime_config.Accounts.Single.t} length: %d\"","counters":[]},{"line":"                  t","counters":[]},{"line":"                  (List.length sequence_state)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            in","counters":[]},{"line":"","counters":[]},{"line":"            let last_sequence_slot =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_numbers.Global_slot.of_int last_sequence_slot","counters":[]},{"line":"            in","counters":[]},{"line":"            Some","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              { Zkapp_account.verification_key","counters":[]},{"line":"              ; app_state","counters":[]},{"line":"              ; zkapp_version","counters":[]},{"line":"              ; sequence_state","counters":[]},{"line":"              ; last_sequence_slot","counters":[]},{"line":"              ; proved_state","counters":[]},{"line":"              ; zkapp_uri","counters":[]},{"line":"              }","counters":[]},{"line":"      in","counters":[]},{"line":"      ( { public_key = account.public_key","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ; balance = account.balance","counters":[]},{"line":"        ; timing = account.timing","counters":[]},{"line":"        ; token_symbol","counters":[]},{"line":"        ; delegate =","counters":[]},{"line":"            (if Option.is_some delegate then delegate else account.delegate)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        ; token_id","counters":[]},{"line":"        ; token_permissions","counters":[]},{"line":"        ; nonce = Account.Nonce.of_uint32 t.nonce","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"        ; receipt_chain_hash =","counters":[]},{"line":"            Option.value_map t.receipt_chain_hash","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              ~default:account.receipt_chain_hash","counters":[]},{"line":"              ~f:Mina_base.Receipt.Chain_hash.of_base58_check_exn","counters":[]},{"line":"        ; voting_for =","counters":[]},{"line":"            Option.value_map ~default:account.voting_for","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              ~f:Mina_base.State_hash.of_base58_check_exn t.voting_for","counters":[]},{"line":"        ; zkapp","counters":[]},{"line":"        ; permissions","counters":[]},{"line":"        }","counters":[]},{"line":"        : Mina_base.Account.t )","counters":[]},{"line":"","counters":[]},{"line":"    let of_account :","counters":[]},{"line":"           Mina_base.Account.t","counters":[]},{"line":"        -> Signature_lib.Private_key.t option","counters":[]},{"line":"        -> Runtime_config.Accounts.Single.t =","counters":[]},{"line":"     fun account sk ->","counters":[]},{"line":"      let timing =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match account.timing with","counters":[]},{"line":"        | Account.Timing.Untimed ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | Timed t ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              { Runtime_config.Accounts.Single.Timed.initial_minimum_balance =","counters":[]},{"line":"                  t.initial_minimum_balance","counters":[]},{"line":"              ; cliff_time = t.cliff_time","counters":[]},{"line":"              ; cliff_amount = t.cliff_amount","counters":[]},{"line":"              ; vesting_period = t.vesting_period","counters":[]},{"line":"              ; vesting_increment = t.vesting_increment","counters":[]},{"line":"              }","counters":[]},{"line":"      in","counters":[]},{"line":"      let token_permissions =","counters":[]},{"line":"        match account.token_permissions with","counters":[]},{"line":"        | Mina_base.Token_permissions.Token_owned { disable_new_accounts } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              { Runtime_config.Accounts.Single.Token_permissions.token_owned =","counters":[]},{"line":"                  true","counters":[]},{"line":"              ; disable_new_accounts","counters":[]},{"line":"              ; account_disabled = false","counters":[]},{"line":"              }","counters":[]},{"line":"        | Not_owned { account_disabled } ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              { token_owned = false","counters":[]},{"line":"              ; disable_new_accounts = false","counters":[]},{"line":"              ; account_disabled","counters":[]},{"line":"              }","counters":[]},{"line":"      in","counters":[]},{"line":"      let permissions =","counters":[]},{"line":"        let auth_required a =","counters":[]},{"line":"          match a with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Mina_base.Permissions.Auth_required.None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Runtime_config.Accounts.Single.Permissions.Auth_required.None","counters":[]},{"line":"          | Either ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Either","counters":[]},{"line":"          | Proof ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Proof","counters":[]},{"line":"          | Signature ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Signature","counters":[]},{"line":"          | Impossible ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Impossible","counters":[]},{"line":"        in","counters":[]},{"line":"        let { Mina_base.Permissions.Poly.edit_state","counters":[]},{"line":"            ; send","counters":[]},{"line":"            ; receive","counters":[]},{"line":"            ; set_delegate","counters":[]},{"line":"            ; set_permissions","counters":[]},{"line":"            ; set_verification_key","counters":[]},{"line":"            ; set_zkapp_uri","counters":[]},{"line":"            ; edit_sequence_state","counters":[]},{"line":"            ; set_token_symbol","counters":[]},{"line":"            ; increment_nonce","counters":[]},{"line":"            ; set_voting_for","counters":[]},{"line":"            } =","counters":[]},{"line":"          account.permissions","counters":[]},{"line":"        in","counters":[]},{"line":"        Some","counters":[]},{"line":"          { Runtime_config.Accounts.Single.Permissions.edit_state =","counters":[]},{"line":"              auth_required edit_state","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"          ; send = auth_required send","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          ; receive = auth_required receive","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          ; set_delegate = auth_required set_delegate","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; set_permissions = auth_required set_permissions","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; set_verification_key = auth_required set_verification_key","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"          ; set_zkapp_uri = auth_required set_zkapp_uri","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; edit_sequence_state = auth_required edit_sequence_state","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"          ; set_token_symbol = auth_required set_token_symbol","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"          ; increment_nonce = auth_required increment_nonce","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; set_voting_for = auth_required set_voting_for","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          }","counters":[]},{"line":"      in","counters":[]},{"line":"      let zkapp =","counters":[]},{"line":"        Option.map account.zkapp","counters":[]},{"line":"          ~f:(fun","counters":[]},{"line":"               { app_state","counters":[]},{"line":"               ; verification_key","counters":[]},{"line":"               ; zkapp_version","counters":[]},{"line":"               ; sequence_state","counters":[]},{"line":"               ; last_sequence_slot","counters":[]},{"line":"               ; proved_state","counters":[]},{"line":"               ; zkapp_uri","counters":[]},{"line":"               }","counters":[]},{"line":"             ->","counters":[]},{"line":"            let state = Zkapp_state.V.to_list app_state in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let verification_key =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Option.map verification_key ~f:With_hash.data","counters":[]},{"line":"            in","counters":[]},{"line":"            let sequence_state = Pickles_types.Vector.to_list sequence_state in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let last_sequence_slot =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_numbers.Global_slot.to_int last_sequence_slot","counters":[]},{"line":"            in","counters":[]},{"line":"            { Runtime_config.Accounts.Single.Zkapp_account.state","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            ; verification_key","counters":[]},{"line":"            ; zkapp_version","counters":[]},{"line":"            ; sequence_state","counters":[]},{"line":"            ; last_sequence_slot","counters":[]},{"line":"            ; proved_state","counters":[]},{"line":"            ; zkapp_uri","counters":[]},{"line":"            } )","counters":[]},{"line":"      in","counters":[]},{"line":"      { pk =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Some","counters":[]},{"line":"            (Signature_lib.Public_key.Compressed.to_base58_check","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"               account.public_key )","counters":[]},{"line":"      ; sk = Option.map ~f:Signature_lib.Private_key.to_base58_check sk","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ; balance = account.balance","counters":[]},{"line":"      ; delegate =","counters":[]},{"line":"          Option.map ~f:Signature_lib.Public_key.Compressed.to_base58_check","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            account.delegate","counters":[]},{"line":"      ; timing","counters":[]},{"line":"      ; token = Some (Mina_base.Token_id.to_string account.token_id)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"      ; token_permissions","counters":[]},{"line":"      ; nonce = account.nonce","counters":[]},{"line":"      ; receipt_chain_hash =","counters":[]},{"line":"          Some","counters":[]},{"line":"            (Mina_base.Receipt.Chain_hash.to_base58_check","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"               account.receipt_chain_hash )","counters":[]},{"line":"      ; voting_for =","counters":[]},{"line":"          Some (Mina_base.State_hash.to_base58_check account.voting_for)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"      ; zkapp","counters":[]},{"line":"      ; permissions","counters":[]},{"line":"      ; token_symbol = Some account.token_symbol","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_full :","counters":[]},{"line":"      Runtime_config.Accounts.t -> (Private_key.t option * Account.t) list =","counters":[]},{"line":"    List.mapi","counters":[]},{"line":"      ~f:(fun i ({ Runtime_config.Accounts.pk; sk; _ } as account_config) ->","counters":[]},{"line":"        let sk =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          match sk with","counters":[]},{"line":"          | Some sk -> (","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match Private_key.of_yojson (`String sk) with","counters":[]},{"line":"              | Ok sk ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Some sk","counters":[]},{"line":"              | Error err ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Error.(raise (of_string err)) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              None","counters":[]},{"line":"        in","counters":[]},{"line":"        let pk =","counters":[]},{"line":"          match pk with","counters":[]},{"line":"          | Some pk ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              pk","counters":[]},{"line":"          | None ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Public_key.Compressed.to_base58_check","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                (Quickcheck.random_value","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                   ~seed:","counters":[]},{"line":"                     (`Deterministic","counters":[]},{"line":"                       (\"fake pk for genesis ledger \" ^ string_of_int i) )","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"                   Public_key.Compressed.gen )","counters":[]},{"line":"        in","counters":[]},{"line":"        let account =","counters":[]},{"line":"          Single.to_account_with_pk { account_config with pk = Some pk }","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          |> Or_error.ok_exn","counters":[]},{"line":"        in","counters":[]},{"line":"        (sk, account) )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let gen_with_balance balance :","counters":[]},{"line":"      (Private_key.t option * Account.t) Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map pk = Signature_lib.Public_key.Compressed.gen in","counters":[]},{"line":"    (None, Account.create (Account_id.create pk Token_id.default) balance)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let gen : (Private_key.t option * Account.t) Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let%bind balance = Int.gen_incl 10 500 >>| Currency.Balance.of_int in","counters":[{"col_start":34,"col_end":34,"count":1},{"col_start":45,"col_end":45,"count":1}]},{"line":"    gen_with_balance balance","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let generate n : (Private_key.t option * Account.t) list =","counters":[]},{"line":"    let open Quickcheck in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    random_value ~seed:(`Deterministic \"fake accounts for genesis ledger\")","counters":[]},{"line":"      (Generator.list_with_length n gen)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  (* This implements a tail-recursive generator using the low-level primitives","counters":[]},{"line":"     so that we don't blow out the stack.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let gen_balances_rev balances :","counters":[]},{"line":"      (Private_key.t option * Account.t) list Quickcheck.Generator.t =","counters":[]},{"line":"    match balances with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Quickcheck.Generator.return []","counters":[]},{"line":"    | (n, balance) :: balances_tl ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Quickcheck.Generator.create (fun ~size ~random ->","counters":[]},{"line":"            let rec gen_balances_rev n balance balances_tl accounts =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              if n > 0 then","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let new_random = Splittable_random.State.split random in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let account =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (* Manually generate an account using the [generate] primitive. *)","counters":[]},{"line":"                  Quickcheck.Generator.generate ~size ~random:new_random","counters":[]},{"line":"                    (gen_with_balance balance)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                in","counters":[]},{"line":"                gen_balances_rev (n - 1) balance balances_tl","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (account :: accounts)","counters":[]},{"line":"              else","counters":[]},{"line":"                match balances_tl with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | [] ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    accounts","counters":[]},{"line":"                | (n, balance) :: balances_tl ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    gen_balances_rev n balance balances_tl accounts","counters":[]},{"line":"            in","counters":[]},{"line":"            gen_balances_rev n balance balances_tl [] )","counters":[]},{"line":"","counters":[]},{"line":"  let pad_with_rev_balances balances accounts =","counters":[]},{"line":"    let balances_accounts =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Quickcheck.random_value","counters":[]},{"line":"        ~seed:(`Deterministic \"fake accounts with balances for genesis ledger\")","counters":[]},{"line":"        (gen_balances_rev balances)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    in","counters":[]},{"line":"    List.append accounts balances_accounts","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  (* NOTE: When modifying this function, be very careful to ensure that all","counters":[]},{"line":"     operations are tail-recursive, otherwise a sufficiently large genesis","counters":[]},{"line":"     ledger will blow the stack.","counters":[]},{"line":"     In particular, do not use any functions that return values of the form","counters":[]},{"line":"     [_ :: _], since this construction is NOT tail-recursive.","counters":[]},{"line":"  *)","counters":[]},{"line":"  let pad_to n accounts =","counters":[]},{"line":"    if n <= 0 then accounts","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"    else","counters":[]},{"line":"      let exception Stop in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      try","counters":[]},{"line":"        (* Count accounts and reverse the list while we're doing so to avoid","counters":[]},{"line":"           re-traversing the list.","counters":[]},{"line":"        *)","counters":[]},{"line":"        let rev_accounts, count =","counters":[]},{"line":"          List.fold ~init:([], 0) accounts ~f:(fun (acc, count) account ->","counters":[]},{"line":"              let count = count + 1 in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              if count >= n then raise Stop ;","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              (account :: acc, count + 1) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        in","counters":[]},{"line":"        (* [rev_append] is tail-recursive, and we've already reversed the list,","counters":[]},{"line":"           so we can avoid calling [append] which may internally reverse the","counters":[]},{"line":"           list again where it is sufficiently long.","counters":[]},{"line":"        *)","counters":[]},{"line":"        List.rev_append rev_accounts (generate (n - count))","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      with Stop -> accounts","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let make_constraint_constants","counters":[]},{"line":"    ~(default : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"    (config : Runtime_config.Proof_keys.t) :","counters":[]},{"line":"    Genesis_constants.Constraint_constants.t =","counters":[]},{"line":"  let work_delay = Option.value ~default:default.work_delay config.work_delay in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let block_window_duration_ms =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value ~default:default.block_window_duration_ms","counters":[]},{"line":"      config.block_window_duration_ms","counters":[]},{"line":"  in","counters":[]},{"line":"  let transaction_capacity_log_2 =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match config.transaction_capacity with","counters":[]},{"line":"    | Some (Log_2 i) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        i","counters":[]},{"line":"    | Some (Txns_per_second_x10 tps_goal_x10) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let max_coinbases = 2 in","counters":[]},{"line":"        let max_user_commands_per_block =","counters":[]},{"line":"          (* block_window_duration is in milliseconds, so divide by 1000 divide","counters":[]},{"line":"             by 10 again because we have tps * 10","counters":[]},{"line":"          *)","counters":[]},{"line":"          tps_goal_x10 * block_window_duration_ms / (1000 * 10)","counters":[]},{"line":"        in","counters":[]},{"line":"        (* Log of the capacity of transactions per transition.","counters":[]},{"line":"            - 1 will only work if we don't have prover fees.","counters":[]},{"line":"            - 2 will work with prover fees, but not if we want a transaction","counters":[]},{"line":"              included in every block.","counters":[]},{"line":"            - At least 3 ensures a transaction per block and the staged-ledger","counters":[]},{"line":"              unit tests pass.","counters":[]},{"line":"        *)","counters":[]},{"line":"        1","counters":[]},{"line":"        + Core_kernel.Int.ceil_log2 (max_user_commands_per_block + max_coinbases)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        default.transaction_capacity_log_2","counters":[]},{"line":"  in","counters":[]},{"line":"  let pending_coinbase_depth =","counters":[]},{"line":"    Core_kernel.Int.ceil_log2","counters":[]},{"line":"      (((transaction_capacity_log_2 + 1) * (work_delay + 1)) + 1)","counters":[]},{"line":"  in","counters":[]},{"line":"  { sub_windows_per_window =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Option.value ~default:default.sub_windows_per_window","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        config.sub_windows_per_window","counters":[]},{"line":"  ; ledger_depth =","counters":[]},{"line":"      Option.value ~default:default.ledger_depth config.ledger_depth","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  ; work_delay","counters":[]},{"line":"  ; block_window_duration_ms","counters":[]},{"line":"  ; transaction_capacity_log_2","counters":[]},{"line":"  ; pending_coinbase_depth","counters":[]},{"line":"  ; coinbase_amount =","counters":[]},{"line":"      Option.value ~default:default.coinbase_amount config.coinbase_amount","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  ; supercharged_coinbase_factor =","counters":[]},{"line":"      Option.value ~default:default.supercharged_coinbase_factor","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        config.supercharged_coinbase_factor","counters":[]},{"line":"  ; account_creation_fee =","counters":[]},{"line":"      Option.value ~default:default.account_creation_fee","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        config.account_creation_fee","counters":[]},{"line":"  ; fork =","counters":[]},{"line":"      ( match config.fork with","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          default.fork","counters":[]},{"line":"      | Some { previous_state_hash; previous_length; previous_global_slot } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some","counters":[]},{"line":"            { previous_state_hash =","counters":[]},{"line":"                State_hash.of_base58_check_exn previous_state_hash","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"            ; previous_length = Mina_numbers.Length.of_int previous_length","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"            ; previous_global_slot =","counters":[]},{"line":"                Mina_numbers.Global_slot.of_int previous_global_slot","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"            } )","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let runtime_config_of_constraint_constants","counters":[]},{"line":"    ~(proof_level : Genesis_constants.Proof_level.t)","counters":[]},{"line":"    (constraint_constants : Genesis_constants.Constraint_constants.t) :","counters":[]},{"line":"    Runtime_config.Proof_keys.t =","counters":[]},{"line":"  { level =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      ( match proof_level with","counters":[]},{"line":"      | Full ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some Full","counters":[]},{"line":"      | Check ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some Check","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some None )","counters":[]},{"line":"  ; sub_windows_per_window = Some constraint_constants.sub_windows_per_window","counters":[]},{"line":"  ; ledger_depth = Some constraint_constants.ledger_depth","counters":[]},{"line":"  ; work_delay = Some constraint_constants.work_delay","counters":[]},{"line":"  ; block_window_duration_ms =","counters":[]},{"line":"      Some constraint_constants.block_window_duration_ms","counters":[]},{"line":"  ; transaction_capacity =","counters":[]},{"line":"      Some (Log_2 constraint_constants.transaction_capacity_log_2)","counters":[]},{"line":"  ; coinbase_amount = Some constraint_constants.coinbase_amount","counters":[]},{"line":"  ; supercharged_coinbase_factor =","counters":[]},{"line":"      Some constraint_constants.supercharged_coinbase_factor","counters":[]},{"line":"  ; account_creation_fee = Some constraint_constants.account_creation_fee","counters":[]},{"line":"  ; fork =","counters":[]},{"line":"      Option.map constraint_constants.fork","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        ~f:(fun { previous_state_hash; previous_length; previous_global_slot }","counters":[]},{"line":"           ->","counters":[]},{"line":"          { Runtime_config.Fork_config.previous_state_hash =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              State_hash.to_base58_check previous_state_hash","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; previous_length = Mina_numbers.Length.to_int previous_length","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"          ; previous_global_slot =","counters":[]},{"line":"              Mina_numbers.Global_slot.to_int previous_global_slot","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"          } )","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let make_genesis_constants ~logger ~(default : Genesis_constants.t)","counters":[]},{"line":"    (config : Runtime_config.t) =","counters":[]},{"line":"  let open Or_error.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map genesis_state_timestamp =","counters":[]},{"line":"    let open Option.Let_syntax in","counters":[]},{"line":"    match","counters":[]},{"line":"      let%bind daemon = config.genesis in","counters":[]},{"line":"      let%map genesis_state_timestamp = daemon.genesis_state_timestamp in","counters":[]},{"line":"      Genesis_constants.validate_time (Some genesis_state_timestamp)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    with","counters":[]},{"line":"    | Some (Ok time) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok (Some time)","counters":[]},{"line":"    | Some (Error msg) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log error]","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          \"Could not build genesis constants from the configuration file: \\","counters":[]},{"line":"           $error\"","counters":[]},{"line":"          ~metadata:[ (\"error\", `String msg) ] ;","counters":[]},{"line":"        Or_error.errorf","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"          \"Could not build genesis constants from the configuration file: %s\"","counters":[]},{"line":"          msg","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok None","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Option.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { Genesis_constants.protocol =","counters":[]},{"line":"      { k =","counters":[]},{"line":"          Option.value ~default:default.protocol.k","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            (config.genesis >>= fun cfg -> cfg.k)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; delta =","counters":[]},{"line":"          Option.value ~default:default.protocol.delta","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            (config.genesis >>= fun cfg -> cfg.delta)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; slots_per_epoch =","counters":[]},{"line":"          Option.value ~default:default.protocol.slots_per_epoch","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            (config.genesis >>= fun cfg -> cfg.slots_per_epoch)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; slots_per_sub_window =","counters":[]},{"line":"          Option.value ~default:default.protocol.slots_per_sub_window","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            (config.genesis >>= fun cfg -> cfg.slots_per_sub_window)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"      ; genesis_state_timestamp =","counters":[]},{"line":"          Option.value ~default:default.protocol.genesis_state_timestamp","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            genesis_state_timestamp","counters":[]},{"line":"      }","counters":[]},{"line":"  ; txpool_max_size =","counters":[]},{"line":"      Option.value ~default:default.txpool_max_size","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.txpool_max_size)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; transaction_expiry_hr =","counters":[]},{"line":"      Option.value ~default:default.transaction_expiry_hr","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.transaction_expiry_hr)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; zkapp_proof_update_cost =","counters":[]},{"line":"      Option.value ~default:default.zkapp_proof_update_cost","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.zkapp_proof_update_cost)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; zkapp_signed_single_update_cost =","counters":[]},{"line":"      Option.value ~default:default.zkapp_signed_single_update_cost","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.zkapp_signed_single_update_cost)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; zkapp_signed_pair_update_cost =","counters":[]},{"line":"      Option.value ~default:default.zkapp_signed_pair_update_cost","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.zkapp_signed_pair_update_cost)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; zkapp_transaction_cost_limit =","counters":[]},{"line":"      Option.value ~default:default.zkapp_transaction_cost_limit","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.zkapp_transaction_cost_limit)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; max_event_elements =","counters":[]},{"line":"      Option.value ~default:default.max_event_elements","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.max_event_elements)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; max_sequence_event_elements =","counters":[]},{"line":"      Option.value ~default:default.max_sequence_event_elements","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (config.daemon >>= fun cfg -> cfg.max_sequence_event_elements)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; num_accounts =","counters":[]},{"line":"      Option.value_map ~default:default.num_accounts","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"        (config.ledger >>= fun cfg -> cfg.num_accounts)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        ~f:(fun num_accounts -> Some num_accounts)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let runtime_config_of_genesis_constants (genesis_constants : Genesis_constants.t)","counters":[]},{"line":"    : Runtime_config.Genesis.t =","counters":[]},{"line":"  { k = Some genesis_constants.protocol.k","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; delta = Some genesis_constants.protocol.delta","counters":[]},{"line":"  ; slots_per_epoch = Some genesis_constants.protocol.slots_per_epoch","counters":[]},{"line":"  ; slots_per_sub_window = Some genesis_constants.protocol.slots_per_sub_window","counters":[]},{"line":"  ; genesis_state_timestamp =","counters":[]},{"line":"      Some","counters":[]},{"line":"        (Genesis_constants.genesis_timestamp_to_string","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"           genesis_constants.protocol.genesis_state_timestamp )","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let runtime_config_of_precomputed_values (precomputed_values : Genesis_proof.t)","counters":[]},{"line":"    : Runtime_config.t =","counters":[]},{"line":"  Runtime_config.combine precomputed_values.runtime_config","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { daemon =","counters":[]},{"line":"        Some","counters":[]},{"line":"          { txpool_max_size =","counters":[]},{"line":"              Some precomputed_values.genesis_constants.txpool_max_size","counters":[]},{"line":"          ; peer_list_url = None","counters":[]},{"line":"          ; transaction_expiry_hr =","counters":[]},{"line":"              Some precomputed_values.genesis_constants.transaction_expiry_hr","counters":[]},{"line":"          ; zkapp_proof_update_cost =","counters":[]},{"line":"              Some precomputed_values.genesis_constants.zkapp_proof_update_cost","counters":[]},{"line":"          ; zkapp_signed_single_update_cost =","counters":[]},{"line":"              Some","counters":[]},{"line":"                precomputed_values.genesis_constants","counters":[]},{"line":"                  .zkapp_signed_single_update_cost","counters":[]},{"line":"          ; zkapp_signed_pair_update_cost =","counters":[]},{"line":"              Some","counters":[]},{"line":"                precomputed_values.genesis_constants","counters":[]},{"line":"                  .zkapp_signed_pair_update_cost","counters":[]},{"line":"          ; zkapp_transaction_cost_limit =","counters":[]},{"line":"              Some","counters":[]},{"line":"                precomputed_values.genesis_constants","counters":[]},{"line":"                  .zkapp_transaction_cost_limit","counters":[]},{"line":"          ; max_event_elements =","counters":[]},{"line":"              Some precomputed_values.genesis_constants.max_event_elements","counters":[]},{"line":"          ; max_sequence_event_elements =","counters":[]},{"line":"              Some","counters":[]},{"line":"                precomputed_values.genesis_constants.max_sequence_event_elements","counters":[]},{"line":"          }","counters":[]},{"line":"    ; genesis =","counters":[]},{"line":"        Some","counters":[]},{"line":"          (runtime_config_of_genesis_constants","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"             precomputed_values.genesis_constants )","counters":[]},{"line":"    ; proof =","counters":[]},{"line":"        Some","counters":[]},{"line":"          (runtime_config_of_constraint_constants","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"             ~proof_level:precomputed_values.proof_level","counters":[]},{"line":"             precomputed_values.constraint_constants )","counters":[]},{"line":"    ; ledger = None","counters":[]},{"line":"    ; epoch_data = None","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":4,"count":2}]}]}