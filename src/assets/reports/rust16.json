{"filename":"src/database/database_impl.rs","lines":[{"line":"use std::{","counters":[]},{"line":"    collections::{HashMap, HashSet},","counters":[]},{"line":"    ops::ControlFlow,","counters":[]},{"line":"    path::PathBuf,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    next_uuid, Account, AccountId, AccountIndex, AccountLegacy, Address, AddressIterator,","counters":[]},{"line":"    BaseLedger, Direction, GetOrCreated, HashesMatrix, MerklePath, TokenId, TreeVersion, Uuid, V1,","counters":[]},{"line":"    V2,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::DatabaseError;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone)]","counters":[]},{"line":"pub struct DatabaseImpl<T: TreeVersion> {","counters":[]},{"line":"    accounts: Vec<Option<T::Account>>,","counters":[]},{"line":"    pub hashes_matrix: HashesMatrix,","counters":[]},{"line":"    id_to_addr: HashMap<AccountId, Address>,","counters":[]},{"line":"    token_to_account: HashMap<T::TokenId, AccountId>,","counters":[]},{"line":"    depth: u8,","counters":[]},{"line":"    last_location: Option<Address>,","counters":[]},{"line":"    naccounts: usize,","counters":[]},{"line":"    uuid: Uuid,","counters":[]},{"line":"    directory: PathBuf,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T: TreeVersion> std::fmt::Debug for DatabaseImpl<T> {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        f.debug_struct(\"Database\")","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            // .field(\"accounts\", &self.accounts)","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            .field(\"hashes_matrix\", &self.hashes_matrix)","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            // .field(\"id_to_addr\", &self.id_to_addr)","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            // .field(\"token_to_account\", &self.token_to_account)","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            // .field(\"depth\", &self.depth)","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            // .field(\"last_location\", &self.last_location)","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            .field(\"naccounts\", &self.naccounts)","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            .field(\"uuid\", &self.uuid)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            .field(\"directory\", &self.directory)","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            .finish()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// #[derive(Debug, PartialEq, Eq)]","counters":[]},{"line":"// pub enum DatabaseError {","counters":[]},{"line":"//     OutOfLeaves,","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"impl DatabaseImpl<V2> {","counters":[]},{"line":"    pub fn clone_db(&self, new_directory: PathBuf) -> Self {","counters":[{"col_start":4,"col_end":60,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            // root: self.root.clone(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            accounts: self.accounts.clone(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            id_to_addr: self.id_to_addr.clone(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            token_to_account: self.token_to_account.clone(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"            depth: self.depth,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            last_location: self.last_location.clone(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            naccounts: self.naccounts,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            uuid: next_uuid(),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            directory: new_directory,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            hashes_matrix: HashesMatrix::new(self.depth as usize),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"            // root_hash: RefCell::new(*self.root_hash.borrow()),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove(&mut self, addr: Address) -> Option<Account> {","counters":[{"col_start":4,"col_end":60,"count":0}]},{"line":"        let index = addr.to_index();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        let index: usize = index.0 as usize;","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(account) = self.accounts.get_mut(index) {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":59,"count":0}]},{"line":"            return account.take();","counters":[{"col_start":19,"col_end":33,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        None","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn create_account(","counters":[{"col_start":4,"col_end":22,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        account_id: AccountId,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        account: Account,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    ) -> Result<GetOrCreated, DatabaseError> {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        // if self.root.is_none() {","counters":[]},{"line":"        //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"        // }","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(addr) = self.id_to_addr.get(&account_id).cloned() {","counters":[{"col_start":20,"col_end":24,"count":-2},{"col_start":28,"col_end":69,"count":0}]},{"line":"            return Ok(GetOrCreated::Existed(addr));","counters":[{"col_start":19,"col_end":50,"count":-2}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":2}]},{"line":"","counters":[]},{"line":"        let token_id = account.token_id.clone();","counters":[{"col_start":0,"col_end":47,"count":2}]},{"line":"        let location = match self.last_location.as_ref() {","counters":[{"col_start":12,"col_end":20,"count":2},{"col_start":29,"col_end":56,"count":2}]},{"line":"            Some(last) => last.next().ok_or(DatabaseError::OutOfLeaves)?,","counters":[{"col_start":17,"col_end":71,"count":0},{"col_start":71,"col_end":72,"count":0}]},{"line":"            None => Address::first(self.depth as usize),","counters":[{"col_start":20,"col_end":55,"count":2}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(location.to_index(), self.accounts.len());","counters":[{"col_start":8,"col_end":60,"count":2}]},{"line":"        self.accounts.push(Some(account));","counters":[{"col_start":8,"col_end":42,"count":76}]},{"line":"","counters":[]},{"line":"        // let root = self.root.as_mut().unwrap();","counters":[{"col_start":0,"col_end":50,"count":76}]},{"line":"        // root.add_account_on_path(account, location.iter());","counters":[{"col_start":0,"col_end":62,"count":76}]},{"line":"","counters":[]},{"line":"        self.last_location = Some(location.clone());","counters":[{"col_start":0,"col_end":52,"count":76}]},{"line":"        self.naccounts += 1;","counters":[{"col_start":0,"col_end":28,"count":76}]},{"line":"","counters":[]},{"line":"        self.token_to_account.insert(token_id, account_id.clone());","counters":[{"col_start":0,"col_end":67,"count":76}]},{"line":"        self.id_to_addr.insert(account_id, location.clone());","counters":[{"col_start":0,"col_end":61,"count":76}]},{"line":"","counters":[]},{"line":"        // self.root_hash.borrow_mut().take();","counters":[{"col_start":0,"col_end":46,"count":76}]},{"line":"","counters":[]},{"line":"        Ok(GetOrCreated::Added(location))","counters":[{"col_start":0,"col_end":41,"count":76}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":74}]},{"line":"","counters":[]},{"line":"    pub fn iter_with_addr<F>(&self, mut fun: F)","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(Address, &Account),","counters":[]},{"line":"    {","counters":[]},{"line":"        let depth = self.depth as usize;","counters":[]},{"line":"","counters":[]},{"line":"        for (index, account) in self.accounts.iter().enumerate() {","counters":[]},{"line":"            let account = match account {","counters":[]},{"line":"                Some(account) => account,","counters":[]},{"line":"                None => continue,","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            let addr = Address::from_index(index.into(), depth);","counters":[]},{"line":"            fun(addr, account);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn emulate_tree_to_get_hash_at(&mut self, addr: Address) -> Fp {","counters":[]},{"line":"        if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":57,"count":0}]},{"line":"            return *hash;","counters":[{"col_start":19,"col_end":24,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // let tree_depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        // let mut children = addr.iter_children(tree_depth);","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        // // First child","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        // let first_account_index = children.next().unwrap().to_index().0 as u64;","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"        // let mut nremaining = self","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        //     .naccounts()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        //     .saturating_sub(first_account_index as usize);","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        let last_account = self","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            .last_filled()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .unwrap_or_else(|| Address::first(self.depth as usize));","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":31,"col_end":66,"count":0},{"col_start":66,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"        self.emulate_tree_recursive(addr, &last_account)","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // fn emulate_recursive(&mut self, addr: Address, nremaining: &mut usize) -> Fp {","counters":[]},{"line":"    pub fn emulate_tree_recursive(&mut self, addr: Address, last_account: &Address) -> Fp {","counters":[{"col_start":4,"col_end":91,"count":0}]},{"line":"        let tree_depth = self.depth as usize;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let current_depth = tree_depth - addr.length();","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        if current_depth == 0 {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            return self","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"                .get_account_hash(addr.to_index())","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                .unwrap_or_else(|| self.hashes_matrix.empty_hash_at_depth(0));","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":35,"col_end":76,"count":0},{"col_start":76,"col_end":77,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let mut get_child_hash = |addr: Address| {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[{"col_start":24,"col_end":28,"count":0},{"col_start":32,"col_end":61,"count":0}]},{"line":"                *hash","counters":[{"col_start":16,"col_end":21,"count":0}]},{"line":"            } else if addr.is_before(last_account) {","counters":[{"col_start":22,"col_end":50,"count":0}]},{"line":"                self.emulate_tree_recursive(addr, last_account)","counters":[{"col_start":16,"col_end":63,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                self.hashes_matrix.empty_hash_at_depth(current_depth - 1)","counters":[{"col_start":16,"col_end":73,"count":6}]},{"line":"            }","counters":[]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":6}]},{"line":"","counters":[]},{"line":"        let left_hash = get_child_hash(addr.child_left());","counters":[{"col_start":12,"col_end":58,"count":0}]},{"line":"        let right_hash = get_child_hash(addr.child_right());","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        match self.hashes_matrix.get(&addr) {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            Some(hash) => *hash,","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                let hash = V2::hash_node(current_depth - 1, left_hash, right_hash);","counters":[{"col_start":20,"col_end":83,"count":0}]},{"line":"                self.hashes_matrix.set(&addr, hash);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                hash","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn emulate_tree_to_get_path(","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        last_account: &Address,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        path: &mut AddressIterator,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        merkle_path: &mut Vec<MerklePath>,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    ) -> Fp {","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        let tree_depth = self.depth as usize;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        if addr.length() == self.depth as usize {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            return self","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"                .get_account_hash(addr.to_index())","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                .unwrap_or_else(|| self.hashes_matrix.empty_hash_at_depth(0));","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":35,"col_end":76,"count":0},{"col_start":76,"col_end":77,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let next_direction = path.next();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"        // We go until the end of the path","counters":[]},{"line":"        if let Some(direction) = next_direction.as_ref() {","counters":[{"col_start":20,"col_end":29,"count":0},{"col_start":33,"col_end":56,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"            let child = match direction {","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":30,"col_end":39,"count":0}]},{"line":"                Direction::Left => addr.child_left(),","counters":[{"col_start":35,"col_end":52,"count":0}]},{"line":"                Direction::Right => addr.child_right(),","counters":[{"col_start":36,"col_end":54,"count":0}]},{"line":"            };","counters":[]},{"line":"            self.emulate_tree_to_get_path(child, last_account, path, merkle_path);","counters":[{"col_start":12,"col_end":81,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let depth_in_tree = tree_depth - addr.length();","counters":[{"col_start":12,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        let mut get_child_hash = |addr: Address| match self.hashes_matrix.get(&addr) {","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":49,"col_end":84,"count":0}]},{"line":"            Some(hash) => *hash,","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[{"col_start":28,"col_end":32,"count":0},{"col_start":36,"col_end":65,"count":0}]},{"line":"                    *hash","counters":[{"col_start":20,"col_end":25,"count":0}]},{"line":"                } else if addr.is_before(last_account) {","counters":[{"col_start":26,"col_end":54,"count":0}]},{"line":"                    self.emulate_tree_to_get_path(addr, last_account, path, merkle_path)","counters":[{"col_start":20,"col_end":88,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    self.hashes_matrix.empty_hash_at_depth(depth_in_tree - 1)","counters":[{"col_start":20,"col_end":77,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let left = get_child_hash(addr.child_left());","counters":[{"col_start":12,"col_end":53,"count":0}]},{"line":"        let right = get_child_hash(addr.child_right());","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(direction) = next_direction {","counters":[{"col_start":20,"col_end":29,"count":0},{"col_start":33,"col_end":47,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"            let hash = match direction {","counters":[{"col_start":0,"col_end":20,"count":0},{"col_start":29,"col_end":38,"count":0}]},{"line":"                Direction::Left => MerklePath::Left(right),","counters":[{"col_start":35,"col_end":58,"count":0}]},{"line":"                Direction::Right => MerklePath::Right(left),","counters":[{"col_start":36,"col_end":59,"count":0}]},{"line":"            };","counters":[]},{"line":"            merkle_path.push(hash);","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        match self.hashes_matrix.get(&addr) {","counters":[{"col_start":14,"col_end":43,"count":0}]},{"line":"            Some(hash) => *hash,","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                let hash = V2::hash_node(depth_in_tree - 1, left, right);","counters":[{"col_start":20,"col_end":73,"count":0}]},{"line":"                self.hashes_matrix.set(&addr, hash);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                hash","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create_checkpoint(&self, directory_name: String) {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        elog!(\"create_checkpoint {}\", directory_name);","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn make_checkpoint(&self, directory_name: String) {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        elog!(\"make_checkpoint {}\", directory_name);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_cached_hash(&self, addr: &Address) -> Option<Fp> {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        self.hashes_matrix.get(addr).copied()","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn set_cached_hash(&mut self, addr: &Address, hash: Fp) {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        self.hashes_matrix.set(addr, hash);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty_hash_at_depth(&mut self, depth: usize) -> Fp {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        self.hashes_matrix.empty_hash_at_depth(depth)","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn invalidate_hashes(&mut self, account_index: AccountIndex) {","counters":[{"col_start":4,"col_end":70,"count":0}]},{"line":"        self.hashes_matrix.invalidate_hashes(account_index)","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl DatabaseImpl<V1> {","counters":[]},{"line":"    pub fn create_account(","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        _account_id: (),","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        account: AccountLegacy,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    ) -> Result<Address, DatabaseError> {","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        // if self.root.is_none() {","counters":[]},{"line":"        //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"        // }","counters":[]},{"line":"","counters":[]},{"line":"        let location = match self.last_location.as_ref() {","counters":[{"col_start":12,"col_end":20,"count":0},{"col_start":29,"col_end":56,"count":0}]},{"line":"            Some(last) => last.next().ok_or(DatabaseError::OutOfLeaves)?,","counters":[{"col_start":17,"col_end":71,"count":0},{"col_start":71,"col_end":72,"count":0}]},{"line":"            None => Address::first(self.depth as usize),","counters":[{"col_start":20,"col_end":55,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        assert_eq!(location.to_index(), self.accounts.len());","counters":[{"col_start":8,"col_end":60,"count":0}]},{"line":"        self.accounts.push(Some(account));","counters":[{"col_start":8,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        // let root = self.root.as_mut().unwrap();","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        // let path_iter = location.clone().into_iter();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        // root.add_account_on_path(account, path_iter);","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        self.last_location = Some(location.clone());","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        self.naccounts += 1;","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(location)","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl DatabaseImpl<V2> {","counters":[]},{"line":"    pub fn create_with_dir(depth: u8, dir_name: Option<PathBuf>) -> Self {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        assert!((1..0xfe).contains(&depth));","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"        let max_naccounts = 2u64.pow(depth.min(25) as u32);","counters":[{"col_start":12,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"        let uuid = next_uuid();","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"        let path = match dir_name {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":25,"col_end":33,"count":0}]},{"line":"            Some(dir_name) => dir_name,","counters":[{"col_start":17,"col_end":38,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                let directory = \"minadb-\".to_owned() + &uuid;","counters":[{"col_start":20,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"                let mut path = PathBuf::from(\"/tmp\");","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                path.push(&directory);","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                path","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        // elog!(","counters":[]},{"line":"        //     \"DB depth={:?} uuid={:?} pid={:?} path={:?}\",","counters":[]},{"line":"        //     depth,","counters":[]},{"line":"        //     uuid,","counters":[]},{"line":"        //     crate::util::pid(),","counters":[]},{"line":"        //     path","counters":[]},{"line":"        // );","counters":[]},{"line":"","counters":[]},{"line":"        std::fs::create_dir_all(&path).ok();","counters":[{"col_start":8,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            depth,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            accounts: Vec::with_capacity(20_000),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            last_location: None,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            naccounts: 0,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            id_to_addr: HashMap::with_capacity(max_naccounts as usize / 2),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"            token_to_account: HashMap::with_capacity(max_naccounts as usize / 2),","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"            uuid,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            directory: path,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            hashes_matrix: HashesMatrix::new(depth as usize),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            // root_hash: Default::default(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn create(depth: u8) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        Self::create_with_dir(depth, None)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn root_hash(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        self.emulate_tree_to_get_hash_at(Address::root())","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // Do not use","counters":[]},{"line":"    pub fn naccounts(&self) -> usize {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        self.accounts.iter().filter_map(Option::as_ref).count()","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // fn naccounts_recursive(&self, elem: &NodeOrLeaf<T>, naccounts: &mut usize) {","counters":[]},{"line":"    //     match elem {","counters":[]},{"line":"    //         NodeOrLeaf::Leaf(_) => *naccounts += 1,","counters":[]},{"line":"    //         NodeOrLeaf::Node(node) => {","counters":[]},{"line":"    //             if let Some(left) = node.left.as_ref() {","counters":[]},{"line":"    //                 self.naccounts_recursive(left, naccounts);","counters":[]},{"line":"    //             };","counters":[]},{"line":"    //             if let Some(right) = node.right.as_ref() {","counters":[]},{"line":"    //                 self.naccounts_recursive(right, naccounts);","counters":[]},{"line":"    //             };","counters":[]},{"line":"    //         }","counters":[]},{"line":"    //     }","counters":[]},{"line":"    // }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl BaseLedger for DatabaseImpl<V2> {","counters":[]},{"line":"    fn to_list(&self) -> Vec<Account> {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        self.accounts","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .filter_map(Option::as_ref)","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            .cloned()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        // let root = match self.root.as_ref() {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        //     Some(root) => root,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        //     None => return Vec::new(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        // };","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        // let mut accounts = Vec::with_capacity(100);","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        // root.iter_recursive(&mut |account| {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        //     accounts.push(account.clone());","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        //     ControlFlow::Continue(())","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        // });","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"        // accounts","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn iter<F>(&self, fun: F)","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(&Account),","counters":[]},{"line":"    {","counters":[]},{"line":"        self.accounts","counters":[]},{"line":"            .iter()","counters":[]},{"line":"            .filter_map(Option::as_ref)","counters":[]},{"line":"            .for_each(fun);","counters":[]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[]},{"line":"        //     Some(root) => root,","counters":[]},{"line":"        //     None => return,","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // root.iter_recursive(&mut |account| {","counters":[]},{"line":"        //     fun(account);","counters":[]},{"line":"        //     ControlFlow::Continue(())","counters":[]},{"line":"        // });","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        let mut accum = init;","counters":[]},{"line":"        for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"            accum = fun(accum, account);","counters":[]},{"line":"        }","counters":[]},{"line":"        accum","counters":[]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[]},{"line":"        //     Some(root) => root,","counters":[]},{"line":"        //     None => return init,","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // let mut accum = Some(init);","counters":[]},{"line":"        // root.iter_recursive(&mut |account| {","counters":[]},{"line":"        //     let res = fun(accum.take().unwrap(), account);","counters":[]},{"line":"        //     accum = Some(res);","counters":[]},{"line":"        //     ControlFlow::Continue(())","counters":[]},{"line":"        // });","counters":[]},{"line":"","counters":[]},{"line":"        // accum.unwrap()","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_with_ignored_accounts<B, F>(","counters":[]},{"line":"        &self,","counters":[]},{"line":"        ignoreds: HashSet<AccountId>,","counters":[]},{"line":"        init: B,","counters":[]},{"line":"        mut fun: F,","counters":[]},{"line":"    ) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        let mut accum = init;","counters":[]},{"line":"        for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"            let account_id = account.id();","counters":[]},{"line":"","counters":[]},{"line":"            if !ignoreds.contains(&account_id) {","counters":[]},{"line":"                accum = fun(accum, account);","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"        accum","counters":[]},{"line":"        // self.fold(init, |accum, account| {","counters":[]},{"line":"        //     let account_id = account.id();","counters":[]},{"line":"","counters":[]},{"line":"        //     if !ignoreds.contains(&account_id) {","counters":[]},{"line":"        //         fun(accum, account)","counters":[]},{"line":"        //     } else {","counters":[]},{"line":"        //         accum","counters":[]},{"line":"        //     }","counters":[]},{"line":"        // })","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_until<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> ControlFlow<B, B>,","counters":[]},{"line":"    {","counters":[]},{"line":"        let mut accum = init;","counters":[]},{"line":"        for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"            match fun(accum, account) {","counters":[]},{"line":"                ControlFlow::Continue(v) => {","counters":[]},{"line":"                    accum = v;","counters":[]},{"line":"                }","counters":[]},{"line":"                ControlFlow::Break(v) => {","counters":[]},{"line":"                    accum = v;","counters":[]},{"line":"                    break;","counters":[]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"        accum","counters":[]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[]},{"line":"        //     Some(root) => root,","counters":[]},{"line":"        //     None => return init,","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // let mut accum = Some(init);","counters":[]},{"line":"        // root.iter_recursive(&mut |account| match fun(accum.take().unwrap(), account) {","counters":[]},{"line":"        //     ControlFlow::Continue(account) => {","counters":[]},{"line":"        //         accum = Some(account);","counters":[]},{"line":"        //         ControlFlow::Continue(())","counters":[]},{"line":"        //     }","counters":[]},{"line":"        //     ControlFlow::Break(account) => {","counters":[]},{"line":"        //         accum = Some(account);","counters":[]},{"line":"        //         ControlFlow::Break(())","counters":[]},{"line":"        //     }","counters":[]},{"line":"        // });","counters":[]},{"line":"","counters":[]},{"line":"        // accum.unwrap()","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn accounts(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.id_to_addr.keys().cloned().collect()","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn token_owner(&self, token_id: TokenId) -> Option<AccountId> {","counters":[{"col_start":4,"col_end":67,"count":0}]},{"line":"        self.token_to_account.get(&token_id).cloned()","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn token_owners(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        self.token_to_account.values().cloned().collect()","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn tokens(&self, public_key: CompressedPubKey) -> HashSet<TokenId> {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        let mut set = HashSet::with_capacity(100);","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":23,"col_end":70,"count":0}]},{"line":"            if account.public_key == public_key {","counters":[{"col_start":15,"col_end":47,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                set.insert(account.token_id.clone());","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[]},{"line":"        //     Some(root) => root,","counters":[]},{"line":"        //     None => return HashSet::default(),","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // let mut set = HashSet::with_capacity(self.naccounts);","counters":[]},{"line":"","counters":[]},{"line":"        // root.iter_recursive(&mut |account| {","counters":[]},{"line":"        //     if account.public_key == public_key {","counters":[]},{"line":"        //         set.insert(account.token_id.clone());","counters":[]},{"line":"        //     }","counters":[]},{"line":"","counters":[]},{"line":"        //     ControlFlow::Continue(())","counters":[]},{"line":"        // });","counters":[]},{"line":"","counters":[]},{"line":"        set","counters":[{"col_start":8,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account(&self, account_id: &AccountId) -> Option<Address> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        let res = self.id_to_addr.get(account_id).cloned();","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(\"location_of_account id={:?}\\n{:?}\", account_id, res);","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"        res","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account_batch(","counters":[{"col_start":4,"col_end":33,"count":0}]},{"line":"        &self,","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        account_ids: &[AccountId],","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    ) -> Vec<(AccountId, Option<Address>)> {","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        let res: Vec<_> = account_ids","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|account_id| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":30,"col_end":31,"count":0}]},{"line":"                let addr = self.id_to_addr.get(account_id).cloned();","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                (account_id.clone(), addr)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        elog!(","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            \"location_of_account_batch ids={:?}\\nres={:?}={:?}\",","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            account_ids,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            res.len(),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            res","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        res","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_or_create_account(","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        account_id: AccountId,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        account: Account,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    ) -> Result<GetOrCreated, DatabaseError> {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        let result = self.create_account(account_id, account);","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        if let Ok(GetOrCreated::Added(addr)) = result.as_ref() {","counters":[{"col_start":38,"col_end":42,"count":0},{"col_start":47,"col_end":62,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"            let account_index = addr.to_index();","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            self.hashes_matrix.invalidate_hashes(account_index);","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        result","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn close(&self) {","counters":[{"col_start":4,"col_end":21,"count":622}]},{"line":"        elog!(","counters":[{"col_start":0,"col_end":14,"count":622}]},{"line":"            \"close pid={:?} uuid={:?} path={:?}\",","counters":[{"col_start":0,"col_end":49,"count":622}]},{"line":"            crate::util::pid(),","counters":[{"col_start":0,"col_end":31,"count":622}]},{"line":"            self.uuid,","counters":[{"col_start":0,"col_end":22,"count":622}]},{"line":"            self.directory","counters":[{"col_start":0,"col_end":26,"count":622}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":622}]},{"line":"        // Drop","counters":[{"col_start":0,"col_end":15,"count":622}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":622}]},{"line":"","counters":[]},{"line":"    fn last_filled(&self) -> Option<Address> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.last_location.clone()","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_uuid(&self) -> crate::base::Uuid {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        self.uuid.clone()","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_directory(&self) -> Option<PathBuf> {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        Some(self.directory.clone())","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_account_hash(&mut self, account_index: AccountIndex) -> Option<Fp> {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        let addr = Address::from_index(account_index, self.depth as usize);","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":57,"count":0}]},{"line":"            return Some(*hash);","counters":[{"col_start":19,"col_end":30,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let account = self.get(addr.clone())?;","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":22,"col_end":44,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"        let hash = account.hash();","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"        self.hashes_matrix.set(&addr, hash);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        Some(hash)","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get(&self, addr: Address) -> Option<Account> {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        let index = addr.to_index();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        let index: usize = index.0 as usize;","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        self.accounts.get(index)?.clone()","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":32,"col_end":33,"count":0},{"col_start":34,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        // let acc = self.root.as_ref()?.get_on_path(addr.into_iter()).cloned();","counters":[]},{"line":"","counters":[]},{"line":"        // if let Some(account) = &acc {","counters":[]},{"line":"        //     elog!(\"ACCOUNT{:?}\", account.hash().to_string());","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // acc","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_batch(&self, addr: &[Address]) -> Vec<(Address, Option<Account>)> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        let res: Vec<_> = addr","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|addr| (addr.clone(), self.get(addr.clone())))","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":24,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        //     Some(root) => Cow::Borrowed(root),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        //     None => Cow::Owned(NodeOrLeaf::Node(Node::default())),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        // };","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        // let res: Vec<_> = addr","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        //     .iter()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        //     .map(|addr| (addr.clone(), root.get_on_path(addr.iter()).cloned()))","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"        //     .collect();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"        elog!(\"get_batch addrs={:?}\\nres={:?}={:?}\", addr, res.len(), res);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"","counters":[]},{"line":"        res","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set(&mut self, addr: Address, account: Account) {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let index = addr.to_index();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        self.hashes_matrix.invalidate_hashes(index.clone());","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        let index: usize = index.0 as usize;","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        if self.accounts.len() <= index {","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"            self.accounts.resize(index + 1, None);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // if self.root.is_none() {","counters":[]},{"line":"        //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"        // }","counters":[]},{"line":"","counters":[]},{"line":"        let id = account.id();","counters":[{"col_start":12,"col_end":29,"count":0}]},{"line":"        // let root = self.root.as_mut().unwrap();","counters":[]},{"line":"","counters":[]},{"line":"        // Remove account at the address and it's index","counters":[]},{"line":"        if let Some(account) = self.get(addr.clone()) {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":53,"count":0},{"col_start":54,"col_end":55,"count":0}]},{"line":"            let id = account.id();","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            self.id_to_addr.remove(&id);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            self.token_to_account.remove(&id.token_id);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        } else {","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":15,"col_end":16,"count":0}]},{"line":"            self.naccounts += 1;","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        self.token_to_account","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"            .insert(account.token_id.clone(), id.clone());","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        self.id_to_addr.insert(id, addr.clone());","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        self.accounts[index] = Some(account);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        // root.add_account_on_path(account, addr.iter());","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"        if self","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"            .last_location","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .as_ref()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .map(|l| l.to_index() < addr.to_index())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":51,"count":0},{"col_start":51,"col_end":52,"count":0}]},{"line":"            .unwrap_or(true)","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        {","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"            self.last_location = Some(addr);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // self.root_hash.borrow_mut().take();","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_batch(&mut self, list: &[(Address, Account)]) {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        elog!(\"SET_BATCH {:?}\", list.len());","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        // elog!(\"SET_BATCH {:?} {:?}\", list.len(), list);","counters":[]},{"line":"        for (addr, account) in list {","counters":[{"col_start":13,"col_end":26,"count":0},{"col_start":31,"col_end":35,"count":0}]},{"line":"            assert_eq!(addr.length(), self.depth as usize, \"addr={:?}\", addr);","counters":[{"col_start":12,"col_end":57,"count":0},{"col_start":59,"col_end":70,"count":0}]},{"line":"            self.set(addr.clone(), account.clone());","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_at_index(&self, index: AccountIndex) -> Option<Account> {","counters":[{"col_start":4,"col_end":68,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth as usize);","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        self.get(addr)","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_at_index(&mut self, index: AccountIndex, account: Account) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth as usize);","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        self.set(addr, account);","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"        // self.root_hash.borrow_mut().take();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(())","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn index_of_account(&self, account_id: AccountId) -> Option<AccountIndex> {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        self.id_to_addr.get(&account_id).map(Address::to_index)","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_root(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        // let now = crate::util::Instant::now();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        self.root_hash()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"        // let root = match *self.root_hash.borrow() {","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        //     Some(root) => root,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        //     None => self.root_hash(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        // };","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        //     \"uuid={:?} ROOT={} num_account={:?} elapsed={:?}\",","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"        //     self.get_uuid(),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        //     root,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        //     self.num_accounts(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        //     now.elapsed(),","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        // );","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        // self.root_hash.borrow_mut().replace(root);","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(\"PATH={:#?}\", self.merkle_path(Address::first(self.depth as usize)));","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"","counters":[]},{"line":"        // self.merkle_path(Address::first(self.depth as usize));","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"        // root","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        elog!(\"merkle_path called depth={:?} addr={:?}\", self.depth, addr);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"","counters":[]},{"line":"        let mut merkle_path = Vec::with_capacity(addr.length());","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        let mut path = addr.into_iter();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let addr = Address::root();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        let last_account = self","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            .last_filled()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .unwrap_or_else(|| Address::first(self.depth as usize));","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":31,"col_end":66,"count":0},{"col_start":66,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"        // let tree_index = TreeIndex::root(self.depth() as usize);","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"        self.emulate_tree_to_get_path(addr, &last_account, &mut path, &mut merkle_path);","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"","counters":[]},{"line":"        merkle_path","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_index(&mut self, index: AccountIndex) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth as usize);","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        self.merkle_path(addr)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove_accounts(&mut self, ids: &[AccountId]) {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        // let root = match self.root.as_mut() {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        //     Some(root) => root,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        //     None => return,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        // };","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        let mut addrs = ids","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|accound_id| self.id_to_addr.remove(accound_id).unwrap())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":30,"col_end":73,"count":0},{"col_start":73,"col_end":74,"count":0}]},{"line":"            .collect::<Vec<_>>();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        addrs.sort_by_key(Address::to_index);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        for addr in addrs.iter().rev() {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":20,"col_end":38,"count":0}]},{"line":"            // let leaf = match root.get_mut_leaf_on_path(addr.iter()) {","counters":[]},{"line":"            //     Some(leaf) => leaf,","counters":[]},{"line":"            //     None => continue,","counters":[]},{"line":"            // };","counters":[]},{"line":"","counters":[]},{"line":"            // let account = match leaf.account.take() {","counters":[]},{"line":"            //     Some(account) => account,","counters":[]},{"line":"            //     None => continue,","counters":[]},{"line":"            // };","counters":[]},{"line":"","counters":[]},{"line":"            let account_index = addr.to_index();","counters":[{"col_start":16,"col_end":48,"count":0}]},{"line":"            self.hashes_matrix.invalidate_hashes(account_index);","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"            let account = match self.remove(addr.clone()) {","counters":[{"col_start":16,"col_end":23,"count":0},{"col_start":32,"col_end":57,"count":0}]},{"line":"                Some(account) => account,","counters":[{"col_start":21,"col_end":40,"count":0}]},{"line":"                None => continue,","counters":[{"col_start":24,"col_end":32,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            // let index = addr.to_index();","counters":[]},{"line":"            // let account = std::mem::take()","counters":[]},{"line":"","counters":[]},{"line":"            let id = account.id();","counters":[{"col_start":16,"col_end":34,"count":0}]},{"line":"            self.id_to_addr.remove(&id);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            self.token_to_account.remove(&id.token_id);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"            self.naccounts = self","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                .naccounts","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                .checked_sub(1)","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                .expect(\"invalid naccounts counter\");","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"            if self","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"                .last_location","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                .as_ref()","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                .map(|last| last == addr)","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":28,"col_end":40,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"                .unwrap_or(false)","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            {","counters":[{"col_start":12,"col_end":13,"count":0}]},{"line":"                self.last_location = addr.prev();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // self.root_hash.borrow_mut().take();","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn detached_signal(&mut self) {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        todo!()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn depth(&self) -> u8 {","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        self.depth","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn num_accounts(&self) -> usize {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        self.naccounts","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_addr(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        self.merkle_path(addr)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_inner_hash_at_addr(&mut self, addr: Address) -> Result<Fp, ()> {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        let res = self.emulate_tree_to_get_hash_at(addr.clone());","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"        elog!(\"get_inner_hash_at_addr addr={:?} hash={}\", addr, res);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(res)","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_inner_hash_at_addr(&mut self, _addr: Address, _hash: Fp) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":87,"count":0}]},{"line":"        // No-op for now, because we don't store the hashes anywhere","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        Ok(())","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_all_accounts_rooted_at(","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        accounts: &[Account],","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    ) -> Result<(), ()> {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        if addr.length() > self.depth as usize {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            return Err(());","counters":[{"col_start":19,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        for (child_addr, account) in addr.iter_children(self.depth as usize).zip(accounts) {","counters":[{"col_start":13,"col_end":32,"count":0},{"col_start":37,"col_end":90,"count":0},{"col_start":91,"col_end":92,"count":0}]},{"line":"            self.set(child_addr, account.clone());","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_all_accounts_rooted_at(&self, addr: Address) -> Option<Vec<(Address, Account)>> {","counters":[{"col_start":4,"col_end":92,"count":0}]},{"line":"        if addr.length() > self.depth as usize {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            return None;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        // let root = match self.root.as_ref() {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        //     Some(root) => root,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        //     None => return None,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        // };","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        let children = addr.iter_children(self.depth as usize);","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        let mut accounts = Vec::with_capacity(children.len());","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        for child_addr in children {","counters":[{"col_start":12,"col_end":22,"count":0},{"col_start":26,"col_end":34,"count":0},{"col_start":35,"col_end":36,"count":0}]},{"line":"            let account = match self.get(child_addr.clone()) {","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":32,"col_end":60,"count":0}]},{"line":"                Some(account) => account,","counters":[{"col_start":21,"col_end":40,"count":0}]},{"line":"                None => continue,","counters":[{"col_start":24,"col_end":32,"count":0}]},{"line":"            };","counters":[]},{"line":"            accounts.push((child_addr, account));","counters":[{"col_start":12,"col_end":48,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        if accounts.is_empty() {","counters":[{"col_start":11,"col_end":30,"count":0}]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Some(accounts)","counters":[{"col_start":12,"col_end":26,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn make_space_for(&mut self, _space: usize) {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        // No op, we're in memory","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn commit(&mut self) {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        // no-op","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}