{"filename":"src/lib/staged_ledger_diff/body.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Wire_types = Mina_wire_types.Staged_ledger_diff.Body","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S = Body_intf.Full with type Stable.V1.t = A.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  (* TODO Consider moving to a different location. as in future this won't be only about block body *)","counters":[]},{"line":"  module Tag = struct","counters":[]},{"line":"    type t = Body [@@deriving enum]","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    (* In future: | EpochLedger |... *)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = A.V1.t = { staged_ledger_diff : Diff.Stable.V2.t }","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":11,"col_end":11,"count":2},{"col_start":26,"col_end":26,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      [@@deriving equal, compare, sexp, fields]","counters":[{"col_start":46,"col_end":46,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      let to_yojson _ = `String \"<opaque>\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"      module Creatable = struct","counters":[]},{"line":"        let id = \"block_body\"","counters":[]},{"line":"","counters":[]},{"line":"        type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"        let sexp_of_t = sexp_of_t","counters":[]},{"line":"","counters":[]},{"line":"        let t_of_sexp = t_of_sexp","counters":[]},{"line":"","counters":[]},{"line":"        type 'a creator = Diff.Stable.Latest.t -> 'a","counters":[]},{"line":"","counters":[]},{"line":"        let map_creator c ~f staged_ledger_diff = f (c staged_ledger_diff)","counters":[{"col_start":50,"col_end":50,"count":1},{"col_start":53,"col_end":53,"count":1}]},{"line":"","counters":[]},{"line":"        let create staged_ledger_diff = { staged_ledger_diff }","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      include (","counters":[]},{"line":"        Allocation_functor.Make.Basic","counters":[]},{"line":"          (Creatable) :","counters":[]},{"line":"            Allocation_functor.Intf.Output.Basic_intf","counters":[]},{"line":"              with type t := t","counters":[]},{"line":"               and type 'a creator := 'a Creatable.creator )","counters":[]},{"line":"","counters":[]},{"line":"      include (","counters":[]},{"line":"        Allocation_functor.Make.Sexp","counters":[]},{"line":"          (Creatable) :","counters":[]},{"line":"            Allocation_functor.Intf.Output.Sexp_intf","counters":[]},{"line":"              with type t := t","counters":[]},{"line":"               and type 'a creator := 'a Creatable.creator )","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"  [%%define_locally","counters":[]},{"line":"  Stable.Latest.","counters":[]},{"line":"    (create, to_yojson, sexp_of_t, t_of_sexp, equal, compare, staged_ledger_diff)]","counters":[]},{"line":"","counters":[]},{"line":"  let to_binio_bigstring b =","counters":[]},{"line":"    let sz = Stable.V1.bin_size_t b in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let buf = Bin_prot.Common.create_buf sz in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ignore (Stable.V1.bin_write_t buf ~pos:0 b : int) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    buf","counters":[]},{"line":"","counters":[]},{"line":"  let serialize_with_len_and_tag b =","counters":[]},{"line":"    let len = Stable.V1.bin_size_t b in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let bs' = Bigstring.create (len + 5) in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    ignore (Stable.V1.bin_write_t bs' ~pos:5 b : int) ;","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":32,"col_end":32,"count":1}]},{"line":"    Bigstring.set_uint8_exn ~pos:4 bs' (Tag.to_enum Body) ;","counters":[{"col_start":50,"col_end":50,"count":1}]},{"line":"    Bigstring.set_uint32_le_exn ~pos:0 bs' (len + 1) ;","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    bs'","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"","counters":[]},{"line":"  let compute_reference =","counters":[]},{"line":"    Fn.compose snd","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    @@ Fn.compose","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"         (Bitswap_block.blocks_of_data ~max_block_size:262144)","counters":[]},{"line":"         serialize_with_len_and_tag","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Wire_types.Make (Make_sig) (Make_str)","counters":[{"col_start":44,"col_end":44,"count":2}]}]}