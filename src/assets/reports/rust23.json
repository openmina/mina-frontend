{"filename":"src/verifier/mod.rs","lines":[{"line":"use crate::scan_state::{","counters":[]},{"line":"    scan_state::transaction_snark::LedgerProofWithSokMessage,","counters":[]},{"line":"    transaction_logic::{valid, verifiable},","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use self::common::CheckResult;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone)]","counters":[{"col_start":9,"col_end":14,"count":2}]},{"line":"pub struct Verifier;","counters":[]},{"line":"","counters":[]},{"line":"impl Verifier {","counters":[]},{"line":"    pub fn verify(&self, _proofs: &[LedgerProofWithSokMessage]) -> Result<bool, String> {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        // Implement verification later","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        //","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        // https://github.com/MinaProtocol/mina/blob/05c2f73d0f6e4f1341286843814ce02dcb3919e0/src/lib/pickles/pickles.ml#L1122","counters":[{"col_start":0,"col_end":126,"count":0}]},{"line":"        // https://viable-systems.slack.com/archives/D01SVA87PQC/p1671715846448749","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"        Ok(true)","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn verify_commands(","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        &self,","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        cmds: Vec<verifiable::UserCommand>,","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    ) -> Result<Vec<valid::UserCommand>, VerifierError> {","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        // TODO","counters":[]},{"line":"","counters":[]},{"line":"        let xs: Vec<_> = cmds","counters":[{"col_start":12,"col_end":22,"count":0},{"col_start":25,"col_end":29,"count":0}]},{"line":"            .into_iter()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .map(common::check)","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            .map(|cmd| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":23,"col_end":24,"count":0}]},{"line":"                match cmd {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    common::CheckResult::Valid(cmd) => Ok(cmd),","counters":[{"col_start":47,"col_end":62,"count":0}]},{"line":"                    e => Err(e)","counters":[{"col_start":20,"col_end":31,"count":0}]},{"line":"                // common::CheckResult::ValidAssuming(_) => todo!(),","counters":[]},{"line":"                // common::CheckResult::InvalidKeys(_) => todo!(),","counters":[]},{"line":"                // common::CheckResult::InvalidSignature(_) => todo!(),","counters":[]},{"line":"                // common::CheckResult::InvalidProof => todo!(),","counters":[]},{"line":"                // common::CheckResult::MissingVerificationKey(_) => todo!(),","counters":[]},{"line":"            }","counters":[]},{"line":"            })","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect::<Result<Vec<_>, _>>()?;","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(xs)","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, derive_more::From)]","counters":[{"col_start":9,"col_end":14,"count":16},{"col_start":16,"col_end":33,"count":0}]},{"line":"pub enum VerifierError {","counters":[]},{"line":"    CheckError(CheckResult),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub mod common {","counters":[]},{"line":"    use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"    use crate::scan_state::transaction_logic::{valid, verifiable, zkapp_command};","counters":[]},{"line":"","counters":[]},{"line":"    #[derive(Debug)]","counters":[{"col_start":13,"col_end":14,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"    pub enum CheckResult {","counters":[]},{"line":"        Valid(valid::UserCommand),","counters":[]},{"line":"        ValidAssuming((valid::UserCommand, Vec<()>)),","counters":[]},{"line":"        InvalidKeys(Vec<CompressedPubKey>),","counters":[]},{"line":"        InvalidSignature(Vec<CompressedPubKey>),","counters":[]},{"line":"        InvalidProof,","counters":[]},{"line":"        MissingVerificationKey(Vec<CompressedPubKey>),","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/05c2f73d0f6e4f1341286843814ce02dcb3919e0/src/lib/verifier/common.ml#L29","counters":[]},{"line":"    pub fn check(cmd: verifiable::UserCommand) -> CheckResult {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        use verifiable::UserCommand::{SignedCommand, ZkAppCommand};","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"        match cmd {","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            SignedCommand(cmd) => {","counters":[{"col_start":26,"col_end":35,"count":0}]},{"line":"                if !cmd.check_valid_keys() {","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                    let public_keys = cmd.public_keys().into_iter().cloned().collect();","counters":[{"col_start":24,"col_end":87,"count":68}]},{"line":"                    return CheckResult::InvalidKeys(public_keys);","counters":[{"col_start":0,"col_end":64,"count":68}]},{"line":"                }","counters":[{"col_start":17,"col_end":17,"count":-68}]},{"line":"                match verifiable::check_only_for_signature(cmd) {","counters":[{"col_start":0,"col_end":63,"count":-68}]},{"line":"                    Ok(cmd) => CheckResult::Valid(cmd),","counters":[{"col_start":23,"col_end":54,"count":0}]},{"line":"                    Err(cmd) => CheckResult::InvalidSignature(","counters":[{"col_start":24,"col_end":62,"count":0}]},{"line":"                        cmd.public_keys().into_iter().cloned().collect(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            ZkAppCommand(cmd) => {","counters":[{"col_start":25,"col_end":34,"count":0}]},{"line":"                // TODO: Implement rest","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"                match zkapp_command::valid::of_verifiable(*cmd) {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                    Some(cmd) => {","counters":[{"col_start":25,"col_end":34,"count":0}]},{"line":"                        CheckResult::Valid(valid::UserCommand::ZkAppCommand(Box::new(cmd)))","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    None => CheckResult::InvalidProof, // TODO","counters":[{"col_start":28,"col_end":53,"count":68}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":136}]},{"line":"}","counters":[]}]}