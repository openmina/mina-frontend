{"filename":"src/lib/mina_block/validated_block.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1}]},{"line":"      Block.Stable.V2.t State_hash.With_state_hashes.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      * State_hash.Stable.V1.t Non_empty_list.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    [@@deriving sexp, equal]","counters":[{"col_start":27,"col_end":27,"count":5}]},{"line":"","counters":[]},{"line":"    let to_yojson (block_with_hashes, _) =","counters":[]},{"line":"      State_hash.With_state_hashes.Stable.V1.to_yojson Block.Stable.V2.to_yojson","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        block_with_hashes","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = ident","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type t = Stable.Latest.t","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally Stable.Latest.(t_of_sexp, sexp_of_t, equal, to_yojson)]","counters":[]},{"line":"","counters":[]},{"line":"let lift (b, v) =","counters":[]},{"line":"  match v with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | _, _, _, (`Delta_block_chain, Truth.True delta_block_chain_proof), _, _, _","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ->","counters":[]},{"line":"      (b, delta_block_chain_proof)","counters":[]},{"line":"","counters":[]},{"line":"let forget (b, _) = b","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let remember (b, delta_block_chain_proof) =","counters":[]},{"line":"  ( b","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  , ( (`Time_received, Truth.True ())","counters":[]},{"line":"    , (`Genesis_state, Truth.True ())","counters":[]},{"line":"    , (`Proof, Truth.True ())","counters":[]},{"line":"    , (`Delta_block_chain, Truth.True delta_block_chain_proof)","counters":[]},{"line":"    , (`Frontier_dependencies, Truth.True ())","counters":[]},{"line":"    , (`Staged_ledger_diff, Truth.True ())","counters":[]},{"line":"    , (`Protocol_versions, Truth.True ()) ) )","counters":[]},{"line":"","counters":[]},{"line":"let delta_block_chain_proof (_, d) = d","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"let valid_commands (block, _) =","counters":[]},{"line":"  block |> With_hash.data |> Block.body","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  |> Staged_ledger_diff.Body.staged_ledger_diff |> Staged_ledger_diff.commands","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"  |> List.map ~f:(fun cmd ->","counters":[]},{"line":"         (* This is safe because at this point the stage ledger diff has been","counters":[]},{"line":"              applied successfully. *)","counters":[]},{"line":"         let (`If_this_is_used_it_should_have_a_comment_justifying_it data) =","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           User_command.to_valid_unsafe cmd.data","counters":[]},{"line":"         in","counters":[]},{"line":"         { cmd with data } )","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"let unsafe_of_trusted_block ~delta_block_chain_proof","counters":[]},{"line":"    (`This_block_is_trusted_to_be_safe b) =","counters":[]},{"line":"  (b, delta_block_chain_proof)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let state_hash (b, _) = State_hash.With_state_hashes.state_hash b","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"let state_body_hash (t, _) =","counters":[]},{"line":"  State_hash.With_state_hashes.state_body_hash t","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~compute_hashes:","counters":[]},{"line":"      (Fn.compose Mina_state.Protocol_state.hashes","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"         (Fn.compose Header.protocol_state Block.header) )","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let header t = t |> forget |> With_hash.data |> Block.header","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"let body t = t |> forget |> With_hash.data |> Block.body","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":55,"col_end":55,"count":2}]}]}