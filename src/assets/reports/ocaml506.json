{"filename":"src/lib/error_json/error_json.ml","lines":[{"line":"open Base","counters":[]},{"line":"","counters":[]},{"line":"let rec sexp_to_yojson (sexp : Sexp.t) : Yojson.Safe.t =","counters":[]},{"line":"  match sexp with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Atom str ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `String str","counters":[]},{"line":"  | List sexps ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `List (List.map ~f:sexp_to_yojson sexps)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let rec sexp_of_yojson (json : Yojson.Safe.t) : (Sexp.t, string) Result.t =","counters":[]},{"line":"  match json with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `String str ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ok (Sexp.Atom str)","counters":[]},{"line":"  | `List jsons ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let rev_sexps =","counters":[]},{"line":"        List.fold_until ~init:[] jsons ~finish:Result.return","counters":[]},{"line":"          ~f:(fun sexps json ->","counters":[]},{"line":"            match sexp_of_yojson json with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Ok sexp ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Continue (sexp :: sexps)","counters":[]},{"line":"            | Error str ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Stop (Error str) )","counters":[]},{"line":"      in","counters":[]},{"line":"      Result.map ~f:(fun l -> Sexp.List (List.rev l)) rev_sexps","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error \"Error_json.sexp_of_yojson: Expected a string or a list\"","counters":[]},{"line":"","counters":[]},{"line":"type info_data =","counters":[]},{"line":"  | Sexp of Sexp.t","counters":[]},{"line":"  | String of string","counters":[]},{"line":"  | Exn of exn","counters":[]},{"line":"  | Of_list of int option * int * Yojson.Safe.t","counters":[]},{"line":"","counters":[]},{"line":"(* Used to encode sub-lists of infos *)","counters":[]},{"line":"","counters":[]},{"line":"type info_tag =","counters":[]},{"line":"  { tag : string; data : Sexp.t option; loc : Source_code_position.t option }","counters":[]},{"line":"","counters":[]},{"line":"type 'a info_repr =","counters":[]},{"line":"  { base : 'a; rev_tags : info_tag list; backtrace : string option }","counters":[]},{"line":"","counters":[]},{"line":"let info_repr_to_yojson (info : info_data info_repr) : Yojson.Safe.t =","counters":[]},{"line":"  let base_pairs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match info.base with","counters":[]},{"line":"    | Sexp sexp ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"sexp\", sexp_to_yojson sexp) ]","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    | String str ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"string\", `String str) ]","counters":[]},{"line":"    | Exn exn ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ ( \"exn_name\"","counters":[]},{"line":"          , `String Stdlib.Obj.Extension_constructor.(name @@ of_val exn) )","counters":[{"col_start":57,"col_end":57,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"        ; (\"exn\", sexp_to_yojson (Sexplib.Conv.sexp_of_exn exn))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"        ]","counters":[]},{"line":"    | Of_list (Some trunc_after, length, json) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"multiple\", json)","counters":[]},{"line":"        ; (\"length\", `Int length)","counters":[]},{"line":"        ; (\"truncated_after\", `Int trunc_after)","counters":[]},{"line":"        ]","counters":[]},{"line":"    | Of_list (None, length, json) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"multiple\", json); (\"length\", `Int length) ]","counters":[]},{"line":"  in","counters":[]},{"line":"  let tags =","counters":[]},{"line":"    let tag_to_json { tag; data; loc } =","counters":[]},{"line":"      let jsons =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match loc with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            []","counters":[]},{"line":"        | Some loc ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [ (\"loc\", `String (Source_code_position.to_string loc)) ]","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"      in","counters":[]},{"line":"      let jsons =","counters":[]},{"line":"        match data with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            jsons","counters":[]},{"line":"        | Some data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (\"sexp\", sexp_to_yojson data) :: jsons","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      in","counters":[]},{"line":"      `Assoc ((\"tag\", `String tag) :: jsons)","counters":[]},{"line":"    in","counters":[]},{"line":"    match info.rev_tags with","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        []","counters":[]},{"line":"    | _ :: _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"tags\", `List (List.rev_map ~f:tag_to_json info.rev_tags)) ]","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  in","counters":[]},{"line":"  let backtrace =","counters":[]},{"line":"    match info.backtrace with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        []","counters":[]},{"line":"    | Some backtrace ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* Split backtrace at lines so that it prints nicely in errors *)","counters":[]},{"line":"        [ ( \"backtrace\"","counters":[]},{"line":"          , `List","counters":[]},{"line":"              (List.map ~f:(fun s -> `String s) (String.split_lines backtrace))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"          )","counters":[]},{"line":"        ]","counters":[]},{"line":"  in","counters":[]},{"line":"  `Assoc (base_pairs @ tags @ backtrace)","counters":[]},{"line":"","counters":[]},{"line":"(* NOTE: Could also add a [of_yojson] version for everything except [Exn]","counters":[]},{"line":"   (which could be converted to [String]), but it's not clear that it would","counters":[]},{"line":"   ever be useful.","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"let rec info_internal_repr_to_yojson_aux (info : Info.Internal_repr.t)","counters":[]},{"line":"    (acc : unit info_repr) : info_data info_repr =","counters":[]},{"line":"  match info with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Could_not_construct sexp ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { acc with base = Sexp (List [ Atom \"Could_not_construct\"; sexp ]) }","counters":[]},{"line":"  | Sexp sexp ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { acc with base = Sexp sexp }","counters":[]},{"line":"  | String str ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { acc with base = String str }","counters":[]},{"line":"  | Exn exn ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { acc with base = Exn exn }","counters":[]},{"line":"  | Tag_sexp (tag, sexp, loc) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { acc with","counters":[]},{"line":"        base = Sexp sexp","counters":[]},{"line":"      ; rev_tags = { tag; data = None; loc } :: acc.rev_tags","counters":[]},{"line":"      }","counters":[]},{"line":"  | Tag_t (tag, info) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      info_internal_repr_to_yojson_aux info","counters":[]},{"line":"        { acc with rev_tags = { tag; data = None; loc = None } :: acc.rev_tags }","counters":[]},{"line":"  | Tag_arg (tag, data, info) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      info_internal_repr_to_yojson_aux info","counters":[]},{"line":"        { acc with","counters":[]},{"line":"          rev_tags = { tag; data = Some data; loc = None } :: acc.rev_tags","counters":[]},{"line":"        }","counters":[]},{"line":"  | Of_list (trunc_after, infos) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let rec rev_take i acc_len infos acc_infos =","counters":[]},{"line":"        match (i, infos) with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | _, [] ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (None, acc_len, acc_infos)","counters":[]},{"line":"        | None, info :: infos ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let json_info = info_internal_repr_to_yojson info in","counters":[]},{"line":"            rev_take i (acc_len + 1) infos (json_info :: acc_infos)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | Some i, info :: infos ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if i > 0 then","counters":[]},{"line":"              let json_info = info_internal_repr_to_yojson info in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              rev_take","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (Some (i - 1))","counters":[]},{"line":"                (acc_len + 1) infos (json_info :: acc_infos)","counters":[]},{"line":"            else (Some acc_len, acc_len + 1 + List.length infos, acc_infos)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"      in","counters":[]},{"line":"      let trunc_after, length, rev_json_infos =","counters":[]},{"line":"        rev_take trunc_after 0 infos []","counters":[]},{"line":"      in","counters":[]},{"line":"      let json_infos = `List (List.rev rev_json_infos) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      { acc with base = Of_list (trunc_after, length, json_infos) }","counters":[]},{"line":"  | With_backtrace (info, backtrace) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      info_internal_repr_to_yojson_aux info","counters":[]},{"line":"        { acc with backtrace = Some backtrace }","counters":[]},{"line":"","counters":[]},{"line":"and info_internal_repr_to_yojson (info : Info.Internal_repr.t) : Yojson.Safe.t =","counters":[]},{"line":"  info_internal_repr_to_yojson_aux info","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { base = (); rev_tags = []; backtrace = None }","counters":[]},{"line":"  |> info_repr_to_yojson","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"let info_to_yojson (info : Info.t) : Yojson.Safe.t =","counters":[]},{"line":"  info_internal_repr_to_yojson (Info.Internal_repr.of_info info)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"let error_to_yojson (err : Error.t) : Yojson.Safe.t =","counters":[]},{"line":"  match info_to_yojson (err :> Info.t) with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Assoc assocs ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Assoc ((\"commit_id\", `String Mina_version.commit_id) :: assocs)","counters":[]},{"line":"  | json ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Assoc [ (\"commit_id\", `String Mina_version.commit_id); (\"error\", json) ]","counters":[]}]}