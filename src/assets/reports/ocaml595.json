{"filename":"src/lib/bootstrap_controller/bootstrap_controller.ml","lines":[{"line":"(* Only show stdout for failed inline tests. *)","counters":[{"col_start":46,"col_end":46,"count":1}]},{"line":"open Inline_test_quiet_logs","counters":[]},{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"module Sync_ledger = Mina_ledger.Sync_ledger","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type Structured_log_events.t += Bootstrap_complete","counters":[]},{"line":"  [@@deriving register_event { msg = \"Bootstrap state: complete.\" }]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  { context : (module CONTEXT)","counters":[]},{"line":"  ; trust_system : Trust_system.t","counters":[]},{"line":"  ; verifier : Verifier.t","counters":[]},{"line":"  ; mutable best_seen_transition : Mina_block.initial_valid_block","counters":[]},{"line":"  ; mutable current_root : Mina_block.initial_valid_block","counters":[]},{"line":"  ; network : Mina_networking.t","counters":[]},{"line":"  ; mutable num_of_root_snarked_ledger_retargeted : int","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"type time = Time.Span.t","counters":[]},{"line":"","counters":[]},{"line":"let time_to_yojson span =","counters":[]},{"line":"  `String (Printf.sprintf \"%f seconds\" (Time.Span.to_sec span))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"type opt_time = time option","counters":[]},{"line":"","counters":[]},{"line":"let opt_time_to_yojson = function","counters":[]},{"line":"  | Some time ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      time_to_yojson time","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Null","counters":[]},{"line":"","counters":[]},{"line":"type bootstrap_cycle_stats =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { cycle_result : string","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"  ; sync_ledger_time : time","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  ; staged_ledger_data_download_time : time","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"  ; staged_ledger_construction_time : opt_time","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"  ; local_state_sync_required : bool","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; local_state_sync_time : opt_time","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"let time_deferred deferred =","counters":[]},{"line":"  let start_time = Time.now () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%map result = deferred in","counters":[]},{"line":"  let end_time = Time.now () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (Time.diff end_time start_time, result)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let worth_getting_root ({ context = (module Context); _ } as t) candidate =","counters":[]},{"line":"  let module Context = struct","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    include Context","counters":[]},{"line":"","counters":[]},{"line":"    let logger =","counters":[]},{"line":"      Logger.extend logger","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        [ ( \"selection_context\"","counters":[]},{"line":"          , `String \"Bootstrap_controller.worth_getting_root\" )","counters":[]},{"line":"        ]","counters":[]},{"line":"  end in","counters":[]},{"line":"  Consensus.Hooks.equal_select_status `Take","counters":[]},{"line":"  @@ Consensus.Hooks.select","counters":[]},{"line":"       ~context:(module Context)","counters":[]},{"line":"       ~existing:","counters":[]},{"line":"         ( t.best_seen_transition |> Mina_block.Validation.block_with_hash","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"         |> With_hash.map ~f:Mina_block.consensus_state )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"       ~candidate","counters":[]},{"line":"","counters":[]},{"line":"let received_bad_proof ({ context = (module Context); _ } as t) host e =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Trust_system.(","counters":[]},{"line":"    record t.trust_system logger host","counters":[]},{"line":"      Actions.","counters":[]},{"line":"        ( Violated_protocol","counters":[]},{"line":"        , Some","counters":[]},{"line":"            ( \"Bad ancestor proof: $error\"","counters":[]},{"line":"            , [ (\"error\", Error_json.error_to_yojson e) ] ) ))","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"let done_syncing_root root_sync_ledger =","counters":[]},{"line":"  Option.is_some (Sync_ledger.Db.peek_valid_tree root_sync_ledger)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let should_sync ~root_sync_ledger t candidate_state =","counters":[]},{"line":"  (not @@ done_syncing_root root_sync_ledger)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":5,"col_end":5,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  && worth_getting_root t candidate_state","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"let start_sync_job_with_peer ~sender ~root_sync_ledger","counters":[]},{"line":"    ({ context = (module Context); _ } as t) peer_best_tip peer_root =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () =","counters":[]},{"line":"    Trust_system.(","counters":[]},{"line":"      record t.trust_system logger sender","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Actions.","counters":[]},{"line":"          ( Fulfilled_request","counters":[]},{"line":"          , Some (\"Received verified peer root and best tip\", []) ))","counters":[]},{"line":"  in","counters":[]},{"line":"  t.best_seen_transition <- peer_best_tip ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  t.current_root <- peer_root ;","counters":[]},{"line":"  let blockchain_state =","counters":[]},{"line":"    t.current_root |> Mina_block.Validation.block |> Mina_block.header","counters":[{"col_start":48,"col_end":48,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"    |> Mina_block.Header.protocol_state |> Protocol_state.blockchain_state","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  in","counters":[]},{"line":"  let expected_staged_ledger_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    blockchain_state |> Blockchain_state.staged_ledger_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  let snarked_ledger_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    blockchain_state |> Blockchain_state.snarked_ledger_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  return","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@","counters":[]},{"line":"  match","counters":[]},{"line":"    Sync_ledger.Db.new_goal root_sync_ledger","counters":[]},{"line":"      (Frozen_ledger_hash.to_ledger_hash snarked_ledger_hash)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"      ~data:","counters":[]},{"line":"        ( State_hash.With_state_hashes.state_hash","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          @@ Mina_block.Validation.block_with_hash t.current_root","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"        , sender","counters":[]},{"line":"        , expected_staged_ledger_hash )","counters":[]},{"line":"      ~equal:(fun (hash1, _, _) (hash2, _, _) -> State_hash.equal hash1 hash2)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"  with","counters":[]},{"line":"  | `New ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      t.num_of_root_snarked_ledger_retargeted <-","counters":[]},{"line":"        t.num_of_root_snarked_ledger_retargeted + 1 ;","counters":[]},{"line":"      `Syncing_new_snarked_ledger","counters":[]},{"line":"  | `Update_data ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Updating_root_transition","counters":[]},{"line":"  | `Repeat ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      `Ignored","counters":[]},{"line":"","counters":[]},{"line":"let on_transition ({ context = (module Context); _ } as t) ~sender","counters":[]},{"line":"    ~root_sync_ledger ~genesis_constants candidate_transition =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let candidate_consensus_state =","counters":[]},{"line":"    With_hash.map ~f:Mina_block.consensus_state candidate_transition","counters":[]},{"line":"  in","counters":[]},{"line":"  if not @@ should_sync ~root_sync_ledger t candidate_consensus_state then","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    Deferred.return `Ignored","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else","counters":[]},{"line":"    match%bind","counters":[]},{"line":"      Mina_networking.get_ancestry t.network sender.Peer.peer_id","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        (With_hash.map_hash candidate_consensus_state","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"           ~f:State_hash.State_hashes.state_hash )","counters":[]},{"line":"    with","counters":[]},{"line":"    | Error e ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log error]","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          ~metadata:[ (\"error\", Error_json.error_to_yojson e) ]","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"          !\"Could not get the proof of the root transition from the network: \\","counters":[]},{"line":"            $error\" ;","counters":[]},{"line":"        Deferred.return `Ignored","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Ok peer_root_with_proof -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        match%bind","counters":[]},{"line":"          Sync_handler.Root.verify","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~verifier:t.verifier ~genesis_constants candidate_consensus_state","counters":[]},{"line":"            peer_root_with_proof.data","counters":[]},{"line":"        with","counters":[]},{"line":"        | Ok (`Root root, `Best_tip best_tip) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if done_syncing_root root_sync_ledger then return `Ignored","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"            else","counters":[]},{"line":"              start_sync_job_with_peer ~sender ~root_sync_ledger t best_tip root","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        | Error e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            return (received_bad_proof t sender e |> Fn.const `Ignored) )","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"let sync_ledger ({ context = (module Context); _ } as t) ~preferred","counters":[]},{"line":"    ~root_sync_ledger ~transition_graph ~sync_ledger_reader ~genesis_constants =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let query_reader = Sync_ledger.Db.query_reader root_sync_ledger in","counters":[]},{"line":"  let response_writer = Sync_ledger.Db.answer_writer root_sync_ledger in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Mina_networking.glue_sync_ledger ~preferred t.network query_reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    response_writer ;","counters":[]},{"line":"  Reader.iter sync_ledger_reader ~f:(fun (`Block incoming_transition, _) ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let (transition, _) : Mina_block.initial_valid_block =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Envelope.Incoming.data incoming_transition","counters":[]},{"line":"      in","counters":[]},{"line":"      let previous_state_hash =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        With_hash.data transition |> Mina_block.header","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"        |> Mina_block.Header.protocol_state","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        |> Protocol_state.previous_state_hash","counters":[]},{"line":"      in","counters":[]},{"line":"      let sender = Envelope.Incoming.remote_sender_exn incoming_transition in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Transition_cache.add transition_graph ~parent:previous_state_hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        incoming_transition ;","counters":[]},{"line":"      (* TODO: Efficiently limiting the number of green threads in #1337 *)","counters":[]},{"line":"      if","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        worth_getting_root t","counters":[]},{"line":"          (With_hash.map ~f:Mina_block.consensus_state transition)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      then (","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        [%log trace] \"Added the transition from sync_ledger_reader into cache\"","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          ~metadata:","counters":[]},{"line":"            [ ( \"state_hash\"","counters":[]},{"line":"              , State_hash.to_yojson","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                  (State_hash.With_state_hashes.state_hash transition) )","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"            ; ( \"external_transition\"","counters":[]},{"line":"              , Mina_block.to_yojson (With_hash.data transition) )","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"            ] ;","counters":[]},{"line":"","counters":[]},{"line":"        Deferred.ignore_m","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        @@ on_transition t ~sender ~root_sync_ledger ~genesis_constants","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"             transition )","counters":[]},{"line":"      else Deferred.unit )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let external_transition_compare ~context:(module Context : CONTEXT) =","counters":[]},{"line":"  Comparable.lift","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (fun existing candidate ->","counters":[]},{"line":"      (* To prevent the logger to spam a lot of messsages, the logger input is set to null *)","counters":[]},{"line":"      if","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        State_hash.equal","counters":[]},{"line":"          (State_hash.With_state_hashes.state_hash existing)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"          (State_hash.With_state_hashes.state_hash candidate)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"      then 0","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"      else if","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Consensus.Hooks.equal_select_status `Keep","counters":[]},{"line":"        @@ Consensus.Hooks.select ~context:(module Context) ~existing ~candidate","counters":[]},{"line":"      then -1","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"      else 1 )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    ~f:(With_hash.map ~f:Mina_block.consensus_state)","counters":[]},{"line":"","counters":[]},{"line":"(* We conditionally ask other peers for their best tip. This is for testing","counters":[]},{"line":"   eager bootstrapping and the regular functionalities of bootstrapping in","counters":[]},{"line":"   isolation *)","counters":[]},{"line":"let run ~context:(module Context : CONTEXT) ~trust_system ~verifier ~network","counters":[]},{"line":"    ~consensus_local_state ~transition_reader ~best_seen_transition","counters":[]},{"line":"    ~persistent_root ~persistent_frontier ~initial_root_transition ~catchup_mode","counters":[]},{"line":"    =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  O1trace.thread \"bootstrap\" (fun () ->","counters":[]},{"line":"      let genesis_constants =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Precomputed_values.genesis_constants precomputed_values","counters":[]},{"line":"      in","counters":[]},{"line":"      let constraint_constants = precomputed_values.constraint_constants in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let rec loop previous_cycles =","counters":[]},{"line":"        let sync_ledger_pipe = \"sync ledger pipe\" in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let sync_ledger_reader, sync_ledger_writer =","counters":[]},{"line":"          create ~name:sync_ledger_pipe","counters":[]},{"line":"            (Buffered","counters":[]},{"line":"               ( `Capacity 50","counters":[]},{"line":"               , `Overflow","counters":[]},{"line":"                   (Drop_head","counters":[]},{"line":"                      (fun ( `Block","counters":[]},{"line":"                               (block :","counters":[]},{"line":"                                 Mina_block.Validation.initial_valid_with_block","counters":[]},{"line":"                                 Envelope.Incoming.t )","counters":[]},{"line":"                           , `Valid_cb valid_cb ) ->","counters":[]},{"line":"                        Mina_metrics.(","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          Counter.inc_one","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                            Pipe.Drop_on_overflow.bootstrap_sync_ledger) ;","counters":[]},{"line":"                        Mina_block.handle_dropped_transition ?valid_cb","counters":[]},{"line":"                          ( With_hash.hash","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                          @@ Mina_block.Validation.block_with_hash","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                          @@ Envelope.Incoming.data block )","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                          ~pipe_name:sync_ledger_pipe ~logger ) ) ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        don't_wait_for","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (transfer_while_writer_alive transition_reader sync_ledger_writer","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             ~f:Fn.id ) ;","counters":[]},{"line":"        let initial_root_transition =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          initial_root_transition |> Mina_block.Validated.remember","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"          |> Mina_block.Validation.reset_frontier_dependencies_validation","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"          |> Mina_block.Validation.reset_staged_ledger_diff_validation","counters":[]},{"line":"        in","counters":[]},{"line":"        let t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { network","counters":[]},{"line":"          ; context = (module Context)","counters":[]},{"line":"          ; trust_system","counters":[]},{"line":"          ; verifier","counters":[]},{"line":"          ; best_seen_transition = initial_root_transition","counters":[]},{"line":"          ; current_root = initial_root_transition","counters":[]},{"line":"          ; num_of_root_snarked_ledger_retargeted = 0","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        let transition_graph = Transition_cache.create () in","counters":[]},{"line":"        let temp_persistent_root_instance =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Transition_frontier.Persistent_root.create_instance_exn","counters":[]},{"line":"            persistent_root","counters":[]},{"line":"        in","counters":[]},{"line":"        let temp_snarked_ledger =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Transition_frontier.Persistent_root.Instance.snarked_ledger","counters":[]},{"line":"            temp_persistent_root_instance","counters":[]},{"line":"        in","counters":[]},{"line":"        let%bind sync_ledger_time, (hash, sender, expected_staged_ledger_hash) =","counters":[]},{"line":"          time_deferred","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"            (let root_sync_ledger =","counters":[]},{"line":"               Sync_ledger.Db.create temp_snarked_ledger ~logger ~trust_system","counters":[]},{"line":"             in","counters":[]},{"line":"             don't_wait_for","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               (sync_ledger t","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  ~preferred:","counters":[]},{"line":"                    ( Option.to_list best_seen_transition","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                    |> List.filter_map ~f:(fun x ->","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           match Envelope.Incoming.sender x with","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                           | Local ->","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               None","counters":[]},{"line":"                           | Remote r ->","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                               Some r ) )","counters":[]},{"line":"                  ~root_sync_ledger ~transition_graph ~sync_ledger_reader","counters":[]},{"line":"                  ~genesis_constants ) ;","counters":[]},{"line":"             (* We ignore the resulting ledger returned here since it will always","counters":[]},{"line":"                * be the same as the ledger we started with because we are syncing","counters":[]},{"line":"                * a db ledger. *)","counters":[]},{"line":"             let%map _, data = Sync_ledger.Db.valid_tree root_sync_ledger in","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"             Sync_ledger.Db.destroy root_sync_ledger ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"             data )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"        in","counters":[]},{"line":"        Mina_metrics.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Counter.inc Bootstrap.root_snarked_ledger_sync_ms","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            Time.Span.(to_ms sync_ledger_time)) ;","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        Mina_metrics.(","counters":[]},{"line":"          Gauge.set Bootstrap.num_of_root_snarked_ledger_retargeted","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            (Float.of_int t.num_of_root_snarked_ledger_retargeted)) ;","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        let%bind ( staged_ledger_data_download_time","counters":[]},{"line":"                 , staged_ledger_construction_time","counters":[]},{"line":"                 , staged_ledger_aux_result ) =","counters":[]},{"line":"          let%bind ( staged_ledger_data_download_time","counters":[]},{"line":"                   , staged_ledger_data_download_result ) =","counters":[]},{"line":"            time_deferred","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              (Mina_networking","counters":[]},{"line":"               .get_staged_ledger_aux_and_pending_coinbases_at_hash t.network","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"                 sender.peer_id hash )","counters":[]},{"line":"          in","counters":[]},{"line":"          match staged_ledger_data_download_result with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Error err ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.return (staged_ledger_data_download_time, None, Error err)","counters":[]},{"line":"          | Ok","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              ( scan_state","counters":[]},{"line":"              , expected_merkle_root","counters":[]},{"line":"              , pending_coinbases","counters":[]},{"line":"              , protocol_states ) -> (","counters":[]},{"line":"              let%map staged_ledger_construction_result =","counters":[]},{"line":"                let open Deferred.Or_error.Let_syntax in","counters":[]},{"line":"                let received_staged_ledger_hash =","counters":[]},{"line":"                  Staged_ledger_hash.of_aux_ledger_and_coinbase_hash","counters":[]},{"line":"                    (Staged_ledger.Scan_state.hash scan_state)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                    expected_merkle_root pending_coinbases","counters":[]},{"line":"                in","counters":[]},{"line":"                [%log debug]","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"                  ~metadata:","counters":[]},{"line":"                    [ ( \"expected_staged_ledger_hash\"","counters":[]},{"line":"                      , Staged_ledger_hash.to_yojson expected_staged_ledger_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                      )","counters":[]},{"line":"                    ; ( \"received_staged_ledger_hash\"","counters":[]},{"line":"                      , Staged_ledger_hash.to_yojson received_staged_ledger_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                      )","counters":[]},{"line":"                    ]","counters":[]},{"line":"                  \"Comparing $expected_staged_ledger_hash to \\","counters":[]},{"line":"                   $received_staged_ledger_hash\" ;","counters":[]},{"line":"                let%bind new_root =","counters":[]},{"line":"                  t.current_root","counters":[]},{"line":"                  |> Mina_block.Validation.skip_frontier_dependencies_validation","counters":[{"col_start":79,"col_end":79,"count":0}]},{"line":"                       `This_block_belongs_to_a_detached_subtree","counters":[]},{"line":"                  |> Mina_block.Validation.validate_staged_ledger_hash","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"                       (`Staged_ledger_already_materialized","counters":[]},{"line":"                         received_staged_ledger_hash )","counters":[]},{"line":"                  |> Result.map_error ~f:(fun _ ->","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                         Error.of_string \"received faulty scan state from peer\" )","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                  |> Deferred.return","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                in","counters":[]},{"line":"                let protocol_states =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  List.map protocol_states","counters":[]},{"line":"                    ~f:(With_hash.of_data ~hash_data:Protocol_state.hashes)","counters":[]},{"line":"                in","counters":[]},{"line":"                let%bind protocol_states =","counters":[]},{"line":"                  Staged_ledger.Scan_state.check_required_protocol_states","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"                    scan_state ~protocol_states","counters":[]},{"line":"                  |> Deferred.return","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                in","counters":[]},{"line":"                let protocol_states_map =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  protocol_states","counters":[]},{"line":"                  |> List.map ~f:(fun ps ->","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                         (State_hash.With_state_hashes.state_hash ps, ps) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"                  |> State_hash.Map.of_alist_exn","counters":[]},{"line":"                in","counters":[]},{"line":"                let get_state hash =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  match Map.find protocol_states_map hash with","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                  | None ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      let new_state_hash =","counters":[]},{"line":"                        State_hash.With_state_hashes.state_hash (fst new_root)","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                      in","counters":[]},{"line":"                      [%log error]","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                        ~metadata:","counters":[]},{"line":"                          [ (\"new_root\", State_hash.to_yojson new_state_hash)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"                          ; (\"state_hash\", State_hash.to_yojson hash)","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                          ]","counters":[]},{"line":"                        \"Protocol state (for scan state transactions) for \\","counters":[]},{"line":"                         $state_hash not found when bootstrapping to the new \\","counters":[]},{"line":"                         root $new_root\" ;","counters":[]},{"line":"                      Or_error.errorf","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        !\"Protocol state (for scan state transactions) for \\","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                          %{sexp:State_hash.t} not found when bootstrapping to \\","counters":[]},{"line":"                          the new root %{sexp:State_hash.t}\"","counters":[]},{"line":"                        hash new_state_hash","counters":[]},{"line":"                  | Some protocol_state ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      Ok (With_hash.data protocol_state)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                in","counters":[]},{"line":"                (* Construct the staged ledger before constructing the transition","counters":[]},{"line":"                 * frontier in order to verify the scan state we received.","counters":[]},{"line":"                 * TODO: reorganize the code to avoid doing this twice (#3480) *)","counters":[]},{"line":"                let open Deferred.Let_syntax in","counters":[]},{"line":"                let%map staged_ledger_construction_time, construction_result =","counters":[]},{"line":"                  time_deferred","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                    (let open Deferred.Let_syntax in","counters":[]},{"line":"                    let temp_mask = Ledger.of_database temp_snarked_ledger in","counters":[]},{"line":"                    let%map result =","counters":[]},{"line":"                      Staged_ledger","counters":[]},{"line":"                      .of_scan_state_pending_coinbases_and_snarked_ledger","counters":[]},{"line":"                        ~logger","counters":[]},{"line":"                        ~snarked_local_state:","counters":[]},{"line":"                          Mina_block.(","counters":[]},{"line":"                            t.current_root |> Validation.block |> header","counters":[{"col_start":61,"col_end":61,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"                            |> Header.protocol_state","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                            |> Protocol_state.blockchain_state","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                            |> Blockchain_state.registers","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                            |> Registers.local_state)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                        ~verifier ~constraint_constants ~scan_state","counters":[]},{"line":"                        ~snarked_ledger:temp_mask ~expected_merkle_root","counters":[]},{"line":"                        ~pending_coinbases ~get_state","counters":[]},{"line":"                    in","counters":[]},{"line":"                    ignore","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ( Ledger.Maskable.unregister_mask_exn ~loc:__LOC__","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                          temp_mask","counters":[]},{"line":"                        : Ledger.unattached_mask ) ;","counters":[]},{"line":"                    Result.map result","counters":[]},{"line":"                      ~f:","counters":[]},{"line":"                        (const","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                           ( scan_state","counters":[]},{"line":"                           , pending_coinbases","counters":[]},{"line":"                           , new_root","counters":[]},{"line":"                           , protocol_states ) ))","counters":[]},{"line":"                in","counters":[]},{"line":"                Ok (staged_ledger_construction_time, construction_result)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              in","counters":[]},{"line":"              match staged_ledger_construction_result with","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              | Error err ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (staged_ledger_data_download_time, None, Error err)","counters":[]},{"line":"              | Ok (staged_ledger_construction_time, result) ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ( staged_ledger_data_download_time","counters":[]},{"line":"                  , Some staged_ledger_construction_time","counters":[]},{"line":"                  , result ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        Transition_frontier.Persistent_root.Instance.close","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          temp_persistent_root_instance ;","counters":[]},{"line":"        match staged_ledger_aux_result with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Error e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let%bind () =","counters":[]},{"line":"              Trust_system.(","counters":[]},{"line":"                record t.trust_system logger sender","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                  Actions.","counters":[]},{"line":"                    ( Outgoing_connection_error","counters":[]},{"line":"                    , Some","counters":[]},{"line":"                        ( \"Can't find scan state from the peer or received \\","counters":[]},{"line":"                           faulty scan state from the peer.\"","counters":[]},{"line":"                        , [] ) ))","counters":[]},{"line":"            in","counters":[]},{"line":"            [%log error]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"              ~metadata:","counters":[]},{"line":"                [ (\"error\", Error_json.error_to_yojson e)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                ; (\"state_hash\", State_hash.to_yojson hash)","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                ; ( \"expected_staged_ledger_hash\"","counters":[]},{"line":"                  , Staged_ledger_hash.to_yojson expected_staged_ledger_hash )","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                ]","counters":[]},{"line":"              \"Failed to find scan state for the transition with hash \\","counters":[]},{"line":"               $state_hash from the peer or received faulty scan state: \\","counters":[]},{"line":"               $error. Retry bootstrap\" ;","counters":[]},{"line":"            Writer.close sync_ledger_writer ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let this_cycle =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              { cycle_result = \"failed to download and construct scan state\"","counters":[]},{"line":"              ; sync_ledger_time","counters":[]},{"line":"              ; staged_ledger_data_download_time","counters":[]},{"line":"              ; staged_ledger_construction_time","counters":[]},{"line":"              ; local_state_sync_required = false","counters":[]},{"line":"              ; local_state_sync_time = None","counters":[]},{"line":"              }","counters":[]},{"line":"            in","counters":[]},{"line":"            loop (this_cycle :: previous_cycles)","counters":[]},{"line":"        | Ok (scan_state, pending_coinbase, new_root, protocol_states) -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let%bind () =","counters":[]},{"line":"              Trust_system.(","counters":[]},{"line":"                record t.trust_system logger sender","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                  Actions.","counters":[]},{"line":"                    ( Fulfilled_request","counters":[]},{"line":"                    , Some (\"Received valid scan state from peer\", []) ))","counters":[]},{"line":"            in","counters":[]},{"line":"            let best_seen_block_with_hash, _ = t.best_seen_transition in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            let consensus_state =","counters":[]},{"line":"              With_hash.data best_seen_block_with_hash","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              |> Mina_block.header |> Mina_block.Header.protocol_state","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"              |> Protocol_state.consensus_state","counters":[]},{"line":"            in","counters":[]},{"line":"            (* Synchronize consensus local state if necessary *)","counters":[]},{"line":"            let%bind ( local_state_sync_time","counters":[]},{"line":"                     , (local_state_sync_required, local_state_sync_result) ) =","counters":[]},{"line":"              time_deferred","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                ( match","counters":[]},{"line":"                    Consensus.Hooks.required_local_state_sync","counters":[]},{"line":"                      ~constants:precomputed_values.consensus_constants","counters":[]},{"line":"                      ~consensus_state ~local_state:consensus_local_state","counters":[]},{"line":"                  with","counters":[]},{"line":"                | None ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    [%log debug]","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"                      ~metadata:","counters":[]},{"line":"                        [ ( \"local_state\"","counters":[]},{"line":"                          , Consensus.Data.Local_state.to_yojson","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                              consensus_local_state )","counters":[]},{"line":"                        ; ( \"consensus_state\"","counters":[]},{"line":"                          , Consensus.Data.Consensus_state.Value.to_yojson","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                              consensus_state )","counters":[]},{"line":"                        ]","counters":[]},{"line":"                      \"Not synchronizing consensus local state\" ;","counters":[]},{"line":"                    Deferred.return (false, Or_error.return ())","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"                | Some sync_jobs ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    [%log info] \"Synchronizing consensus local state\" ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                    let%map result =","counters":[]},{"line":"                      Consensus.Hooks.sync_local_state","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"                        ~context:(module Context)","counters":[]},{"line":"                        ~local_state:consensus_local_state ~trust_system","counters":[]},{"line":"                        ~random_peers:(fun n ->","counters":[]},{"line":"                          (* This port is completely made up but we only use the peer_id when doing a query, so it shouldn't matter. *)","counters":[]},{"line":"                          let%map peers =","counters":[]},{"line":"                            Mina_networking.random_peers t.network n","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                          in","counters":[]},{"line":"                          sender :: peers )","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                        ~query_peer:","counters":[]},{"line":"                          { Consensus.Hooks.Rpcs.query =","counters":[]},{"line":"                              (fun peer rpc query ->","counters":[]},{"line":"                                Mina_networking.(","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                                  query_peer t.network peer.peer_id","counters":[]},{"line":"                                    (Rpcs.Consensus_rpc rpc) query) )","counters":[]},{"line":"                          }","counters":[]},{"line":"                        sync_jobs","counters":[]},{"line":"                    in","counters":[]},{"line":"                    (true, result) )","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            in","counters":[]},{"line":"            match local_state_sync_result with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Error e ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log error]","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  ~metadata:[ (\"error\", Error_json.error_to_yojson e) ]","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"                  \"Local state sync failed: $error. Retry bootstrap\" ;","counters":[]},{"line":"                Writer.close sync_ledger_writer ;","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let this_cycle =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  { cycle_result = \"failed to synchronize local state\"","counters":[]},{"line":"                  ; sync_ledger_time","counters":[]},{"line":"                  ; staged_ledger_data_download_time","counters":[]},{"line":"                  ; staged_ledger_construction_time","counters":[]},{"line":"                  ; local_state_sync_required","counters":[]},{"line":"                  ; local_state_sync_time = Some local_state_sync_time","counters":[]},{"line":"                  }","counters":[]},{"line":"                in","counters":[]},{"line":"                loop (this_cycle :: previous_cycles)","counters":[]},{"line":"            | Ok () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (* Close the old frontier and reload a new on from disk. *)","counters":[]},{"line":"                let new_root_data : Transition_frontier.Root_data.Limited.t =","counters":[]},{"line":"                  Transition_frontier.Root_data.Limited.create","counters":[]},{"line":"                    ~transition:(Mina_block.Validated.lift new_root)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                    ~scan_state ~pending_coinbase ~protocol_states","counters":[]},{"line":"                in","counters":[]},{"line":"                let%bind () =","counters":[]},{"line":"                  Transition_frontier.Persistent_frontier.reset_database_exn","counters":[{"col_start":75,"col_end":75,"count":0}]},{"line":"                    persistent_frontier ~root_data:new_root_data","counters":[]},{"line":"                    ~genesis_state_hash:","counters":[]},{"line":"                      (State_hash.With_state_hashes.state_hash","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                         precomputed_values.protocol_state_with_hashes )","counters":[]},{"line":"                in","counters":[]},{"line":"                (* TODO: lazy load db in persistent root to avoid unecessary opens like this *)","counters":[]},{"line":"                Transition_frontier.Persistent_root.(","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  with_instance_exn persistent_root ~f:(fun instance ->","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                      Instance.set_root_state_hash instance","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      @@ Mina_block.Validated.state_hash","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                      @@ Mina_block.Validated.lift new_root )) ;","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                let%map new_frontier =","counters":[]},{"line":"                  let fail msg =","counters":[]},{"line":"                    failwith","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ( \"failed to initialize transition frontier after \\","counters":[]},{"line":"                         bootstrapping: \" ^ msg )","counters":[]},{"line":"                  in","counters":[]},{"line":"                  Transition_frontier.load","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                    ~context:(module Context)","counters":[]},{"line":"                    ~retry_with_fresh_db:false ~verifier ~consensus_local_state","counters":[]},{"line":"                    ~persistent_root ~persistent_frontier ~catchup_mode ()","counters":[]},{"line":"                  >>| function","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  | Ok frontier ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      frontier","counters":[]},{"line":"                  | Error (`Failure msg) ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      fail msg","counters":[]},{"line":"                  | Error `Bootstrap_required ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      fail","counters":[]},{"line":"                        \"bootstrap still required (indicates logical error in \\","counters":[]},{"line":"                         code)\"","counters":[]},{"line":"                  | Error `Persistent_frontier_malformed ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      fail \"persistent frontier was malformed\"","counters":[]},{"line":"                  | Error `Snarked_ledger_mismatch ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      fail","counters":[]},{"line":"                        \"this should not happen, because we just reset the \\","counters":[]},{"line":"                         snarked_ledger\"","counters":[]},{"line":"                in","counters":[]},{"line":"                [%str_log info] Bootstrap_complete ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"                let collected_transitions =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Transition_cache.data transition_graph","counters":[]},{"line":"                in","counters":[]},{"line":"                let logger =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Logger.extend logger","counters":[]},{"line":"                    [ ( \"context\"","counters":[]},{"line":"                      , `String \"Filter collected transitions in bootstrap\" )","counters":[]},{"line":"                    ]","counters":[]},{"line":"                in","counters":[]},{"line":"                let root_consensus_state =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Transition_frontier.(","counters":[]},{"line":"                    Breadcrumb.consensus_state_with_hashes (root new_frontier))","counters":[{"col_start":57,"col_end":57,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"                in","counters":[]},{"line":"                let filtered_collected_transitions =","counters":[]},{"line":"                  List.filter collected_transitions","counters":[]},{"line":"                    ~f:(fun incoming_transition ->","counters":[]},{"line":"                      let transition =","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Envelope.Incoming.data incoming_transition","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                        |> Mina_block.Validation.block_with_hash","counters":[]},{"line":"                      in","counters":[]},{"line":"                      Consensus.Hooks.equal_select_status `Take","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                      @@ Consensus.Hooks.select","counters":[]},{"line":"                           ~context:(module Context)","counters":[]},{"line":"                           ~existing:root_consensus_state","counters":[]},{"line":"                           ~candidate:","counters":[]},{"line":"                             (With_hash.map ~f:Mina_block.consensus_state","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                                transition ) )","counters":[]},{"line":"                in","counters":[]},{"line":"                [%log debug] \"Sorting filtered transitions by consensus state\"","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"                  ~metadata:[] ;","counters":[]},{"line":"                let sorted_filtered_collected_transitions =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  List.sort filtered_collected_transitions","counters":[]},{"line":"                    ~compare:","counters":[]},{"line":"                      (Comparable.lift","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                         ~f:","counters":[]},{"line":"                           (Fn.compose Mina_block.Validation.block_with_hash","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                              Envelope.Incoming.data )","counters":[]},{"line":"                         (external_transition_compare ~context:(module Context)) )","counters":[]},{"line":"                in","counters":[]},{"line":"                let this_cycle =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  { cycle_result = \"success\"","counters":[]},{"line":"                  ; sync_ledger_time","counters":[]},{"line":"                  ; staged_ledger_data_download_time","counters":[]},{"line":"                  ; staged_ledger_construction_time","counters":[]},{"line":"                  ; local_state_sync_required","counters":[]},{"line":"                  ; local_state_sync_time = Some local_state_sync_time","counters":[]},{"line":"                  }","counters":[]},{"line":"                in","counters":[]},{"line":"                ( this_cycle :: previous_cycles","counters":[]},{"line":"                , (new_frontier, sorted_filtered_collected_transitions) ) )","counters":[]},{"line":"      in","counters":[]},{"line":"      let%map time_elapsed, (cycles, result) = time_deferred (loop []) in","counters":[{"col_start":59,"col_end":59,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"      [%log info] \"Bootstrap completed in $time_elapsed: $bootstrap_stats\"","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          [ (\"time_elapsed\", time_to_yojson time_elapsed)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; ( \"bootstrap_stats\"","counters":[]},{"line":"            , `List (List.map ~f:bootstrap_cycle_stats_to_yojson cycles) )","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          ] ;","counters":[]},{"line":"      Mina_metrics.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Gauge.set Bootstrap.bootstrap_time_ms","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          Core.Time.(Span.to_ms @@ time_elapsed)) ;","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      result )","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Bootstrap_controller tests\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"    let max_frontier_length =","counters":[]},{"line":"      Transition_frontier.global_max_length Genesis_constants.compiled","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"    let logger = Logger.create ()","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let trust_system =","counters":[]},{"line":"      let s = Trust_system.null () in","counters":[]},{"line":"      don't_wait_for","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Pipe_lib.Strict_pipe.Reader.iter","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"           (Trust_system.upcall_pipe s)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           ~f:(const Deferred.unit) ) ;","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"      s","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let precomputed_values = Lazy.force Precomputed_values.for_unit_tests","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    let proof_level = precomputed_values.proof_level","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = precomputed_values.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    module Context = struct","counters":[]},{"line":"      let logger = Logger.create ()","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"      let precomputed_values = precomputed_values","counters":[]},{"line":"","counters":[]},{"line":"      let constraint_constants =","counters":[]},{"line":"        Genesis_constants.Constraint_constants.for_unit_tests","counters":[]},{"line":"","counters":[]},{"line":"      let consensus_constants = precomputed_values.consensus_constants","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let verifier =","counters":[]},{"line":"      Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          Verifier.create ~logger ~proof_level ~constraint_constants","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~conf_dir:None","counters":[]},{"line":"            ~pids:(Child_processes.Termination.create_pid_table ()) )","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"    module Genesis_ledger = (val precomputed_values.genesis_ledger)","counters":[]},{"line":"","counters":[]},{"line":"    let downcast_transition ~sender transition =","counters":[]},{"line":"      let transition =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        transition |> Mina_block.Validated.remember","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"        |> Mina_block.Validation.reset_frontier_dependencies_validation","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"        |> Mina_block.Validation.reset_staged_ledger_diff_validation","counters":[]},{"line":"      in","counters":[]},{"line":"      Envelope.Incoming.wrap ~data:transition","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~sender:(Envelope.Sender.Remote sender)","counters":[]},{"line":"","counters":[]},{"line":"    let downcast_breadcrumb ~sender breadcrumb =","counters":[]},{"line":"      downcast_transition ~sender","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.Breadcrumb.validated_transition breadcrumb)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"    let make_non_running_bootstrap ~genesis_root ~network =","counters":[]},{"line":"      let transition =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        genesis_root","counters":[]},{"line":"        |> Mina_block.Validation.reset_frontier_dependencies_validation","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"        |> Mina_block.Validation.reset_staged_ledger_diff_validation","counters":[]},{"line":"      in","counters":[]},{"line":"      { context = (module Context)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ; trust_system","counters":[]},{"line":"      ; verifier","counters":[]},{"line":"      ; best_seen_transition = transition","counters":[]},{"line":"      ; current_root = transition","counters":[]},{"line":"      ; network","counters":[]},{"line":"      ; num_of_root_snarked_ledger_retargeted = 0","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"Bootstrap controller caches all transitions it is passed \\","counters":[]},{"line":"                   through the transition_reader\" =","counters":[]},{"line":"      let branch_size = (max_frontier_length * 2) + 2 in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Quickcheck.test ~trials:1","counters":[]},{"line":"        (let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"        (* we only need one node for this test, but we need more than one peer so that mina_networking does not throw an error *)","counters":[]},{"line":"        let%bind fake_network =","counters":[]},{"line":"          Fake_network.Generator.(","counters":[]},{"line":"            gen ~precomputed_values ~verifier ~max_frontier_length","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              [ fresh_peer; fresh_peer ] ~use_super_catchup:false)","counters":[]},{"line":"        in","counters":[]},{"line":"        let%map make_branch =","counters":[]},{"line":"          Transition_frontier.Breadcrumb.For_tests.gen_seq ~precomputed_values","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"            ~verifier","counters":[]},{"line":"            ~accounts_with_secret_keys:(Lazy.force Genesis_ledger.accounts)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"            branch_size","counters":[]},{"line":"        in","counters":[]},{"line":"        let [ me; _ ] = fake_network.peer_networks in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let branch =","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"              make_branch (Transition_frontier.root me.state.frontier) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        in","counters":[]},{"line":"        (fake_network, branch))","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ~f:(fun (fake_network, branch) ->","counters":[]},{"line":"          let [ me; other ] = fake_network.peer_networks in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let genesis_root =","counters":[]},{"line":"            Transition_frontier.(","counters":[]},{"line":"              Breadcrumb.validated_transition @@ root me.state.frontier)","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"            |> Mina_block.Validated.remember","counters":[]},{"line":"          in","counters":[]},{"line":"          let transition_graph = Transition_cache.create () in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let sync_ledger_reader, sync_ledger_writer =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Pipe_lib.Strict_pipe.create ~name:\"sync_ledger_reader\" Synchronous","counters":[]},{"line":"          in","counters":[]},{"line":"          let bootstrap =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            make_non_running_bootstrap ~genesis_root ~network:me.network","counters":[]},{"line":"          in","counters":[]},{"line":"          let root_sync_ledger =","counters":[]},{"line":"            Sync_ledger.Db.create","counters":[]},{"line":"              (Transition_frontier.root_snarked_ledger me.state.frontier)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"              ~logger ~trust_system","counters":[]},{"line":"          in","counters":[]},{"line":"          Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let sync_deferred =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                sync_ledger bootstrap ~root_sync_ledger ~transition_graph","counters":[]},{"line":"                  ~preferred:[] ~sync_ledger_reader","counters":[]},{"line":"                  ~genesis_constants:Genesis_constants.compiled","counters":[]},{"line":"              in","counters":[]},{"line":"              let%bind () =","counters":[]},{"line":"                Deferred.List.iter branch ~f:(fun breadcrumb ->","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                    Strict_pipe.Writer.write sync_ledger_writer","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ( `Block","counters":[]},{"line":"                          (downcast_breadcrumb ~sender:other.peer breadcrumb)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                      , `Vallid_cb None ) )","counters":[]},{"line":"              in","counters":[]},{"line":"              Strict_pipe.Writer.close sync_ledger_writer ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              sync_deferred ) ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          let expected_transitions =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.map branch","counters":[]},{"line":"              ~f:","counters":[]},{"line":"                (Fn.compose Mina_block.Validation.block_with_hash","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                   (Fn.compose Mina_block.Validated.remember","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                      Transition_frontier.Breadcrumb.validated_transition ) )","counters":[]},{"line":"          in","counters":[]},{"line":"          let saved_transitions =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Transition_cache.data transition_graph","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"            |> List.map","counters":[]},{"line":"                 ~f:","counters":[]},{"line":"                   (Fn.compose Mina_block.Validation.block_with_hash","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"                      Envelope.Incoming.data )","counters":[]},{"line":"          in","counters":[]},{"line":"          let module E = struct","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            module T = struct","counters":[]},{"line":"              type t = Mina_block.t State_hash.With_state_hashes.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"              let compare = external_transition_compare ~context:(module Context)","counters":[]},{"line":"            end","counters":[]},{"line":"","counters":[]},{"line":"            include Comparable.Make (T)","counters":[]},{"line":"          end in","counters":[]},{"line":"          [%test_result: E.Set.t]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            (E.Set.of_list saved_transitions)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            ~expect:(E.Set.of_list expected_transitions) )","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"    let run_bootstrap ~timeout_duration ~my_net ~transition_reader =","counters":[]},{"line":"      let open Fake_network in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let time_controller = Block_time.Controller.basic ~logger in","counters":[]},{"line":"      let persistent_root =","counters":[]},{"line":"        Transition_frontier.persistent_root my_net.state.frontier","counters":[]},{"line":"      in","counters":[]},{"line":"      let persistent_frontier =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transition_frontier.persistent_frontier my_net.state.frontier","counters":[]},{"line":"      in","counters":[]},{"line":"      let initial_root_transition =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transition_frontier.(","counters":[]},{"line":"          Breadcrumb.validated_transition (root my_net.state.frontier))","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        Transition_frontier.close ~loc:__LOC__ my_net.state.frontier","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      in","counters":[]},{"line":"      [%log info] \"bootstrap begin\" ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      Block_time.Timeout.await_exn time_controller ~timeout_duration","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (run","counters":[]},{"line":"           ~context:(module Context)","counters":[]},{"line":"           ~trust_system ~verifier ~network:my_net.network","counters":[]},{"line":"           ~best_seen_transition:None","counters":[]},{"line":"           ~consensus_local_state:my_net.state.consensus_local_state","counters":[]},{"line":"           ~transition_reader ~persistent_root ~persistent_frontier","counters":[]},{"line":"           ~catchup_mode:`Normal ~initial_root_transition )","counters":[]},{"line":"","counters":[]},{"line":"    let assert_transitions_increasingly_sorted ~root","counters":[]},{"line":"        (incoming_transitions :","counters":[]},{"line":"          Mina_block.initial_valid_block Envelope.Incoming.t list ) =","counters":[]},{"line":"      let root = Transition_frontier.Breadcrumb.block root in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ignore","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( List.fold_result ~init:root incoming_transitions","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            ~f:(fun max_acc incoming_transition ->","counters":[]},{"line":"              let With_hash.{ data = transition; _ }, _ =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Envelope.Incoming.data incoming_transition","counters":[]},{"line":"              in","counters":[]},{"line":"              let open Result.Let_syntax in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let%map () =","counters":[]},{"line":"                Result.ok_if_true","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                  Mina_numbers.Length.(","counters":[]},{"line":"                    Mina_block.blockchain_length max_acc","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                    <= Mina_block.blockchain_length transition)","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                  ~error:","counters":[]},{"line":"                    (Error.of_string","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                       \"The blocks are not sorted in increasing order\" )","counters":[]},{"line":"              in","counters":[]},{"line":"              transition )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          |> Or_error.ok_exn","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          : Mina_block.t )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"sync with one node after receiving a transition\" =","counters":[]},{"line":"      Quickcheck.test ~trials:1","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Fake_network.Generator.(","counters":[]},{"line":"          gen ~precomputed_values ~verifier ~max_frontier_length","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            ~use_super_catchup:false","counters":[]},{"line":"            [ fresh_peer","counters":[]},{"line":"            ; peer_with_branch","counters":[]},{"line":"                ~frontier_branch_size:((max_frontier_length * 2) + 2)","counters":[]},{"line":"            ])","counters":[]},{"line":"        ~f:(fun fake_network ->","counters":[]},{"line":"          let [ my_net; peer_net ] = fake_network.peer_networks in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let transition_reader, transition_writer =","counters":[]},{"line":"            Pipe_lib.Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow (Drop_head ignore)))","counters":[]},{"line":"          in","counters":[]},{"line":"          let block =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Envelope.Incoming.wrap","counters":[]},{"line":"              ~data:","counters":[]},{"line":"                ( Transition_frontier.best_tip peer_net.state.frontier","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                |> Transition_frontier.Breadcrumb.validated_transition","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"                |> Mina_block.Validated.remember","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                |> Mina_block.Validation.reset_frontier_dependencies_validation","counters":[{"col_start":78,"col_end":78,"count":0}]},{"line":"                |> Mina_block.Validation.reset_staged_ledger_diff_validation )","counters":[{"col_start":75,"col_end":75,"count":0}]},{"line":"              ~sender:(Envelope.Sender.Remote peer_net.peer)","counters":[]},{"line":"          in","counters":[]},{"line":"          Pipe_lib.Strict_pipe.Writer.write transition_writer","counters":[]},{"line":"            (`Block block, `Valid_cb None) ;","counters":[]},{"line":"          let new_frontier, sorted_external_transitions =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"                run_bootstrap","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  ~timeout_duration:(Block_time.Span.of_ms 30_000L)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                  ~my_net ~transition_reader )","counters":[]},{"line":"          in","counters":[]},{"line":"          assert_transitions_increasingly_sorted","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~root:(Transition_frontier.root new_frontier)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"            sorted_external_transitions ;","counters":[]},{"line":"          [%test_result: Ledger_hash.t]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"            ( Ledger.Db.merkle_root","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"            @@ Transition_frontier.root_snarked_ledger new_frontier )","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            ~expect:","counters":[]},{"line":"              ( Ledger.Db.merkle_root","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"              @@ Transition_frontier.root_snarked_ledger peer_net.state.frontier","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"              ) )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"reconstruct staged_ledgers using \\","counters":[]},{"line":"                   of_scan_state_and_snarked_ledger\" =","counters":[]},{"line":"      Quickcheck.test ~trials:1","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Transition_frontier.For_tests.gen ~precomputed_values ~verifier","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"           ~max_length:max_frontier_length ~size:max_frontier_length () )","counters":[]},{"line":"        ~f:(fun frontier ->","counters":[]},{"line":"          Thread_safe.block_on_async_exn","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          @@ fun () ->","counters":[]},{"line":"          Deferred.List.iter (Transition_frontier.all_breadcrumbs frontier)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"            ~f:(fun breadcrumb ->","counters":[]},{"line":"              let staged_ledger =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Transition_frontier.Breadcrumb.staged_ledger breadcrumb","counters":[]},{"line":"              in","counters":[]},{"line":"              let expected_merkle_root =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Staged_ledger.ledger staged_ledger |> Ledger.merkle_root","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"              in","counters":[]},{"line":"              let snarked_ledger =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Transition_frontier.root_snarked_ledger frontier","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                |> Ledger.of_database","counters":[]},{"line":"              in","counters":[]},{"line":"              let snarked_local_state =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Transition_frontier.root frontier","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                |> Transition_frontier.Breadcrumb.protocol_state","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                |> Protocol_state.blockchain_state |> Blockchain_state.registers","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":79,"col_end":79,"count":0}]},{"line":"                |> Registers.local_state","counters":[]},{"line":"              in","counters":[]},{"line":"              let scan_state = Staged_ledger.scan_state staged_ledger in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let get_state hash =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                match Transition_frontier.find_protocol_state frontier hash with","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                | Some protocol_state ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok protocol_state","counters":[]},{"line":"                | None ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Or_error.errorf","counters":[]},{"line":"                      !\"Protocol state (for scan state transactions) for \\","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                        %{sexp:State_hash.t} not found\"","counters":[]},{"line":"                      hash","counters":[]},{"line":"              in","counters":[]},{"line":"              let pending_coinbases =","counters":[]},{"line":"                Staged_ledger.pending_coinbase_collection staged_ledger","counters":[]},{"line":"              in","counters":[]},{"line":"              let%map actual_staged_ledger =","counters":[]},{"line":"                Staged_ledger.of_scan_state_pending_coinbases_and_snarked_ledger","counters":[]},{"line":"                  ~scan_state ~logger ~verifier ~constraint_constants","counters":[]},{"line":"                  ~snarked_ledger ~snarked_local_state ~expected_merkle_root","counters":[]},{"line":"                  ~pending_coinbases ~get_state","counters":[]},{"line":"                |> Deferred.Or_error.ok_exn","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"              in","counters":[]},{"line":"              assert (","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                Staged_ledger_hash.equal","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                  (Staged_ledger.hash staged_ledger)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                  (Staged_ledger.hash actual_staged_ledger) ) ) )","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"    (*","counters":[]},{"line":"    let%test_unit \"if we see a new transition that is better than the \\","counters":[]},{"line":"                   transition that we are syncing from, than we should \\","counters":[]},{"line":"                   retarget our root\" =","counters":[]},{"line":"      Quickcheck.test ~trials:1","counters":[]},{"line":"        Fake_network.Generator.(","counters":[]},{"line":"          gen ~max_frontier_length","counters":[]},{"line":"            [ fresh_peer","counters":[]},{"line":"            ; peer_with_branch ~frontier_branch_size:max_frontier_length","counters":[]},{"line":"            ; peer_with_branch","counters":[]},{"line":"                ~frontier_branch_size:((max_frontier_length * 2) + 2) ])","counters":[]},{"line":"        ~f:(fun fake_network ->","counters":[]},{"line":"          let [me; weaker_chain; stronger_chain] =","counters":[]},{"line":"            fake_network.peer_networks","counters":[]},{"line":"          in","counters":[]},{"line":"          let transition_reader, transition_writer =","counters":[]},{"line":"            Pipe_lib.Strict_pipe.create ~name:(__MODULE__ ^ __LOC__)","counters":[]},{"line":"              (Buffered (`Capacity 10, `Overflow Drop_head))","counters":[]},{"line":"          in","counters":[]},{"line":"          Envelope.Incoming.wrap","counters":[]},{"line":"            ~data:","counters":[]},{"line":"              ( Transition_frontier.best_tip weaker_chain.state.frontier","counters":[]},{"line":"              |> Transition_frontier.Breadcrumb.validated_transition","counters":[]},{"line":"              |> Mina_block.Validated.to_initial_validated )","counters":[]},{"line":"            ~sender:","counters":[]},{"line":"              (Envelope.Sender.Remote","counters":[]},{"line":"                 (weaker_chain.peer.host, weaker_chain.peer.peer_id))","counters":[]},{"line":"          |> Pipe_lib.Strict_pipe.Writer.write transition_writer ;","counters":[]},{"line":"          Envelope.Incoming.wrap","counters":[]},{"line":"            ~data:","counters":[]},{"line":"              ( Transition_frontier.best_tip stronger_chain.state.frontier","counters":[]},{"line":"              |> Transition_frontier.Breadcrumb.validated_transition","counters":[]},{"line":"              |> Mina_block.Validated.to_initial_validated )","counters":[]},{"line":"            ~sender:","counters":[]},{"line":"              (Envelope.Sender.Remote","counters":[]},{"line":"                 (stronger_chain.peer.host, stronger_chain.peer.peer_id))","counters":[]},{"line":"          |> Pipe_lib.Strict_pipe.Writer.write transition_writer ;","counters":[]},{"line":"          let new_frontier, sorted_external_transitions =","counters":[]},{"line":"            Async.Thread_safe.block_on_async_exn (fun () ->","counters":[]},{"line":"                run_bootstrap","counters":[]},{"line":"                  ~timeout_duration:(Block_time.Span.of_ms 60_000L)","counters":[]},{"line":"                  ~my_net:me ~transition_reader )","counters":[]},{"line":"          in","counters":[]},{"line":"          assert_transitions_increasingly_sorted","counters":[]},{"line":"            ~root:(Transition_frontier.root new_frontier)","counters":[]},{"line":"            sorted_external_transitions ;","counters":[]},{"line":"          [%test_result: Ledger_hash.t]","counters":[]},{"line":"            ( Ledger.Db.merkle_root","counters":[]},{"line":"            @@ Transition_frontier.root_snarked_ledger new_frontier )","counters":[]},{"line":"            ~expect:","counters":[]},{"line":"              ( Ledger.Db.merkle_root","counters":[]},{"line":"              @@ Transition_frontier.root_snarked_ledger","counters":[]},{"line":"                   stronger_chain.state.frontier ) )","counters":[]},{"line":"*)","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}