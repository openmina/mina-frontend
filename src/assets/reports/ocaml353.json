{"filename":"src/lib/pickles/one_hot_vector/one_hot_vector.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"","counters":[]},{"line":"module Constant = struct","counters":[]},{"line":"  type t = int","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: Optimization(?) Have this have length n - 1 since the last one is","counters":[]},{"line":"    determined by the remaining ones. *)","counters":[]},{"line":"type ('f, 'n) t =","counters":[]},{"line":"  ('f Snarky_backendless.Cvar.t Snarky_backendless.Boolean.t, 'n) Vector.t","counters":[]},{"line":"","counters":[]},{"line":"module T (Impl : Snarky_backendless.Snark_intf.Run) = struct","counters":[]},{"line":"  type nonrec 'n t = (Impl.field, 'n) t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Impl : Snarky_backendless.Snark_intf.Run) = struct","counters":[]},{"line":"  module Constant = Constant","counters":[]},{"line":"  open Impl","counters":[]},{"line":"  include T (Impl)","counters":[]},{"line":"","counters":[]},{"line":"  let of_index i ~length =","counters":[]},{"line":"    let v = Vector.init length ~f:(fun j -> Field.equal (Field.of_int j) i) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"    Boolean.Assert.any (Vector.to_list v) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    v","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let of_vector_unsafe = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let typ (n : 'n Nat.t) : ('n t, Constant.t) Typ.t =","counters":[]},{"line":"    let (Typ typ) = Vector.typ Boolean.typ n in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let typ : _ Typ.t =","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      Typ","counters":[]},{"line":"        { typ with","counters":[]},{"line":"          check =","counters":[]},{"line":"            (fun x ->","counters":[]},{"line":"              Impl.Internal_Basic.make_checked_ast","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              @@ Impl.Internal_Basic.Checked.bind","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                   (Impl.Internal_Basic.run_checked_ast @@ typ.check x)","counters":[{"col_start":54,"col_end":54,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"                   ~f:(fun () ->","counters":[]},{"line":"                     make_checked (fun () ->","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                         Boolean.Assert.exactly_one (Vector.to_list x) ) ) )","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        }","counters":[]},{"line":"    in","counters":[]},{"line":"    Typ.transport typ","counters":[]},{"line":"      ~there:(fun i -> Vector.init n ~f:(( = ) i))","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ~back:(fun v ->","counters":[]},{"line":"        let i, _ =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          List.findi (Vector.to_list v) ~f:(fun _ b -> b) |> Option.value_exn","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        in","counters":[]},{"line":"        i )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}