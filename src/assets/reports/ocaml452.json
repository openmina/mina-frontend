{"filename":"src/lib/mina_incremental/mina_incremental.ml","lines":[{"line":"(** Different functor instantiations of Incremental in the Coda repository","counters":[]},{"line":"    along with some functions to interface with pipes. Each module","counters":[]},{"line":"    instantiation of Incremental should represent a connected component of","counters":[]},{"line":"    dependencies. We have this modue to prevent adding dependencies to","counters":[]},{"line":"    different functors*)","counters":[]},{"line":"","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Make","counters":[]},{"line":"    (Incremental : Incremental.S) (Name : sig","counters":[]},{"line":"      val t : string","counters":[]},{"line":"    end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  include Incremental","counters":[]},{"line":"","counters":[]},{"line":"  let to_pipe observer =","counters":[]},{"line":"    let reader, writer =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Strict_pipe.(","counters":[]},{"line":"        create","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          ~name:(\"Mina_incremental__\" ^ Name.t)","counters":[]},{"line":"          (Buffered (`Capacity 1, `Overflow (Drop_head ignore))))","counters":[]},{"line":"    in","counters":[]},{"line":"    Observer.on_update_exn observer ~f:(function","counters":[]},{"line":"      | Initialized value ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Strict_pipe.Writer.write writer value","counters":[]},{"line":"      | Changed (_, value) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Strict_pipe.Writer.write writer value","counters":[]},{"line":"      | Invalidated ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          () ) ;","counters":[]},{"line":"    (Strict_pipe.Reader.to_linear_pipe reader).Linear_pipe.Reader.pipe","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let of_broadcast_pipe pipe =","counters":[]},{"line":"    let init = Broadcast_pipe.Reader.peek pipe in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let var = Var.create init in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Broadcast_pipe.Reader.iter pipe ~f:(fun value ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Var.set var value ; stabilize () ; Deferred.unit )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"    |> don't_wait_for ;","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"    var","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let of_deferred (deferred : unit Deferred.t) =","counters":[]},{"line":"    let var = Var.create `Empty in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    don't_wait_for","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Deferred.map deferred ~f:(fun () ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"           Var.set var `Filled ;","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"           stabilize () ) ) ;","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    var","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let of_ivar (ivar : unit Ivar.t) = of_deferred (Ivar.read ivar)","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module New_transition =","counters":[]},{"line":"  Make","counters":[]},{"line":"    (Incremental.Make","counters":[]},{"line":"       ())","counters":[]},{"line":"       (struct","counters":[]},{"line":"         let t = \"New_transition\"","counters":[]},{"line":"       end)","counters":[]},{"line":"","counters":[]},{"line":"module Status =","counters":[]},{"line":"  Make","counters":[]},{"line":"    (Incremental.Make","counters":[]},{"line":"       ())","counters":[]},{"line":"       (struct","counters":[]},{"line":"         let t = \"Status\"","counters":[]},{"line":"       end)","counters":[]}]}