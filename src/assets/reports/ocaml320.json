{"filename":"src/lib/mina_networking/mina_networking.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Sync_ledger = Mina_ledger.Sync_ledger","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Network_pool","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"","counters":[]},{"line":"let refused_answer_query_string = \"Refused to answer_query\"","counters":[]},{"line":"","counters":[]},{"line":"exception No_initial_peers","counters":[]},{"line":"","counters":[]},{"line":"type Structured_log_events.t +=","counters":[]},{"line":"  | Gossip_new_state of { state_hash : State_hash.t }","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"  [@@deriving register_event { msg = \"Broadcasting new state over gossip net\" }]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"type Structured_log_events.t +=","counters":[]},{"line":"  | Gossip_transaction_pool_diff of","counters":[]},{"line":"      { txns : Transaction_pool.Resource_pool.Diff.t }","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  [@@deriving","counters":[]},{"line":"    register_event","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":3}]},{"line":"      { msg = \"Broadcasting transaction pool diff over gossip net\" }]","counters":[]},{"line":"","counters":[]},{"line":"type Structured_log_events.t +=","counters":[]},{"line":"  | Gossip_snark_pool_diff of { work : Snark_pool.Resource_pool.Diff.compact }","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"  [@@deriving","counters":[]},{"line":"    register_event { msg = \"Broadcasting snark pool diff over gossip net\" }]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":3}]},{"line":"","counters":[]},{"line":"(* INSTRUCTIONS FOR ADDING A NEW RPC:","counters":[]},{"line":" *   - define a new module under the Rpcs module","counters":[]},{"line":" *   - add an entry to the Rpcs.rpc GADT definition for the new module (type ('query, 'response) rpc, below)","counters":[]},{"line":" *   - add the new constructor for Rpcs.rpc to Rpcs.all_of_type_erased_rpc","counters":[]},{"line":" *   - add a pattern matching case to Rpcs.implementation_of_rpc mapping the","counters":[]},{"line":" *      new constructor to the new module for your RPC","counters":[]},{"line":" *   - add a match case to `match_handler`, below","counters":[]},{"line":" *)","counters":[]},{"line":"module Rpcs = struct","counters":[]},{"line":"  (* for versioning of the types here, see","counters":[]},{"line":"","counters":[]},{"line":"     RFC 0012, and","counters":[]},{"line":"","counters":[]},{"line":"     https://ocaml.janestreet.com/ocaml-core/latest/doc/async_rpc_kernel/Async_rpc_kernel/Versioned_rpc/","counters":[]},{"line":"","counters":[]},{"line":"     The \"master\" types are the ones used internally in the code base. Each","counters":[]},{"line":"     version has coercions between their query and response types and the master","counters":[]},{"line":"     types.","counters":[]},{"line":"  *)","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_some_initial_peers = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_some_initial_peers\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp, yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        type response = Network_peer.Peer.t list [@@deriving sexp, yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_some_initial_peers_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_some_initial_peers_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_some_initial_peers_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_some_initial_peers_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":24,"col_end":24,"count":4}]},{"line":"","counters":[]},{"line":"        type response = Network_peer.Peer.Stable.V1.t list","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":57,"col_end":57,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_staged_ledger_aux_and_pending_coinbases_at_hash = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_staged_ledger_aux_and_pending_coinbases_at_hash\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.t","counters":[]},{"line":"","counters":[]},{"line":"        type response =","counters":[]},{"line":"          ( Staged_ledger.Scan_state.t","counters":[]},{"line":"          * Ledger_hash.t","counters":[]},{"line":"          * Pending_coinbase.t","counters":[]},{"line":"          * Mina_state.Protocol_state.value list )","counters":[]},{"line":"          option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter =","counters":[]},{"line":"      Mina_metrics.Network","counters":[]},{"line":"      .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network","counters":[]},{"line":"      .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network","counters":[]},{"line":"      .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network","counters":[]},{"line":"      .get_staged_ledger_aux_and_pending_coinbases_at_hash_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":42,"col_end":42,"count":4}]},{"line":"","counters":[]},{"line":"        type response =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1}]},{"line":"          ( Staged_ledger.Scan_state.Stable.V2.t","counters":[]},{"line":"          * Ledger_hash.Stable.V1.t","counters":[]},{"line":"          * Pending_coinbase.Stable.V2.t","counters":[]},{"line":"          * Mina_state.Protocol_state.Value.Stable.V2.t list )","counters":[]},{"line":"          option","counters":[{"col_start":15,"col_end":15,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Answer_sync_ledger_query = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"answer_sync_ledger_query\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = Ledger_hash.t * Sync_ledger.Query.t","counters":[]},{"line":"","counters":[]},{"line":"        type response = Sync_ledger.Answer.t Core.Or_error.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.answer_sync_ledger_query_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network.answer_sync_ledger_query_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.answer_sync_ledger_query_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.answer_sync_ledger_query_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = Ledger_hash.Stable.V1.t * Sync_ledger.Query.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":21,"col_end":21,"count":0}]},{"line":"        [@@deriving sexp]","counters":[{"col_start":24,"col_end":24,"count":4}]},{"line":"","counters":[]},{"line":"        type response = Sync_ledger.Answer.Stable.V2.t Core.Or_error.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1}]},{"line":"        [@@deriving sexp]","counters":[{"col_start":24,"col_end":24,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_transition_chain = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_transition_chain\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.t list [@@deriving sexp, to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"        type response = Mina_block.t list option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_transition_chain_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.Stable.V1.t list [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":65,"col_end":65,"count":4}]},{"line":"","counters":[]},{"line":"        type response = Mina_block.Stable.V2.t list option","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":57,"col_end":57,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = ident","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = ident","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_transition_chain_proof = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_transition_chain_proof\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.t [@@deriving sexp, to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        type response = (State_hash.t * State_body_hash.t list) option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_transition_chain_proof_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_proof_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_proof_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_chain_proof_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = State_hash.Stable.V1.t [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":60,"col_end":60,"count":4}]},{"line":"","counters":[]},{"line":"        type response =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1}]},{"line":"          (State_hash.Stable.V1.t * State_body_hash.Stable.V1.t list) option","counters":[{"col_start":75,"col_end":75,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_transition_knowledge = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"Get_transition_knowledge\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp, to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        type response = State_hash.t list","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_transition_knowledge_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_knowledge_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_knowledge_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_transition_knowledge_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":42,"col_end":42,"count":4}]},{"line":"","counters":[]},{"line":"        type response = State_hash.Stable.V1.t list","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":50,"col_end":50,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_ancestry = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_ancestry\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        (** NB: The state hash sent in this query should not be trusted, as it can be forged. This is ok for how this RPC is implented, as we only use the state hash for tie breaking when checking whether or not the proof is worth serving. *)","counters":[]},{"line":"        type query =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Consensus.Data.Consensus_state.Value.t, State_hash.t) With_hash.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        [@@deriving sexp, to_yojson]","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        type response =","counters":[]},{"line":"          ( Mina_block.t","counters":[]},{"line":"          , State_body_hash.t list * Mina_block.t )","counters":[]},{"line":"          Proof_carrying_data.t","counters":[]},{"line":"          option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_ancestry_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter = Mina_metrics.Network.get_ancestry_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_ancestry_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_ancestry_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1}]},{"line":"          ( Consensus.Data.Consensus_state.Value.Stable.V1.t","counters":[]},{"line":"          , State_hash.Stable.V1.t )","counters":[]},{"line":"          With_hash.Stable.V1.t","counters":[]},{"line":"        [@@deriving sexp]","counters":[{"col_start":24,"col_end":24,"count":4}]},{"line":"","counters":[]},{"line":"        type response =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1}]},{"line":"          ( Mina_block.Stable.V2.t","counters":[]},{"line":"          , State_body_hash.Stable.V1.t list * Mina_block.Stable.V2.t )","counters":[]},{"line":"          Proof_carrying_data.Stable.V1.t","counters":[]},{"line":"          option","counters":[{"col_start":15,"col_end":15,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = ident","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = ident","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Ban_notify = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"ban_notify\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        (* banned until this time *)","counters":[]},{"line":"        type query = Core.Time.t [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"        type response = unit","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.ban_notify_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter = Mina_metrics.Network.ban_notify_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.ban_notify_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.ban_notify_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = Core.Time.Stable.V1.t [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":59,"col_end":59,"count":4}]},{"line":"","counters":[]},{"line":"        type response = unit","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":27,"col_end":27,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_best_tip = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_best_tip\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp, to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        type response =","counters":[]},{"line":"          ( Mina_block.t","counters":[]},{"line":"          , State_body_hash.t list * Mina_block.t )","counters":[]},{"line":"          Proof_carrying_data.t","counters":[]},{"line":"          option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_best_tip_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter = Mina_metrics.Network.get_best_tip_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_best_tip_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_best_tip_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":42,"col_end":42,"count":4}]},{"line":"","counters":[]},{"line":"        type response =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1}]},{"line":"          ( Mina_block.Stable.V2.t","counters":[]},{"line":"          , State_body_hash.Stable.V1.t list * Mina_block.Stable.V2.t )","counters":[]},{"line":"          Proof_carrying_data.Stable.V1.t","counters":[]},{"line":"          option","counters":[{"col_start":15,"col_end":15,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = ident","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = ident","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_rpc","counters":[]},{"line":"  module Get_node_status = struct","counters":[]},{"line":"    module Node_status = struct","counters":[]},{"line":"      [%%versioned","counters":[]},{"line":"      module Stable = struct","counters":[]},{"line":"        module V2 = struct","counters":[]},{"line":"          type t =","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":2}]},{"line":"            { node_ip_addr : Core.Unix.Inet_addr.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  [@to_yojson","counters":[]},{"line":"                    fun ip_addr -> `String (Unix.Inet_addr.to_string ip_addr)]","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"                  [@of_yojson","counters":[]},{"line":"                    function","counters":[]},{"line":"                    | `String s ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Ok (Unix.Inet_addr.of_string s)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                    | _ ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Error \"expected string\"]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"            ; node_peer_id : Network_peer.Peer.Id.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  [@to_yojson fun peer_id -> `String peer_id]","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                  [@of_yojson","counters":[]},{"line":"                    function `String s -> Ok s | _ -> Error \"expected string\"]","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"            ; sync_status : Sync_status.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"            ; peers : Network_peer.Peer.Stable.V1.t list","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"            ; block_producers :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Signature_lib.Public_key.Compressed.Stable.V1.t list","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"            ; protocol_state_hash : State_hash.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"            ; ban_statuses :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( Network_peer.Peer.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"                * Trust_system.Peer_status.Stable.V1.t )","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"                list","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            ; k_block_hashes_and_timestamps :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (State_hash.Stable.V1.t * string) list","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"            ; git_commit : string","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"            ; uptime_minutes : int","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"            ; block_height_opt : int option [@default None]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"            }","counters":[]},{"line":"          [@@deriving to_yojson, of_yojson]","counters":[{"col_start":42,"col_end":42,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest = Fn.id","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        module V1 = struct","counters":[]},{"line":"          type t =","counters":[{"col_start":10,"col_end":10,"count":2},{"col_start":15,"col_end":15,"count":2}]},{"line":"            { node_ip_addr : Core.Unix.Inet_addr.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  [@to_yojson","counters":[]},{"line":"                    fun ip_addr -> `String (Unix.Inet_addr.to_string ip_addr)]","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"                  [@of_yojson","counters":[]},{"line":"                    function","counters":[]},{"line":"                    | `String s ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Ok (Unix.Inet_addr.of_string s)","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                    | _ ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        Error \"expected string\"]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"            ; node_peer_id : Network_peer.Peer.Id.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                  [@to_yojson fun peer_id -> `String peer_id]","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                  [@of_yojson","counters":[]},{"line":"                    function `String s -> Ok s | _ -> Error \"expected string\"]","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"            ; sync_status : Sync_status.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"            ; peers : Network_peer.Peer.Stable.V1.t list","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"            ; block_producers :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Signature_lib.Public_key.Compressed.Stable.V1.t list","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"            ; protocol_state_hash : State_hash.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"            ; ban_statuses :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( Network_peer.Peer.Stable.V1.t","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"                * Trust_system.Peer_status.Stable.V1.t )","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"                list","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"            ; k_block_hashes_and_timestamps :","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (State_hash.Stable.V1.t * string) list","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"            ; git_commit : string","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"            ; uptime_minutes : int","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"            }","counters":[]},{"line":"          [@@deriving to_yojson, of_yojson]","counters":[{"col_start":42,"col_end":42,"count":5}]},{"line":"","counters":[]},{"line":"          let to_latest status : Latest.t =","counters":[]},{"line":"            { node_ip_addr = status.node_ip_addr","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            ; node_peer_id = status.node_peer_id","counters":[]},{"line":"            ; sync_status = status.sync_status","counters":[]},{"line":"            ; peers = status.peers","counters":[]},{"line":"            ; block_producers = status.block_producers","counters":[]},{"line":"            ; protocol_state_hash = status.protocol_state_hash","counters":[]},{"line":"            ; ban_statuses = status.ban_statuses","counters":[]},{"line":"            ; k_block_hashes_and_timestamps =","counters":[]},{"line":"                status.k_block_hashes_and_timestamps","counters":[]},{"line":"            ; git_commit = status.git_commit","counters":[]},{"line":"            ; uptime_minutes = status.uptime_minutes","counters":[]},{"line":"            ; block_height_opt = None","counters":[]},{"line":"            }","counters":[]},{"line":"        end","counters":[]},{"line":"      end]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_node_status\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp, to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"        type response = Node_status.t Or_error.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"","counters":[]},{"line":"    let sent_counter = Mina_metrics.Network.get_node_status_rpcs_sent","counters":[]},{"line":"","counters":[]},{"line":"    let received_counter = Mina_metrics.Network.get_node_status_rpcs_received","counters":[]},{"line":"","counters":[]},{"line":"    let failed_request_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_node_status_rpc_requests_failed","counters":[]},{"line":"","counters":[]},{"line":"    let failed_response_counter =","counters":[]},{"line":"      Mina_metrics.Network.get_node_status_rpc_responses_failed","counters":[]},{"line":"","counters":[]},{"line":"    module M = Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"    include M","counters":[]},{"line":"","counters":[]},{"line":"    let response_to_yojson response =","counters":[]},{"line":"      match response with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Ok status ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Node_status.Stable.Latest.to_yojson status","counters":[]},{"line":"      | Error err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Assoc [ (\"error\", Error_json.error_to_yojson err) ]","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"    include Perf_histograms.Rpc.Plain.Extend (struct","counters":[]},{"line":"      include M","counters":[]},{"line":"      include Master","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":42,"col_end":42,"count":4}]},{"line":"","counters":[]},{"line":"        type response = Node_status.Stable.V2.t Core_kernel.Or_error.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":79,"col_end":79,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[{"col_start":4,"col_end":4,"count":3}]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit [@@deriving sexp]","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":17,"col_end":17,"count":1},{"col_start":42,"col_end":42,"count":4}]},{"line":"","counters":[]},{"line":"        type response = Node_status.Stable.V1.t Core_kernel.Or_error.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":20,"col_end":20,"count":1},{"col_start":79,"col_end":79,"count":4}]},{"line":"","counters":[]},{"line":"        let query_of_caller_model = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let callee_model_of_query = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let response_of_callee_model = function","counters":[]},{"line":"          | Error err ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Error err","counters":[]},{"line":"          | Ok (status : Node_status.Stable.Latest.t) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Ok","counters":[]},{"line":"                { Node_status.Stable.V1.node_ip_addr = status.node_ip_addr","counters":[]},{"line":"                ; node_peer_id = status.node_peer_id","counters":[]},{"line":"                ; sync_status = status.sync_status","counters":[]},{"line":"                ; peers = status.peers","counters":[]},{"line":"                ; block_producers = status.block_producers","counters":[]},{"line":"                ; protocol_state_hash = status.protocol_state_hash","counters":[]},{"line":"                ; ban_statuses = status.ban_statuses","counters":[]},{"line":"                ; k_block_hashes_and_timestamps =","counters":[]},{"line":"                    status.k_block_hashes_and_timestamps","counters":[]},{"line":"                ; git_commit = status.git_commit","counters":[]},{"line":"                ; uptime_minutes = status.uptime_minutes","counters":[]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"        let caller_model_of_response = function","counters":[]},{"line":"          | Error err ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Error err","counters":[]},{"line":"          | Ok (status : Node_status.Stable.V1.t) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Ok (Node_status.Stable.V1.to_latest status)","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module T' =","counters":[]},{"line":"        Perf_histograms.Rpc.Plain.Decorate_bin_io","counters":[]},{"line":"          (struct","counters":[]},{"line":"            include M","counters":[]},{"line":"            include Master","counters":[]},{"line":"          end)","counters":[]},{"line":"          (T)","counters":[]},{"line":"","counters":[]},{"line":"      include T'","counters":[]},{"line":"      include Register (T')","counters":[]},{"line":"    end","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type ('query, 'response) rpc =","counters":[]},{"line":"    | Get_some_initial_peers","counters":[]},{"line":"        : (Get_some_initial_peers.query, Get_some_initial_peers.response) rpc","counters":[]},{"line":"    | Get_staged_ledger_aux_and_pending_coinbases_at_hash","counters":[]},{"line":"        : ( Get_staged_ledger_aux_and_pending_coinbases_at_hash.query","counters":[]},{"line":"          , Get_staged_ledger_aux_and_pending_coinbases_at_hash.response )","counters":[]},{"line":"          rpc","counters":[]},{"line":"    | Answer_sync_ledger_query","counters":[]},{"line":"        : ( Answer_sync_ledger_query.query","counters":[]},{"line":"          , Answer_sync_ledger_query.response )","counters":[]},{"line":"          rpc","counters":[]},{"line":"    | Get_transition_chain","counters":[]},{"line":"        : (Get_transition_chain.query, Get_transition_chain.response) rpc","counters":[]},{"line":"    | Get_transition_knowledge","counters":[]},{"line":"        : ( Get_transition_knowledge.query","counters":[]},{"line":"          , Get_transition_knowledge.response )","counters":[]},{"line":"          rpc","counters":[]},{"line":"    | Get_transition_chain_proof","counters":[]},{"line":"        : ( Get_transition_chain_proof.query","counters":[]},{"line":"          , Get_transition_chain_proof.response )","counters":[]},{"line":"          rpc","counters":[]},{"line":"    | Get_node_status : (Get_node_status.query, Get_node_status.response) rpc","counters":[]},{"line":"    | Get_ancestry : (Get_ancestry.query, Get_ancestry.response) rpc","counters":[]},{"line":"    | Ban_notify : (Ban_notify.query, Ban_notify.response) rpc","counters":[]},{"line":"    | Get_best_tip : (Get_best_tip.query, Get_best_tip.response) rpc","counters":[]},{"line":"    | Consensus_rpc : ('q, 'r) Consensus.Hooks.Rpcs.rpc -> ('q, 'r) rpc","counters":[]},{"line":"","counters":[]},{"line":"  type rpc_handler =","counters":[]},{"line":"    | Rpc_handler :","counters":[]},{"line":"        { rpc : ('q, 'r) rpc","counters":[]},{"line":"        ; f : ('q, 'r) Rpc_intf.rpc_fn","counters":[]},{"line":"        ; cost : 'q -> int","counters":[]},{"line":"        ; budget : int * [ `Per of Time.Span.t ]","counters":[]},{"line":"        }","counters":[]},{"line":"        -> rpc_handler","counters":[]},{"line":"","counters":[]},{"line":"  let implementation_of_rpc :","counters":[]},{"line":"      type q r. (q, r) rpc -> (q, r) Rpc_intf.rpc_implementation = function","counters":[]},{"line":"    | Get_some_initial_peers ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_some_initial_peers)","counters":[]},{"line":"    | Get_staged_ledger_aux_and_pending_coinbases_at_hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_staged_ledger_aux_and_pending_coinbases_at_hash)","counters":[]},{"line":"    | Answer_sync_ledger_query ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Answer_sync_ledger_query)","counters":[]},{"line":"    | Get_transition_chain ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_transition_chain)","counters":[]},{"line":"    | Get_transition_knowledge ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_transition_knowledge)","counters":[]},{"line":"    | Get_transition_chain_proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_transition_chain_proof)","counters":[]},{"line":"    | Get_node_status ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_node_status)","counters":[]},{"line":"    | Get_ancestry ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_ancestry)","counters":[]},{"line":"    | Ban_notify ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Ban_notify)","counters":[]},{"line":"    | Get_best_tip ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (module Get_best_tip)","counters":[]},{"line":"    | Consensus_rpc rpc ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Hooks.Rpcs.implementation_of_rpc rpc","counters":[]},{"line":"","counters":[]},{"line":"  let match_handler :","counters":[]},{"line":"      type q r.","counters":[]},{"line":"         rpc_handler","counters":[]},{"line":"      -> (q, r) rpc","counters":[]},{"line":"      -> do_:((q, r) Rpc_intf.rpc_fn -> 'a)","counters":[]},{"line":"      -> 'a option =","counters":[]},{"line":"   fun (Rpc_handler { rpc = impl_rpc; f; cost; budget }) rpc ~do_ ->","counters":[]},{"line":"    match (rpc, impl_rpc) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Get_some_initial_peers, Get_some_initial_peers ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_some_initial_peers, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | ( Get_staged_ledger_aux_and_pending_coinbases_at_hash","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      , Get_staged_ledger_aux_and_pending_coinbases_at_hash ) ->","counters":[]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_staged_ledger_aux_and_pending_coinbases_at_hash, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Answer_sync_ledger_query, Answer_sync_ledger_query ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Answer_sync_ledger_query, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_transition_chain, Get_transition_chain ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_transition_chain, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_transition_knowledge, Get_transition_knowledge ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_transition_knowledge, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_transition_chain_proof, Get_transition_chain_proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_transition_chain_proof, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_node_status, Get_node_status ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_node_status, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_ancestry, Get_ancestry ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_ancestry, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Ban_notify, Ban_notify ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Ban_notify, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Get_best_tip, Get_best_tip ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (do_ f)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Get_best_tip, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | Consensus_rpc rpc_a, Consensus_rpc rpc_b ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Hooks.Rpcs.match_handler","counters":[]},{"line":"          (Rpc_handler { rpc = rpc_b; f; cost; budget })","counters":[]},{"line":"          rpc_a ~do_","counters":[]},{"line":"    | Consensus_rpc _, _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Sinks = Sinks","counters":[]},{"line":"module Gossip_net = Gossip_net.Make (Rpcs)","counters":[]},{"line":"","counters":[]},{"line":"module Config = struct","counters":[]},{"line":"  type log_gossip_heard =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { snark_pool_diff : bool; transaction_pool_diff : bool; new_state : bool }","counters":[]},{"line":"  [@@deriving make]","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { logger : Logger.t","counters":[]},{"line":"    ; trust_system : Trust_system.t","counters":[]},{"line":"    ; time_controller : Block_time.Controller.t","counters":[]},{"line":"    ; consensus_constants : Consensus.Constants.t","counters":[]},{"line":"    ; consensus_local_state : Consensus.Data.Local_state.t","counters":[]},{"line":"    ; genesis_ledger_hash : Ledger_hash.t","counters":[]},{"line":"    ; constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"    ; precomputed_values : Precomputed_values.t","counters":[]},{"line":"    ; creatable_gossip_net : Gossip_net.Any.creatable","counters":[]},{"line":"    ; is_seed : bool","counters":[]},{"line":"    ; log_gossip_heard : log_gossip_heard","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving make]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":5,"col_end":5,"count":0}]},{"line":"  { logger : Logger.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  ; trust_system : Trust_system.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  ; gossip_net : Gossip_net.Any.t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving fields]","counters":[]},{"line":"","counters":[]},{"line":"let wrap_rpc_data_in_envelope conn data =","counters":[]},{"line":"  Envelope.Incoming.wrap_peer ~data ~sender:conn","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"type protocol_version_status =","counters":[]},{"line":"  { valid_current : bool; valid_next : bool; matches_daemon : bool }","counters":[]},{"line":"","counters":[]},{"line":"let protocol_version_status t =","counters":[]},{"line":"  let header = Mina_block.header t in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let valid_current =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Protocol_version.is_valid (Header.current_protocol_version header)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"  in","counters":[]},{"line":"  let valid_next =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.for_all","counters":[]},{"line":"      (Header.proposed_protocol_version_opt header)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      ~f:Protocol_version.is_valid","counters":[]},{"line":"  in","counters":[]},{"line":"  let matches_daemon =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Protocol_version.compatible_with_daemon","counters":[]},{"line":"      (Header.current_protocol_version header)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  in","counters":[]},{"line":"  { valid_current; valid_next; matches_daemon }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create (config : Config.t) ~sinks","counters":[]},{"line":"    ~(get_some_initial_peers :","counters":[]},{"line":"          Rpcs.Get_some_initial_peers.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_some_initial_peers.response Deferred.t )","counters":[]},{"line":"    ~(get_staged_ledger_aux_and_pending_coinbases_at_hash :","counters":[]},{"line":"          Rpcs.Get_staged_ledger_aux_and_pending_coinbases_at_hash.query","counters":[]},{"line":"          Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_staged_ledger_aux_and_pending_coinbases_at_hash.response","counters":[]},{"line":"          Deferred.t )","counters":[]},{"line":"    ~(answer_sync_ledger_query :","counters":[]},{"line":"          Rpcs.Answer_sync_ledger_query.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Answer_sync_ledger_query.response Deferred.t )","counters":[]},{"line":"    ~(get_ancestry :","counters":[]},{"line":"          Rpcs.Get_ancestry.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_ancestry.response Deferred.t )","counters":[]},{"line":"    ~(get_best_tip :","counters":[]},{"line":"          Rpcs.Get_best_tip.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_best_tip.response Deferred.t )","counters":[]},{"line":"    ~(get_node_status :","counters":[]},{"line":"          Rpcs.Get_node_status.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_node_status.response Deferred.t )","counters":[]},{"line":"    ~(get_transition_chain_proof :","counters":[]},{"line":"          Rpcs.Get_transition_chain_proof.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_transition_chain_proof.response Deferred.t )","counters":[]},{"line":"    ~(get_transition_chain :","counters":[]},{"line":"          Rpcs.Get_transition_chain.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_transition_chain.response Deferred.t )","counters":[]},{"line":"    ~(get_transition_knowledge :","counters":[]},{"line":"          Rpcs.Get_transition_knowledge.query Envelope.Incoming.t","counters":[]},{"line":"       -> Rpcs.Get_transition_knowledge.response Deferred.t ) =","counters":[]},{"line":"  let module Context = struct","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let logger = config.logger","counters":[]},{"line":"","counters":[]},{"line":"    let consensus_constants = config.precomputed_values.consensus_constants","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = config.constraint_constants","counters":[]},{"line":"  end in","counters":[]},{"line":"  let open Context in","counters":[]},{"line":"  let run_for_rpc_result conn data ~f action_msg msg_args =","counters":[]},{"line":"    let data_in_envelope = wrap_rpc_data_in_envelope conn data in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let sender = Envelope.Incoming.sender data_in_envelope in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind () =","counters":[]},{"line":"      Trust_system.(","counters":[]},{"line":"        record_envelope_sender config.trust_system config.logger sender","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          Actions.(Made_request, Some (action_msg, msg_args)))","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind result = f data_in_envelope in","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    return (result, sender)","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let incr_failed_response = Mina_metrics.Counter.inc_one in","counters":[]},{"line":"  let record_unknown_item result sender action_msg msg_args","counters":[]},{"line":"      failed_response_counter =","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      if Option.is_none result then (","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"        incr_failed_response failed_response_counter ;","counters":[]},{"line":"        Trust_system.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          record_envelope_sender config.trust_system config.logger sender","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"            Actions.(Requested_unknown_item, Some (action_msg, msg_args))) )","counters":[]},{"line":"      else return ()","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    result","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let validate_protocol_versions ~rpc_name sender external_transition =","counters":[]},{"line":"    let open Trust_system.Actions in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let { valid_current; valid_next; matches_daemon } =","counters":[]},{"line":"      protocol_version_status external_transition","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      if valid_current then return ()","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      else","counters":[]},{"line":"        let actions =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( Sent_invalid_protocol_version","counters":[]},{"line":"          , Some","counters":[]},{"line":"              ( \"$rpc_name: external transition with invalid current protocol \\","counters":[]},{"line":"                 version\"","counters":[]},{"line":"              , [ (\"rpc_name\", `String rpc_name)","counters":[]},{"line":"                ; ( \"current_protocol_version\"","counters":[]},{"line":"                  , `String","counters":[]},{"line":"                      (Protocol_version.to_string","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                         (Header.current_protocol_version","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                            (Mina_block.header external_transition) ) ) )","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                ] ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        Trust_system.record_envelope_sender config.trust_system config.logger","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          sender actions","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      if valid_next then return ()","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"      else","counters":[]},{"line":"        let actions =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( Sent_invalid_protocol_version","counters":[]},{"line":"          , Some","counters":[]},{"line":"              ( \"$rpc_name: external transition with invalid proposed protocol \\","counters":[]},{"line":"                 version\"","counters":[]},{"line":"              , [ (\"rpc_name\", `String rpc_name)","counters":[]},{"line":"                ; ( \"proposed_protocol_version\"","counters":[]},{"line":"                  , `String","counters":[]},{"line":"                      (Protocol_version.to_string","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                         (Option.value_exn","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                            (Header.proposed_protocol_version_opt","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                               (Mina_block.header external_transition) ) ) ) )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                ] ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        Trust_system.record_envelope_sender config.trust_system config.logger","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          sender actions","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map () =","counters":[]},{"line":"      if matches_daemon then return ()","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      else","counters":[]},{"line":"        let actions =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ( Sent_mismatched_protocol_version","counters":[]},{"line":"          , Some","counters":[]},{"line":"              ( \"$rpc_name: current protocol version in external transition \\","counters":[]},{"line":"                 does not match daemon current protocol version\"","counters":[]},{"line":"              , [ (\"rpc_name\", `String rpc_name)","counters":[]},{"line":"                ; ( \"current_protocol_version\"","counters":[]},{"line":"                  , `String","counters":[]},{"line":"                      (Protocol_version.to_string","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                         (Header.current_protocol_version","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                            (Mina_block.header external_transition) ) ) )","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                ; ( \"daemon_current_protocol_version\"","counters":[]},{"line":"                  , `String Protocol_version.(to_string @@ get_current ()) )","counters":[{"col_start":54,"col_end":54,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"                ] ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        Trust_system.record_envelope_sender config.trust_system config.logger","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"          sender actions","counters":[]},{"line":"    in","counters":[]},{"line":"    valid_current && valid_next && matches_daemon","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"  in","counters":[]},{"line":"  (* each of the passed-in procedures expects an enveloped input, so","counters":[]},{"line":"     we wrap the data received via RPC *)","counters":[]},{"line":"  let get_staged_ledger_aux_and_pending_coinbases_at_hash_rpc conn ~version:_","counters":[]},{"line":"      hash =","counters":[]},{"line":"    let action_msg = \"Staged ledger and pending coinbases at hash: $hash\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args = [ (\"hash\", State_hash.to_yojson hash) ] in","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn hash","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        ~f:get_staged_ledger_aux_and_pending_coinbases_at_hash action_msg","counters":[]},{"line":"        msg_args","counters":[]},{"line":"    in","counters":[]},{"line":"    record_unknown_item result sender action_msg msg_args","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Rpcs.Get_staged_ledger_aux_and_pending_coinbases_at_hash","counters":[]},{"line":"      .failed_response_counter","counters":[]},{"line":"  in","counters":[]},{"line":"  let answer_sync_ledger_query_rpc conn ~version:_ ((hash, query) as sync_query)","counters":[]},{"line":"      =","counters":[]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn sync_query ~f:answer_sync_ledger_query","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        \"Answer_sync_ledger_query: $query\"","counters":[]},{"line":"        [ (\"query\", Sync_ledger.Query.to_yojson query) ]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind () =","counters":[]},{"line":"      match result with","counters":[]},{"line":"      | Ok _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return ()","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Error err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* N.B.: to_string_mach double-quotes the string, don't want that *)","counters":[]},{"line":"          incr_failed_response","counters":[]},{"line":"            Rpcs.Answer_sync_ledger_query.failed_response_counter ;","counters":[]},{"line":"          let err_msg = Error.to_string_hum err in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          if String.is_prefix err_msg ~prefix:refused_answer_query_string then","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Trust_system.(","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              record_envelope_sender config.trust_system config.logger sender","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                Actions.","counters":[]},{"line":"                  ( Requested_unknown_item","counters":[]},{"line":"                  , Some","counters":[]},{"line":"                      ( \"Sync ledger query with hash: $hash, query: $query, \\","counters":[]},{"line":"                         with error: $error\"","counters":[]},{"line":"                      , [ (\"hash\", Ledger_hash.to_yojson hash)","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                        ; ( \"query\"","counters":[]},{"line":"                          , Syncable_ledger.Query.to_yojson","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                              Mina_ledger.Ledger.Addr.to_yojson query )","counters":[]},{"line":"                        ; (\"error\", Error_json.error_to_yojson err)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"                        ] ) ))","counters":[]},{"line":"          else return ()","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    in","counters":[]},{"line":"    return result","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let md p = [ (\"peer\", Peer.to_yojson p) ] in","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  let get_ancestry_rpc conn ~version:_ query =","counters":[]},{"line":"    [%log debug] \"Sending root proof to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    let action_msg = \"Get_ancestry query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args = [ (\"query\", Rpcs.Get_ancestry.query_to_yojson query) ] in","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn query ~f:get_ancestry action_msg msg_args","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    in","counters":[]},{"line":"    match result with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        record_unknown_item result sender action_msg msg_args","counters":[]},{"line":"          Rpcs.Get_ancestry.failed_response_counter","counters":[]},{"line":"    | Some { proof = _, ext_trans; _ } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%map valid_protocol_versions =","counters":[]},{"line":"          validate_protocol_versions ~rpc_name:\"Get_ancestry\" sender ext_trans","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        in","counters":[]},{"line":"        if valid_protocol_versions then result else None","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"  in","counters":[]},{"line":"  let get_some_initial_peers_rpc (conn : Peer.t) ~version:_ () =","counters":[]},{"line":"    [%log trace] \"Sending some initial peers to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"    let action_msg = \"Get_some_initial_peers query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args = [ (\"query\", `Assoc []) ] in","counters":[]},{"line":"    let%map result, _sender =","counters":[]},{"line":"      run_for_rpc_result conn () ~f:get_some_initial_peers action_msg msg_args","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    in","counters":[]},{"line":"    if List.is_empty result then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      incr_failed_response Rpcs.Get_some_initial_peers.failed_response_counter ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    result","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let get_best_tip_rpc conn ~version:_ () =","counters":[]},{"line":"    [%log debug] \"Sending best_tip to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"    let action_msg = \"Get_best_tip. query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args = [ (\"query\", Rpcs.Get_best_tip.query_to_yojson ()) ] in","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn () ~f:get_best_tip action_msg msg_args","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    in","counters":[]},{"line":"    match result with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        record_unknown_item result sender action_msg msg_args","counters":[]},{"line":"          Rpcs.Get_best_tip.failed_response_counter","counters":[]},{"line":"    | Some { data = data_ext_trans; proof = _, proof_ext_trans } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind valid_data_protocol_versions =","counters":[]},{"line":"          validate_protocol_versions ~rpc_name:\"Get_best_tip (data)\" sender","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"            data_ext_trans","counters":[]},{"line":"        in","counters":[]},{"line":"        let%map valid_proof_protocol_versions =","counters":[]},{"line":"          validate_protocol_versions ~rpc_name:\"Get_best_tip (proof)\" sender","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"            proof_ext_trans","counters":[]},{"line":"        in","counters":[]},{"line":"        if valid_data_protocol_versions && valid_proof_protocol_versions then","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          result","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        else None","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  in","counters":[]},{"line":"  let get_transition_chain_proof_rpc conn ~version:_ query =","counters":[]},{"line":"    [%log info] \"Sending transition_chain_proof to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    let action_msg = \"Get_transition_chain_proof query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args =","counters":[]},{"line":"      [ (\"query\", Rpcs.Get_transition_chain_proof.query_to_yojson query) ]","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn query ~f:get_transition_chain_proof action_msg","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        msg_args","counters":[]},{"line":"    in","counters":[]},{"line":"    record_unknown_item result sender action_msg msg_args","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Rpcs.Get_transition_chain_proof.failed_response_counter","counters":[]},{"line":"  in","counters":[]},{"line":"  let get_transition_knowledge_rpc conn ~version:_ query =","counters":[]},{"line":"    [%log info] \"Sending transition_knowledge to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"    let action_msg = \"Get_transition_knowledge query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args =","counters":[]},{"line":"      [ (\"query\", Rpcs.Get_transition_knowledge.query_to_yojson query) ]","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%map result =","counters":[]},{"line":"      run_for_rpc_result conn query ~f:get_transition_knowledge action_msg","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        msg_args","counters":[]},{"line":"      >>| fst","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    in","counters":[]},{"line":"    if List.is_empty result then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      incr_failed_response Rpcs.Get_transition_knowledge.failed_response_counter ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    result","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let get_transition_chain_rpc conn ~version:_ query =","counters":[]},{"line":"    [%log info] \"Sending transition_chain to $peer\" ~metadata:(md conn) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"    let action_msg = \"Get_transition_chain query: $query\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let msg_args =","counters":[]},{"line":"      [ (\"query\", Rpcs.Get_transition_chain.query_to_yojson query) ]","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind result, sender =","counters":[]},{"line":"      run_for_rpc_result conn query ~f:get_transition_chain action_msg msg_args","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    in","counters":[]},{"line":"    match result with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        record_unknown_item result sender action_msg msg_args","counters":[]},{"line":"          Rpcs.Get_transition_chain.failed_response_counter","counters":[]},{"line":"    | Some ext_trans ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%map valid_protocol_versions =","counters":[]},{"line":"          Deferred.List.map ext_trans","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"            ~f:","counters":[]},{"line":"              (validate_protocol_versions ~rpc_name:\"Get_transition_chain\"","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                 sender )","counters":[]},{"line":"        in","counters":[]},{"line":"        if List.for_all valid_protocol_versions ~f:(Bool.equal true) then result","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        else None","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  in","counters":[]},{"line":"  let ban_notify_rpc conn ~version:_ ban_until =","counters":[]},{"line":"    (* the port in `conn' is an ephemeral port, not of interest *)","counters":[]},{"line":"    [%log warn] \"Node banned by peer $peer until $ban_until\"","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~metadata:","counters":[]},{"line":"        [ (\"peer\", Peer.to_yojson conn)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        ; ( \"ban_until\"","counters":[]},{"line":"          , `String (Time.to_string_abs ~zone:Time.Zone.utc ban_until) )","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        ] ;","counters":[]},{"line":"    (* no computation to do; we're just getting notification *)","counters":[]},{"line":"    Deferred.unit","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  let rpc_handlers =","counters":[]},{"line":"    let open Rpcs in","counters":[]},{"line":"    let open Time.Span in","counters":[]},{"line":"    let unit _ = 1 in","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"    [ Rpc_handler","counters":[]},{"line":"        { rpc = Get_some_initial_peers","counters":[]},{"line":"        ; f = get_some_initial_peers_rpc","counters":[]},{"line":"        ; budget = (1, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_staged_ledger_aux_and_pending_coinbases_at_hash","counters":[]},{"line":"        ; f = get_staged_ledger_aux_and_pending_coinbases_at_hash_rpc","counters":[]},{"line":"        ; budget = (4, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Answer_sync_ledger_query","counters":[]},{"line":"        ; f = answer_sync_ledger_query_rpc","counters":[]},{"line":"        ; budget =","counters":[]},{"line":"            (Int.pow 2 17, `Per minute) (* Not that confident about this one. *)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_best_tip","counters":[]},{"line":"        ; f = get_best_tip_rpc","counters":[]},{"line":"        ; budget = (3, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_ancestry","counters":[]},{"line":"        ; f = get_ancestry_rpc","counters":[]},{"line":"        ; budget = (5, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_transition_knowledge","counters":[]},{"line":"        ; f = get_transition_knowledge_rpc","counters":[]},{"line":"        ; budget = (1, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_transition_chain","counters":[]},{"line":"        ; f = get_transition_chain_rpc","counters":[]},{"line":"        ; budget = (1, `Per second) (* Not that confident about this one. *)","counters":[]},{"line":"        ; cost = (fun x -> Int.max 1 (List.length x))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Get_transition_chain_proof","counters":[]},{"line":"        ; f = get_transition_chain_proof_rpc","counters":[]},{"line":"        ; budget = (3, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ; Rpc_handler","counters":[]},{"line":"        { rpc = Ban_notify","counters":[]},{"line":"        ; f = ban_notify_rpc","counters":[]},{"line":"        ; budget = (1, `Per minute)","counters":[]},{"line":"        ; cost = unit","counters":[]},{"line":"        }","counters":[]},{"line":"    ]","counters":[]},{"line":"    @ Consensus.Hooks.Rpcs.(","counters":[]},{"line":"        List.map","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          (rpc_handlers","counters":[]},{"line":"             ~context:(module Context)","counters":[]},{"line":"             ~local_state:config.consensus_local_state","counters":[]},{"line":"             ~genesis_ledger_hash:","counters":[]},{"line":"               (Frozen_ledger_hash.of_ledger_hash config.genesis_ledger_hash) )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          ~f:(fun (Rpc_handler { rpc; f; cost; budget }) ->","counters":[]},{"line":"            Rpcs.(Rpc_handler { rpc = Consensus_rpc rpc; f; cost; budget }) ))","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%map gossip_net =","counters":[]},{"line":"    O1trace.thread \"gossip_net\" (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        Gossip_net.Any.create config.creatable_gossip_net rpc_handlers","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Gossip_net.Message.Any_sinks ((module Sinks), sinks)) )","counters":[]},{"line":"  in","counters":[]},{"line":"  (* The node status RPC is implemented directly in go, serving a string which","counters":[]},{"line":"     is periodically updated. This is so that one can make this RPC on a node even","counters":[]},{"line":"     if that node is at its connection limit. *)","counters":[]},{"line":"  let fake_time = Time.now () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Clock.every' (Time.Span.of_min 1.) (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      O1trace.thread \"update_node_status\" (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          match%bind","counters":[]},{"line":"            get_node_status","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"              { data = (); sender = Local; received_at = fake_time }","counters":[]},{"line":"          with","counters":[]},{"line":"          | Error _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.unit","counters":[]},{"line":"          | Ok data ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Gossip_net.Any.set_node_status gossip_net","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                ( Rpcs.Get_node_status.Node_status.to_yojson data","counters":[]},{"line":"                |> Yojson.Safe.to_string )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"              >>| ignore ) ) ;","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Gossip_net.Any.on_first_connect gossip_net ~f:(fun () ->","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"         (* After first_connect this list will only be empty if we filtered out all the peers due to mismatched chain id. *)","counters":[]},{"line":"         don't_wait_for","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           (let%map initial_peers = Gossip_net.Any.peers gossip_net in","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"            if List.is_empty initial_peers && not config.is_seed then (","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"              [%log fatal]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                \"Failed to connect to any initial peers, possible chain id \\","counters":[]},{"line":"                 mismatch\" ;","counters":[]},{"line":"              raise No_initial_peers ) ) ) ) ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  (* TODO: Think about buffering:","counters":[]},{"line":"        I.e., what do we do when too many messages are coming in, or going out.","counters":[]},{"line":"        For example, some things you really want to not drop (like your outgoing","counters":[]},{"line":"        block announcment).","counters":[]},{"line":"  *)","counters":[]},{"line":"  { gossip_net; logger = config.logger; trust_system = config.trust_system }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* lift and expose select gossip net functions *)","counters":[]},{"line":"include struct","counters":[]},{"line":"  open Gossip_net.Any","counters":[]},{"line":"","counters":[]},{"line":"  let lift f { gossip_net; _ } = f gossip_net","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let peers = lift peers","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"","counters":[]},{"line":"  let bandwidth_info = lift bandwidth_info","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"  let get_peer_node_status t peer =","counters":[]},{"line":"    let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind s = get_peer_node_status t.gossip_net peer in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    Or_error.try_with (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        match","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Rpcs.Get_node_status.Node_status.of_yojson (Yojson.Safe.from_string s)","counters":[{"col_start":76,"col_end":76,"count":0}]},{"line":"        with","counters":[]},{"line":"        | Ok x ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            x","counters":[]},{"line":"        | Error e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            failwith e )","counters":[]},{"line":"    |> Deferred.return","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"  let add_peer = lift add_peer","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"  let initial_peers = lift initial_peers","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let ban_notification_reader = lift ban_notification_reader","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"  let random_peers = lift random_peers","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let query_peer ?heartbeat_timeout ?timeout { gossip_net; _ } =","counters":[]},{"line":"    query_peer ?heartbeat_timeout ?timeout gossip_net","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let query_peer' ?how ?heartbeat_timeout ?timeout { gossip_net; _ } =","counters":[]},{"line":"    query_peer' ?how ?heartbeat_timeout ?timeout gossip_net","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let restart_helper { gossip_net; _ } = restart_helper gossip_net","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  (* these cannot be directly lifted due to the value restriction *)","counters":[]},{"line":"  let on_first_connect t = lift on_first_connect t","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"  let on_first_high_connectivity t = lift on_first_high_connectivity t","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"  let connection_gating_config t = lift connection_gating t","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  let set_connection_gating_config t config =","counters":[]},{"line":"    lift set_connection_gating t config","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: Have better pushback behavior *)","counters":[]},{"line":"let log_gossip logger ~log_msg msg =","counters":[]},{"line":"  [%str_log' trace logger]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    ~metadata:[ (\"message\", Gossip_net.Message.msg_to_yojson msg) ]","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"    log_msg","counters":[]},{"line":"","counters":[]},{"line":"let broadcast_state t state =","counters":[]},{"line":"  let msg = With_hash.data state in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  log_gossip t.logger (Gossip_net.Message.New_state msg)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~log_msg:","counters":[]},{"line":"      (Gossip_new_state","counters":[]},{"line":"         { state_hash = State_hash.With_state_hashes.state_hash state } ) ;","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"  Mina_metrics.(Gauge.inc_one Network.new_state_broadcasted) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  Gossip_net.Any.broadcast_state t.gossip_net msg","counters":[]},{"line":"","counters":[]},{"line":"let broadcast_transaction_pool_diff t diff =","counters":[]},{"line":"  log_gossip t.logger (Gossip_net.Message.Transaction_pool_diff diff)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~log_msg:(Gossip_transaction_pool_diff { txns = diff }) ;","counters":[]},{"line":"  Mina_metrics.(Gauge.inc_one Network.transaction_pool_diff_broadcasted) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  Gossip_net.Any.broadcast_transaction_pool_diff t.gossip_net diff","counters":[]},{"line":"","counters":[]},{"line":"let broadcast_snark_pool_diff t diff =","counters":[]},{"line":"  Mina_metrics.(Gauge.inc_one Network.snark_pool_diff_broadcasted) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  log_gossip t.logger (Gossip_net.Message.Snark_pool_diff diff)","counters":[]},{"line":"    ~log_msg:","counters":[]},{"line":"      (Gossip_snark_pool_diff","counters":[]},{"line":"         { work =","counters":[]},{"line":"             Option.value_exn (Snark_pool.Resource_pool.Diff.to_compact diff)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"         } ) ;","counters":[]},{"line":"  Gossip_net.Any.broadcast_snark_pool_diff t.gossip_net diff","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* TODO: Don't copy and paste *)","counters":[]},{"line":"let find_map' xs ~f =","counters":[]},{"line":"  let open Async in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ds = List.map xs ~f in","counters":[]},{"line":"  let filter ~f =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Deferred.bind ~f:(fun x -> if f x then return x else Deferred.never ())","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"  in","counters":[]},{"line":"  let none_worked =","counters":[]},{"line":"    Deferred.bind (Deferred.all ds) ~f:(fun ds ->","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"        (* TODO: Validation applicative here *)","counters":[]},{"line":"        if List.for_all ds ~f:Or_error.is_error then","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return (Or_error.error_string \"all none\")","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        else Deferred.never () )","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  in","counters":[]},{"line":"  Deferred.any (none_worked :: List.map ~f:(filter ~f:Or_error.is_ok) ds)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"let make_rpc_request ?heartbeat_timeout ?timeout ~rpc ~label t peer input =","counters":[]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match%map","counters":[]},{"line":"    query_peer ?heartbeat_timeout ?timeout t peer.Peer.peer_id rpc input","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"  with","counters":[]},{"line":"  | Connected { data = Ok (Some response); _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ok response","counters":[]},{"line":"  | Connected { data = Ok None; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Or_error.errorf","counters":[]},{"line":"        !\"Peer %{sexp:Network_peer.Peer.Id.t} doesn't have the requested %s\"","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"        peer.peer_id label","counters":[]},{"line":"  | Connected { data = Error e; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error e","counters":[]},{"line":"  | Failed_to_connect e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error (Error.tag e ~tag:\"failed-to-connect\")","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let get_transition_chain_proof ?heartbeat_timeout ?timeout t =","counters":[]},{"line":"  make_rpc_request ?heartbeat_timeout ?timeout","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~rpc:Rpcs.Get_transition_chain_proof ~label:\"transition chain proof\" t","counters":[]},{"line":"","counters":[]},{"line":"let get_transition_chain ?heartbeat_timeout ?timeout t =","counters":[]},{"line":"  make_rpc_request ?heartbeat_timeout ?timeout ~rpc:Rpcs.Get_transition_chain","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~label:\"chain of transitions\" t","counters":[]},{"line":"","counters":[]},{"line":"let get_best_tip ?heartbeat_timeout ?timeout t peer =","counters":[]},{"line":"  make_rpc_request ?heartbeat_timeout ?timeout ~rpc:Rpcs.Get_best_tip","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~label:\"best tip\" t peer ()","counters":[]},{"line":"","counters":[]},{"line":"let ban_notify t peer banned_until =","counters":[]},{"line":"  query_peer t peer.Peer.peer_id Rpcs.Ban_notify banned_until","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"  >>| Fn.const (Ok ())","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"let try_non_preferred_peers (type b) t input peers ~rpc :","counters":[]},{"line":"    b Envelope.Incoming.t Deferred.Or_error.t =","counters":[]},{"line":"  let max_current_peers = 8 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let rec loop peers num_peers =","counters":[]},{"line":"    if num_peers > max_current_peers then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      return","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Or_error.error_string","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"           \"None of randomly-chosen peers can handle the request\" )","counters":[]},{"line":"    else","counters":[]},{"line":"      let current_peers, remaining_peers = List.split_n peers num_peers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      find_map' current_peers ~f:(fun peer ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let%bind response_or_error =","counters":[]},{"line":"            query_peer t peer.Peer.peer_id rpc input","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"          in","counters":[]},{"line":"          match response_or_error with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | Connected ({ data = Ok (Some data); _ } as envelope) ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let%bind () =","counters":[]},{"line":"                Trust_system.(","counters":[]},{"line":"                  record t.trust_system t.logger peer","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                    Actions.","counters":[]},{"line":"                      ( Fulfilled_request","counters":[]},{"line":"                      , Some (\"Nonpreferred peer returned valid response\", [])","counters":[]},{"line":"                      ))","counters":[]},{"line":"              in","counters":[]},{"line":"              return (Ok (Envelope.Incoming.map envelope ~f:(Fn.const data)))","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"          | Connected { data = Ok None; _ } ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              loop remaining_peers (2 * num_peers)","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              loop remaining_peers (2 * num_peers) )","counters":[]},{"line":"  in","counters":[]},{"line":"  loop peers 1","counters":[]},{"line":"","counters":[]},{"line":"let rpc_peer_then_random (type b) t peer_id input ~rpc :","counters":[]},{"line":"    b Envelope.Incoming.t Deferred.Or_error.t =","counters":[]},{"line":"  let retry () =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let%bind peers = random_peers t 8 in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    try_non_preferred_peers t input peers ~rpc","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  in","counters":[]},{"line":"  match%bind query_peer t peer_id rpc input with","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  | Connected { data = Ok (Some response); sender; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        match sender with","counters":[]},{"line":"        | Local ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            return ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        | Remote peer ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Trust_system.(","counters":[]},{"line":"              record t.trust_system t.logger peer","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                Actions.","counters":[]},{"line":"                  ( Fulfilled_request","counters":[]},{"line":"                  , Some (\"Preferred peer returned valid response\", []) ))","counters":[]},{"line":"      in","counters":[]},{"line":"      return (Ok (Envelope.Incoming.wrap ~data:response ~sender))","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Connected { data = Ok None; sender; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let%bind () =","counters":[]},{"line":"        match sender with","counters":[]},{"line":"        | Remote peer ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Trust_system.(","counters":[]},{"line":"              record t.trust_system t.logger peer","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                Actions.","counters":[]},{"line":"                  ( No_reply_from_preferred_peer","counters":[]},{"line":"                  , Some (\"When querying preferred peer, got no response\", [])","counters":[]},{"line":"                  ))","counters":[]},{"line":"        | Local ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            return ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      retry ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Connected { data = Error e; sender; _ } ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* FIXME #4094: determine if more specific actions apply here *)","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        match sender with","counters":[]},{"line":"        | Remote peer ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Trust_system.(","counters":[]},{"line":"              record t.trust_system t.logger peer","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                Actions.","counters":[]},{"line":"                  ( Outgoing_connection_error","counters":[]},{"line":"                  , Some","counters":[]},{"line":"                      ( \"Error while doing RPC\"","counters":[]},{"line":"                      , [ (\"error\", Error_json.error_to_yojson e) ] ) ))","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"        | Local ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            return ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      in","counters":[]},{"line":"      retry ()","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Failed_to_connect _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* Since we couldn't connect, we have no IP to ban. *)","counters":[]},{"line":"      retry ()","counters":[]},{"line":"","counters":[]},{"line":"let get_staged_ledger_aux_and_pending_coinbases_at_hash t inet_addr input =","counters":[]},{"line":"  rpc_peer_then_random t inet_addr input","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"    ~rpc:Rpcs.Get_staged_ledger_aux_and_pending_coinbases_at_hash","counters":[]},{"line":"  >>|? Envelope.Incoming.data","counters":[]},{"line":"","counters":[]},{"line":"let get_ancestry t inet_addr input =","counters":[]},{"line":"  rpc_peer_then_random t inet_addr input ~rpc:Rpcs.Get_ancestry","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Sl_downloader = struct","counters":[]},{"line":"  module Key = struct","counters":[]},{"line":"    module T = struct","counters":[]},{"line":"      type t = Ledger_hash.t * Sync_ledger.Query.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"      [@@deriving hash, compare, sexp, to_yojson]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include T","counters":[]},{"line":"    include Comparable.Make (T)","counters":[]},{"line":"    include Hashable.Make (T)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include","counters":[]},{"line":"    Downloader.Make","counters":[]},{"line":"      (Key)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        type t = unit [@@deriving to_yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"        let download : t = ()","counters":[]},{"line":"","counters":[]},{"line":"        let worth_retrying () = true","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      end)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (Mina_base.Ledger_hash.t * Sync_ledger.Query.t) * Sync_ledger.Answer.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":79,"col_end":79,"count":0}]},{"line":"        [@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"        let key = fst","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Ledger_hash)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let glue_sync_ledger :","counters":[]},{"line":"       t","counters":[]},{"line":"    -> preferred:Peer.t list","counters":[]},{"line":"    -> (Mina_base.Ledger_hash.t * Sync_ledger.Query.t)","counters":[]},{"line":"       Pipe_lib.Linear_pipe.Reader.t","counters":[]},{"line":"    -> ( Mina_base.Ledger_hash.t","counters":[]},{"line":"       * Sync_ledger.Query.t","counters":[]},{"line":"       * Sync_ledger.Answer.t Network_peer.Envelope.Incoming.t )","counters":[]},{"line":"       Pipe_lib.Linear_pipe.Writer.t","counters":[]},{"line":"    -> unit =","counters":[]},{"line":" fun t ~preferred query_reader response_writer ->","counters":[]},{"line":"  let downloader =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let heartbeat_timeout = Time_ns.Span.of_sec 20. in","counters":[]},{"line":"    let global_stop = Pipe_lib.Linear_pipe.closed query_reader in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let knowledge h peer =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match%map","counters":[]},{"line":"        query_peer ~heartbeat_timeout ~timeout:(Time.Span.of_sec 10.) t","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          peer.Peer.peer_id Rpcs.Answer_sync_ledger_query (h, Num_accounts)","counters":[]},{"line":"      with","counters":[]},{"line":"      | Connected { data = Ok _; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          `Call (fun (h', _) -> Ledger_hash.equal h' h)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      | Failed_to_connect _ | Connected { data = Error _; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"          `Some []","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind _ = Linear_pipe.values_available query_reader in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"    let root_hash_r, root_hash_w =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Broadcast_pipe.create","counters":[]},{"line":"        (Option.value_exn (Linear_pipe.peek query_reader) |> fst)","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"    in","counters":[]},{"line":"    Sl_downloader.create ~preferred ~max_batch_size:100","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~peers:(fun () -> peers t)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~knowledge_context:root_hash_r ~knowledge ~stop:global_stop","counters":[]},{"line":"      ~trust_system:t.trust_system","counters":[]},{"line":"      ~get:(fun (peer : Peer.t) qs ->","counters":[]},{"line":"        List.iter qs ~f:(fun (h, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"            if","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              not (Ledger_hash.equal h (Broadcast_pipe.Reader.peek root_hash_r))","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"            then don't_wait_for (Broadcast_pipe.Writer.write root_hash_w h) ) ;","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        let%map rs =","counters":[]},{"line":"          query_peer' ~how:`Parallel ~heartbeat_timeout","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~timeout:(Time.Span.of_sec (Float.of_int (List.length qs) *. 2.))","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"            t peer.peer_id Rpcs.Answer_sync_ledger_query qs","counters":[]},{"line":"        in","counters":[]},{"line":"        match rs with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Failed_to_connect e ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Error e","counters":[]},{"line":"        | Connected res -> (","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match res.data with","counters":[]},{"line":"            | Error e ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Error e","counters":[]},{"line":"            | Ok rs -> (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                match List.zip qs rs with","counters":[]},{"line":"                | Unequal_lengths ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Or_error.error_string \"mismatched lengths\"","counters":[]},{"line":"                | Ok ps ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Ok","counters":[]},{"line":"                      (List.filter_map ps ~f:(fun (q, r) ->","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                           match r with Ok r -> Some (q, r) | Error _ -> None )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"                      ) ) ) )","counters":[]},{"line":"  in","counters":[]},{"line":"  don't_wait_for","counters":[]},{"line":"    (let%bind downloader = downloader in","counters":[]},{"line":"     Linear_pipe.iter_unordered ~max_concurrency:400 query_reader ~f:(fun q ->","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"         match%bind","counters":[]},{"line":"           Sl_downloader.Job.result","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"             (Sl_downloader.download downloader ~key:q ~attempts:Peer.Map.empty)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"         with","counters":[]},{"line":"         | Error _ ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Deferred.unit","counters":[]},{"line":"         | Ok (a, _) ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Linear_pipe.write_if_open response_writer","counters":[]},{"line":"               (fst q, snd q, { a with data = snd a.data }) ) )","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":62,"col_end":62,"count":1}]}]}