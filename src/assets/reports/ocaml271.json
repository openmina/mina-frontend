{"filename":"src/lib/mina_state/local_state.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Impl = Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"include Mina_transaction_logic.Zkapp_command_logic.Local_state.Value","counters":[]},{"line":"","counters":[]},{"line":"type display =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  ( string","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , bool","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , int","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  , string )","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  Mina_transaction_logic.Zkapp_command_logic.Local_state.t","counters":[]},{"line":"[@@deriving yojson]","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let display","counters":[]},{"line":"    ({ stack_frame","counters":[]},{"line":"     ; call_stack","counters":[]},{"line":"     ; transaction_commitment","counters":[]},{"line":"     ; full_transaction_commitment","counters":[]},{"line":"     ; token_id","counters":[]},{"line":"     ; excess","counters":[]},{"line":"     ; supply_increase","counters":[]},{"line":"     ; ledger","counters":[]},{"line":"     ; success","counters":[]},{"line":"     ; account_update_index","counters":[]},{"line":"     ; failure_status_tbl","counters":[]},{"line":"     } :","counters":[]},{"line":"      t ) : display =","counters":[]},{"line":"  let open Kimchi_backend.Pasta.Basic in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let f x =","counters":[]},{"line":"    Visualization.display_prefix_of_string","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Bigint256.to_hex_string (Fp.to_bigint x))","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let signed_amount_to_string (amt : Currency.Amount.Signed.t) =","counters":[]},{"line":"    let prefix = match amt.sgn with Sgn.Pos -> \"\" | Sgn.Neg -> \"-\" in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    prefix ^ Amount.to_string amt.magnitude","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"  in","counters":[]},{"line":"  { Mina_transaction_logic.Zkapp_command_logic.Local_state.stack_frame =","counters":[]},{"line":"      f (stack_frame :> Fp.t)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  ; call_stack = f (call_stack :> Fp.t)","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  ; transaction_commitment = f transaction_commitment","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; full_transaction_commitment = f full_transaction_commitment","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; token_id = Token_id.to_string token_id","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  ; excess = signed_amount_to_string excess","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; supply_increase = signed_amount_to_string supply_increase","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"  ; ledger =","counters":[]},{"line":"      Visualization.display_prefix_of_string","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      @@ Frozen_ledger_hash.to_base58_check ledger","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"  ; success","counters":[]},{"line":"  ; account_update_index = Mina_numbers.Index.to_int account_update_index","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"  ; failure_status_tbl =","counters":[]},{"line":"      Transaction_status.Failure.Collection.to_display failure_status_tbl","counters":[]},{"line":"      |> Transaction_status.Failure.Collection.Display.to_yojson","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      |> Yojson.Safe.to_string","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let dummy : unit -> t =","counters":[]},{"line":"  Memo.unit (fun () : t ->","counters":[{"col_start":10,"col_end":10,"count":1}]},{"line":"      { stack_frame = Stack_frame.Digest.create Stack_frame.empty","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":46,"col_end":46,"count":1}]},{"line":"      ; call_stack = Call_stack_digest.empty","counters":[]},{"line":"      ; transaction_commitment = Zkapp_command.Transaction_commitment.empty","counters":[]},{"line":"      ; full_transaction_commitment = Zkapp_command.Transaction_commitment.empty","counters":[]},{"line":"      ; token_id = Token_id.default","counters":[]},{"line":"      ; excess = Amount.(Signed.of_unsigned zero)","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"      ; supply_increase = Amount.(Signed.of_unsigned zero)","counters":[{"col_start":51,"col_end":51,"count":1}]},{"line":"      ; ledger = Frozen_ledger_hash.empty_hash","counters":[]},{"line":"      ; success = true","counters":[]},{"line":"      ; account_update_index = Mina_numbers.Index.zero","counters":[]},{"line":"      ; failure_status_tbl = []","counters":[]},{"line":"      } )","counters":[]},{"line":"","counters":[]},{"line":"let empty = dummy","counters":[]},{"line":"","counters":[]},{"line":"let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"  let%map ledger = Frozen_ledger_hash.gen","counters":[]},{"line":"  and excess = Amount.Signed.gen","counters":[]},{"line":"  and supply_increase = Amount.Signed.gen","counters":[]},{"line":"  and transaction_commitment = Impl.Field.Constant.gen","counters":[]},{"line":"  and stack_frame = Stack_frame.Digest.gen","counters":[]},{"line":"  and call_stack = Call_stack_digest.gen","counters":[]},{"line":"  and token_id = Token_id.gen","counters":[]},{"line":"  and success = Bool.quickcheck_generator","counters":[]},{"line":"  and account_update_index =","counters":[]},{"line":"    Mina_numbers.Index.gen","counters":[]},{"line":"    (*","counters":[]},{"line":"  and failure_status =","counters":[]},{"line":"    let%bind failure = Transaction_status.Failure.gen in","counters":[]},{"line":"    Quickcheck.Generator.of_list [ None; Some failure ]","counters":[]},{"line":"  *)","counters":[]},{"line":"  in","counters":[]},{"line":"  { Mina_transaction_logic.Zkapp_command_logic.Local_state.stack_frame","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; call_stack","counters":[]},{"line":"  ; transaction_commitment","counters":[]},{"line":"  ; full_transaction_commitment = transaction_commitment","counters":[]},{"line":"  ; token_id","counters":[]},{"line":"  ; ledger","counters":[]},{"line":"  ; excess","counters":[]},{"line":"  ; supply_increase","counters":[]},{"line":"  ; success","counters":[]},{"line":"  ; account_update_index","counters":[]},{"line":"  ; failure_status_tbl = []","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let to_input","counters":[]},{"line":"    ({ stack_frame","counters":[]},{"line":"     ; call_stack","counters":[]},{"line":"     ; transaction_commitment","counters":[]},{"line":"     ; full_transaction_commitment","counters":[]},{"line":"     ; token_id","counters":[]},{"line":"     ; excess","counters":[]},{"line":"     ; supply_increase","counters":[]},{"line":"     ; ledger","counters":[]},{"line":"     ; success","counters":[]},{"line":"     ; account_update_index","counters":[]},{"line":"     ; failure_status_tbl = _","counters":[]},{"line":"     } :","counters":[]},{"line":"      t ) =","counters":[]},{"line":"  let open Random_oracle.Input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":5}]},{"line":"  let open Pickles.Impls.Step in","counters":[]},{"line":"  Array.reduce_exn ~f:append","counters":[]},{"line":"    [| field (stack_frame :> Field.Constant.t)","counters":[{"col_start":11,"col_end":11,"count":5}]},{"line":"     ; field (call_stack :> Field.Constant.t)","counters":[{"col_start":11,"col_end":11,"count":5}]},{"line":"     ; field transaction_commitment","counters":[{"col_start":11,"col_end":11,"count":5}]},{"line":"     ; field full_transaction_commitment","counters":[{"col_start":11,"col_end":11,"count":5}]},{"line":"     ; Token_id.to_input token_id","counters":[{"col_start":23,"col_end":23,"count":5}]},{"line":"     ; Amount.Signed.to_input excess","counters":[{"col_start":28,"col_end":28,"count":5}]},{"line":"     ; Amount.Signed.to_input supply_increase","counters":[{"col_start":28,"col_end":28,"count":5}]},{"line":"     ; Ledger_hash.to_input ledger","counters":[{"col_start":26,"col_end":26,"count":5}]},{"line":"     ; Mina_numbers.Index.to_input account_update_index","counters":[{"col_start":33,"col_end":33,"count":5}]},{"line":"     ; packed (Mina_base.Util.field_of_bool success, 1)","counters":[{"col_start":12,"col_end":12,"count":5},{"col_start":42,"col_end":42,"count":5}]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  open Impl","counters":[]},{"line":"","counters":[]},{"line":"  include Mina_transaction_logic.Zkapp_command_logic.Local_state.Checked","counters":[]},{"line":"","counters":[]},{"line":"  let assert_equal (t1 : t) (t2 : t) =","counters":[]},{"line":"    let ( ! ) f x y = Impl.run_checked (f x y) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    let f eq f =","counters":[]},{"line":"      Impl.with_label (Core_kernel.Field.name f) (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          Core_kernel.Field.(eq (get f t1) (get f t2)) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    in","counters":[]},{"line":"    Mina_transaction_logic.Zkapp_command_logic.Local_state.Fields.iter","counters":[]},{"line":"      ~stack_frame:(f Stack_frame.Digest.Checked.Assert.equal)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      ~call_stack:(f Call_stack_digest.Checked.Assert.equal)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"      ~transaction_commitment:(f Field.Assert.equal)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ~full_transaction_commitment:(f Field.Assert.equal)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~token_id:(f Token_id.Checked.Assert.equal)","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ~excess:(f !Currency.Amount.Signed.Checked.assert_equal)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~supply_increase:(f !Currency.Amount.Signed.Checked.assert_equal)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~ledger:(f !Ledger_hash.assert_equal)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~success:(f Impl.Boolean.Assert.( = ))","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      ~account_update_index:(f !Mina_numbers.Index.Checked.Assert.equal)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      ~failure_status_tbl:(f (fun () () -> ()))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let equal' (t1 : t) (t2 : t) =","counters":[]},{"line":"    let ( ! ) f x y = Impl.run_checked (f x y) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    let f eq acc f = Core_kernel.Field.(eq (get f t1) (get f t2)) :: acc in","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"    Mina_transaction_logic.Zkapp_command_logic.Local_state.Fields.fold ~init:[]","counters":[]},{"line":"      ~stack_frame:(f Stack_frame.Digest.Checked.equal)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      ~call_stack:(f Call_stack_digest.Checked.equal)","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"      ~transaction_commitment:(f Field.equal)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      ~full_transaction_commitment:(f Field.equal)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~token_id:(f Token_id.Checked.equal)","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ~excess:(f !Currency.Amount.Signed.Checked.equal)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      ~supply_increase:(f !Currency.Amount.Signed.Checked.equal)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ~ledger:(f !Ledger_hash.equal_var) ~success:(f Impl.Boolean.equal)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      ~account_update_index:(f !Mina_numbers.Index.Checked.equal)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      ~failure_status_tbl:(f (fun () () -> Impl.Boolean.true_))","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ stack_frame","counters":[]},{"line":"       ; call_stack","counters":[]},{"line":"       ; transaction_commitment","counters":[]},{"line":"       ; full_transaction_commitment","counters":[]},{"line":"       ; token_id","counters":[]},{"line":"       ; excess","counters":[]},{"line":"       ; supply_increase","counters":[]},{"line":"       ; ledger","counters":[]},{"line":"       ; success","counters":[]},{"line":"       ; account_update_index","counters":[]},{"line":"       ; failure_status_tbl = _","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) =","counters":[]},{"line":"    (* failure_status is the unit value, no need to represent it *)","counters":[]},{"line":"    let open Random_oracle.Input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Snark_params.Tick.Field.Var in","counters":[]},{"line":"    Array.reduce_exn ~f:append","counters":[]},{"line":"      [| field (stack_frame :> t)","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"       ; field (call_stack :> t)","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"       ; field transaction_commitment","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"       ; field full_transaction_commitment","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"       ; Token_id.Checked.to_input token_id","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"       ; run_checked (Amount.Signed.Checked.to_input excess)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"       ; run_checked (Amount.Signed.Checked.to_input supply_increase)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"       ; Ledger_hash.var_to_input ledger","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"       ; Mina_numbers.Index.Checked.to_input account_update_index","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"       ; packed ((success :> t), 1)","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      |]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* there: map any failure status to the unit value in Checked","counters":[]},{"line":"   back: map the unit value in Checked to None in the value world","counters":[]},{"line":"   (an alternative would be to fail, since we intend never to do that,","counters":[]},{"line":"   and it would make debugging difficult if we ever did that)","counters":[]},{"line":"*)","counters":[]},{"line":"let failure_status_tbl_typ :","counters":[]},{"line":"    (unit, Transaction_status.Failure.Collection.t) Impl.Typ.t =","counters":[]},{"line":"  Impl.Typ.transport Impl.Typ.unit","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"    ~there:(fun _failure_status_tbl -> ())","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"    ~back:(fun () -> [])","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let typ : (Checked.t, t) Impl.Typ.t =","counters":[]},{"line":"  let open Mina_transaction_logic.Zkapp_command_logic.Local_state in","counters":[]},{"line":"  let open Impl in","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Stack_frame.Digest.typ","counters":[]},{"line":"    ; Call_stack_digest.typ","counters":[]},{"line":"    ; Field.typ","counters":[]},{"line":"    ; Field.typ","counters":[]},{"line":"    ; Token_id.typ","counters":[]},{"line":"    ; Amount.Signed.typ","counters":[]},{"line":"    ; Amount.Signed.typ","counters":[]},{"line":"    ; Ledger_hash.typ","counters":[]},{"line":"    ; Boolean.typ","counters":[]},{"line":"    ; Mina_numbers.Index.typ","counters":[]},{"line":"    ; failure_status_tbl_typ","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"    ~value_of_hlist:of_hlist","counters":[{"col_start":27,"col_end":27,"count":1}]}]}