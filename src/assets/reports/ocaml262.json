{"filename":"src/lib/pickles/ro.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Backend","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Import","counters":[]},{"line":"","counters":[]},{"line":"let bits_random_oracle =","counters":[]},{"line":"  let h = Digestif.blake2s 32 in","counters":[]},{"line":"  fun ~length s ->","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    Digestif.digest_string h s |> Digestif.to_raw_string h |> String.to_list","counters":[{"col_start":4,"col_end":4,"count":82},{"col_start":25,"col_end":25,"count":82},{"col_start":55,"col_end":55,"count":82},{"col_start":75,"col_end":75,"count":82}]},{"line":"    |> List.concat_map ~f:(fun c ->","counters":[{"col_start":21,"col_end":21,"count":82}]},{"line":"           let c = Char.to_int c in","counters":[{"col_start":11,"col_end":11,"count":2624}]},{"line":"           List.init 8 ~f:(fun i -> (c lsr i) land 1 = 1) )","counters":[{"col_start":11,"col_end":11,"count":2624},{"col_start":36,"col_end":36,"count":20992}]},{"line":"    |> fun a -> List.take a length","counters":[{"col_start":16,"col_end":16,"count":82}]},{"line":"","counters":[]},{"line":"let ro lab length f =","counters":[]},{"line":"  let r = ref 0 in","counters":[{"col_start":2,"col_end":2,"count":3}]},{"line":"  fun () ->","counters":[]},{"line":"    incr r ;","counters":[{"col_start":4,"col_end":4,"count":82}]},{"line":"    f (bits_random_oracle ~length (sprintf \"%s_%d\" lab !r))","counters":[{"col_start":4,"col_end":4,"count":82},{"col_start":24,"col_end":24,"count":82},{"col_start":41,"col_end":41,"count":82}]},{"line":"","counters":[]},{"line":"let tock = ro \"fq\" Tock.Field.size_in_bits Tock.Field.of_bits","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"","counters":[]},{"line":"let tick = ro \"fp\" Tick.Field.size_in_bits Tick.Field.of_bits","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"","counters":[]},{"line":"let chal = ro \"chal\" Challenge.Constant.length Challenge.Constant.of_bits","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"","counters":[]},{"line":"let scalar_chal () = Scalar_challenge.create (chal ())","counters":[{"col_start":21,"col_end":21,"count":31},{"col_start":49,"col_end":49,"count":31},{"col_start":53,"col_end":53,"count":2}]}]}