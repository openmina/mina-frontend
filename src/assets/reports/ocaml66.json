{"filename":"src/lib/state_or_error/state_or_error.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Make3 (State : State_or_error_intf.State_intf2) :","counters":[]},{"line":"  State_or_error_intf.S3 with type ('a, 'b) state = ('a, 'b) State.t = struct","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type ('a, 'b) state = ('a, 'b) State.t","counters":[]},{"line":"","counters":[]},{"line":"    type ('c, 'a, 'b) t = ('a, 'b) state -> ('c * ('a, 'b) state) Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"    let return : type a b c. c -> (c, a, b) t = fun a s -> Ok (a, s)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"    let bind m ~f s =","counters":[]},{"line":"      let open Or_error.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind a, s' = m s in","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      f a s'","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let map = `Define_using_bind","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T","counters":[]},{"line":"  include Monad.Make3 (T)","counters":[]},{"line":"","counters":[]},{"line":"  let get = function s -> Ok (s, s)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let put s = function _ -> Ok ((), s)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let run_state t ~state = t state","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"  let error_if b ~message ~value =","counters":[]},{"line":"    if b then fun _ -> Or_error.error_string message else return value","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module S3_to_S2 (X : State_or_error_intf.S3) :","counters":[]},{"line":"  State_or_error_intf.S2","counters":[]},{"line":"    with type ('a, 'b) t := ('a, 'b, unit) X.t","counters":[]},{"line":"     and type 'a state := ('a, unit) X.state = struct","counters":[]},{"line":"  include (","counters":[]},{"line":"    X :","counters":[]},{"line":"      State_or_error_intf.S3","counters":[]},{"line":"        with type ('a, 'b, 'e) t := ('a, 'b, 'e) X.t","counters":[]},{"line":"         and type ('b, 'e) state := ('b, 'e) X.state )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module S2_to_S (X : State_or_error_intf.S2) :","counters":[]},{"line":"  State_or_error_intf.S","counters":[]},{"line":"    with type 'a t := ('a, unit) X.t","counters":[]},{"line":"     and type state := unit X.state = struct","counters":[]},{"line":"  include (","counters":[]},{"line":"    X :","counters":[]},{"line":"      State_or_error_intf.S2","counters":[]},{"line":"        with type ('a, 'b) t := ('a, 'b) X.t","counters":[]},{"line":"         and type 'a state := 'a X.state )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make2 (State : State_or_error_intf.State_intf1) :","counters":[]},{"line":"  State_or_error_intf.S2 = struct","counters":[]},{"line":"  module M = Make3 (struct","counters":[]},{"line":"    type ('a, 'b) t = 'a State.t","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  type ('a, 'b) t = ('a, 'b, unit) M.t","counters":[]},{"line":"","counters":[]},{"line":"  type 'a state = ('a, unit) M.state","counters":[]},{"line":"","counters":[]},{"line":"  include S3_to_S2 (M)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (State : State_or_error_intf.State_intf) : State_or_error_intf.S =","counters":[]},{"line":"struct","counters":[]},{"line":"  module M = Make2 (struct","counters":[]},{"line":"    type 'a t = State.t","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  type 'a t = ('a, unit) M.t","counters":[]},{"line":"","counters":[]},{"line":"  type state = unit M.state","counters":[]},{"line":"","counters":[]},{"line":"  include S2_to_S (M)","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}