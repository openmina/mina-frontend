{"filename":"src/lib/mina_base/signed_command_payload.ml","lines":[{"line":"(* user_command_payload.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module Memo = Signed_command_memo","counters":[]},{"line":"module Account_nonce = Mina_numbers.Account_nonce","counters":[]},{"line":"module Global_slot = Mina_numbers.Global_slot","counters":[]},{"line":"","counters":[]},{"line":"(* This represents the random oracle input corresponding to the old form of the token","counters":[]},{"line":"   ID, which was a 64-bit integer. The default token id was the number 1.","counters":[]},{"line":"","counters":[]},{"line":"   The corresponding random oracle input is still needed for signing non-snapp","counters":[]},{"line":"   transactions to maintain compatibility with the old transaction format.","counters":[]},{"line":"*)","counters":[]},{"line":"module Legacy_token_id = struct","counters":[]},{"line":"  let default : (Field.t, bool) Random_oracle_input.Legacy.t =","counters":[]},{"line":"    let one = true :: List.init 63 ~f:(fun _ -> false) in","counters":[{"col_start":30,"col_end":30,"count":1},{"col_start":48,"col_end":48,"count":63}]},{"line":"    Random_oracle_input.Legacy.bitstring one","counters":[{"col_start":39,"col_end":39,"count":1}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  let default_checked : (Field.Var.t, Boolean.var) Random_oracle_input.Legacy.t","counters":[]},{"line":"      =","counters":[]},{"line":"    { field_elements = Array.map default.field_elements ~f:Field.Var.constant","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"    ; bitstrings =","counters":[]},{"line":"        Array.map default.bitstrings ~f:(List.map ~f:Boolean.var_of_value)","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Common = struct","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type ('fee, 'public_key, 'nonce, 'global_slot, 'memo) t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":62,"col_end":62,"count":8}]},{"line":"              ( 'fee","counters":[]},{"line":"              , 'public_key","counters":[]},{"line":"              , 'nonce","counters":[]},{"line":"              , 'global_slot","counters":[]},{"line":"              , 'memo )","counters":[]},{"line":"              Mina_wire_types.Mina_base.Signed_command_payload.Common.Poly.V2.t =","counters":[]},{"line":"          { fee : 'fee","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          ; fee_payer_pk : 'public_key","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; nonce : 'nonce","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"          ; valid_until : 'global_slot","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; memo : 'memo","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving compare, equal, sexp, hash, yojson, hlist]","counters":[{"col_start":61,"col_end":61,"count":5}]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"        type ('fee, 'public_key, 'token_id, 'nonce, 'global_slot, 'memo) t =","counters":[{"col_start":8,"col_end":8,"count":4},{"col_start":73,"col_end":73,"count":18}]},{"line":"          { fee : 'fee","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"          ; fee_token : 'token_id","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          ; fee_payer_pk : 'public_key","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; nonce : 'nonce","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"          ; valid_until : 'global_slot","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; memo : 'memo","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving compare, equal, sexp, hash, yojson, hlist]","counters":[{"col_start":61,"col_end":61,"count":17}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Currency.Fee.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Account_nonce.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Global_slot.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Memo.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Poly.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":11,"col_end":11,"count":2}]},{"line":"        ( Currency.Fee.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Token_id.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Account_nonce.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Global_slot.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Memo.Stable.V1.t )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        Poly.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":52,"col_end":52,"count":15}]},{"line":"","counters":[]},{"line":"      let to_latest _ = failwith \"Not implemented\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input_legacy ({ fee; fee_payer_pk; nonce; valid_until; memo } : t) =","counters":[]},{"line":"    let bitstring = Random_oracle.Input.Legacy.bitstring in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Array.reduce_exn ~f:Random_oracle.Input.Legacy.append","counters":[]},{"line":"      [| Currency.Fee.to_input_legacy fee","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"       ; Legacy_token_id.default","counters":[]},{"line":"       ; Public_key.Compressed.to_input_legacy fee_payer_pk","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"       ; Account_nonce.to_input_legacy nonce","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"       ; Global_slot.to_input_legacy valid_until","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"       ; bitstring (Memo.to_bits memo)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      |]","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let%map fee = Currency.Fee.gen","counters":[]},{"line":"    and fee_payer_pk = Public_key.Compressed.gen","counters":[]},{"line":"    and nonce = Account_nonce.gen","counters":[]},{"line":"    and valid_until = Global_slot.gen","counters":[]},{"line":"    and memo =","counters":[]},{"line":"      let%bind is_digest = Bool.quickcheck_generator in","counters":[]},{"line":"      if is_digest then","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        String.gen_with_length Memo.max_digestible_string_length","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          Char.quickcheck_generator","counters":[]},{"line":"        >>| Memo.create_by_digesting_string_exn","counters":[]},{"line":"      else","counters":[]},{"line":"        String.gen_with_length Memo.max_input_length Char.quickcheck_generator","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        >>| Memo.create_from_string_exn","counters":[]},{"line":"    in","counters":[]},{"line":"    Poly.{ fee; fee_payer_pk; nonce; valid_until; memo }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var =","counters":[]},{"line":"    ( Currency.Fee.var","counters":[]},{"line":"    , Public_key.Compressed.var","counters":[]},{"line":"    , Account_nonce.Checked.t","counters":[]},{"line":"    , Global_slot.Checked.t","counters":[]},{"line":"    , Memo.Checked.t )","counters":[]},{"line":"    Poly.t","counters":[]},{"line":"","counters":[]},{"line":"  let typ =","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"      [ Currency.Fee.typ","counters":[]},{"line":"      ; Public_key.Compressed.typ","counters":[]},{"line":"      ; Account_nonce.typ","counters":[]},{"line":"      ; Global_slot.typ","counters":[]},{"line":"      ; Memo.typ","counters":[]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"      ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    let constant ({ fee; fee_payer_pk; nonce; valid_until; memo } : t) : var =","counters":[]},{"line":"      { fee = Currency.Fee.var_of_t fee","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      ; fee_payer_pk = Public_key.Compressed.var_of_t fee_payer_pk","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"      ; nonce = Account_nonce.Checked.constant nonce","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"      ; memo = Memo.Checked.constant memo","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; valid_until = Global_slot.Checked.constant valid_until","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let to_input_legacy ({ fee; fee_payer_pk; nonce; valid_until; memo } : var)","counters":[]},{"line":"        =","counters":[]},{"line":"      let%map nonce = Account_nonce.Checked.to_input_legacy nonce","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      and valid_until = Global_slot.Checked.to_input_legacy valid_until","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"      and fee = Currency.Fee.var_to_input_legacy fee in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"      let fee_token = Legacy_token_id.default_checked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Array.reduce_exn ~f:Random_oracle.Input.Legacy.append","counters":[]},{"line":"        [| fee","counters":[]},{"line":"         ; fee_token","counters":[]},{"line":"         ; Public_key.Compressed.Checked.to_input_legacy fee_payer_pk","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"         ; nonce","counters":[]},{"line":"         ; valid_until","counters":[]},{"line":"         ; Random_oracle.Input.Legacy.bitstring","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"             (Array.to_list (memo :> Boolean.var array))","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        |]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Body = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Signed_command_payload.Body.V2.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        | Payment of Payment_payload.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        | Stake_delegation of Stake_delegation.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      [@@deriving sexp, compare, equal, sexp, hash, yojson]","counters":[{"col_start":58,"col_end":58,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":11,"col_end":11,"count":4}]},{"line":"        | Payment of Payment_payload.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        | Stake_delegation of Stake_delegation.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      (* omitting token commands, none were ever created","counters":[]},{"line":"         such omission doesn't affect serialization/Base58Check of payments, delegations","counters":[]},{"line":"      *)","counters":[]},{"line":"      [@@deriving sexp, compare, equal, sexp, hash, yojson]","counters":[{"col_start":58,"col_end":58,"count":15}]},{"line":"","counters":[]},{"line":"      let to_latest _ = failwith \"Not implemented\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  module Tag = Transaction_union_tag","counters":[]},{"line":"","counters":[]},{"line":"  let gen ?source_pk ~max_amount =","counters":[]},{"line":"    let open Quickcheck.Generator in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let stake_delegation_gen =","counters":[]},{"line":"      match source_pk with","counters":[]},{"line":"      | Some source_pk ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Stake_delegation.gen_with_delegator source_pk","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Stake_delegation.gen","counters":[]},{"line":"    in","counters":[]},{"line":"    map","counters":[]},{"line":"      (variant2","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"         (Payment_payload.gen ?source_pk ~max_amount)","counters":[]},{"line":"         stake_delegation_gen )","counters":[]},{"line":"      ~f:(function `A p -> Payment p | `B d -> Stake_delegation d)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let source_pk (t : t) =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Payment payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        payload.source_pk","counters":[]},{"line":"    | Stake_delegation payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Stake_delegation.source_pk payload","counters":[]},{"line":"","counters":[]},{"line":"  let receiver_pk (t : t) =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Payment payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        payload.receiver_pk","counters":[]},{"line":"    | Stake_delegation payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Stake_delegation.receiver_pk payload","counters":[]},{"line":"","counters":[]},{"line":"  let token (_ : t) = Token_id.default","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let source t =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Payment payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Account_id.create payload.source_pk (token t)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"    | Stake_delegation payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Stake_delegation.source payload","counters":[]},{"line":"","counters":[]},{"line":"  let receiver t =","counters":[]},{"line":"    match t with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Payment payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Account_id.create payload.receiver_pk Token_id.default","counters":[]},{"line":"    | Stake_delegation payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Stake_delegation.receiver payload","counters":[]},{"line":"","counters":[]},{"line":"  let tag = function","counters":[]},{"line":"    | Payment _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transaction_union_tag.Payment","counters":[]},{"line":"    | Stake_delegation _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Transaction_union_tag.Stake_delegation","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type ('common, 'body) t =","counters":[{"col_start":6,"col_end":6,"count":6},{"col_start":28,"col_end":28,"count":10}]},{"line":"            ( 'common","counters":[]},{"line":"            , 'body )","counters":[]},{"line":"            Mina_wire_types.Mina_base.Signed_command_payload.Poly.V1.t =","counters":[]},{"line":"        { common : 'common; body : 'body }","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      [@@deriving equal, sexp, hash, yojson, compare, hlist]","counters":[{"col_start":59,"col_end":59,"count":17}]},{"line":"","counters":[]},{"line":"      let of_latest common_latest body_latest { common; body } =","counters":[]},{"line":"        let open Result.Let_syntax in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let%map common = common_latest common and body = body_latest body in","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"        { common; body }","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t = (Common.Stable.V2.t, Body.Stable.V2.t) Poly.Stable.V1.t","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1},{"col_start":13,"col_end":13,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"    type t = (Common.Stable.V1.t, Body.Stable.V1.t) Poly.Stable.V1.t","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":9,"col_end":9,"count":2},{"col_start":13,"col_end":13,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    [@@deriving compare, equal, sexp, hash, yojson]","counters":[{"col_start":50,"col_end":50,"count":15}]},{"line":"","counters":[]},{"line":"    (* don't need to coerce old transactions to newer version *)","counters":[]},{"line":"    let to_latest _ = failwith \"Not implemented\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create ~fee ~fee_payer_pk ~nonce ~valid_until ~memo ~body : t =","counters":[]},{"line":"  { common =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      { fee","counters":[]},{"line":"      ; fee_payer_pk","counters":[]},{"line":"      ; nonce","counters":[]},{"line":"      ; valid_until = Option.value valid_until ~default:Global_slot.max_value","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"      ; memo","counters":[]},{"line":"      }","counters":[]},{"line":"  ; body","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let fee (t : t) = t.common.fee","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let fee_token (_ : t) = Token_id.default","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"let fee_payer_pk (t : t) = t.common.fee_payer_pk","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let fee_payer (t : t) = Account_id.create t.common.fee_payer_pk Token_id.default","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"let nonce (t : t) = t.common.nonce","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let valid_until (t : t) = t.common.valid_until","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let memo (t : t) = t.common.memo","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let body (t : t) = t.body","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let source_pk (t : t) = Body.source_pk t.body","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"let source (t : t) = Body.source t.body","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let receiver_pk (t : t) = Body.receiver_pk t.body","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let receiver (t : t) = Body.receiver t.body","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"let token (t : t) = Body.token t.body","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let tag (t : t) = Body.tag t.body","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"let amount (t : t) =","counters":[]},{"line":"  match t.body with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Payment payload ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Some payload.Payment_payload.Poly.amount","counters":[]},{"line":"  | Stake_delegation _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      None","counters":[]},{"line":"","counters":[]},{"line":"let fee_excess (t : t) =","counters":[]},{"line":"  Fee_excess.of_single (fee_token t, Currency.Fee.Signed.of_unsigned (fee t))","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"let accounts_accessed (t : t) (status : Transaction_status.t) =","counters":[]},{"line":"  match status with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Applied ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ fee_payer t; source t; receiver t ]","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  | Failed _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ fee_payer t ]","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"let dummy : t =","counters":[]},{"line":"  { common =","counters":[]},{"line":"      { fee = Currency.Fee.zero","counters":[]},{"line":"      ; fee_payer_pk = Public_key.Compressed.empty","counters":[]},{"line":"      ; nonce = Account_nonce.zero","counters":[]},{"line":"      ; valid_until = Global_slot.max_value","counters":[]},{"line":"      ; memo = Memo.dummy","counters":[]},{"line":"      }","counters":[]},{"line":"  ; body = Payment Payment_payload.dummy","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"  let%bind common = Common.gen in","counters":[]},{"line":"  let max_amount =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Currency.Amount.(sub max_int (of_fee common.fee))","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"    |> Option.value_exn ?here:None ?error:None ?message:None","counters":[]},{"line":"  in","counters":[]},{"line":"  let%map body = Body.gen ~source_pk:common.fee_payer_pk ~max_amount in","counters":[]},{"line":"  Poly.{ common; body }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(** This module defines a weight for each payload component *)","counters":[]},{"line":"module Weight = struct","counters":[]},{"line":"  let payment (_payment_payload : Payment_payload.t) : int = 1","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"  let stake_delegation (_stake_delegation : Stake_delegation.t) : int = 1","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"  let of_body : Body.t -> int = function","counters":[]},{"line":"    | Payment payment_payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        payment payment_payload","counters":[]},{"line":"    | Stake_delegation stake_delegation_payload ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        stake_delegation stake_delegation_payload","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let weight (signed_command_payload : t) : int =","counters":[]},{"line":"  body signed_command_payload |> Weight.of_body","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":5,"col_end":5,"count":0},{"col_start":46,"col_end":46,"count":1}]}]}