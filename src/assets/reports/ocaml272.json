{"filename":"src/lib/rocksdb/database.ml","lines":[{"line":"(* rocksdb.ml -- expose RocksDB operations for Coda *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"type t = { uuid : Uuid.Stable.V1.t; db : (Rocks.t[@sexp.opaque]) }","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"[@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"let create directory =","counters":[]},{"line":"  let opts = Rocks.Options.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Rocks.Options.set_create_if_missing opts true ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Rocks.Options.set_prefix_extractor opts","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Rocks.Options.SliceTransform.Noop.create_no_gc ()) ;","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"  { uuid = Uuid_unix.create (); db = Rocks.open_db ~opts directory }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"let create_checkpoint t dir =","counters":[]},{"line":"  Rocks.checkpoint_create t.db ~dir ?log_size_for_flush:None () ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  create dir","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let make_checkpoint t dir =","counters":[]},{"line":"  Rocks.checkpoint_create t.db ~dir ?log_size_for_flush:None ()","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let get_uuid t = t.uuid","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let close t = Rocks.close t.db","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let get t ~(key : Bigstring.t) : Bigstring.t option =","counters":[]},{"line":"  Rocks.get ?pos:None ?len:None ?opts:None t.db key","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let get_batch t ~(keys : Bigstring.t list) : Bigstring.t option list =","counters":[]},{"line":"  Rocks.multi_get t.db keys","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let set t ~(key : Bigstring.t) ~(data : Bigstring.t) : unit =","counters":[]},{"line":"  Rocks.put ?key_pos:None ?key_len:None ?value_pos:None ?value_len:None","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ?opts:None t.db key data","counters":[]},{"line":"","counters":[]},{"line":"let set_batch t ?(remove_keys = [])","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    ~(key_data_pairs : (Bigstring.t * Bigstring.t) list) : unit =","counters":[]},{"line":"  let batch = Rocks.WriteBatch.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (* write to batch *)","counters":[]},{"line":"  List.iter key_data_pairs ~f:(fun (key, data) ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Rocks.WriteBatch.put batch key data ) ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  (* Delete any key pairs *)","counters":[]},{"line":"  List.iter remove_keys ~f:(fun key -> Rocks.WriteBatch.delete batch key) ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"  (* commit batch *)","counters":[]},{"line":"  Rocks.write t.db batch","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Batch = struct","counters":[]},{"line":"  type t = Rocks.WriteBatch.t","counters":[]},{"line":"","counters":[]},{"line":"  let remove t ~key = Rocks.WriteBatch.delete t key","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let set t ~key ~data = Rocks.WriteBatch.put t key data","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let with_batch t ~f =","counters":[]},{"line":"    let batch = Rocks.WriteBatch.create () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let result = f batch in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Rocks.write t.db batch ; result","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let copy _t = failwith \"copy: not implemented\"","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let remove t ~(key : Bigstring.t) : unit =","counters":[]},{"line":"  Rocks.delete ?pos:None ?len:None ?opts:None t.db key","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let to_alist t : (Bigstring.t * Bigstring.t) list =","counters":[]},{"line":"  let iterator = Rocks.Iterator.create t.db in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Rocks.Iterator.seek_to_last iterator ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (* iterate backwards and cons, to build list sorted by key *)","counters":[]},{"line":"  let copy t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let tlen = Bigstring.length t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let new_t = Bigstring.create tlen in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Bigstring.blit ~src:t ~dst:new_t ~src_pos:0 ~dst_pos:0 ~len:tlen ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    new_t","counters":[]},{"line":"  in","counters":[]},{"line":"  let rec loop accum =","counters":[]},{"line":"    if Rocks.Iterator.is_valid iterator then (","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      let key = copy (Rocks.Iterator.get_key iterator) in","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"      let value = copy (Rocks.Iterator.get_value iterator) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      Rocks.Iterator.prev iterator ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      loop ((key, value) :: accum) )","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    else accum","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"  in","counters":[]},{"line":"  loop []","counters":[]},{"line":"","counters":[]},{"line":"let to_bigstring = Bigstring.of_string","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"get_batch\" =","counters":[]},{"line":"  Async.Thread_safe.block_on_async_exn (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      File_system.with_temp_dir \"/tmp/mina-rocksdb-test\" ~f:(fun db_dir ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let db = create db_dir in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let[@warning \"-8\"] [ key1; key2; key3 ] =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.map ~f:Bigstring.of_string [ \"a\"; \"b\"; \"c\" ]","counters":[]},{"line":"          in","counters":[]},{"line":"          let data = Bigstring.of_string \"test\" in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          set db ~key:key1 ~data ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          set db ~key:key3 ~data ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let[@warning \"-8\"] [ res1; res2; res3 ] =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            get_batch db ~keys:[ key1; key2; key3 ]","counters":[]},{"line":"          in","counters":[]},{"line":"          assert ([%equal: Bigstring.t option] res1 (Some data)) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          assert ([%equal: Bigstring.t option] res2 None) ;","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          assert ([%equal: Bigstring.t option] res3 (Some data)) ;","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          Async.Deferred.unit ) )","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"to_alist (of_alist l) = l\" =","counters":[]},{"line":"  Async.Thread_safe.block_on_async_exn","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  @@ fun () ->","counters":[]},{"line":"  Async.Quickcheck.async_test ~trials:20","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Quickcheck.Generator.(","counters":[]},{"line":"      tuple2 String.quickcheck_generator String.quickcheck_generator |> list)","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"    ~f:(fun kvs ->","counters":[]},{"line":"      match Hashtbl.of_alist (module String) kvs with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Duplicate_key _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Async.Deferred.unit","counters":[]},{"line":"      | `Ok _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          File_system.with_temp_dir \"/tmp/mina-rocksdb-test\" ~f:(fun db_dir ->","counters":[]},{"line":"              let sorted =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort kvs ~compare:[%compare: string * string]","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"                |> List.map ~f:(fun (k, v) -> (to_bigstring k, to_bigstring v))","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"              in","counters":[]},{"line":"              let db = create db_dir in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              List.iter sorted ~f:(fun (key, data) -> set db ~key ~data) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"              let alist =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort (to_alist db)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                  ~compare:[%compare: Bigstring.t * Bigstring.t]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"              in","counters":[]},{"line":"              [%test_result: (Bigstring.t * Bigstring.t) list] ~expect:sorted","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"                alist ;","counters":[]},{"line":"              close db ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Async.Deferred.unit ) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"checkpoint read\" =","counters":[]},{"line":"  let open Async in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Thread_safe.block_on_async_exn","counters":[]},{"line":"  @@ fun () ->","counters":[]},{"line":"  Quickcheck.async_test ~trials:20","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Quickcheck.Generator.(","counters":[]},{"line":"      list @@ tuple2 String.quickcheck_generator String.quickcheck_generator)","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"    ~f:(fun kvs ->","counters":[]},{"line":"      match Hashtbl.of_alist (module String) kvs with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Duplicate_key _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Deferred.unit","counters":[]},{"line":"      | `Ok db_hashtbl -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let cp_hashtbl = Hashtbl.copy db_hashtbl in","counters":[]},{"line":"          let db_dir = Filename.temp_dir \"test_db\" \"\" in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let cp_dir =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Filename.temp_dir_name ^/ \"test_cp\"","counters":[]},{"line":"            ^ String.init 16 ~f:(fun _ -> (Int.to_string (Random.int 10)).[0])","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"          in","counters":[]},{"line":"          let db = create db_dir in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Hashtbl.iteri db_hashtbl ~f:(fun ~key ~data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              set db ~key:(to_bigstring key) ~data:(to_bigstring data) ) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          let cp = create_checkpoint db cp_dir in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          match","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ( Hashtbl.add db_hashtbl ~key:\"db_key\" ~data:\"db_data\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"            , Hashtbl.add cp_hashtbl ~key:\"cp_key\" ~data:\"cp_data\" )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          with","counters":[]},{"line":"          | `Ok, `Ok ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              set db ~key:(to_bigstring \"db_key\") ~data:(to_bigstring \"db_data\") ;","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"              set cp ~key:(to_bigstring \"cp_key\") ~data:(to_bigstring \"cp_data\") ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"              let db_sorted =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                  (Hashtbl.to_alist db_hashtbl)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                  ~compare:[%compare: string * string]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                |> List.map ~f:(fun (k, v) -> (to_bigstring k, to_bigstring v))","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"              in","counters":[]},{"line":"              let cp_sorted =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                  (Hashtbl.to_alist cp_hashtbl)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                  ~compare:[%compare: string * string]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"                |> List.map ~f:(fun (k, v) -> (to_bigstring k, to_bigstring v))","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"              in","counters":[]},{"line":"              let db_alist =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort (to_alist db)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                  ~compare:[%compare: Bigstring.t * Bigstring.t]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"              in","counters":[]},{"line":"              let cp_alist =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.sort (to_alist cp)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                  ~compare:[%compare: Bigstring.t * Bigstring.t]","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"              in","counters":[]},{"line":"              [%test_result: (Bigstring.t * Bigstring.t) list] ~expect:db_sorted","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"                db_alist ;","counters":[]},{"line":"              [%test_result: (Bigstring.t * Bigstring.t) list] ~expect:cp_sorted","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"                cp_alist ;","counters":[]},{"line":"              close db ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              close cp ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Deferred.unit","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Deferred.unit ) )","counters":[{"col_start":30,"col_end":30,"count":2}]}]}