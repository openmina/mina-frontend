{"filename":"src/lib/cache_lib/impl.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type Inputs_intf = sig","counters":[]},{"line":"  val handle_unconsumed_cache_item :","counters":[]},{"line":"    logger:Logger.t -> cache_name:string -> unit","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Inputs : Inputs_intf) : Intf.Main.S = struct","counters":[]},{"line":"  module rec Cache : sig","counters":[]},{"line":"    include","counters":[]},{"line":"      Intf.Cache.S with type ('t, 'cache_t) cached := ('t, 'cache_t) Cached.t","counters":[]},{"line":"","counters":[]},{"line":"    val logger : _ t -> Logger.t","counters":[]},{"line":"","counters":[]},{"line":"    val remove :","counters":[]},{"line":"      'elt t -> [ `Consumed | `Unconsumed | `Failure ] -> 'elt -> unit","counters":[]},{"line":"  end = struct","counters":[]},{"line":"    type 'a t =","counters":[]},{"line":"      { name : string","counters":[]},{"line":"      ; on_add : 'a -> unit","counters":[]},{"line":"      ; on_remove : [ `Consumed | `Unconsumed | `Failure ] -> 'a -> unit","counters":[]},{"line":"      ; element_to_string : 'a -> string","counters":[]},{"line":"      ; set : ('a, 'a Intf.final_state) Hashtbl.t","counters":[]},{"line":"      ; logger : Logger.t","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let name { name; _ } = name","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"    let logger { logger; _ } = logger","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"    let create (type elt) ~name ~logger ~on_add ~on_remove ~element_to_string","counters":[]},{"line":"        (module Elt : Hashtbl.Key_plain with type t = elt) : elt t =","counters":[]},{"line":"      let set = Hashtbl.create ~growth_allowed:true ?size:None (module Elt) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.extend logger [ (\"cache\", `String name) ] in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      { name; on_add; on_remove; element_to_string; set; logger }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let final_state t x = Hashtbl.find t.set x","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"    let register_exn t x =","counters":[]},{"line":"      let final_state = Ivar.create () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Hashtbl.add_exn t.set ~key:x ~data:final_state ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      t.on_add x ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Cached.create t x final_state","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let element_to_string t = t.element_to_string","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"    let mem t x = Hashtbl.mem t.set x","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"    let remove t reason x = Hashtbl.remove t.set x ; t.on_remove reason x","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"    let to_list t = Hashtbl.keys t.set","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  and Cached : sig","counters":[]},{"line":"    include Intf.Cached.S","counters":[]},{"line":"","counters":[]},{"line":"    val create : 'elt Cache.t -> 'elt -> 'elt Intf.final_state -> ('elt, 'elt) t","counters":[]},{"line":"  end = struct","counters":[]},{"line":"    type (_, _) t =","counters":[]},{"line":"      | Base :","counters":[]},{"line":"          { data : 'a","counters":[]},{"line":"          ; cache : 'a Cache.t","counters":[]},{"line":"          ; mutable transformed : bool","counters":[]},{"line":"          ; final_state : 'a Intf.final_state","counters":[]},{"line":"          }","counters":[]},{"line":"          -> ('a, 'a) t","counters":[]},{"line":"      | Derivative :","counters":[]},{"line":"          { original : 'a","counters":[]},{"line":"          ; mutant : 'b","counters":[]},{"line":"          ; cache : 'a Cache.t","counters":[]},{"line":"          ; mutable transformed : bool","counters":[]},{"line":"          ; final_state : 'a Intf.final_state","counters":[]},{"line":"          }","counters":[]},{"line":"          -> ('b, 'a) t","counters":[]},{"line":"      | Pure : 'a -> ('a, _) t","counters":[]},{"line":"","counters":[]},{"line":"    let pure x = Pure x","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let is_pure : type a b. (a, b) t -> bool = function","counters":[]},{"line":"      | Base _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"      | Derivative _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          true","counters":[]},{"line":"","counters":[]},{"line":"    let cache : type a b. (a, b) t -> b Cache.t = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.cache","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.cache","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot access cache of pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let value : type a b. (a, b) t -> a = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.data","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.mutant","counters":[]},{"line":"      | Pure x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x","counters":[]},{"line":"","counters":[]},{"line":"    let original : type a b. (a, b) t -> b = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.data","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.original","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot access original of pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let final_state : type a b. (a, b) t -> b Intf.final_state = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.final_state","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.final_state","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot access consumed state of pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let was_consumed : type a b. (a, b) t -> bool = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ivar.is_full x.final_state || x.transformed","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ivar.is_full x.final_state || x.transformed","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"","counters":[]},{"line":"    let was_finalized : type a b. (a, b) t -> bool = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ivar.is_full x.final_state","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ivar.is_full x.final_state","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          false","counters":[]},{"line":"","counters":[]},{"line":"    let mark_failed : type a b. (a, b) t -> unit = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Ivar.is_full x.final_state then","counters":[]},{"line":"            [%log' error (Logger.create ())] \"Ivar.fill bug is here CCC!\" ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          Ivar.fill x.final_state `Failed","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Ivar.is_full x.final_state then","counters":[]},{"line":"            [%log' error (Logger.create ())] \"Ivar.fill bug is here DDD!\" ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          Ivar.fill x.final_state `Failed","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot set consumed state of pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let mark_success : type a b. (a, b) t -> unit = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Ivar.is_full x.final_state then","counters":[]},{"line":"            [%log' error (Logger.create ())] \"Ivar.fill bug is here EEE!\" ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          Ivar.fill x.final_state (`Success x.data)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if Ivar.is_full x.final_state then","counters":[]},{"line":"            [%log' error (Logger.create ())] \"Ivar.fill bug is here FFF!\" ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          Ivar.fill x.final_state (`Success x.original)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot set consumed state of pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let attach_finalizer t =","counters":[]},{"line":"      Gc.Expert.add_finalizer (Heap_block.create_exn t) (fun block ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          let t = Heap_block.value block in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          if not (was_consumed t) then (","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"            let cache = cache t in","counters":[]},{"line":"            Cache.remove cache `Unconsumed (original t) ;","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"            Inputs.handle_unconsumed_cache_item ~logger:(Cache.logger cache)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"              ~cache_name:(Cache.name cache) ) ) ;","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let create cache data final_state =","counters":[]},{"line":"      attach_finalizer (Base { data; cache; transformed = false; final_state })","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let assert_not_consumed t msg =","counters":[]},{"line":"      let open Error in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if was_consumed t then","counters":[]},{"line":"        raise","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (createf \"%s: %s\" msg","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             (Cache.element_to_string (cache t) (original t)) )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"    let assert_not_finalized t msg =","counters":[]},{"line":"      let open Error in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      if was_finalized t then","counters":[]},{"line":"        raise","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (createf \"%s: %s\" msg","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             (Cache.element_to_string (cache t) (original t)) )","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"    let peek (type a b) (t : (a, b) t) : a =","counters":[]},{"line":"      assert_not_finalized t \"cannot peek at finalized Cached.t\" ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      value t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let mark_transformed : type a b. (a, b) t -> unit = function","counters":[]},{"line":"      | Base x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.transformed <- true","counters":[]},{"line":"      | Derivative x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x.transformed <- true","counters":[]},{"line":"      | Pure _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"cannot set transformed status for pure Cached.t\"","counters":[]},{"line":"","counters":[]},{"line":"    let transform (type a b) (t : (a, b) t) ~(f : a -> 'c) : ('c, b) t =","counters":[]},{"line":"      assert_not_consumed t \"cannot consume Cached.t twice\" ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      mark_transformed t ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      attach_finalizer","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Derivative","counters":[]},{"line":"           { original = original t","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"           ; mutant = f (value t)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"           ; cache = cache t","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"           ; transformed = false","counters":[]},{"line":"           ; final_state = final_state t","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"           } )","counters":[]},{"line":"","counters":[]},{"line":"    let invalidate_with_failure (type a b) (t : (a, b) t) : a =","counters":[]},{"line":"      assert_not_finalized t \"Cached item has already been finalized\" ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      mark_failed t ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Cache.remove (cache t) `Failure (original t) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      value t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let invalidate_with_success (type a b) (t : (a, b) t) : a =","counters":[]},{"line":"      assert_not_finalized t \"Cached item has already been finalized\" ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      mark_success t ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Cache.remove (cache t) `Consumed (original t) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      value t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let sequence_deferred (type a b) (t : (a Deferred.t, b) t) :","counters":[]},{"line":"        (a, b) t Deferred.t =","counters":[]},{"line":"      let open Deferred.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%map x = peek t in","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"      transform t ~f:(Fn.const x)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"    let sequence_result (type a b) (t : ((a, 'e) Result.t, b) t) :","counters":[]},{"line":"        ((a, b) t, 'e) Result.t =","counters":[]},{"line":"      match peek t with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Ok x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (transform t ~f:(Fn.const x))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      | Error err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log' error (Cache.logger (cache t))]","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"            \"Cached.sequence_result called on an already consumed Cached.t\" ;","counters":[]},{"line":"          ignore (invalidate_with_failure t : (a, 'e) Result.t) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          Error err","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Transmuter_cache :","counters":[]},{"line":"    Intf.Transmuter_cache.F","counters":[]},{"line":"      with module Cached := Cached","counters":[]},{"line":"       and module Cache := Cache = struct","counters":[]},{"line":"    module Make","counters":[]},{"line":"        (Transmuter : Intf.Transmuter.S)","counters":[]},{"line":"        (Registry : Intf.Registry.S with type element := Transmuter.Target.t)","counters":[]},{"line":"        (Name : Intf.Constant.S with type t := string) :","counters":[]},{"line":"      Intf.Transmuter_cache.S","counters":[]},{"line":"        with module Cached := Cached","counters":[]},{"line":"         and module Cache := Cache","counters":[]},{"line":"         and type source = Transmuter.Source.t","counters":[]},{"line":"         and type target = Transmuter.Target.t = struct","counters":[]},{"line":"      type source = Transmuter.Source.t","counters":[]},{"line":"","counters":[]},{"line":"      type target = Transmuter.Target.t","counters":[]},{"line":"","counters":[]},{"line":"      type t = Transmuter.Target.t Cache.t","counters":[]},{"line":"","counters":[]},{"line":"      let create ~logger =","counters":[]},{"line":"        Cache.create ~logger ~name:Name.t ~on_add:Registry.element_added","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~on_remove:Registry.element_removed","counters":[]},{"line":"          ~element_to_string:Transmuter.Target.to_string","counters":[]},{"line":"          (module Transmuter.Target)","counters":[]},{"line":"","counters":[]},{"line":"      let register_exn t x =","counters":[]},{"line":"        let target = Cache.register_exn t (Transmuter.transmute x) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"        Cached.transform target ~f:(Fn.const x)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"      let final_state t x = Cache.final_state t (Transmuter.transmute x)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"      let mem t x = Cache.mem t (Transmuter.transmute x)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"cache_lib test instance\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let dropped_cache_items = ref 0","counters":[]},{"line":"","counters":[]},{"line":"    include Make (struct","counters":[]},{"line":"      let handle_unconsumed_cache_item ~logger:_ ~cache_name:_ =","counters":[]},{"line":"        incr dropped_cache_items","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    let setup () = dropped_cache_items := 0","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    let with_item ~f =","counters":[]},{"line":"      Bytes.create 10 |> Bytes.to_string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      |> String.map ~f:(fun _ -> Char.of_int_exn (Random.bits () land 0xff))","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"      |> f","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"    let with_cache ~logger ~f =","counters":[]},{"line":"      Cache.create ~name:\"test\" ~logger ~on_add:ignore","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~on_remove:(fun _ _ -> ())","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ~element_to_string:Fn.id","counters":[]},{"line":"        (module String)","counters":[]},{"line":"      |> f","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"cached objects do not trigger unconsumption hook when \\","counters":[]},{"line":"                   invalidated\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let x = Cache.register_exn cache data in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              ignore (Cached.invalidate_with_success x : string) ) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 0) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"cached objects are garbage collected independently of caches\"","counters":[]},{"line":"        =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              ignore (Cache.register_exn cache data : (string, string) Cached.t) ) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 1) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"cached objects are garbage collected independently of data\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_item ~f:(fun data ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              ignore (Cache.register_exn cache data : (string, string) Cached.t) ) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 1) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"cached objects are not unexpectedly garbage collected\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let cached = Cache.register_exn cache data in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              Gc.full_major () ;","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              assert (!dropped_cache_items = 0) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"              ignore (Cached.invalidate_with_success cached : string) ) ) ;","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"      Gc.full_major () ;","counters":[]},{"line":"      assert (!dropped_cache_items = 0)","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"garbage collection of derived cached objects do not trigger \\","counters":[]},{"line":"                   unconsumption handler for parents\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              ignore","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( Cache.register_exn cache data","counters":[]},{"line":"                  |> Cached.transform ~f:(Fn.const 5)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"                  |> Cached.transform ~f:(Fn.const ())","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"                  : (unit, string) Cached.t ) ) ;","counters":[]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 1) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"properly invalidated derived cached objects do not trigger \\","counters":[]},{"line":"                   any unconsumption handler calls\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              Cache.register_exn cache data","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              |> Cached.transform ~f:(Fn.const 5)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              |> Cached.transform ~f:(Fn.const ())","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"              |> Cached.invalidate_with_success ) ;","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 0) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"invalidate original cached object would also remove the \\","counters":[]},{"line":"                   derived cached object\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let logger = Logger.null () in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let src = Cache.register_exn cache data in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let _der =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                src","counters":[]},{"line":"                |> Cached.transform ~f:(Fn.const 5)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                |> Cached.transform ~f:(Fn.const ())","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"              in","counters":[]},{"line":"              ignore (Cached.invalidate_with_success src : string) ) ;","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          Gc.full_major () ;","counters":[]},{"line":"          assert (!dropped_cache_items = 0) )","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"deriving a cached object inhabits its parent's final_state\" =","counters":[]},{"line":"      setup () ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      with_cache ~logger:(Logger.null ()) ~f:(fun cache ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          with_item ~f:(fun data ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              let src = Cache.register_exn cache data in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let der = Cached.transform src ~f:(Fn.const 5) in","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"              let src_final_state = Cached.final_state src in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let der_final_state = Cached.final_state der in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              assert (Ivar.equal src_final_state der_final_state) ) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]}]}