{"filename":"src/lib/cli_lib/exceptions.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"let handle_nicely (type a) (f : unit -> a Deferred.t) () : a Deferred.t =","counters":[]},{"line":"  match%bind Deferred.Or_error.try_with ~here:[%here] ~extract_exn:true f with","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  | Ok e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      return e","counters":[]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      eprintf \"Error: %s\" (Error.to_string_hum e) ;","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"      exit 4","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":2}]}]}