{"filename":"src/lib/pickles_types/hlist.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Poly_types","counters":[]},{"line":"module Id = Hlist0.Id","counters":[]},{"line":"module HlistId = Hlist0.HlistId","counters":[]},{"line":"module H1_1 = Hlist0.H1_1","counters":[]},{"line":"","counters":[]},{"line":"module E13 (T : T1) = struct","counters":[]},{"line":"  type ('a, _, _) t = 'a T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E23 (T : T2) = struct","counters":[]},{"line":"  type ('a, 'b, _) t = ('a, 'b) T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E01 (T : T0) = struct","counters":[]},{"line":"  type _ t = T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E02 (T : T0) = struct","counters":[]},{"line":"  type (_, _) t = T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E03 (T : T0) = struct","counters":[]},{"line":"  type (_, _, _) t = T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E04 (T : T0) = struct","counters":[]},{"line":"  type (_, _, _, _) t = T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module E06 (T : T0) = struct","counters":[]},{"line":"  type (_, _, _, _, _, _) t = T.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Tuple2 (F : T3) (G : T3) = struct","counters":[]},{"line":"  type ('a, 'b, 'c) t = ('a, 'b, 'c) F.t * ('a, 'b, 'c) G.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Tuple3 (F : T3) (G : T3) (H : T3) = struct","counters":[]},{"line":"  type ('a, 'b, 'c) t = ('a, 'b, 'c) F.t * ('a, 'b, 'c) G.t * ('a, 'b, 'c) H.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Tuple4 (F : T3) (G : T3) (H : T3) (I : T3) = struct","counters":[]},{"line":"  type ('a, 'b, 'c) t =","counters":[]},{"line":"    ('a, 'b, 'c) F.t * ('a, 'b, 'c) G.t * ('a, 'b, 'c) H.t * ('a, 'b, 'c) I.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Tuple5 (F : T3) (G : T3) (H : T3) (I : T3) (J : T3) = struct","counters":[]},{"line":"  type ('a, 'b, 'c) t =","counters":[]},{"line":"    ('a, 'b, 'c) F.t","counters":[]},{"line":"    * ('a, 'b, 'c) G.t","counters":[]},{"line":"    * ('a, 'b, 'c) H.t","counters":[]},{"line":"    * ('a, 'b, 'c) I.t","counters":[]},{"line":"    * ('a, 'b, 'c) J.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Arg1 = struct","counters":[]},{"line":"  type ('a, _, _) t = 'a","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Arg2 = struct","counters":[]},{"line":"  type (_, 'a, _) t = 'a","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Apply2 (F : T2) (X : T1) (Y : T1) = struct","counters":[]},{"line":"  type ('a, 'b) t = ('a X.t, 'b Y.t) F.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Dup (F : T2) = struct","counters":[]},{"line":"  type 'a t = ('a, 'a) F.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Length = Hlist0.Length","counters":[]},{"line":"","counters":[]},{"line":"module H1 = struct","counters":[]},{"line":"  module T = Hlist0.H1","counters":[]},{"line":"","counters":[]},{"line":"  module Iter","counters":[]},{"line":"      (F : T1) (C : sig","counters":[]},{"line":"        val f : 'a F.t -> unit","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a. a T(F).t -> unit = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ()","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          C.f x ; f xs","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Of_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type xs length.","counters":[]},{"line":"        (xs, length) Length.t -> (X.t, length) Vector.t -> xs T(E01(X)).t =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T1)","counters":[]},{"line":"      (G : T1) (C : sig","counters":[]},{"line":"        val f : 'a F.t -> 'a G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a. a T(F).t -> a T(G).t = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Fold","counters":[]},{"line":"      (F : T1)","counters":[]},{"line":"      (X : T0) (C : sig","counters":[]},{"line":"        val f : X.t -> 'a F.t -> X.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a. init:X.t -> a T(F).t -> X.t =","counters":[]},{"line":"     fun ~init xs ->","counters":[]},{"line":"      match xs with [] -> init | x :: xs -> f ~init:(C.f init x) xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map_reduce","counters":[]},{"line":"      (F : T1)","counters":[]},{"line":"      (X : T0) (C : sig","counters":[]},{"line":"        val reduce : X.t -> X.t -> X.t","counters":[]},{"line":"","counters":[]},{"line":"        val map : 'a F.t -> X.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a. X.t -> a T(F).t -> X.t =","counters":[]},{"line":"     fun acc xs ->","counters":[]},{"line":"      match xs with [] -> acc | x :: xs -> f (C.reduce acc (C.map x)) xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"    let f (type a) (xs : a T(F).t) =","counters":[]},{"line":"      match xs with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"Hlist.Map_reduce: empty list\"","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f (C.map x) xs","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module To_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type xs length.","counters":[]},{"line":"        (xs, length) Length.t -> xs T(E01(X)).t -> (X.t, length) Vector.t =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Tuple2 (F : T1) (G : T1) = struct","counters":[]},{"line":"    type 'a t = 'a F.t * 'a G.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T1) (G : T1) = struct","counters":[]},{"line":"    let rec f : type a. a T(F).t -> a T(G).t -> a T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Typ (Impl : sig","counters":[]},{"line":"    type field","counters":[]},{"line":"  end)","counters":[]},{"line":"  (F : T1)","counters":[]},{"line":"  (Var : T1)","counters":[]},{"line":"  (Val : T1) (C : sig","counters":[]},{"line":"    val f : 'a F.t -> ('a Var.t, 'a Val.t, Impl.field) Snarky_backendless.Typ.t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type xs.","counters":[]},{"line":"           xs T(F).t","counters":[]},{"line":"        -> (xs T(Var).t, xs T(Val).t, Impl.field) Snarky_backendless.Typ.t =","counters":[]},{"line":"      let transport, transport_var, tuple2, unit =","counters":[]},{"line":"        Snarky_backendless.Typ.(transport, transport_var, tuple2, unit)","counters":[]},{"line":"      in","counters":[]},{"line":"      fun ts ->","counters":[]},{"line":"        match ts with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | t :: ts ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let tail = f ts in","counters":[]},{"line":"            transport","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"              (tuple2 (C.f t) tail)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"              ~there:(fun (x :: xs : _ T(Val).t) -> (x, xs))","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"              ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"            |> transport_var","counters":[]},{"line":"                 ~there:(fun (x :: xs : _ T(Var).t) -> (x, xs))","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"                 ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        | [] ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let there _ = () in","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"            transport (unit ()) ~there ~back:(fun () : _ T(Val).t -> [])","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"            |> transport_var ~there ~back:(fun () : _ T(Var).t -> [])","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H2 = struct","counters":[]},{"line":"  module Arg1 = struct","counters":[]},{"line":"    type ('a, _) t = 'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Arg2 = struct","counters":[]},{"line":"    type (_, 'a) t = 'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Tuple2 (F : T2) (G : T2) = struct","counters":[]},{"line":"    type ('a, 'b) t = ('a, 'b) F.t * ('a, 'b) G.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module T (F : T2) = struct","counters":[]},{"line":"    type (_, _) t =","counters":[]},{"line":"      | [] : (unit, unit) t","counters":[]},{"line":"      | ( :: ) : ('a1, 'a2) F.t * ('b1, 'b2) t -> ('a1 * 'b1, 'a2 * 'b2) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length : type tail1 tail2. (tail1, tail2) t -> tail1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T2) (G : T2) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b. (a, b) T(F).t -> (a, b) T(G).t -> (a, b) T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T2)","counters":[]},{"line":"      (G : T2) (C : sig","counters":[]},{"line":"        val f : ('a, 'b) F.t -> ('a, 'b) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b. (a, b) T(F).t -> (a, b) T(G).t = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Typ (Impl : sig","counters":[]},{"line":"    type field","counters":[]},{"line":"","counters":[]},{"line":"    module Typ : sig","counters":[]},{"line":"      type ('var, 'value) t = ('var, 'value, field) Snarky_backendless.Typ.t","counters":[]},{"line":"    end","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let transport, transport_var, tuple2, unit =","counters":[]},{"line":"      Snarky_backendless.Typ.(transport, transport_var, tuple2, unit)","counters":[]},{"line":"","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type vars values.","counters":[]},{"line":"           (vars, values) T(Impl.Typ).t","counters":[]},{"line":"        -> ( vars H1.T(Id).t","counters":[]},{"line":"           , values H1.T(Id).t","counters":[]},{"line":"           , Impl.field )","counters":[]},{"line":"           Snarky_backendless.Typ.t =","counters":[]},{"line":"     fun ts ->","counters":[]},{"line":"      match ts with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let there _ = () in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          transport (unit ()) ~there ~back:(fun () : _ H1.T(Id).t -> [])","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"          |> transport_var ~there ~back:(fun () : _ H1.T(Id).t -> [])","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"      | t :: ts ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          transport","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            (tuple2 t (f ts))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            ~there:(fun (x :: xs : _ H1.T(Id).t) -> (x, xs))","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"            ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          |> transport_var","counters":[]},{"line":"               ~there:(fun (x :: xs : _ H1.T(Id).t) -> (x, xs))","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"               ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H3_2 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, 's1, 's2) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 's1, 's2) F.t * ('b1, 'b2, 'b3, 's1, 's2) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 's1, 's2) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length : type t1 t2 t3 e1 e2. (t1, t2, t3, e1, e2) t -> t1 Length.n","counters":[]},{"line":"        = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H3_3 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, 's1, 's2, 's3) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, _, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 's1, 's2, 's3) F.t * ('b1, 'b2, 'b3, 's1, 's2, 's3) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 's1, 's2, 's3) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 e1 e2 e3. (t1, t2, t3, e1, e2, e3) t -> t1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H3_4 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, 's1, 's2, 's3, 's4) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, _, _, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 's1, 's2, 's3, 's4) F.t","counters":[]},{"line":"          * ('b1, 'b2, 'b3, 's1, 's2, 's3, 's4) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 's1, 's2, 's3, 's4) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 e1 e2 e3 e4. (t1, t2, t3, e1, e2, e3, e4) t -> t1 Length.n","counters":[]},{"line":"        = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H2_1 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, 's) t =","counters":[]},{"line":"      | [] : (unit, unit, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 's) F.t * ('b1, 'b2, 's) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 's) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length : type tail1 tail2 e. (tail1, tail2, e) t -> tail1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Iter","counters":[]},{"line":"      (F : T3) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c) F.t -> unit","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c. (a, b, c) T(F).t -> unit = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ()","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          C.f x ; f xs","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map_","counters":[]},{"line":"      (F : T3)","counters":[]},{"line":"      (G : T3) (Env : sig","counters":[]},{"line":"        type t","counters":[]},{"line":"      end) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, Env.t) F.t -> ('a, 'b, Env.t) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b. (a, b, Env.t) T(F).t -> (a, b, Env.t) T(G).t =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T3)","counters":[]},{"line":"      (G : T3) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c) F.t -> ('a, 'b, 'c) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let f : type a b c. (a, b, c) T(F).t -> (a, b, c) T(G).t =","counters":[]},{"line":"     fun xs ->","counters":[]},{"line":"      let module M =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Map_ (F) (G)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            type t = c","counters":[]},{"line":"          end)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            let f = C.f","counters":[]},{"line":"          end)","counters":[]},{"line":"      in","counters":[]},{"line":"      M.f xs","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T3) (G : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"        (a, b, c) T(F).t -> (a, b, c) T(G).t -> (a, b, c) T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip3 (F1 : T3) (F2 : T3) (F3 : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"           (a, b, c) T(F1).t","counters":[]},{"line":"        -> (a, b, c) T(F2).t","counters":[]},{"line":"        -> (a, b, c) T(F3).t","counters":[]},{"line":"        -> (a, b, c) T(Tuple3(F1)(F2)(F3)).t =","counters":[]},{"line":"     fun xs ys zs ->","counters":[]},{"line":"      match (xs, ys, zs) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [], [], [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs, y :: ys, z :: zs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (x, y, z) :: f xs ys zs","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Unzip3 (F1 : T3) (F2 : T3) (F3 : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"           (a, b, c) T(Tuple3(F1)(F2)(F3)).t","counters":[]},{"line":"        -> (a, b, c) T(F1).t * (a, b, c) T(F2).t * (a, b, c) T(F3).t =","counters":[]},{"line":"     fun ts ->","counters":[]},{"line":"      match ts with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ([], [], [])","counters":[]},{"line":"      | (x, y, z) :: ts ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let xs, ys, zs = f ts in","counters":[]},{"line":"          (x :: xs, y :: ys, z :: zs)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip4 (F1 : T3) (F2 : T3) (F3 : T3) (F4 : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"           (a, b, c) T(F1).t","counters":[]},{"line":"        -> (a, b, c) T(F2).t","counters":[]},{"line":"        -> (a, b, c) T(F3).t","counters":[]},{"line":"        -> (a, b, c) T(F4).t","counters":[]},{"line":"        -> (a, b, c) T(Tuple4(F1)(F2)(F3)(F4)).t =","counters":[]},{"line":"     fun xs ys zs ws ->","counters":[]},{"line":"      match (xs, ys, zs, ws) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [], [], [], [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs, y :: ys, z :: zs, w :: ws ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (x, y, z, w) :: f xs ys zs ws","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip5 (F1 : T3) (F2 : T3) (F3 : T3) (F4 : T3) (F5 : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"           (a, b, c) T(F1).t","counters":[]},{"line":"        -> (a, b, c) T(F2).t","counters":[]},{"line":"        -> (a, b, c) T(F3).t","counters":[]},{"line":"        -> (a, b, c) T(F4).t","counters":[]},{"line":"        -> (a, b, c) T(F5).t","counters":[]},{"line":"        -> (a, b, c) T(Tuple5(F1)(F2)(F3)(F4)(F5)).t =","counters":[]},{"line":"     fun l1 l2 l3 l4 l5 ->","counters":[]},{"line":"      match (l1, l2, l3, l4, l5) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [], [], [], [], [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x1 :: l1, x2 :: l2, x3 :: l3, x4 :: l4, x5 :: l5 ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (x1, x2, x3, x4, x5) :: f l1 l2 l3 l4 l5","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Of_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type e xs ys length.","counters":[]},{"line":"           (xs, length) Length.t","counters":[]},{"line":"        -> (ys, length) Length.t","counters":[]},{"line":"        -> (X.t, length) Vector.t","counters":[]},{"line":"        -> (xs, ys, e) T(E03(X)).t =","counters":[]},{"line":"     fun l1 l2 v ->","counters":[]},{"line":"      match (l1, l2, v) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Z, Z, [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | S n1, S n2, x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x :: f n1 n2 xs","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module To_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type e xs ys length.","counters":[]},{"line":"           (xs, length) Length.t","counters":[]},{"line":"        -> (xs, ys, e) T(E03(X)).t","counters":[]},{"line":"        -> (X.t, length) Vector.t =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H3 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _) t =","counters":[]},{"line":"      | [] : (unit, unit, unit) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3) F.t * ('b1, 'b2, 'b3) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type tail1 tail2 tail3. (tail1, tail2, tail3) t -> tail1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module To_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c length.","counters":[]},{"line":"        (a, length) Length.t -> (a, b, c) T(E03(X)).t -> (X.t, length) Vector.t","counters":[]},{"line":"        =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T3) (G : T3) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c.","counters":[]},{"line":"        (a, b, c) T(F).t -> (a, b, c) T(G).t -> (a, b, c) T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Arg1 = struct","counters":[]},{"line":"    type ('a, _, _) t = 'a","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map1_to_H1","counters":[]},{"line":"      (F : T3)","counters":[]},{"line":"      (G : T1) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c) F.t -> 'a G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c. (a, b, c) T(F).t -> a H1.T(G).t = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map2_to_H1","counters":[]},{"line":"      (F : T3)","counters":[]},{"line":"      (G : T1) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c) F.t -> 'b G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c. (a, b, c) T(F).t -> b H1.T(G).t = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T3)","counters":[]},{"line":"      (G : T3) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c) F.t -> ('a, 'b, 'c) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c. (a, b, c) T(F).t -> (a, b, c) T(G).t = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H4 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4) F.t * ('b1, 'b2, 'b3, 'b4) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 'a4 * 'b4) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type tail1 tail2 tail3 tail4.","counters":[]},{"line":"        (tail1, tail2, tail3, tail4) t -> tail1 Length.n = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Fold","counters":[]},{"line":"      (F : T4)","counters":[]},{"line":"      (X : T0) (C : sig","counters":[]},{"line":"        val f : X.t -> _ F.t -> X.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c d. init:X.t -> (a, b, c, d) T(F).t -> X.t =","counters":[]},{"line":"     fun ~init xs ->","counters":[]},{"line":"      match xs with [] -> init | x :: xs -> f ~init:(C.f init x) xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Iter","counters":[]},{"line":"      (F : T4) (C : sig","counters":[]},{"line":"        val f : _ F.t -> unit","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c d. (a, b, c, d) T(F).t -> unit =","counters":[]},{"line":"     fun xs -> match xs with [] -> () | x :: xs -> C.f x ; f xs","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T4)","counters":[]},{"line":"      (G : T4) (C : sig","counters":[]},{"line":"        val f : ('a, 'b, 'c, 'd) F.t -> ('a, 'b, 'c, 'd) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a b c d. (a, b, c, d) T(F).t -> (a, b, c, d) T(G).t =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module To_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c d length.","counters":[]},{"line":"           (a, length) Length.t","counters":[]},{"line":"        -> (a, b, c, d) T(E04(X)).t","counters":[]},{"line":"        -> (X.t, length) Vector.t =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Tuple2 (F : T4) (G : T4) = struct","counters":[]},{"line":"    type ('a, 'b, 'c, 'd) t = ('a, 'b, 'c, 'd) F.t * ('a, 'b, 'c, 'd) G.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T4) (G : T4) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a b c d.","counters":[]},{"line":"           (a, b, c, d) T(F).t","counters":[]},{"line":"        -> (a, b, c, d) T(G).t","counters":[]},{"line":"        -> (a, b, c, d) T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Length_1_to_2 (F : T4) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type n xs ys a b.","counters":[]},{"line":"        (xs, ys, a, b) T(F).t -> (xs, n) Length.t -> (ys, n) Length.t =","counters":[]},{"line":"     fun xs n -> match (xs, n) with [], Z -> Z | _ :: xs, S n -> S (f xs n)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Typ (Impl : sig","counters":[]},{"line":"    type field","counters":[]},{"line":"  end)","counters":[]},{"line":"  (F : T4)","counters":[]},{"line":"  (Var : T3)","counters":[]},{"line":"  (Val : T3) (C : sig","counters":[]},{"line":"    val f :","counters":[]},{"line":"         ('var, 'value, 'n1, 'n2) F.t","counters":[]},{"line":"      -> ( ('var, 'n1, 'n2) Var.t","counters":[]},{"line":"         , ('value, 'n1, 'n2) Val.t","counters":[]},{"line":"         , Impl.field )","counters":[]},{"line":"         Snarky_backendless.Typ.t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let transport, transport_var, tuple2, unit =","counters":[]},{"line":"      Snarky_backendless.Typ.(transport, transport_var, tuple2, unit)","counters":[]},{"line":"","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type vars values ns1 ns2.","counters":[]},{"line":"           (vars, values, ns1, ns2) T(F).t","counters":[]},{"line":"        -> ( (vars, ns1, ns2) H3.T(Var).t","counters":[]},{"line":"           , (values, ns1, ns2) H3.T(Val).t","counters":[]},{"line":"           , Impl.field )","counters":[]},{"line":"           Snarky_backendless.Typ.t =","counters":[]},{"line":"     fun ts ->","counters":[]},{"line":"      match ts with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let there _ = () in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          transport (unit ()) ~there ~back:(fun () : _ H3.T(Val).t -> [])","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"          |> transport_var ~there ~back:(fun () : _ H3.T(Var).t -> [])","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"      | t :: ts ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          transport","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            (tuple2 (C.f t) (f ts))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"            ~there:(fun (x :: xs : _ H3.T(Val).t) -> (x, xs))","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          |> transport_var","counters":[]},{"line":"               ~there:(fun (x :: xs : _ H3.T(Var).t) -> (x, xs))","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"               ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H6 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, _, _) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, unit, unit) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) F.t * ('b1, 'b2, 'b3, 'b4, 'b5, 'b6) t","counters":[]},{"line":"          -> ( 'a1 * 'b1","counters":[]},{"line":"             , 'a2 * 'b2","counters":[]},{"line":"             , 'a3 * 'b3","counters":[]},{"line":"             , 'a4 * 'b4","counters":[]},{"line":"             , 'a5 * 'b5","counters":[]},{"line":"             , 'a6 * 'b6 )","counters":[]},{"line":"             t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type tail1 tail2 tail3 tail4 tail5 tail6.","counters":[]},{"line":"        (tail1, tail2, tail3, tail4, tail5, tail6) t -> tail1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Fold","counters":[]},{"line":"      (F : T6)","counters":[]},{"line":"      (X : T0) (C : sig","counters":[]},{"line":"        val f : X.t -> _ F.t -> X.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a1 a2 a3 a4 a5 a6.","counters":[]},{"line":"        init:X.t -> (a1, a2, a3, a4, a5, a6) T(F).t -> X.t =","counters":[]},{"line":"     fun ~init xs ->","counters":[]},{"line":"      match xs with [] -> init | x :: xs -> f ~init:(C.f init x) xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Iter","counters":[]},{"line":"      (F : T6) (C : sig","counters":[]},{"line":"        val f : _ F.t -> unit","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f : type a1 a2 a3 a4 a5 a6. (a1, a2, a3, a4, a5, a6) T(F).t -> unit","counters":[]},{"line":"        =","counters":[]},{"line":"     fun xs -> match xs with [] -> () | x :: xs -> C.f x ; f xs","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Map","counters":[]},{"line":"      (F : T6)","counters":[]},{"line":"      (G : T6) (C : sig","counters":[]},{"line":"        val f :","counters":[]},{"line":"             ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) F.t","counters":[]},{"line":"          -> ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) G.t","counters":[]},{"line":"      end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a1 a2 a3 a4 a5 a6.","counters":[]},{"line":"        (a1, a2, a3, a4, a5, a6) T(F).t -> (a1, a2, a3, a4, a5, a6) T(G).t =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let y = C.f x in","counters":[]},{"line":"          y :: f xs","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module To_vector (X : T0) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a1 a2 a3 a4 a5 a6 length.","counters":[]},{"line":"           (a1, length) Length.t","counters":[]},{"line":"        -> (a1, a2, a3, a4, a5, a6) T(E06(X)).t","counters":[]},{"line":"        -> (X.t, length) Vector.t =","counters":[]},{"line":"     fun l1 v ->","counters":[]},{"line":"      match (l1, v) with Z, [] -> [] | S n1, x :: xs -> x :: f n1 xs","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Tuple2 (F : T6) (G : T6) = struct","counters":[]},{"line":"    type ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) t =","counters":[]},{"line":"      ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) F.t * ('a1, 'a2, 'a3, 'a4, 'a5, 'a6) G.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Zip (F : T6) (G : T6) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type a1 a2 a3 a4 a5 a6.","counters":[]},{"line":"           (a1, a2, a3, a4, a5, a6) T(F).t","counters":[]},{"line":"        -> (a1, a2, a3, a4, a5, a6) T(G).t","counters":[]},{"line":"        -> (a1, a2, a3, a4, a5, a6) T(Tuple2(F)(G)).t =","counters":[]},{"line":"     fun xs ys ->","counters":[]},{"line":"      match (xs, ys) with [], [] -> [] | x :: xs, y :: ys -> (x, y) :: f xs ys","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Length_1_to_2 (F : T6) = struct","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type n a1 a2 a3 a4 a5 a6.","counters":[]},{"line":"        (a1, a2, a3, a4, a5, a6) T(F).t -> (a1, n) Length.t -> (a2, n) Length.t","counters":[]},{"line":"        =","counters":[]},{"line":"     fun xs n -> match (xs, n) with [], Z -> Z | _ :: xs, S n -> S (f xs n)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Typ (Impl : sig","counters":[]},{"line":"    type field","counters":[]},{"line":"  end)","counters":[]},{"line":"  (F : T6)","counters":[]},{"line":"  (Var : T4)","counters":[]},{"line":"  (Val : T4) (C : sig","counters":[]},{"line":"    val f :","counters":[]},{"line":"         ('var, 'value, 'ret_var, 'ret_value, 'n1, 'n2) F.t","counters":[]},{"line":"      -> ( ('var, 'ret_var, 'n1, 'n2) Var.t","counters":[]},{"line":"         , ('value, 'ret_value, 'n1, 'n2) Val.t","counters":[]},{"line":"         , Impl.field )","counters":[]},{"line":"         Snarky_backendless.Typ.t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    let transport, transport_var, tuple2, unit =","counters":[]},{"line":"      Snarky_backendless.Typ.(transport, transport_var, tuple2, unit)","counters":[]},{"line":"","counters":[]},{"line":"    let rec f :","counters":[]},{"line":"        type vars values ret_vars ret_values ns1 ns2.","counters":[]},{"line":"           (vars, values, ret_vars, ret_values, ns1, ns2) T(F).t","counters":[]},{"line":"        -> ( (vars, ret_vars, ns1, ns2) H4.T(Var).t","counters":[]},{"line":"           , (values, ret_values, ns1, ns2) H4.T(Val).t","counters":[]},{"line":"           , Impl.field )","counters":[]},{"line":"           Snarky_backendless.Typ.t =","counters":[]},{"line":"     fun ts ->","counters":[]},{"line":"      match ts with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let there _ = () in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"          transport (unit ()) ~there ~back:(fun () : _ H4.T(Val).t -> [])","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"          |> transport_var ~there ~back:(fun () : _ H4.T(Var).t -> [])","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"      | t :: ts ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          transport","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            (tuple2 (C.f t) (f ts))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"            ~there:(fun (x :: xs : _ H4.T(Val).t) -> (x, xs))","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"          |> transport_var","counters":[]},{"line":"               ~there:(fun (x :: xs : _ H4.T(Var).t) -> (x, xs))","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"               ~back:(fun (x, xs) -> x :: xs)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H4_2 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, 's1, 's2) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 's1, 's2) F.t * ('b1, 'b2, 'b3, 'b4, 's1, 's2) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 'a4 * 'b4, 's1, 's2) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 t4 e1 e2. (t1, t2, t3, t4, e1, e2) t -> t1 Length.n =","counters":[]},{"line":"      function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H4_4 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, 's1, 's2, 's3, 's4) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, _, _, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 's1, 's2, 's3, 's4) F.t","counters":[]},{"line":"          * ('b1, 'b2, 'b3, 'b4, 's1, 's2, 's3, 's4) t","counters":[]},{"line":"          -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 'a4 * 'b4, 's1, 's2, 's3, 's4) t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 t4 e1 e2 e3 e4.","counters":[]},{"line":"        (t1, t2, t3, t4, e1, e2, e3, e4) t -> t1 Length.n = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H4_6 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, 's1, 's2, 's3, 's4, 's5, 's6) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, _, _, _, _, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 's1, 's2, 's3, 's4, 's5, 's6) F.t","counters":[]},{"line":"          * ('b1, 'b2, 'b3, 'b4, 's1, 's2, 's3, 's4, 's5, 's6) t","counters":[]},{"line":"          -> ( 'a1 * 'b1","counters":[]},{"line":"             , 'a2 * 'b2","counters":[]},{"line":"             , 'a3 * 'b3","counters":[]},{"line":"             , 'a4 * 'b4","counters":[]},{"line":"             , 's1","counters":[]},{"line":"             , 's2","counters":[]},{"line":"             , 's3","counters":[]},{"line":"             , 's4","counters":[]},{"line":"             , 's5","counters":[]},{"line":"             , 's6 )","counters":[]},{"line":"             t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 t4 e1 e2 e3 e4 e5 e6.","counters":[]},{"line":"        (t1, t2, t3, t4, e1, e2, e3, e4, e5, e6) t -> t1 Length.n = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H6_2 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, _, _, 's1, 's2) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, unit, unit, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 'a5, 'a6, 's1, 's2) F.t","counters":[]},{"line":"          * ('b1, 'b2, 'b3, 'b4, 'b5, 'b6, 's1, 's2) t","counters":[]},{"line":"          -> ( 'a1 * 'b1","counters":[]},{"line":"             , 'a2 * 'b2","counters":[]},{"line":"             , 'a3 * 'b3","counters":[]},{"line":"             , 'a4 * 'b4","counters":[]},{"line":"             , 'a5 * 'b5","counters":[]},{"line":"             , 'a6 * 'b6","counters":[]},{"line":"             , 's1","counters":[]},{"line":"             , 's2 )","counters":[]},{"line":"             t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 t4 t5 t6 e1 e2.","counters":[]},{"line":"        (t1, t2, t3, t4, t5, t6, e1, e2) t -> t1 Length.n = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H6_4 = struct","counters":[]},{"line":"  module T (F : sig","counters":[]},{"line":"    type (_, _, _, _, _, _, _, _, _, _) t","counters":[]},{"line":"  end) =","counters":[]},{"line":"  struct","counters":[]},{"line":"    type (_, _, _, _, _, _, 's1, 's2, 's3, 's4) t =","counters":[]},{"line":"      | [] : (unit, unit, unit, unit, unit, unit, _, _, _, _) t","counters":[]},{"line":"      | ( :: ) :","counters":[]},{"line":"          ('a1, 'a2, 'a3, 'a4, 'a5, 'a6, 's1, 's2, 's3, 's4) F.t","counters":[]},{"line":"          * ('b1, 'b2, 'b3, 'b4, 'b5, 'b6, 's1, 's2, 's3, 's4) t","counters":[]},{"line":"          -> ( 'a1 * 'b1","counters":[]},{"line":"             , 'a2 * 'b2","counters":[]},{"line":"             , 'a3 * 'b3","counters":[]},{"line":"             , 'a4 * 'b4","counters":[]},{"line":"             , 'a5 * 'b5","counters":[]},{"line":"             , 'a6 * 'b6","counters":[]},{"line":"             , 's1","counters":[]},{"line":"             , 's2","counters":[]},{"line":"             , 's3","counters":[]},{"line":"             , 's4 )","counters":[]},{"line":"             t","counters":[]},{"line":"","counters":[]},{"line":"    let rec length :","counters":[]},{"line":"        type t1 t2 t3 t4 t5 t6 e1 e2 e3 e4.","counters":[]},{"line":"        (t1, t2, t3, t4, t5, t6, e1, e2, e3, e4) t -> t1 Length.n = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          T (Z, Z)","counters":[]},{"line":"      | _ :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let (T (n, p)) = length xs in","counters":[]},{"line":"          T (S n, S p)","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module H3_1 (F : sig","counters":[]},{"line":"  type (_, _, _, _) t","counters":[]},{"line":"end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  type (_, _, _, 's) t =","counters":[]},{"line":"    | [] : (unit, unit, unit, _) t","counters":[]},{"line":"    | ( :: ) :","counters":[]},{"line":"        ('a1, 'a2, 'a3, 's) F.t * ('b1, 'b2, 'b3, 's) t","counters":[]},{"line":"        -> ('a1 * 'b1, 'a2 * 'b2, 'a3 * 'b3, 's) t","counters":[]},{"line":"","counters":[]},{"line":"  let rec length :","counters":[]},{"line":"      type tail1 tail2 tail3 e. (tail1, tail2, tail3, e) t -> tail1 Length.n =","counters":[]},{"line":"    function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        T (Z, Z)","counters":[]},{"line":"    | _ :: xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let (T (n, p)) = length xs in","counters":[]},{"line":"        T (S n, S p)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Map_1_specific","counters":[]},{"line":"    (F : T2)","counters":[]},{"line":"    (G : T2) (C : sig","counters":[]},{"line":"      type b1","counters":[]},{"line":"","counters":[]},{"line":"      type b2","counters":[]},{"line":"","counters":[]},{"line":"      val f : ('a, b1) F.t -> ('a, b2) G.t","counters":[]},{"line":"    end) =","counters":[]},{"line":"struct","counters":[]},{"line":"  let rec f : type a. (a, C.b1) H1_1(F).t -> (a, C.b2) H1_1(G).t = function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        []","counters":[]},{"line":"    | x :: xs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let y = C.f x in","counters":[]},{"line":"        y :: f xs","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"open Nat","counters":[]},{"line":"","counters":[]},{"line":"module type Max_s = sig","counters":[]},{"line":"  type ns","counters":[]},{"line":"","counters":[]},{"line":"  type n","counters":[]},{"line":"","counters":[]},{"line":"  val n : n t","counters":[]},{"line":"","counters":[]},{"line":"  val p : (ns, n) H1_1(Lte).t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type 'ns max = (module Max_s with type ns = 'ns)","counters":[]},{"line":"","counters":[]},{"line":"let rec max : type n ns. (n * ns) H1.T(Nat).t -> (n * ns) max =","counters":[]},{"line":" fun xs ->","counters":[]},{"line":"  match xs with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [ x ] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let module M = struct","counters":[]},{"line":"        type nonrec ns = n * ns","counters":[]},{"line":"","counters":[]},{"line":"        type nonrec n = n","counters":[]},{"line":"","counters":[]},{"line":"        let n = x","counters":[]},{"line":"","counters":[]},{"line":"        let p : (_, _) H1_1(Lte).t = [ Lte.refl x ]","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"      end in","counters":[]},{"line":"      (module M : Max_s with type ns = n * ns)","counters":[]},{"line":"  | x :: (_ :: _ as ys) -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let (module Max) = max ys in","counters":[]},{"line":"      match compare x Max.n with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `Lte p_x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let module M = struct","counters":[]},{"line":"            type nonrec ns = n * ns","counters":[]},{"line":"","counters":[]},{"line":"            type n = Max.n","counters":[]},{"line":"","counters":[]},{"line":"            let n = Max.n","counters":[]},{"line":"","counters":[]},{"line":"            let p : (ns, Max.n) H1_1(Lte).t = p_x :: Max.p","counters":[]},{"line":"          end in","counters":[]},{"line":"          (module M)","counters":[]},{"line":"      | `Gt gt ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let max_lt_x = gt_implies_gte x Max.n gt in","counters":[]},{"line":"          let module M =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Map_1_specific (Lte) (Lte)","counters":[]},{"line":"              (struct","counters":[]},{"line":"                type b1 = Max.n","counters":[]},{"line":"","counters":[]},{"line":"                type b2 = n","counters":[]},{"line":"","counters":[]},{"line":"                let f : type a. (a, Max.n) Lte.t -> (a, n) Lte.t =","counters":[]},{"line":"                 fun a_lt_max -> Lte.trans a_lt_max max_lt_x","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"              end)","counters":[]},{"line":"          in","counters":[]},{"line":"          let module M : Max_s with type ns = n * ns = struct","counters":[]},{"line":"            type nonrec ns = n * ns","counters":[]},{"line":"","counters":[]},{"line":"            type nonrec n = n","counters":[]},{"line":"","counters":[]},{"line":"            let n = x","counters":[]},{"line":"","counters":[]},{"line":"            let p : (ns, n) H1_1(Lte).t = Lte.refl x :: M.f Max.p","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"          end in","counters":[]},{"line":"          (module M) )","counters":[]},{"line":"","counters":[]},{"line":"let max_exn : type ns. ns H1.T(Nat).t -> ns max = function","counters":[]},{"line":"  | [] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith \"max_exn: empty list\"","counters":[]},{"line":"  | _ :: _ as xs ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      max xs","counters":[]},{"line":"","counters":[]},{"line":"module Maxes = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type ns","counters":[]},{"line":"","counters":[]},{"line":"    type length","counters":[]},{"line":"","counters":[]},{"line":"    val length : (ns, length) Length.t","counters":[]},{"line":"","counters":[]},{"line":"    val maxes : ns H1.T(Nat).t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type 'length t = T : 'ns H1.T(Nat).t * ('ns, 'length) Length.t -> 'length t","counters":[]},{"line":"","counters":[]},{"line":"  let rec f : type branches n. ((int, branches) Vector.t, n) Vector.t -> n t =","counters":[]},{"line":"    function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        T ([], Length.Z)","counters":[]},{"line":"    | v :: vs ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let (T (maxes, len)) = f vs in","counters":[]},{"line":"        let (T n) = Nat.of_int (Vector.reduce_exn v ~f:Int.max) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        T (n :: maxes, S len)","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let m (type length) (vs : (_, length) Vector.t) :","counters":[]},{"line":"      (module S with type length = length) =","counters":[]},{"line":"    let g :","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        type length ns.","counters":[]},{"line":"           ns H1.T(Nat).t","counters":[]},{"line":"        -> (ns, length) Length.t","counters":[]},{"line":"        -> (module S with type length = length) =","counters":[]},{"line":"     fun maxes length ->","counters":[]},{"line":"      ( module struct","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        type nonrec length = length","counters":[]},{"line":"","counters":[]},{"line":"        type nonrec ns = ns","counters":[]},{"line":"","counters":[]},{"line":"        let length = length","counters":[]},{"line":"","counters":[]},{"line":"        let maxes = maxes","counters":[]},{"line":"      end )","counters":[]},{"line":"    in","counters":[]},{"line":"    let (T (ms, len)) = f vs in","counters":[]},{"line":"    g ms len","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Lengths = struct","counters":[]},{"line":"  let rec extract :","counters":[]},{"line":"      type prev_varss ns env.","counters":[]},{"line":"      (prev_varss, ns, env) H2_1.T(E23(Length)).t -> ns H1.T(Nat).t = function","counters":[]},{"line":"    | [] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        []","counters":[]},{"line":"    | n :: ns ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* TODO: This is quadratic because of Length.to_nat *)","counters":[]},{"line":"        Length.to_nat n :: extract ns","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  type ('prev_varss, 'prev_valss, 'env) t =","counters":[]},{"line":"    | T :","counters":[]},{"line":"        ('prev_varss, 'ns, 'env) H2_1.T(E23(Length)).t","counters":[]},{"line":"        -> ('prev_varss, 'prev_valss, 'env) t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}