{"filename":"src/lib/mina_base/side_loaded_verification_key.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"include Pickles.Side_loaded.Verification_key","counters":[{"col_start":43,"col_end":43,"count":1}]},{"line":"","counters":[]},{"line":"[%%else]","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module G = struct","counters":[]},{"line":"  open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Field.Stable.V1.t * Field.Stable.V1.t","counters":[]},{"line":"      [@@deriving sexp, equal, compare, hash, yojson]","counters":[]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module R = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[]},{"line":"        G.Stable.V1.t Pickles_base.Side_loaded_verification_key.Repr.Stable.V2.t","counters":[]},{"line":"      [@@deriving sexp, compare, equal, yojson]","counters":[]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned_binable","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( G.Stable.V1.t","counters":[]},{"line":"      , unit )","counters":[]},{"line":"      Pickles_base.Side_loaded_verification_key.Poly.Stable.V2.t","counters":[]},{"line":"    [@@deriving hash]","counters":[]},{"line":"","counters":[]},{"line":"    open Pickles_base.Side_loaded_verification_key","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let to_repr { Poly.step_data; max_width; wrap_index; wrap_vk = _ } =","counters":[]},{"line":"      { Repr.Stable.V2.step_data; max_width; wrap_index }","counters":[]},{"line":"","counters":[]},{"line":"    let of_repr { Repr.Stable.V2.step_data; max_width; wrap_index = c } =","counters":[]},{"line":"      { Poly.step_data; max_width; wrap_index = c; wrap_vk = Some () }","counters":[]},{"line":"","counters":[]},{"line":"    include","counters":[]},{"line":"      Binable.Of_binable","counters":[]},{"line":"        (R.Stable.V2)","counters":[]},{"line":"        (struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable = to_repr","counters":[]},{"line":"","counters":[]},{"line":"          let of_binable = of_repr","counters":[]},{"line":"        end)","counters":[]},{"line":"","counters":[]},{"line":"    let sexp_of_t t = R.sexp_of_t (to_repr t)","counters":[]},{"line":"","counters":[]},{"line":"    let t_of_sexp sexp = of_repr (R.t_of_sexp sexp)","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson t = R.to_yojson (to_repr t)","counters":[]},{"line":"","counters":[]},{"line":"    let of_yojson json = Result.map ~f:of_repr (R.of_yojson json)","counters":[]},{"line":"","counters":[]},{"line":"    let equal x y = R.equal (to_repr x) (to_repr y)","counters":[]},{"line":"","counters":[]},{"line":"    let compare x y = R.compare (to_repr x) (to_repr y)","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let to_input x =","counters":[]},{"line":"  Pickles_base.Side_loaded_verification_key.to_input","counters":[]},{"line":"    ~field_of_int:Snark_params.Tick.Field.of_int x","counters":[]},{"line":"","counters":[]},{"line":"let dummy : t =","counters":[]},{"line":"  let open Pickles_types in","counters":[]},{"line":"  { step_data = At_most.[]","counters":[]},{"line":"  ; max_width = Pickles_base.Side_loaded_verification_key.Width.zero","counters":[]},{"line":"  ; wrap_index =","counters":[]},{"line":"      (let g = Snarkette.Pasta.Pallas.(to_affine_exn one) in","counters":[]},{"line":"       { sigma_comm = Vector.init Dlog_plonk_types.Permuts.n ~f:(fun _ -> g)","counters":[]},{"line":"       ; coefficients_comm =","counters":[]},{"line":"           Vector.init Dlog_plonk_types.Columns.n ~f:(fun _ -> g)","counters":[]},{"line":"       ; generic_comm = g","counters":[]},{"line":"       ; psm_comm = g","counters":[]},{"line":"       ; complete_add_comm = g","counters":[]},{"line":"       ; mul_comm = g","counters":[]},{"line":"       ; emul_comm = g","counters":[]},{"line":"       ; endomul_scalar_comm = g","counters":[]},{"line":"       } )","counters":[]},{"line":"  ; wrap_vk = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}