{"filename":"src/lib/zkapp_command_builder/zkapp_command_builder.ml","lines":[{"line":"(* zkapp_command_builder.ml -- combinators to build Zkapp_command.t for tests *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"let mk_forest ps :","counters":[]},{"line":"    (Account_update.Body.Simple.t, unit, unit) Zkapp_command.Call_forest.t =","counters":[]},{"line":"  List.map ps ~f:(fun p -> { With_stack_hash.elt = p; stack_hash = () })","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let mk_node account_update calls : _ Zkapp_command.Call_forest.Tree.t =","counters":[]},{"line":"  { account_update; account_update_digest = (); calls = mk_forest calls }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"let mk_account_update_body authorization_kind caller kp token_id balance_change","counters":[]},{"line":"    : Account_update.Body.Simple.t =","counters":[]},{"line":"  let open Signature_lib in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { update = Account_update.Update.noop","counters":[]},{"line":"  ; public_key = Public_key.compress kp.Keypair.public_key","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; token_id","counters":[]},{"line":"  ; balance_change =","counters":[]},{"line":"      Currency.Amount.Signed.create","counters":[]},{"line":"        ~magnitude:(Currency.Amount.of_int (Int.abs balance_change))","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        ~sgn:(if Int.is_negative balance_change then Sgn.Neg else Pos)","counters":[{"col_start":53,"col_end":53,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"  ; increment_nonce = false","counters":[]},{"line":"  ; events = []","counters":[]},{"line":"  ; sequence_events = []","counters":[]},{"line":"  ; call_data = Pickles.Impls.Step.Field.Constant.zero","counters":[]},{"line":"  ; call_depth = 0","counters":[]},{"line":"  ; preconditions =","counters":[]},{"line":"      { network = Zkapp_precondition.Protocol_state.accept","counters":[]},{"line":"      ; account = Account_update.Account_precondition.Accept","counters":[]},{"line":"      }","counters":[]},{"line":"  ; use_full_commitment = true","counters":[]},{"line":"  ; caller","counters":[]},{"line":"  ; authorization_kind","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let mk_zkapp_command ?memo ~fee ~fee_payer_pk ~fee_payer_nonce account_updates :","counters":[]},{"line":"    Zkapp_command.t =","counters":[]},{"line":"  let fee_payer : Account_update.Fee_payer.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { body =","counters":[]},{"line":"        { public_key = fee_payer_pk","counters":[]},{"line":"        ; fee = Currency.Fee.of_int fee","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; valid_until = None","counters":[]},{"line":"        ; nonce = fee_payer_nonce","counters":[]},{"line":"        }","counters":[]},{"line":"    ; authorization = Signature.dummy","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let memo =","counters":[]},{"line":"    Option.value_map memo ~default:Signed_command_memo.dummy","counters":[]},{"line":"      ~f:Signed_command_memo.create_from_string_exn","counters":[]},{"line":"  in","counters":[]},{"line":"  { fee_payer","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; memo","counters":[]},{"line":"  ; account_updates =","counters":[]},{"line":"      account_updates","counters":[]},{"line":"      |> Zkapp_command.Call_forest.map","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"           ~f:(fun (p : Account_update.Body.Simple.t) : Account_update.Simple.t","counters":[]},{"line":"              ->","counters":[]},{"line":"             let authorization =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               match p.authorization_kind with","counters":[]},{"line":"               | None_given ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   Control.None_given","counters":[]},{"line":"               | Proof ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   Control.Proof Mina_base.Proof.blockchain_dummy","counters":[]},{"line":"               | Signature ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   Control.Signature Signature.dummy","counters":[]},{"line":"             in","counters":[]},{"line":"             { body = p; authorization } )","counters":[]},{"line":"      |> Zkapp_command.Call_forest.add_callers_simple","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"      |> Zkapp_command.Call_forest.accumulate_hashes_predicated","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let get_transaction_commitments (zkapp_command : Zkapp_command.t) =","counters":[]},{"line":"  let memo_hash = Signed_command_memo.hash zkapp_command.memo in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let fee_payer_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Account_update.of_fee_payer zkapp_command.fee_payer","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"    |> Zkapp_command.Digest.Account_update.create","counters":[]},{"line":"  in","counters":[]},{"line":"  let account_updates_hash = Zkapp_command.account_updates_hash zkapp_command in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let txn_commitment =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Zkapp_command.Transaction_commitment.create ~account_updates_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  let full_txn_commitment =","counters":[]},{"line":"    Zkapp_command.Transaction_commitment.create_complete txn_commitment","counters":[]},{"line":"      ~memo_hash ~fee_payer_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  (txn_commitment, full_txn_commitment)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* replace dummy signatures, proofs with valid ones for fee payer, other zkapp_command","counters":[]},{"line":"   [keymap] maps compressed public keys to private keys","counters":[]},{"line":"*)","counters":[]},{"line":"let replace_authorizations ?prover ~keymap (zkapp_command : Zkapp_command.t) :","counters":[]},{"line":"    Zkapp_command.t Async_kernel.Deferred.t =","counters":[]},{"line":"  let txn_commitment, full_txn_commitment =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    get_transaction_commitments zkapp_command","counters":[]},{"line":"  in","counters":[]},{"line":"  let sign_for_account_update ~use_full_commitment sk =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let commitment =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if use_full_commitment then full_txn_commitment else txn_commitment","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    in","counters":[]},{"line":"    Signature_lib.Schnorr.Chunked.sign sk","counters":[]},{"line":"      (Random_oracle.Input.Chunked.field commitment)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  in","counters":[]},{"line":"  let fee_payer_sk =","counters":[]},{"line":"    Signature_lib.Public_key.Compressed.Map.find_exn keymap","counters":[]},{"line":"      zkapp_command.fee_payer.body.public_key","counters":[]},{"line":"  in","counters":[]},{"line":"  let fee_payer_signature =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    sign_for_account_update ~use_full_commitment:true fee_payer_sk","counters":[]},{"line":"  in","counters":[]},{"line":"  let fee_payer_with_valid_signature =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { zkapp_command.fee_payer with authorization = fee_payer_signature }","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Async_kernel.Deferred.Let_syntax in","counters":[]},{"line":"  let%map account_updates_with_valid_signatures =","counters":[]},{"line":"    Zkapp_command.Call_forest.deferred_mapi zkapp_command.account_updates","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      ~f:(fun _ndx ({ body; authorization } : Account_update.t) tree ->","counters":[]},{"line":"        let%map authorization_with_valid_signature =","counters":[]},{"line":"          match authorization with","counters":[]},{"line":"          | Control.Signature _dummy ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let pk = body.public_key in","counters":[]},{"line":"              let sk =","counters":[]},{"line":"                match","counters":[]},{"line":"                  Signature_lib.Public_key.Compressed.Map.find keymap pk","counters":[]},{"line":"                with","counters":[]},{"line":"                | Some sk ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    sk","counters":[]},{"line":"                | None ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    failwithf","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                      \"Could not find private key for public key %s in keymap\"","counters":[]},{"line":"                      (Signature_lib.Public_key.Compressed.to_base58_check pk)","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"                      ()","counters":[]},{"line":"              in","counters":[]},{"line":"              let use_full_commitment = body.use_full_commitment in","counters":[]},{"line":"              let signature = sign_for_account_update ~use_full_commitment sk in","counters":[]},{"line":"              return (Control.Signature signature)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"          | Proof _ -> (","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              match prover with","counters":[]},{"line":"              | None ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  return authorization","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"              | Some prover ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  let txn_stmt = Zkapp_statement.of_tree tree in","counters":[]},{"line":"                  let handler","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                      (Snarky_backendless.Request.With { request; respond }) =","counters":[]},{"line":"                    match request with _ -> respond Unhandled","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  let%map (), (), proof =","counters":[]},{"line":"                    prover ?handler:(Some handler) txn_stmt","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                  in","counters":[]},{"line":"                  Control.Proof proof )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"          | None_given ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              return authorization","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"        in","counters":[]},{"line":"        { Account_update.body","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ; authorization = authorization_with_valid_signature","counters":[]},{"line":"        } )","counters":[]},{"line":"  in","counters":[]},{"line":"  { zkapp_command with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    fee_payer = fee_payer_with_valid_signature","counters":[]},{"line":"  ; account_updates = account_updates_with_valid_signatures","counters":[]},{"line":"  }","counters":[{"col_start":2,"col_end":2,"count":2}]}]}