{"filename":"src/lib/transition_router/initial_validator.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"type validation_error =","counters":[]},{"line":"  [ `Invalid_time_received of [ `Too_early | `Too_late of int64 ]","counters":[]},{"line":"  | `Invalid_genesis_protocol_state","counters":[]},{"line":"  | `Invalid_proof","counters":[]},{"line":"  | `Invalid_delta_block_chain_proof","counters":[]},{"line":"  | `Verifier_error of Error.t","counters":[]},{"line":"  | `Mismatched_protocol_version","counters":[]},{"line":"  | `Invalid_protocol_version ]","counters":[]},{"line":"","counters":[]},{"line":"let handle_validation_error ~logger ~rejected_blocks_logger ~time_received","counters":[]},{"line":"    ~trust_system ~sender ~transition_with_hash ~delta (error : validation_error)","counters":[]},{"line":"    =","counters":[]},{"line":"  let open Trust_system.Actions in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let state_hash =","counters":[]},{"line":"    State_hash.With_state_hashes.state_hash transition_with_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition = With_hash.data transition_with_hash in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let punish action message =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let message' =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"external transition with state hash $state_hash\"","counters":[]},{"line":"      ^ Option.value_map message ~default:\"\" ~f:(fun (txt, _) ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            sprintf \", %s\" txt )","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    in","counters":[]},{"line":"    let metadata =","counters":[]},{"line":"      (\"state_hash\", State_hash.to_yojson state_hash)","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      :: Option.value_map message ~default:[] ~f:Tuple2.get2","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    in","counters":[]},{"line":"    Trust_system.record_envelope_sender trust_system logger sender","counters":[]},{"line":"      (action, Some (message', metadata))","counters":[]},{"line":"  in","counters":[]},{"line":"  let metadata =","counters":[]},{"line":"    match error with","counters":[]},{"line":"    | `Invalid_time_received `Too_early ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid time\")","counters":[]},{"line":"        ; (\"time_error\", `String \"too early\")","counters":[]},{"line":"        ]","counters":[]},{"line":"    | `Invalid_time_received (`Too_late slot_diff) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid time\")","counters":[]},{"line":"        ; (\"time_error\", `String \"too late\")","counters":[]},{"line":"        ; (\"slot_diff\", `String (Int64.to_string slot_diff))","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"        ]","counters":[]},{"line":"    | `Invalid_genesis_protocol_state ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid genesis state\") ]","counters":[]},{"line":"    | `Invalid_proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid proof\")","counters":[]},{"line":"        ; ( \"protocol_state\"","counters":[]},{"line":"          , Header.protocol_state (Mina_block.header transition)","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"            |> Protocol_state.value_to_yojson )","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"        ; ( \"proof\"","counters":[]},{"line":"          , Header.protocol_state_proof @@ Mina_block.header transition","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"            |> Proof.to_yojson )","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        ]","counters":[]},{"line":"    | `Invalid_delta_block_chain_proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid delta transition chain proof\") ]","counters":[]},{"line":"    | `Verifier_error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"verifier error\")","counters":[]},{"line":"        ; (\"error\", Error_json.error_to_yojson err)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"        ]","counters":[]},{"line":"    | `Mismatched_protocol_version ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"protocol version mismatch\") ]","counters":[]},{"line":"    | `Invalid_protocol_version ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ (\"reason\", `String \"invalid protocol version\") ]","counters":[]},{"line":"  in","counters":[]},{"line":"  let metadata =","counters":[]},{"line":"    [ (\"state_hash\", State_hash.to_yojson state_hash)","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; ( \"time_received\"","counters":[]},{"line":"      , `String","counters":[]},{"line":"          (Time.to_string_abs","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"             (Block_time.to_time_exn time_received)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"             ~zone:Time.Zone.utc ) )","counters":[]},{"line":"    ]","counters":[]},{"line":"    @ metadata","counters":[]},{"line":"  in","counters":[]},{"line":"  [%log error] ~metadata","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    \"Validation error: external transition with state hash $state_hash was \\","counters":[]},{"line":"     rejected for reason $reason\" ;","counters":[]},{"line":"  [%log' debug rejected_blocks_logger]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    ~metadata:","counters":[]},{"line":"      ( ( \"protocol_state\"","counters":[]},{"line":"        , Protocol_state.Value.to_yojson","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"            (Header.protocol_state (Mina_block.header transition)) )","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"      :: metadata )","counters":[]},{"line":"    \"Validation error: external transition with state hash $state_hash was \\","counters":[]},{"line":"     rejected for reason $reason\" ;","counters":[]},{"line":"  match error with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Verifier_error err ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let error_metadata = [ (\"error\", Error_json.error_to_yojson err) ] in","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"      [%log error]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~metadata:","counters":[]},{"line":"          (error_metadata @ [ (\"state_hash\", State_hash.to_yojson state_hash) ])","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"        \"Error in verifier verifying blockchain proof for $state_hash: $error\" ;","counters":[]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Invalid_proof ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Rejected_blocks.invalid_proof) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Invalid_proof) ;","counters":[]},{"line":"      punish Sent_invalid_proof None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Invalid_delta_block_chain_proof ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        ( state_hash","counters":[]},{"line":"        , sender","counters":[]},{"line":"        , time_received","counters":[]},{"line":"        , `Invalid_delta_transition_chain_proof ) ;","counters":[]},{"line":"      punish Sent_invalid_transition_chain_merkle_proof None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Invalid_time_received `Too_early ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Rejected_blocks.received_early) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Too_early) ;","counters":[]},{"line":"      punish Gossiped_future_transition None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Invalid_genesis_protocol_state ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Invalid_genesis_protocol_state) ;","counters":[]},{"line":"      punish Has_invalid_genesis_protocol_state None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Invalid_time_received (`Too_late slot_diff) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Rejected_blocks.received_late) ;","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Too_late) ;","counters":[]},{"line":"      punish","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Gossiped_old_transition (slot_diff, delta))","counters":[]},{"line":"        (Some","counters":[]},{"line":"           ( \"off by $slot_diff slots\"","counters":[]},{"line":"           , [ (\"slot_diff\", `String (Int64.to_string slot_diff)) ] ) )","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"  | `Invalid_protocol_version ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Invalid_protocol_version) ;","counters":[]},{"line":"      punish Sent_invalid_protocol_version None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | `Mismatched_protocol_version ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Queue.enqueue Transition_frontier.rejected_blocks","counters":[]},{"line":"        (state_hash, sender, time_received, `Mismatched_protocol_version) ;","counters":[]},{"line":"      punish Sent_mismatched_protocol_version None","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"module Duplicate_block_detector = struct","counters":[]},{"line":"  (* maintain a map from block producer key, epoch, slot to state hashes *)","counters":[]},{"line":"","counters":[]},{"line":"  module Blocks = struct","counters":[]},{"line":"    module T = struct","counters":[]},{"line":"      (* order of fields significant, compare by epoch, then slot, then producer *)","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { consensus_time : Consensus.Data.Consensus_time.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        ; block_producer : Public_key.Compressed.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, compare]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include T","counters":[]},{"line":"    include Comparable.Make (T)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { mutable table : State_hash.t Blocks.Map.t; mutable latest_epoch : int }","counters":[]},{"line":"","counters":[]},{"line":"  let gc_count = ref 0","counters":[]},{"line":"","counters":[]},{"line":"  (* create dummy block to split map on *)","counters":[]},{"line":"  let make_splitting_block ~consensus_constants","counters":[]},{"line":"      ({ consensus_time; block_producer = _ } : Blocks.t) : Blocks.t =","counters":[]},{"line":"    let block_producer = Public_key.Compressed.empty in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { consensus_time =","counters":[]},{"line":"        Consensus.Data.Consensus_time.get_old ~constants:consensus_constants","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"          consensus_time","counters":[]},{"line":"    ; block_producer","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (* every gc_interval blocks seen, discard blocks more than gc_width ago *)","counters":[]},{"line":"  let table_gc ~(precomputed_values : Precomputed_values.t) t block =","counters":[]},{"line":"    let consensus_constants = precomputed_values.consensus_constants in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( `Acceptable_network_delay _","counters":[]},{"line":"        , `Gc_width _","counters":[]},{"line":"        , `Gc_width_epoch _","counters":[]},{"line":"        , `Gc_width_slot _","counters":[]},{"line":"        , `Gc_interval gc_interval ) =","counters":[]},{"line":"      Consensus.Constants.gc_parameters consensus_constants","counters":[]},{"line":"    in","counters":[]},{"line":"    gc_count := (!gc_count + 1) mod Unsigned.UInt32.to_int gc_interval ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"    if Int.equal !gc_count 0 then","counters":[]},{"line":"      let splitting_block = make_splitting_block ~consensus_constants block in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let _, _, gt_map = Map.split t.table splitting_block in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      t.table <- gt_map","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"  let create () = { table = Map.empty (module Blocks); latest_epoch = 0 }","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let check ~precomputed_values ~rejected_blocks_logger ~time_received t logger","counters":[]},{"line":"      external_transition_with_hash =","counters":[]},{"line":"    let external_transition = external_transition_with_hash.With_hash.data in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let protocol_state_hash =","counters":[]},{"line":"      State_hash.With_state_hashes.state_hash external_transition_with_hash","counters":[]},{"line":"    in","counters":[]},{"line":"    let open Consensus.Data.Consensus_state in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let consensus_state = Mina_block.consensus_state external_transition in","counters":[]},{"line":"    let consensus_time = consensus_time consensus_state in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let block_producer =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Consensus.Data.Consensus_state.block_creator consensus_state","counters":[]},{"line":"    in","counters":[]},{"line":"    let block = Blocks.{ consensus_time; block_producer } in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* try table GC *)","counters":[]},{"line":"    table_gc ~precomputed_values t block ;","counters":[]},{"line":"    match Map.find t.table block with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        t.table <- Map.add_exn t.table ~key:block ~data:protocol_state_hash","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    | Some hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if not (State_hash.equal hash protocol_state_hash) then (","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"          let metadata =","counters":[]},{"line":"            [ (\"block_producer\", Public_key.Compressed.to_yojson block_producer)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"            ; ( \"consensus_time\"","counters":[]},{"line":"              , Consensus.Data.Consensus_time.to_yojson consensus_time )","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"            ; (\"hash\", State_hash.to_yojson hash)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"            ; ( \"current_protocol_state_hash\"","counters":[]},{"line":"              , State_hash.to_yojson protocol_state_hash )","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"            ; ( \"time_received\"","counters":[]},{"line":"              , `String","counters":[]},{"line":"                  (Time.to_string_abs","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"                     (Block_time.to_time_exn time_received)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                     ~zone:Time.Zone.utc ) )","counters":[]},{"line":"            ]","counters":[]},{"line":"          in","counters":[]},{"line":"          let msg : (_, unit, string, unit) format4 =","counters":[]},{"line":"            \"Duplicate producer and slot: producer = $block_producer, \\","counters":[]},{"line":"             consensus_time = $consensus_time, previous protocol state hash = \\","counters":[]},{"line":"             $hash, current protocol state hash = $current_protocol_state_hash\"","counters":[]},{"line":"          in","counters":[]},{"line":"          [%log' debug rejected_blocks_logger] ~metadata msg ;","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"          [%log error] ~metadata msg )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let run ~logger ~trust_system ~verifier ~transition_reader","counters":[]},{"line":"    ~valid_transition_writer ~initialization_finish_signal ~precomputed_values =","counters":[]},{"line":"  let genesis_state_hash =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Precomputed_values.genesis_state_hashes precomputed_values).state_hash","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let genesis_constants =","counters":[]},{"line":"    Precomputed_values.genesis_constants precomputed_values","counters":[]},{"line":"  in","counters":[]},{"line":"  let rejected_blocks_logger =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Logger.create ~id:Logger.Logger_id.rejected_blocks ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let duplicate_checker = Duplicate_block_detector.create () in","counters":[]},{"line":"  O1trace.background_thread \"initially_validate_blocks\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Reader.iter transition_reader","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun","counters":[]},{"line":"             ( `Transition transition_env","counters":[]},{"line":"             , `Time_received time_received","counters":[]},{"line":"             , `Valid_cb valid_cb )","counters":[]},{"line":"           ->","counters":[]},{"line":"          if Ivar.is_full initialization_finish_signal then (","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"            let blockchain_length =","counters":[]},{"line":"              Envelope.Incoming.data transition_env","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"              |> Mina_block.blockchain_length |> Mina_numbers.Length.to_int","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"            in","counters":[]},{"line":"            Mina_metrics.Transition_frontier","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            .update_max_unvalidated_blocklength_observed blockchain_length ;","counters":[]},{"line":"            ( if not (Mina_net2.Validation_callback.is_expired valid_cb) then (","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":61,"col_end":61,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"              let transition_with_hash =","counters":[]},{"line":"                Envelope.Incoming.data transition_env","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                |> With_hash.of_data","counters":[]},{"line":"                     ~hash_data:","counters":[]},{"line":"                       (Fn.compose Protocol_state.hashes","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"                          (Fn.compose Header.protocol_state Mina_block.header) )","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"              in","counters":[]},{"line":"              Duplicate_block_detector.check ~precomputed_values","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~rejected_blocks_logger ~time_received duplicate_checker logger","counters":[]},{"line":"                transition_with_hash ;","counters":[]},{"line":"              let sender = Envelope.Incoming.sender transition_env in","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"              let computation =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let open Interruptible.Let_syntax in","counters":[]},{"line":"                let defer f x =","counters":[]},{"line":"                  Interruptible.uninterruptible @@ Deferred.return (f x)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":65,"col_end":65,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"                in","counters":[]},{"line":"                let%bind () =","counters":[]},{"line":"                  Interruptible.lift Deferred.unit","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                    (Mina_net2.Validation_callback.await_timeout valid_cb)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"                in","counters":[]},{"line":"                match%bind","counters":[]},{"line":"                  let open Interruptible.Result.Let_syntax in","counters":[]},{"line":"                  Validation.(","counters":[]},{"line":"                    wrap transition_with_hash","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                    |> defer","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                         (validate_time_received ~precomputed_values","counters":[]},{"line":"                            ~time_received )","counters":[]},{"line":"                    >>= defer","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"                          (validate_genesis_protocol_state ~genesis_state_hash)","counters":[]},{"line":"                    >>= Fn.compose Interruptible.uninterruptible","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"                          (validate_single_proof ~verifier ~genesis_state_hash)","counters":[]},{"line":"                    >>= defer validate_delta_block_chain","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"                    >>= defer validate_protocol_versions)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"                with","counters":[]},{"line":"                | Ok verified_transition ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Writer.write valid_transition_writer","counters":[]},{"line":"                      ( `Block","counters":[]},{"line":"                          (Envelope.Incoming.wrap ~data:verified_transition","counters":[]},{"line":"                             ~sender )","counters":[]},{"line":"                      , `Valid_cb valid_cb ) ;","counters":[]},{"line":"                    Mina_metrics.Transition_frontier","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    .update_max_blocklength_observed blockchain_length ;","counters":[]},{"line":"                    Queue.enqueue Transition_frontier.validated_blocks","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      ( State_hash.With_state_hashes.state_hash","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"                          transition_with_hash","counters":[]},{"line":"                      , sender","counters":[]},{"line":"                      , time_received ) ;","counters":[]},{"line":"                    return ()","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                | Error error ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Mina_net2.Validation_callback.fire_if_not_already_fired","counters":[]},{"line":"                      valid_cb `Reject ;","counters":[]},{"line":"                    Interruptible.uninterruptible","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    @@ handle_validation_error ~logger ~rejected_blocks_logger","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                         ~time_received ~trust_system ~sender","counters":[]},{"line":"                         ~transition_with_hash","counters":[]},{"line":"                         ~delta:genesis_constants.protocol.delta error","counters":[]},{"line":"              in","counters":[]},{"line":"              Interruptible.force computation )","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"            else Deferred.Result.fail () )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"            >>| function","counters":[]},{"line":"            | Ok () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ()","counters":[]},{"line":"            | Error () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let state_hash =","counters":[]},{"line":"                  ( Envelope.Incoming.data transition_env","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                  |> Mina_block.header |> Header.protocol_state","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"                  |> Protocol_state.hashes )","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                    .state_hash","counters":[]},{"line":"                in","counters":[]},{"line":"                let metadata =","counters":[]},{"line":"                  [ (\"state_hash\", State_hash.to_yojson state_hash)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                  ; ( \"time_received\"","counters":[]},{"line":"                    , `String","counters":[]},{"line":"                        (Time.to_string_abs","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                           (Block_time.to_time_exn time_received)","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                           ~zone:Time.Zone.utc ) )","counters":[]},{"line":"                  ]","counters":[]},{"line":"                in","counters":[]},{"line":"                [%log error] ~metadata","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                  \"Dropping blocks because libp2p validation expired\" )","counters":[]},{"line":"          else Deferred.unit ) )","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":31,"col_end":31,"count":2}]}]}