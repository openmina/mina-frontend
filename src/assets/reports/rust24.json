{"filename":"src/coverage/covfun.rs","lines":[{"line":"use super::util::{cursor_align, read_int, Leb128};","counters":[]},{"line":"use std::io::Cursor;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Record {","counters":[]},{"line":"    pub name_hash: u64,","counters":[]},{"line":"    pub data_len: u32,","counters":[]},{"line":"    pub func_hash: u64,","counters":[]},{"line":"    pub translation_unit_hash: u64,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Record {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            name_hash: read_int(cursor),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            data_len: read_int(cursor),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            func_hash: read_int(cursor),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            translation_unit_hash: read_int(cursor),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"pub enum PseudoCounter {","counters":[]},{"line":"    ExpansionRegion(u64),","counters":[]},{"line":"    CodeRegion,","counters":[]},{"line":"    SkippedRegion,","counters":[]},{"line":"    BranchRegion,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl PseudoCounter {","counters":[]},{"line":"    pub fn new(value: u64) -> Self {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        let data = value >> 1;","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"        match value & 1 {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            0 => match data {","counters":[{"col_start":23,"col_end":27,"count":0}]},{"line":"                0 => Self::CodeRegion,","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"                2 => Self::SkippedRegion,","counters":[{"col_start":21,"col_end":40,"count":0}]},{"line":"                4 => Self::BranchRegion,","counters":[{"col_start":21,"col_end":39,"count":0}]},{"line":"                _ => panic!(),","counters":[{"col_start":21,"col_end":29,"count":0}]},{"line":"            },","counters":[]},{"line":"            _ => Self::ExpansionRegion(data)","counters":[{"col_start":17,"col_end":44,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"pub enum Counter {","counters":[]},{"line":"    Zero,","counters":[]},{"line":"    Reference(usize),","counters":[]},{"line":"    Substraction(usize),","counters":[]},{"line":"    Addition(usize),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Counter {","counters":[]},{"line":"    pub fn new(value: u64) -> Self {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        let idx = (value >> 2) as usize;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"        match value & 0b11 {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            0 => Self::Zero,","counters":[{"col_start":17,"col_end":27,"count":-44}]},{"line":"            1 => Self::Reference(idx),","counters":[{"col_start":17,"col_end":37,"count":44}]},{"line":"            2 => Self::Substraction(idx),","counters":[{"col_start":17,"col_end":40,"count":0}]},{"line":"            3 => Self::Addition(idx),","counters":[{"col_start":17,"col_end":36,"count":0}]},{"line":"            _ => unreachable!()","counters":[{"col_start":17,"col_end":31,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Counter::new(u64::read_leb128(cursor))","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"pub enum Header {","counters":[]},{"line":"    PseudoCounter(PseudoCounter),","counters":[]},{"line":"    Counter(Counter)","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Header {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let header = u64::read_leb128(cursor);","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        let data = header >> 2;","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"        match header & 0b11 {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            0 => Self::PseudoCounter(PseudoCounter::new(data)),","counters":[{"col_start":17,"col_end":62,"count":0}]},{"line":"            _ => Self::Counter(Counter::new(header))","counters":[{"col_start":17,"col_end":52,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct CounterExpression {","counters":[]},{"line":"    pub lhs: Counter,","counters":[]},{"line":"    pub rhs: Counter,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl CounterExpression {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            lhs: Counter::read(cursor),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            rhs: Counter::read(cursor),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn resolve_op(op: &Counter, counters: &'static [i64], expressions: &Vec<Self>) -> i64 {","counters":[{"col_start":4,"col_end":91,"count":0}]},{"line":"        match op {","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            Counter::Zero => 0,","counters":[{"col_start":29,"col_end":30,"count":0}]},{"line":"            Counter::Reference(idx) => counters[*idx],","counters":[{"col_start":31,"col_end":53,"count":0}]},{"line":"            Counter::Substraction(idx) => expressions[*idx].resolve_sub(counters, expressions),","counters":[{"col_start":34,"col_end":94,"count":0}]},{"line":"            Counter::Addition(idx) => expressions[*idx].resolve_add(counters, expressions)","counters":[{"col_start":30,"col_end":90,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn resolve_sub(&self, counters: &'static [i64], expressions: &Vec<Self>) -> i64 {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        let lhs = Self::resolve_op(&self.lhs, counters, expressions);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        let rhs= Self::resolve_op(&self.rhs, counters, expressions);","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        //println!(\"sub {} {}\", lhs, rhs);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        lhs.wrapping_sub(rhs)","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn resolve_add(&self, counters: &'static [i64], expressions: &Vec<Self>) -> i64 {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        let lhs = Self::resolve_op(&self.lhs, counters, expressions);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        let rhs= Self::resolve_op(&self.rhs, counters, expressions);","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        //println!(\"add {} {}\", lhs, rhs);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        lhs.wrapping_add(rhs)","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug, Clone)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct SourceRange {","counters":[]},{"line":"    pub delta_line_start: usize,","counters":[]},{"line":"    pub column_start: usize,","counters":[]},{"line":"    pub num_lines: usize,","counters":[]},{"line":"    pub column_end: usize,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl SourceRange {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            delta_line_start: usize::read_leb128(cursor),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            column_start: usize::read_leb128(cursor),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            num_lines: usize::read_leb128(cursor),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            column_end: usize::read_leb128(cursor),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Region {","counters":[]},{"line":"    pub header: Header,","counters":[]},{"line":"    pub source_range: SourceRange,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Region {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            header: Header::read(cursor),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            source_range: SourceRange::read(cursor),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct FunCov {","counters":[]},{"line":"    pub function_record: Record,","counters":[]},{"line":"    pub expressions: Vec<CounterExpression>,","counters":[]},{"line":"    pub mapping_regions: Vec<(u64, Vec<Region>)>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FunCov {","counters":[]},{"line":"    pub fn read(cursor: &mut Cursor<&Vec<u8>>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let function_record = Record::read(cursor);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        //let data_pos = cursor.position();","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"        assert!(function_record.data_len > 0);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        // numIndices : LEB128, filenameIndex0 : LEB128, filenameIndex1 : LEB128...","counters":[]},{"line":"        let num_indices = u64::read_leb128(cursor);","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"        let file_id_mapping: Vec<u64> =","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            (0..num_indices).map(|_| u64::read_leb128(cursor)).collect();","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":37,"col_end":61,"count":0},{"col_start":61,"col_end":73,"count":0}]},{"line":"","counters":[]},{"line":"        // numExpressions : LEB128, expr0LHS : LEB128, expr0RHS : LEB128, expr1LHS : LEB128, expr1RHS : LEB128...","counters":[{"col_start":0,"col_end":113,"count":0}]},{"line":"        let num_expressions = u64::read_leb128(cursor);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        let expressions: Vec<CounterExpression> = (0..num_expressions)","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"            .map(|_| CounterExpression::read(cursor))","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":52,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        // [numRegionArrays : LEB128, regionsForFile0, regionsForFile1, ...]","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"        // Not actually included?","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        // let num_region_arrays = leb128::read::unsigned(&mut covfun_cursor).unwrap();","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"","counters":[]},{"line":"        let mapping_regions: Vec<(u64, Vec<Region>)> = file_id_mapping","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|index| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":25,"col_end":26,"count":0}]},{"line":"                // [numRegions : LEB128, region0, region1, ...]","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                let num_regions = u64::read_leb128(cursor);","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                let regions: Vec<Region> = (0..num_regions).map(|_| Region::read(cursor)).collect();","counters":[{"col_start":0,"col_end":64,"count":0},{"col_start":68,"col_end":88,"count":0},{"col_start":88,"col_end":100,"count":0}]},{"line":"                (*index, regions)","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        cursor_align::<u64>(cursor);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            function_record,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            expressions,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            mapping_regions,","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}