{"filename":"src/lib/rosetta_lib/errors.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Partial_reason = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    | Length_mismatch","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Fee_payer_and_source_mismatch","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Amount_not_some","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Account_not_some","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Invalid_metadata","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Incorrect_token_id","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Amount_inc_dec_mismatch","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Status_not_pending","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Can't_find_kind of string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  [@@deriving yojson, sexp, show, equal]","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Variant = struct","counters":[]},{"line":"  (* DO NOT change the order of this variant, the generated error code relies","counters":[]},{"line":"   * on it and we want that to remain stable *)","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ `Sql of string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"    | `Json_parse of string option","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    | `Graphql_mina_query of string","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"    | `Network_doesn't_exist of string * string","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    | `Chain_info_missing","counters":[]},{"line":"    | `Account_not_found of string","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"    | `Invariant_violation","counters":[]},{"line":"    | `Transaction_not_found of string","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    | `Block_missing of string","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"    | `Malformed_public_key","counters":[]},{"line":"    | `Operations_not_valid of Partial_reason.t list","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"    | `Unsupported_operation_for_construction","counters":[]},{"line":"    | `Signature_missing","counters":[]},{"line":"    | `Public_key_format_not_valid","counters":[]},{"line":"    | `No_options_provided","counters":[]},{"line":"    | `Exception of string","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"    | `Signature_invalid","counters":[]},{"line":"    | `Memo_invalid","counters":[]},{"line":"    | `Graphql_uri_not_set","counters":[]},{"line":"    | (* We want each of these Transaction_submit... to be distinct errors *)","counters":[]},{"line":"      `Transaction_submit_no_sender","counters":[]},{"line":"    | `Transaction_submit_duplicate","counters":[]},{"line":"    | `Transaction_submit_bad_nonce","counters":[]},{"line":"    | `Transaction_submit_fee_small","counters":[]},{"line":"    | `Transaction_submit_invalid_signature","counters":[]},{"line":"    | `Transaction_submit_insufficient_balance","counters":[]},{"line":"    | `Transaction_submit_expired ]","counters":[]},{"line":"  [@@deriving yojson, show, equal, to_enum, to_representatives]","counters":[{"col_start":62,"col_end":62,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T : sig","counters":[]},{"line":"  type t [@@deriving yojson, show, equal]","counters":[]},{"line":"","counters":[]},{"line":"  val create : ?context:string -> Variant.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val erase : t -> Rosetta_models.Error.t","counters":[]},{"line":"","counters":[]},{"line":"  val kind : t -> Variant.t","counters":[]},{"line":"","counters":[]},{"line":"  val all_errors : Rosetta_models.Error.t list lazy_t","counters":[]},{"line":"","counters":[]},{"line":"  module Lift : sig","counters":[]},{"line":"    val parse :","counters":[]},{"line":"      ?context:string -> ('a, string) Result.t -> ('a, t) Deferred.Result.t","counters":[]},{"line":"","counters":[]},{"line":"    val sql :","counters":[]},{"line":"         ?context:string","counters":[]},{"line":"      -> ('a, [< Caqti_error.t ]) Deferred.Result.t","counters":[]},{"line":"      -> ('a, t) Deferred.Result.t","counters":[]},{"line":"","counters":[]},{"line":"    val wrap :","counters":[]},{"line":"      ('a, t) Deferred.Result.t -> ('a, [> `App of t ]) Deferred.Result.t","counters":[]},{"line":"  end","counters":[]},{"line":"end = struct","counters":[]},{"line":"  type t = { extra_context : string option; kind : Variant.t }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"  [@@deriving yojson, show, equal]","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let code { extra_context = _; kind } = Variant.to_enum kind + 1","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let kind { extra_context = _; kind } = kind","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let message : Variant.t -> string = function","counters":[]},{"line":"    | `Sql _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"SQL failure\"","counters":[]},{"line":"    | `Json_parse _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"JSON parse error\"","counters":[]},{"line":"    | `Graphql_mina_query _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"GraphQL query failed\"","counters":[]},{"line":"    | `Network_doesn't_exist _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Network doesn't exist\"","counters":[]},{"line":"    | `Chain_info_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Chain info missing\"","counters":[]},{"line":"    | `Account_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Account not found\"","counters":[]},{"line":"    | `Invariant_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Internal invariant violation (you found a bug)\"","counters":[]},{"line":"    | `Transaction_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Transaction not found\"","counters":[]},{"line":"    | `Block_missing _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Block not found\"","counters":[]},{"line":"    | `Malformed_public_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Malformed public key\"","counters":[]},{"line":"    | `Operations_not_valid _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Cannot convert operations to valid transaction\"","counters":[]},{"line":"    | `Public_key_format_not_valid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Invalid public key format\"","counters":[]},{"line":"    | `Unsupported_operation_for_construction ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Unsupported operation for construction\"","counters":[]},{"line":"    | `Signature_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Signature missing\"","counters":[]},{"line":"    | `No_options_provided ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"No options provided\"","counters":[]},{"line":"    | `Exception _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Exception\"","counters":[]},{"line":"    | `Signature_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Invalid signature\"","counters":[]},{"line":"    | `Memo_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Invalid memo\"","counters":[]},{"line":"    | `Graphql_uri_not_set ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"No GraphQL URI set\"","counters":[]},{"line":"    | `Transaction_submit_no_sender ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: No sender found in ledger\"","counters":[]},{"line":"    | `Transaction_submit_duplicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: A duplicate is detected\"","counters":[]},{"line":"    | `Transaction_submit_bad_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: Nonce invalid\"","counters":[]},{"line":"    | `Transaction_submit_fee_small ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: Fee too small\"","counters":[]},{"line":"    | `Transaction_submit_invalid_signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: Invalid signature\"","counters":[]},{"line":"    | `Transaction_submit_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: Insufficient balance\"","counters":[]},{"line":"    | `Transaction_submit_expired ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Can't send transaction: Expired\"","counters":[]},{"line":"","counters":[]},{"line":"  let context : Variant.t -> string option = function","counters":[]},{"line":"    | `Sql msg ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some msg","counters":[]},{"line":"    | `Json_parse optional_msg ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        optional_msg","counters":[]},{"line":"    | `Graphql_mina_query msg ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some msg","counters":[]},{"line":"    | `Network_doesn't_exist (req, conn) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (sprintf","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             !\"You are requesting the status for the network %s, but you are \\","counters":[]},{"line":"               connected to the network %s\\n\"","counters":[]},{"line":"             req conn )","counters":[]},{"line":"    | `Chain_info_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          \"Could not get chain information. This probably means you are \\","counters":[]},{"line":"           bootstrapping -- bootstrapping is the process of synchronizing with \\","counters":[]},{"line":"           peers that are way ahead of you on the chain. Try again in a few \\","counters":[]},{"line":"           seconds.\"","counters":[]},{"line":"    | `Account_not_found addr ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (sprintf","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             !\"You attempted to lookup %s, but we couldn't find it in the \\","counters":[]},{"line":"               ledger.\"","counters":[]},{"line":"             addr )","counters":[]},{"line":"    | `Invariant_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_not_found hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (sprintf","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             \"You attempted to lookup %s, but it is missing from the mempool. \\","counters":[]},{"line":"              This may be due to its inclusion in a block -- try looking for \\","counters":[]},{"line":"              this transaction in a recent block. It also could be due to the \\","counters":[]},{"line":"              transaction being evicted from the mempool.\"","counters":[]},{"line":"             hash )","counters":[]},{"line":"    | `Block_missing s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (sprintf","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             \"We couldn't find the block in the archive node, specified by %s. \\","counters":[]},{"line":"              Ask a friend for the missing data.\"","counters":[]},{"line":"             s )","counters":[]},{"line":"    | `Malformed_public_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Operations_not_valid reasons ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (sprintf","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             !\"Cannot recover transaction for the following reasons: %{sexp: \\","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"               Partial_reason.t list}\"","counters":[]},{"line":"             reasons )","counters":[]},{"line":"    | `Public_key_format_not_valid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Unsupported_operation_for_construction ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Signature_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `No_options_provided ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Exception s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some (sprintf \"Exception when processing request: %s\" s)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"    | `Signature_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Memo_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Graphql_uri_not_set ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_no_sender ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_duplicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_bad_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_fee_small ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_invalid_signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"    | `Transaction_submit_expired ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None","counters":[]},{"line":"","counters":[]},{"line":"  let retriable : Variant.t -> bool = function","counters":[]},{"line":"    | `Sql _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Json_parse _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Graphql_mina_query _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Network_doesn't_exist _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Chain_info_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Account_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Invariant_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Block_missing _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Malformed_public_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Operations_not_valid _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Public_key_format_not_valid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Unsupported_operation_for_construction ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Signature_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `No_options_provided ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Exception _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Signature_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Memo_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Graphql_uri_not_set ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_no_sender ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        true","counters":[]},{"line":"    | `Transaction_submit_duplicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_bad_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_fee_small ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_invalid_signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"    | `Transaction_submit_expired ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        false","counters":[]},{"line":"","counters":[]},{"line":"  (* Unlike message above, description can be updated whenever we see fit *)","counters":[]},{"line":"  let description : Variant.t -> string = function","counters":[]},{"line":"    | `Sql _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"We encountered a SQL failure.\"","counters":[]},{"line":"    | `Json_parse _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"We encountered an error while parsing JSON.\"","counters":[]},{"line":"    | `Graphql_mina_query _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The GraphQL query failed.\"","counters":[]},{"line":"    | `Network_doesn't_exist _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The network doesn't exist.\"","counters":[]},{"line":"    | `Chain_info_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Some chain info is missing.\"","counters":[]},{"line":"    | `Account_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"That account could not be found.\"","counters":[]},{"line":"    | `Invariant_violation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"One of our internal invariants was violated. (That means you found a \\","counters":[]},{"line":"         bug!)\"","counters":[]},{"line":"    | `Transaction_not_found _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"That transaction could not be found.\"","counters":[]},{"line":"    | `Block_missing s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        sprintf","counters":[]},{"line":"          \"We couldn't find the block in the archive node, specified by %s. \\","counters":[]},{"line":"           Ask a friend for the missing data.\"","counters":[]},{"line":"          s","counters":[]},{"line":"    | `Malformed_public_key ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The public key you provided was malformed.\"","counters":[]},{"line":"    | `Operations_not_valid _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"We could not convert those operations to a valid transaction.\"","counters":[]},{"line":"    | `Public_key_format_not_valid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"The public key you provided had an invalid format.\"","counters":[]},{"line":"    | `Unsupported_operation_for_construction ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"An operation you provided isn't supported for construction.\"","counters":[]},{"line":"    | `Signature_missing ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Your request is missing a signature.\"","counters":[]},{"line":"    | `Signature_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Your request has an invalid signature.\"","counters":[]},{"line":"    | `Memo_invalid ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Your request has an invalid memo.\"","counters":[]},{"line":"    | `No_options_provided ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Your request is missing options.\"","counters":[]},{"line":"    | `Graphql_uri_not_set ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"This Rosetta instance is running without a GraphQL URI set but this \\","counters":[]},{"line":"         request requires one.\"","counters":[]},{"line":"    | `Exception _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"We encountered an internal exception while processing your request. \\","counters":[]},{"line":"         (That means you found a bug!)\"","counters":[]},{"line":"    | `Transaction_submit_no_sender ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"This could occur because the node isn't fully synced or the account \\","counters":[]},{"line":"         doesn't actually exist in the ledger yet.\"","counters":[]},{"line":"    | `Transaction_submit_duplicate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"This could occur if you've already sent this transaction. Please \\","counters":[]},{"line":"         report a bug if you are confident you didn't already send this exact \\","counters":[]},{"line":"         transaction.\"","counters":[]},{"line":"    | `Transaction_submit_bad_nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"You must use the current nonce in your account in the ledger or one \\","counters":[]},{"line":"         that is inferred based on pending transactions in the transaction \\","counters":[]},{"line":"         pool.\"","counters":[]},{"line":"    | `Transaction_submit_fee_small ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        sprintf","counters":[]},{"line":"          \"The minimum fee on transactions is %s . Please increase your fee to \\","counters":[]},{"line":"           at least this amount.\"","counters":[]},{"line":"          (Currency.Fee.to_formatted_string","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"             Mina_compile_config.minimum_user_command_fee )","counters":[]},{"line":"    | `Transaction_submit_invalid_signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"An invalid signature is attached to this transaction\"","counters":[]},{"line":"    | `Transaction_submit_insufficient_balance ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"This account do not have sufficient balance perform the requested \\","counters":[]},{"line":"         transaction.\"","counters":[]},{"line":"    | `Transaction_submit_expired ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"This transaction is expired. Please try again with a larger \\","counters":[]},{"line":"         valid_until.\"","counters":[]},{"line":"","counters":[]},{"line":"  let create ?context kind = { extra_context = context; kind }","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let erase (t : t) =","counters":[]},{"line":"    { Rosetta_models.Error.code = Int32.of_int_exn (code t)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    ; message = message t.kind","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; retriable = retriable t.kind","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    ; details =","counters":[]},{"line":"        ( match (context t.kind, t.extra_context) with","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        | None, None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some (`Assoc [ (\"body\", Variant.to_yojson t.kind) ])","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"        | None, Some context | Some context, None ->","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"            Some","counters":[]},{"line":"              (`Assoc","counters":[]},{"line":"                [ (\"body\", Variant.to_yojson t.kind)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                ; (\"error\", `String context)","counters":[]},{"line":"                ] )","counters":[]},{"line":"        | Some context1, Some context2 ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some","counters":[]},{"line":"              (`Assoc","counters":[]},{"line":"                [ (\"body\", Variant.to_yojson t.kind)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                ; (\"error\", `String context1)","counters":[]},{"line":"                ; (\"extra\", `String context2)","counters":[]},{"line":"                ] ) )","counters":[]},{"line":"    ; description = Some (description t.kind)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  (* The most recent rosetta-cli denies errors that have details in them. When","counters":[]},{"line":"   * future versions of the spec allow for more detailed descriptions we can","counters":[]},{"line":"   * remove this filtering. *)","counters":[]},{"line":"  let all_errors =","counters":[]},{"line":"    (* This is n^2, but |input| is small enough that the performance doesn't","counters":[]},{"line":"     * matter here. Plus this is likely cheaper than sorting first due to the","counters":[]},{"line":"     * small size *)","counters":[]},{"line":"    let rec uniq ~eq = function","counters":[]},{"line":"      | [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          []","counters":[]},{"line":"      | x :: xs ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          x :: (xs |> List.filter ~f:(fun x' -> not (eq x x')) |> uniq ~eq)","counters":[{"col_start":48,"col_end":48,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":66,"col_end":66,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"    in","counters":[]},{"line":"    Variant.to_representatives","counters":[]},{"line":"    |> Lazy.map ~f:(fun vs -> List.map vs ~f:(Fn.compose erase create))","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    |> Lazy.map ~f:(fun es ->","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":14,"col_end":14,"count":1}]},{"line":"           List.map es ~f:(fun e ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"               { e with Rosetta_models.Error.details = None } )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"           |> uniq","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~eq:(fun { Rosetta_models.Error.code; _ } { code = code2; _ } ->","counters":[]},{"line":"                  Int32.equal code code2 ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  module Lift = struct","counters":[]},{"line":"    let parse ?context res =","counters":[]},{"line":"      Deferred.return","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Result.map_error","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"           ~f:(fun s -> create ?context (`Json_parse (Some s)))","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"           res )","counters":[]},{"line":"","counters":[]},{"line":"    let sql ?context res =","counters":[]},{"line":"      Deferred.Result.map_error","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun e -> create ?context (`Sql (Caqti_error.show e)))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        res","counters":[]},{"line":"","counters":[]},{"line":"    let wrap t = Deferred.Result.map_error ~f:(fun e -> `App e) t","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"module Transaction_submit = struct","counters":[]},{"line":"  (* This is a very hacky error message check from GraphQL right now.","counters":[]},{"line":"   * We'll need to do some surgery on the daemon to properly pass errors through","counters":[]},{"line":"   * GraphQL more explicitly *)","counters":[]},{"line":"  let of_request_error s =","counters":[]},{"line":"    let variant =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let p pat = String.is_substring ~substring:pat s in","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      if p \"infer nonce for transaction from specified\" then","counters":[]},{"line":"        Some `Transaction_submit_no_sender","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else if p \"[\\\"Duplicate\\\"]\" then Some `Transaction_submit_duplicate","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      else if p \"either different from inferred nonce\" then","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Some `Transaction_submit_bad_nonce","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else if p \"is less than the minimum fee\" then","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Some `Transaction_submit_fee_small","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else if p \"Error: Invalid_signature\" then","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Some `Transaction_submit_invalid_signature","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else if p \"[\\\"Insufficient_funds\\\"]\" then","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"        Some `Transaction_submit_insufficient_balance","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      else if p \"[\\\"Expired\\\"]\" then Some `Transaction_submit_expired","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"      else None","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    in","counters":[]},{"line":"    Option.map variant ~f:(fun v -> create v)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}