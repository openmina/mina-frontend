{"filename":"src/hash.rs","lines":[{"line":"use ark_ff::{BigInteger, BigInteger256, Field, FromBytes};","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"// use oracle::{poseidon::{ArithmeticSponge, Sponge}, constants::PlonkSpongeConstantsKimchi, pasta::fp_kimchi::static_params};","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    poseidon::{static_params, ArithmeticSponge, PlonkSpongeConstantsKimchi, Sponge},","counters":[]},{"line":"    scan_state::currency,","counters":[]},{"line":"    FpExt, SpongeParamsForField,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"enum Item {","counters":[]},{"line":"    Bool(bool),","counters":[]},{"line":"    U2(u8),","counters":[]},{"line":"    U8(u8),","counters":[]},{"line":"    U32(u32),","counters":[]},{"line":"    U48([u8; 6]),","counters":[]},{"line":"    U64(u64),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::fmt::Debug for Item {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Self::Bool(arg0) => f.write_fmt(format_args!(\"{}_bool\", i32::from(*arg0))),","counters":[{"col_start":23,"col_end":86,"count":0}]},{"line":"            Self::U2(arg0) => f.write_fmt(format_args!(\"{}_u2\", arg0)),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"            Self::U8(arg0) => f.write_fmt(format_args!(\"{}_u8\", arg0)),","counters":[{"col_start":21,"col_end":70,"count":0}]},{"line":"            Self::U32(arg0) => f.write_fmt(format_args!(\"{}_u32\", arg0)),","counters":[{"col_start":22,"col_end":72,"count":0}]},{"line":"            Self::U48(arg0) => f.write_fmt(format_args!(\"{:?}_u48\", arg0)),","counters":[{"col_start":22,"col_end":74,"count":0}]},{"line":"            Self::U64(arg0) => f.write_fmt(format_args!(\"{}_u64\", arg0)),","counters":[{"col_start":22,"col_end":72,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Item {","counters":[]},{"line":"    fn nbits(&self) -> u32 {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Item::Bool(_) => 1,","counters":[{"col_start":29,"col_end":30,"count":0}]},{"line":"            Item::U2(_) => 2,","counters":[{"col_start":27,"col_end":28,"count":0}]},{"line":"            Item::U8(_) => 8,","counters":[{"col_start":27,"col_end":28,"count":0}]},{"line":"            Item::U32(_) => 32,","counters":[{"col_start":28,"col_end":30,"count":0}]},{"line":"            Item::U48(_) => 48,","counters":[{"col_start":28,"col_end":30,"count":0}]},{"line":"            Item::U64(_) => 64,","counters":[{"col_start":28,"col_end":30,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn as_bigint(&self) -> BigInteger256 {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Item::Bool(v) => {","counters":[{"col_start":23,"col_end":30,"count":0}]},{"line":"                if *v {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                    1.into()","counters":[{"col_start":22,"col_end":28,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    0.into()","counters":[{"col_start":22,"col_end":28,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"            Item::U2(v) => (*v as u64).into(),","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"            Item::U8(v) => (*v as u64).into(),","counters":[{"col_start":21,"col_end":45,"count":0}]},{"line":"            Item::U32(v) => (*v as u64).into(),","counters":[{"col_start":22,"col_end":46,"count":0}]},{"line":"            Item::U48(v) => {","counters":[{"col_start":22,"col_end":29,"count":0}]},{"line":"                let mut bytes = <[u8; 32]>::default();","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                bytes[..6].copy_from_slice(&v[..]);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                BigInteger256::read(&bytes[..]).unwrap()","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            }","counters":[]},{"line":"            Item::U64(v) => (*v).into(),","counters":[{"col_start":22,"col_end":39,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct Inputs {","counters":[]},{"line":"    fields: Vec<Fp>,","counters":[]},{"line":"    packeds: Vec<Item>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Default for Inputs {","counters":[]},{"line":"    fn default() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self::new()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::fmt::Debug for Inputs {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        f.debug_struct(\"Inputs\")","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            .field(","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"                &format!(\"fields[{:?}]\", self.fields.len()),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                &self","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                    .fields","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .map(|f| f.to_decimal())","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":43,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"                    .collect::<Vec<_>>(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            )","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .field(&format!(\"packeds[{:?}]\", self.packeds.len()), &self.packeds)","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"            .finish()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Inputs {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fields: Vec::with_capacity(256),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            packeds: Vec::with_capacity(256),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_bool(&mut self, value: bool) {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        self.packeds.push(Item::Bool(value));","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_u2(&mut self, value: u8) {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        self.packeds.push(Item::U2(value));","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_u8(&mut self, value: u8) {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        self.packeds.push(Item::U8(value));","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_u32(&mut self, value: u32) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.packeds.push(Item::U32(value));","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_u64(&mut self, value: u64) {","counters":[{"col_start":4,"col_end":46,"count":2860}]},{"line":"        self.packeds.push(Item::U64(value));","counters":[{"col_start":0,"col_end":44,"count":2860}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2860}]},{"line":"","counters":[]},{"line":"    pub fn append_u48(&mut self, value: [u8; 6]) {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        self.packeds.push(Item::U48(value));","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append_field(&mut self, value: Fp) {","counters":[{"col_start":4,"col_end":47,"count":3015}]},{"line":"        self.fields.push(value);","counters":[{"col_start":0,"col_end":32,"count":3015}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":3015}]},{"line":"","counters":[]},{"line":"    pub fn append_bytes(&mut self, value: &[u8]) {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        const BITS: [u8; 8] = [1, 2, 4, 8, 16, 32, 64, 128];","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        self.packeds.reserve(value.len() * 8);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        for byte in value {","counters":[{"col_start":12,"col_end":16,"count":12060},{"col_start":20,"col_end":25,"count":12060}]},{"line":"            for bit in BITS {","counters":[{"col_start":16,"col_end":19,"count":0},{"col_start":23,"col_end":27,"count":12060},{"col_start":28,"col_end":29,"count":0}]},{"line":"                self.append_bool(byte & bit != 0);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn append<T>(&mut self, value: &T)","counters":[{"col_start":4,"col_end":42,"count":2860}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":2860}]},{"line":"        T: ToInputs,","counters":[{"col_start":0,"col_end":20,"count":2860}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":2860}]},{"line":"        value.to_inputs(self);","counters":[{"col_start":0,"col_end":30,"count":2860}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2860}]},{"line":"","counters":[]},{"line":"    #[allow(clippy::wrong_self_convention)]","counters":[]},{"line":"    pub fn to_fields(mut self) -> Vec<Fp> {","counters":[{"col_start":4,"col_end":43,"count":0}]},{"line":"        let mut nbits = 0;","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        let mut current: BigInteger256 = 0.into();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        for (item, item_nbits) in self.packeds.iter().map(|i| (i.as_bigint(), i.nbits())) {","counters":[{"col_start":13,"col_end":29,"count":0},{"col_start":34,"col_end":58,"count":0},{"col_start":62,"col_end":88,"count":0},{"col_start":88,"col_end":89,"count":0}]},{"line":"            nbits += item_nbits;","counters":[{"col_start":12,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"            if nbits < 255 {","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":27,"col_end":28,"count":0}]},{"line":"                current.muln(item_nbits);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"                // Addition, but we use 'bitwise or' because we know bits of","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                // `current` are zero (we just shift-left them)","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                current = BigInteger256([","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    current.0[0] | item.0[0],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    current.0[1] | item.0[1],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    current.0[2] | item.0[2],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    current.0[3] | item.0[3],","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                ]);","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            } else {","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":19,"col_end":20,"count":0}]},{"line":"                self.fields.push(current.into());","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                current = item;","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                nbits = item_nbits;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        if nbits > 0 {","counters":[{"col_start":11,"col_end":20,"count":0},{"col_start":21,"col_end":22,"count":0}]},{"line":"            self.fields.push(current.into());","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        self.fields","counters":[{"col_start":8,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn param_to_field_impl(param: &str, default: [u8; 32]) -> Fp {","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"    let param_bytes = param.as_bytes();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    let len = param_bytes.len();","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"    let mut fp = default;","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    fp[..len].copy_from_slice(param_bytes);","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"    Fp::read(&fp[..]).expect(\"fp read failed\")","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"fn param_to_field(param: &str) -> Fp {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    const DEFAULT: [u8; 32] = [","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*', b'*',","counters":[{"col_start":0,"col_end":97,"count":0}]},{"line":"        b'*', b'*', b'*', b'*', b'*', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"    ];","counters":[{"col_start":0,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    if param.len() > 20 {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        panic!(\"must be 20 byte maximum\");","counters":[{"col_start":8,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    param_to_field_impl(param, DEFAULT)","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"fn param_to_field_noinputs(param: &str) -> Fp {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    const DEFAULT: [u8; 32] = [0; 32];","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"    if param.len() > 32 {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        panic!(\"must be 32 byte maximum\");","counters":[{"col_start":8,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    param_to_field_impl(param, DEFAULT)","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn hash_with_kimchi(param: &str, fields: &[Fp]) -> Fp {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"    let mut sponge = ArithmeticSponge::<Fp, PlonkSpongeConstantsKimchi>::new(static_params());","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"","counters":[]},{"line":"    sponge.absorb(&[param_to_field(param)]);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    sponge.squeeze();","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    sponge.absorb(fields);","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"    sponge.squeeze()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub fn hash_fields<F: Field + SpongeParamsForField<F>>(fields: &[F]) -> F {","counters":[]},{"line":"    let mut sponge = ArithmeticSponge::<F, PlonkSpongeConstantsKimchi>::new(F::get_params());","counters":[]},{"line":"","counters":[]},{"line":"    sponge.absorb(fields);","counters":[]},{"line":"    sponge.squeeze()","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn hash_noinputs(param: &str) -> Fp {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"    let mut sponge = ArithmeticSponge::<Fp, PlonkSpongeConstantsKimchi>::new(static_params());","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"    // ArithmeticSponge::<Fp, PlonkSpongeConstantsKimchi>::new(pasta::fp_kimchi::static_params());","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"","counters":[]},{"line":"    sponge.absorb(&[param_to_field_noinputs(param)]);","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"    sponge.squeeze()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"pub trait ToInputs {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs);","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for Fp {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        inputs.append_field(*self);","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for CompressedPubKey {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        inputs.append_field(self.x);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        inputs.append_bool(self.is_odd);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for crate::TokenId {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        inputs.append_field(self.0);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl ToInputs for bool {","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        inputs.append_bool(*self);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl<T> ToInputs for currency::Signed<T>","counters":[]},{"line":"where","counters":[]},{"line":"    T: currency::Magnitude,","counters":[]},{"line":"    T: ToInputs,","counters":[]},{"line":"{","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/currency/currency.ml#L453","counters":[]},{"line":"    fn to_inputs(&self, inputs: &mut Inputs) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        self.magnitude.to_inputs(inputs);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let sgn = matches!(self.sgn, currency::Sgn::Pos);","counters":[{"col_start":12,"col_end":15,"count":0},{"col_start":18,"col_end":26,"count":0},{"col_start":27,"col_end":35,"count":0}]},{"line":"        inputs.append_bool(sgn);","counters":[{"col_start":8,"col_end":32,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use o1_utils::FieldHelpers;","counters":[]},{"line":"","counters":[]},{"line":"    #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"    use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"    use super::*;","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_param() {","counters":[]},{"line":"        for (s, hex) in [","counters":[]},{"line":"            (","counters":[]},{"line":"                \"\",","counters":[]},{"line":"                \"2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a000000000000000000000000\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                \"hello\",","counters":[]},{"line":"                \"68656c6c6f2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a000000000000000000000000\",","counters":[]},{"line":"            ),","counters":[]},{"line":"            (","counters":[]},{"line":"                \"aaaaaaaaaaaaaaaaaaaa\",","counters":[]},{"line":"                \"6161616161616161616161616161616161616161000000000000000000000000\",","counters":[]},{"line":"            ),","counters":[]},{"line":"        ] {","counters":[]},{"line":"            let field = param_to_field(s);","counters":[]},{"line":"            assert_eq!(field.to_hex(), hex);","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    #[test]","counters":[]},{"line":"    fn test_inputs() {","counters":[]},{"line":"        let mut inputs = Inputs::new();","counters":[]},{"line":"","counters":[]},{"line":"        inputs.append_bool(true);","counters":[]},{"line":"        inputs.append_u64(0); // initial_minimum_balance","counters":[]},{"line":"        inputs.append_u32(0); // cliff_time","counters":[]},{"line":"        inputs.append_u64(0); // cliff_amount","counters":[]},{"line":"        inputs.append_u32(1); // vesting_period","counters":[]},{"line":"        inputs.append_u64(0); // vesting_increment","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"INPUTS={:?}\", inputs);","counters":[]},{"line":"        elog!(\"FIELDS={:?}\", inputs.to_fields());","counters":[]},{"line":"","counters":[]},{"line":"        // // Self::timing","counters":[]},{"line":"        // match self.timing {","counters":[]},{"line":"        //     Timing::Untimed => {","counters":[]},{"line":"        //         roi.append_bool(false);","counters":[]},{"line":"        //         roi.append_u64(0); // initial_minimum_balance","counters":[]},{"line":"        //         roi.append_u32(0); // cliff_time","counters":[]},{"line":"        //         roi.append_u64(0); // cliff_amount","counters":[]},{"line":"        //         roi.append_u32(1); // vesting_period","counters":[]},{"line":"        //         roi.append_u64(0); // vesting_increment","counters":[]},{"line":"        //     }","counters":[]},{"line":"        //     Timing::Timed {","counters":[]},{"line":"        //         initial_minimum_balance,","counters":[]},{"line":"        //         cliff_time,","counters":[]},{"line":"        //         cliff_amount,","counters":[]},{"line":"        //         vesting_period,","counters":[]},{"line":"        //         vesting_increment,","counters":[]},{"line":"        //     } => {","counters":[]},{"line":"        //         roi.append_bool(true);","counters":[]},{"line":"        //         roi.append_u64(initial_minimum_balance);","counters":[]},{"line":"        //         roi.append_u32(cliff_time);","counters":[]},{"line":"        //         roi.append_u64(cliff_amount);","counters":[]},{"line":"        //         roi.append_u32(vesting_period);","counters":[]},{"line":"        //         roi.append_u64(vesting_increment);","counters":[]},{"line":"        //     }","counters":[]},{"line":"        // }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]}]}