{"filename":"src/lib/crypto/kimchi_backend/pasta/pallas_based_plonk.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Kimchi_backend_common","counters":[]},{"line":"open Kimchi_pasta_basic","counters":[]},{"line":"module Field = Fq","counters":[]},{"line":"module Curve = Pallas","counters":[]},{"line":"","counters":[]},{"line":"module Bigint = struct","counters":[]},{"line":"  include Field.Bigint","counters":[]},{"line":"","counters":[]},{"line":"  let of_data _ = failwith __LOC__","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  let to_field = Field.of_bigint","counters":[]},{"line":"","counters":[]},{"line":"  let of_field = Field.to_bigint","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let field_size : Bigint.t = Field.size","counters":[]},{"line":"","counters":[]},{"line":"module Verification_key = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Pasta_bindings.Fq.t","counters":[]},{"line":"    , Kimchi_bindings.Protocol.SRS.Fq.t","counters":[]},{"line":"    , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm )","counters":[]},{"line":"    Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"","counters":[]},{"line":"  let to_string _ = failwith __LOC__","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let of_string _ = failwith __LOC__","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let shifts (t : t) : Field.t array = t.shifts","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: change name *)","counters":[]},{"line":"module R1CS_constraint_system =","counters":[]},{"line":"  Kimchi_pasta_constraint_system.Pallas_constraint_system","counters":[]},{"line":"","counters":[]},{"line":"let lagrange : int -> _ Kimchi_types.poly_comm array =","counters":[]},{"line":"  Memo.general ~hashable:Int.hashable (fun domain_log2 ->","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"      Array.map","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Precomputed.Lagrange_precomputations.(","counters":[]},{"line":"          pallas.(index_of_domain_log2 domain_log2))","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ~f:(fun unshifted ->","counters":[]},{"line":"          { Kimchi_types.unshifted =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              Array.map unshifted ~f:(fun (x, y) -> Kimchi_types.Finite (x, y))","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; shifted = None","counters":[]},{"line":"          } ) )","counters":[]},{"line":"","counters":[]},{"line":"let with_lagrange f (vk : Verification_key.t) =","counters":[]},{"line":"  f (lagrange vk.domain.log_size_of_group) vk","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"let with_lagranges f (vks : Verification_key.t array) =","counters":[]},{"line":"  let lgrs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Array.map vks ~f:(fun vk -> lagrange vk.domain.log_size_of_group)","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"  in","counters":[]},{"line":"  f lgrs vks","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"module Rounds_vector = Rounds.Wrap_vector","counters":[]},{"line":"module Rounds = Rounds.Wrap","counters":[]},{"line":"","counters":[]},{"line":"module Keypair = Dlog_plonk_based_keypair.Make (struct","counters":[]},{"line":"  let name = \"pallas\"","counters":[]},{"line":"","counters":[]},{"line":"  module Rounds = Rounds","counters":[]},{"line":"  module Urs = Kimchi_bindings.Protocol.SRS.Fq","counters":[]},{"line":"  module Index = Kimchi_bindings.Protocol.Index.Fq","counters":[]},{"line":"  module Curve = Curve","counters":[]},{"line":"  module Poly_comm = Fq_poly_comm","counters":[]},{"line":"  module Scalar_field = Field","counters":[]},{"line":"  module Verifier_index = Kimchi_bindings.Protocol.VerifierIndex.Fq","counters":[]},{"line":"  module Gate_vector = Kimchi_bindings.Protocol.Gates.Vector.Fq","counters":[]},{"line":"  module Constraint_system = R1CS_constraint_system","counters":[]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"module Proof = Plonk_dlog_proof.Make (struct","counters":[]},{"line":"  let id = \"pasta_pallas\"","counters":[]},{"line":"","counters":[]},{"line":"  module Scalar_field = Field","counters":[]},{"line":"  module Base_field = Fp","counters":[]},{"line":"","counters":[]},{"line":"  module Backend = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( Pasta_bindings.Fp.t Kimchi_types.or_infinity","counters":[]},{"line":"      , Pasta_bindings.Fq.t )","counters":[]},{"line":"      Kimchi_types.prover_proof","counters":[]},{"line":"","counters":[]},{"line":"    include Kimchi_bindings.Protocol.Proof.Fq","counters":[]},{"line":"","counters":[]},{"line":"    let batch_verify vks ts =","counters":[]},{"line":"      Promise.run_in_thread (fun () -> batch_verify vks ts)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let create_aux ~f:create (pk : Keypair.t) primary auxiliary prev_chals","counters":[]},{"line":"        prev_comms =","counters":[]},{"line":"      (* external values contains [1, primary..., auxiliary ] *)","counters":[]},{"line":"      let external_values i =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let open Field.Vector in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        if i = 0 then Field.one","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        else if i - 1 < length primary then get primary (i - 1)","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        else get auxiliary (i - 1 - length primary)","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"      in","counters":[]},{"line":"","counters":[]},{"line":"      (* compute witness *)","counters":[]},{"line":"      let computed_witness =","counters":[]},{"line":"        R1CS_constraint_system.compute_witness pk.cs external_values","counters":[]},{"line":"      in","counters":[]},{"line":"      let num_rows = Array.length computed_witness.(0) in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"      (* convert to Rust vector *)","counters":[]},{"line":"      let witness_cols =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Array.init Kimchi_backend_common.Constants.columns ~f:(fun col ->","counters":[]},{"line":"            let witness = Field.Vector.create () in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            for row = 0 to num_rows - 1 do","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Field.Vector.emplace_back witness computed_witness.(col).(row)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"            done ;","counters":[]},{"line":"            witness )","counters":[]},{"line":"      in","counters":[]},{"line":"      create pk.index witness_cols prev_chals prev_comms","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let create_async (pk : Keypair.t) primary auxiliary prev_chals prev_comms =","counters":[]},{"line":"      create_aux pk primary auxiliary prev_chals prev_comms","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun pk auxiliary_input prev_challenges prev_sgs ->","counters":[]},{"line":"          Promise.run_in_thread (fun () ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              create pk auxiliary_input prev_challenges prev_sgs ) )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let create (pk : Keypair.t) primary auxiliary prev_chals prev_comms =","counters":[]},{"line":"      create_aux pk primary auxiliary prev_chals prev_comms ~f:create","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Verifier_index = Kimchi_bindings.Protocol.VerifierIndex.Fq","counters":[]},{"line":"  module Index = Keypair","counters":[]},{"line":"","counters":[]},{"line":"  module Evaluations_backend = struct","counters":[]},{"line":"    type t = Scalar_field.t Kimchi_types.proof_evaluations","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Opening_proof_backend = struct","counters":[]},{"line":"    type t = (Curve.Affine.Backend.t, Scalar_field.t) Kimchi_types.opening_proof","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Poly_comm = Fq_poly_comm","counters":[]},{"line":"  module Curve = Curve","counters":[]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"module Proving_key = struct","counters":[]},{"line":"  type t = Keypair.t","counters":[]},{"line":"","counters":[]},{"line":"  include","counters":[]},{"line":"    Core_kernel.Binable.Of_binable","counters":[]},{"line":"      (Core_kernel.Unit)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"        let to_binable _ = ()","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"        let of_binable () = failwith \"TODO\"","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      end)","counters":[]},{"line":"","counters":[]},{"line":"  let is_initialized _ = `Yes","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let set_constraint_system _ _ = ()","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let to_string _ = failwith \"TODO\"","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let of_string _ = failwith \"TODO\"","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Oracles = Plonk_dlog_oracles.Make (struct","counters":[]},{"line":"  module Verifier_index = Verification_key","counters":[]},{"line":"  module Field = Field","counters":[]},{"line":"  module Proof = Proof","counters":[]},{"line":"","counters":[]},{"line":"  module Backend = struct","counters":[]},{"line":"    include Kimchi_bindings.Protocol.Oracles.Fq","counters":[]},{"line":"","counters":[]},{"line":"    let create = with_lagrange create","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"  end","counters":[]},{"line":"end)","counters":[{"col_start":3,"col_end":3,"count":2}]}]}