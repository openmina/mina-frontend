{"filename":"src/mask/mod.rs","lines":[{"line":"#![allow(clippy::module_inception)]","counters":[]},{"line":"","counters":[]},{"line":"mod mask;","counters":[]},{"line":"mod mask_impl;","counters":[]},{"line":"","counters":[]},{"line":"pub use mask::*;","counters":[]},{"line":"","counters":[]},{"line":"/// Used for tests, to make sure we don't leak masks","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use once_cell::sync::Lazy;","counters":[]},{"line":"    use std::{collections::HashSet, sync::Mutex};","counters":[]},{"line":"","counters":[]},{"line":"    use crate::Uuid;","counters":[]},{"line":"","counters":[]},{"line":"    static MASK_ALIVE: Lazy<Mutex<HashSet<Uuid>>> =","counters":[]},{"line":"        Lazy::new(|| Mutex::new(HashSet::with_capacity(256)));","counters":[]},{"line":"","counters":[]},{"line":"    pub fn add_mask(uuid: &Uuid) {","counters":[]},{"line":"        MASK_ALIVE.lock().unwrap().insert(uuid.to_string());","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    pub fn remove_mask(uuid: &Uuid) {","counters":[]},{"line":"        MASK_ALIVE.lock().unwrap().remove(uuid);","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    pub fn is_mask_alive(uuid: &Uuid) -> bool {","counters":[]},{"line":"        MASK_ALIVE.lock().unwrap().contains(uuid)","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[cfg(not(test))]","counters":[]},{"line":"mod tests {","counters":[]},{"line":"    use crate::Uuid;","counters":[]},{"line":"","counters":[]},{"line":"    pub fn add_mask(_: &Uuid) {}","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn remove_mask(_: &Uuid) {}","counters":[]},{"line":"}","counters":[]}]}