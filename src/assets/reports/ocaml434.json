{"filename":"src/lib/mina_generators/user_command_generators.ml","lines":[{"line":"(* user_command_generators.ml *)","counters":[]},{"line":"","counters":[]},{"line":"(* generate User_command.t's, that is, either Signed_commands or","counters":[]},{"line":"   Zkapp_command","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Ledger = Mina_ledger.Ledger","counters":[]},{"line":"include User_command.Gen","counters":[]},{"line":"","counters":[]},{"line":"(* using Precomputed_values depth introduces a cyclic dependency *)","counters":[]},{"line":"[%%inject \"ledger_depth\", ledger_depth]","counters":[]},{"line":"","counters":[]},{"line":"let zkapp_command_with_ledger ?num_keypairs ?max_account_updates","counters":[]},{"line":"    ?max_token_updates ?account_state_tbl ?vk ?failure () =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Signature_lib in","counters":[]},{"line":"  (* Need a fee payer keypair, a keypair for the \"balancing\" account (so that the balance changes","counters":[]},{"line":"     sum to zero), and max_account_updates * 2 keypairs, because all the other zkapp_command","counters":[]},{"line":"     might be new and their accounts not in the ledger; or they might all be old and in the ledger","counters":[]},{"line":"","counters":[]},{"line":"     We'll put the fee payer account and max_account_updates accounts in the","counters":[]},{"line":"     ledger, and have max_account_updates keypairs available for new accounts","counters":[]},{"line":"  *)","counters":[]},{"line":"  let max_account_updates =","counters":[]},{"line":"    Option.value max_account_updates","counters":[]},{"line":"      ~default:Zkapp_command_generators.max_account_updates","counters":[]},{"line":"  in","counters":[]},{"line":"  let max_token_updates =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value max_token_updates","counters":[]},{"line":"      ~default:Zkapp_command_generators.max_token_updates","counters":[]},{"line":"  in","counters":[]},{"line":"  let num_keypairs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value num_keypairs","counters":[]},{"line":"      ~default:((max_account_updates * 2) + (max_token_updates * 3) + 2)","counters":[]},{"line":"  in","counters":[]},{"line":"  let keypairs = List.init num_keypairs ~f:(fun _ -> Keypair.create ()) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"  let keymap =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.fold keypairs ~init:Public_key.Compressed.Map.empty","counters":[]},{"line":"      ~f:(fun map { public_key; private_key } ->","counters":[]},{"line":"        let key = Public_key.compress public_key in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Public_key.Compressed.Map.add_exn map ~key ~data:private_key )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  let num_keypairs_in_ledger = num_keypairs / 2 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let keypairs_in_ledger = List.take keypairs num_keypairs_in_ledger in","counters":[]},{"line":"  let account_ids =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.map keypairs_in_ledger ~f:(fun { public_key; _ } ->","counters":[]},{"line":"        Account_id.create (Public_key.compress public_key) Token_id.default )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"  in","counters":[]},{"line":"  let verification_key =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match vk with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        With_hash.","counters":[]},{"line":"          { data = Side_loaded_verification_key.dummy","counters":[]},{"line":"          ; hash = Zkapp_account.dummy_vk_hash ()","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"          }","counters":[]},{"line":"    | Some vk ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        vk","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind balances =","counters":[]},{"line":"    let min_cmd_fee = Mina_compile_config.minimum_user_command_fee in","counters":[]},{"line":"    let min_balance =","counters":[]},{"line":"      Currency.Fee.to_int min_cmd_fee","counters":[]},{"line":"      |> Int.( + ) 100_000_000_000_000_000","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      |> Currency.Balance.of_int","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    in","counters":[]},{"line":"    (* max balance to avoid overflow when adding deltas *)","counters":[]},{"line":"    let max_balance =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let max_bal = Currency.Balance.of_formatted_string \"2000000000.0\" in","counters":[]},{"line":"      match","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Currency.Balance.add_amount min_balance","counters":[]},{"line":"          (Currency.Balance.to_amount max_bal)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      with","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwith \"zkapp_command_with_ledger: overflow for max_balance\"","counters":[]},{"line":"      | Some _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          max_bal","counters":[]},{"line":"    in","counters":[]},{"line":"    Quickcheck.Generator.list_with_length num_keypairs_in_ledger","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"      (Currency.Balance.gen_incl min_balance max_balance)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  in","counters":[]},{"line":"  let account_ids_and_balances = List.zip_exn account_ids balances in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let snappify_account (account : Account.t) : Account.t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (* TODO: use real keys *)","counters":[]},{"line":"    let permissions =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { Permissions.user_default with","counters":[]},{"line":"        edit_state = Permissions.Auth_required.Either","counters":[]},{"line":"      ; send = Either","counters":[]},{"line":"      ; set_delegate = Either","counters":[]},{"line":"      ; set_permissions = Either","counters":[]},{"line":"      ; set_verification_key = Either","counters":[]},{"line":"      ; set_zkapp_uri = Either","counters":[]},{"line":"      ; edit_sequence_state = Either","counters":[]},{"line":"      ; set_token_symbol = Either","counters":[]},{"line":"      ; increment_nonce = Either","counters":[]},{"line":"      ; set_voting_for = Either","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let verification_key = Some verification_key in","counters":[]},{"line":"    let zkapp = Some { Zkapp_account.default with verification_key } in","counters":[]},{"line":"    { account with permissions; zkapp }","counters":[]},{"line":"  in","counters":[]},{"line":"  (* half zkApp accounts, half non-zkApp accounts *)","counters":[]},{"line":"  let accounts =","counters":[]},{"line":"    List.mapi account_ids_and_balances ~f:(fun ndx (account_id, balance) ->","counters":[]},{"line":"        let account = Account.create account_id balance in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        if ndx mod 2 = 0 then account else snappify_account account )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let fee_payer_keypair = List.hd_exn keypairs in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ledger = Ledger.create ~depth:ledger_depth () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  List.iter2_exn account_ids accounts ~f:(fun acct_id acct ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      match Ledger.get_or_create_account ledger acct_id acct with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Error err ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwithf","counters":[]},{"line":"            \"zkapp_command: error adding account for account id: %s, error: \\","counters":[]},{"line":"             %s@.\"","counters":[]},{"line":"            (Account_id.to_yojson acct_id |> Yojson.Safe.to_string)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"            (Error.to_string_hum err) ()","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"      | Ok (`Existed, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          failwithf \"zkapp_command: account for account id already exists: %s@.\"","counters":[]},{"line":"            (Account_id.to_yojson acct_id |> Yojson.Safe.to_string)","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"            ()","counters":[]},{"line":"      | Ok (`Added, _) ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          () ) ;","counters":[]},{"line":"  (* to keep track of account states across transactions *)","counters":[]},{"line":"  let account_state_tbl =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value account_state_tbl ~default:(Account_id.Table.create ())","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind zkapp_command =","counters":[]},{"line":"    Zkapp_command_generators.gen_zkapp_command_from ~max_account_updates","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"      ~max_token_updates ~fee_payer_keypair ~keymap ~ledger ~account_state_tbl","counters":[]},{"line":"      ?vk ?failure ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let zkapp_command =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value_exn","counters":[]},{"line":"      (Zkapp_command.Valid.to_valid ~ledger ~get:Ledger.get","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"         ~location_of_account:Ledger.location_of_account zkapp_command )","counters":[]},{"line":"  in","counters":[]},{"line":"  (* include generated ledger in result *)","counters":[]},{"line":"  return","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (User_command.Zkapp_command zkapp_command, fee_payer_keypair, keymap, ledger)","counters":[]},{"line":"","counters":[]},{"line":"let sequence_zkapp_command_with_ledger ?max_account_updates ?max_token_updates","counters":[]},{"line":"    ?length ?vk ?failure () =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind length =","counters":[]},{"line":"    match length with","counters":[]},{"line":"    | Some n ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return n","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Quickcheck.Generator.small_non_negative_int","counters":[]},{"line":"  in","counters":[]},{"line":"  let max_account_updates =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value max_account_updates","counters":[]},{"line":"      ~default:Zkapp_command_generators.max_account_updates","counters":[]},{"line":"  in","counters":[]},{"line":"  let max_token_updates =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Option.value max_token_updates","counters":[]},{"line":"      ~default:Zkapp_command_generators.max_token_updates","counters":[]},{"line":"  in","counters":[]},{"line":"  let num_keypairs = length * max_account_updates * 2 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (* Keep track of account states across multiple zkapp_command transaction *)","counters":[]},{"line":"  let account_state_tbl = Account_id.Table.create () in","counters":[]},{"line":"  let%bind zkapp_command, fee_payer_keypair, keymap, ledger =","counters":[]},{"line":"    zkapp_command_with_ledger ~num_keypairs ~max_account_updates","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"      ~max_token_updates ~account_state_tbl ?vk ?failure ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let rec go zkapp_command_and_fee_payer_keypairs n =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    if n <= 1 then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      return","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( (zkapp_command, fee_payer_keypair, keymap)","counters":[]},{"line":"          :: List.rev zkapp_command_and_fee_payer_keypairs","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        , ledger )","counters":[]},{"line":"    else","counters":[]},{"line":"      let%bind zkapp_command =","counters":[]},{"line":"        Zkapp_command_generators.gen_zkapp_command_from ~max_account_updates","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"          ~max_token_updates ~fee_payer_keypair ~keymap ~ledger","counters":[]},{"line":"          ~account_state_tbl ?vk ?failure ()","counters":[]},{"line":"      in","counters":[]},{"line":"      let valid_zkapp_command =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Option.value_exn","counters":[]},{"line":"          (Zkapp_command.Valid.to_valid ~ledger ~get:Ledger.get","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"             ~location_of_account:Ledger.location_of_account zkapp_command )","counters":[]},{"line":"      in","counters":[]},{"line":"      let zkapp_command_and_fee_payer_keypairs' =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ( User_command.Zkapp_command valid_zkapp_command","counters":[]},{"line":"        , fee_payer_keypair","counters":[]},{"line":"        , keymap )","counters":[]},{"line":"        :: zkapp_command_and_fee_payer_keypairs","counters":[]},{"line":"      in","counters":[]},{"line":"      go zkapp_command_and_fee_payer_keypairs' (n - 1)","counters":[]},{"line":"  in","counters":[]},{"line":"  go [] length","counters":[]}]}