{"filename":"src/lib/cli_lib/render.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"module type Printable_intf = sig","counters":[]},{"line":"  type t [@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"  val to_text : t -> string","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let print (type t) (module Print : Printable_intf with type t = t) ~error_ctx","counters":[]},{"line":"    is_json = function","counters":[]},{"line":"  | Ok t ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if is_json then","counters":[]},{"line":"        printf \"%s\\n\" (Print.to_yojson t |> Yojson.Safe.pretty_to_string)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"      else printf \"%s\\n\" (Print.to_text t)","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      eprintf \"%s\\n%s\\n\" error_ctx (Error.to_string_hum e)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"module String_list_formatter = struct","counters":[]},{"line":"  type t = string list [@@deriving yojson]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let log10 i = i |> Float.of_int |> Float.log10 |> Float.to_int","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let to_text pks =","counters":[]},{"line":"    let max_padding = Int.max 1 (List.length pks) |> log10 in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"    List.mapi pks ~f:(fun i pk ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"        let i = i + 1 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let padding = String.init (max_padding - log10 i) ~f:(fun _ -> ' ') in","counters":[{"col_start":53,"col_end":53,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"        sprintf \"%s%i, %s\" padding i pk )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    |> String.concat ~sep:\"\\n\"","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Prove_receipt = struct","counters":[]},{"line":"  type t = Receipt.Chain_hash.t * User_command.t list [@@deriving yojson]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"  let to_text proof =","counters":[]},{"line":"    sprintf","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      !\"Merkle List of transactions:\\n%s\"","counters":[]},{"line":"      (to_yojson proof |> Yojson.Safe.pretty_to_string)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Public_key_with_details = struct","counters":[]},{"line":"  module Pretty_account = struct","counters":[]},{"line":"    type t = string * int * int","counters":[]},{"line":"","counters":[]},{"line":"    let to_yojson (public_key, balance, nonce) =","counters":[]},{"line":"      `Assoc","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ ( public_key","counters":[]},{"line":"          , `Assoc [ (\"balance\", `Int balance); (\"nonce\", `Int nonce) ] )","counters":[]},{"line":"        ]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = Pretty_account.t list [@@deriving to_yojson]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  type format = { accounts : t } [@@deriving to_yojson, fields]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":12,"col_end":12,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let to_yojson t = format_to_yojson { accounts = t }","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"  let to_text account =","counters":[]},{"line":"    List.map account ~f:(fun (public_key, balance, nonce) ->","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        sprintf !\"%s, %d, %d\" public_key balance nonce )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    |> String.concat ~sep:\"\\n\"","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}