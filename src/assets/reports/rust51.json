{"filename":"src/coverage/names.rs","lines":[{"line":"use std::io::{BufRead, Cursor, Seek, SeekFrom};","counters":[]},{"line":"","counters":[]},{"line":"use super::util::{Leb128, get_names};","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":14,"count":0}]},{"line":"pub struct Names(Vec<String>);","counters":[]},{"line":"","counters":[]},{"line":"impl Names {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        let names_buf = unsafe { get_names() }.to_vec();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        let mut cursor = Cursor::new(&names_buf);","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        let mut output = Vec::new();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        let mut pos = cursor.position();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let names_buf_len = names_buf.len() as u64;","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        while pos < names_buf_len {","counters":[{"col_start":14,"col_end":33,"count":0}]},{"line":"            let uncompressed_len = u64::read_leb128(&mut cursor);","counters":[{"col_start":16,"col_end":65,"count":0}]},{"line":"            let compressed_len = u64::read_leb128(&mut cursor);","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"            pos = cursor.position();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            let start = pos as usize;","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"","counters":[]},{"line":"            if compressed_len == 0 {","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":35,"col_end":36,"count":0}]},{"line":"                let end = start + uncompressed_len as usize;","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                Self::read_names(&names_buf[start..end], &mut output);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                pos += uncompressed_len;","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            } else {","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":19,"col_end":20,"count":0}]},{"line":"                let end = start + compressed_len as usize;","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                let decompressed_buf =","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                    Self::decompress(&names_buf[start..end], uncompressed_len as usize);","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                Self::read_names(decompressed_buf.as_slice(), &mut output);","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                pos += compressed_len;","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            cursor.seek(SeekFrom::Start(pos)).unwrap();","counters":[{"col_start":12,"col_end":54,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        Self(output)","counters":[{"col_start":8,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn read_names(names: &[u8], output: &mut Vec<String>) {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        let mut names = Cursor::new(names);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        loop {","counters":[]},{"line":"            let mut name = Vec::new();","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"            if names.read_until(0x01, &mut name).unwrap() == 0 {","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                return;","counters":[{"col_start":16,"col_end":22,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            if *name.last().unwrap() == 0x01 {","counters":[{"col_start":0,"col_end":44,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"                name.pop();","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"            output.push(String::from_utf8(name).unwrap());","counters":[{"col_start":12,"col_end":57,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn decompress(compressed_buf: &[u8], uncompressed_len: usize) -> Vec<u8> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        let mut decompressed_buf = vec![0; uncompressed_len];","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        flate2::Decompress::new(true)","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            .decompress(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                compressed_buf,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                &mut decompressed_buf,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                flate2::FlushDecompress::Finish,","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            )","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .unwrap();","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        decompressed_buf","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}