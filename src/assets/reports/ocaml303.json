{"filename":"src/lib/mina_base/zkapp_statement.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type 'comm t = { account_update : 'comm; calls : 'comm }","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":17,"col_end":17,"count":4},{"col_start":23,"col_end":23,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"      [@@deriving hlist, sexp, yojson]","counters":[{"col_start":37,"col_end":37,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let to_field_elements (t : 'c t) : 'c array =","counters":[]},{"line":"    let [ x0; x1 ] = to_hlist t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [| x0; x1 |]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t = Zkapp_command.Transaction_commitment.Stable.V1.t Poly.Stable.V1.t","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1},{"col_start":13,"col_end":13,"count":0}]},{"line":"    [@@deriving sexp, yojson]","counters":[{"col_start":28,"col_end":28,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let to_field_elements : t -> _ = Poly.to_field_elements","counters":[]},{"line":"","counters":[]},{"line":"let of_tree (type account_update)","counters":[]},{"line":"    ({ account_update = _; account_update_digest; calls } :","counters":[]},{"line":"      ( account_update","counters":[]},{"line":"      , Zkapp_command.Digest.Account_update.t","counters":[]},{"line":"      , Zkapp_command.Digest.Forest.t )","counters":[]},{"line":"      Zkapp_command.Call_forest.Tree.t ) : t =","counters":[]},{"line":"  { account_update =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      (account_update_digest :> Zkapp_command.Transaction_commitment.t)","counters":[]},{"line":"  ; calls =","counters":[]},{"line":"      ( Zkapp_command.Call_forest.hash calls","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        :> Zkapp_command.Transaction_commitment.t )","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let zkapp_statements_of_forest' (type data)","counters":[]},{"line":"    (forest : data Zkapp_command.Call_forest.With_hashes_and_data.t) :","counters":[]},{"line":"    (data * t) Zkapp_command.Call_forest.With_hashes_and_data.t =","counters":[]},{"line":"  Zkapp_command.Call_forest.mapi_with_trees forest","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:(fun _i (account_update, data) tree ->","counters":[]},{"line":"      (account_update, (data, of_tree tree)) )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"let zkapp_statements_of_forest (type account_update)","counters":[]},{"line":"    (forest : (account_update, _, _) Zkapp_command.Call_forest.t) :","counters":[]},{"line":"    (account_update * t, _, _) Zkapp_command.Call_forest.t =","counters":[]},{"line":"  Zkapp_command.Call_forest.mapi_with_trees forest","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~f:(fun _i account_update tree -> (account_update, of_tree tree))","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  type t = Zkapp_command.Transaction_commitment.Checked.t Poly.t","counters":[]},{"line":"","counters":[]},{"line":"  let to_field_elements : t -> _ = Poly.to_field_elements","counters":[]},{"line":"","counters":[]},{"line":"  open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"  module Assert = struct","counters":[]},{"line":"    let equal (t1 : t) (t2 : t) =","counters":[]},{"line":"      Array.iter2_exn ~f:Field.Assert.equal (to_field_elements t1)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        (to_field_elements t2)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let typ =","counters":[]},{"line":"  let open Poly in","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    Zkapp_command.Transaction_commitment.[ typ; typ ]","counters":[]},{"line":"    ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"    ~value_of_hlist:of_hlist","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}