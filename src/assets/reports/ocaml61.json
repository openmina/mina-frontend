{"filename":"src/lib/direction/direction.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"type t = Left | Right [@@deriving sexp, equal]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let of_bool = function false -> Left | true -> Right","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"let map ~left ~right = function Left -> left | Right -> right","counters":[{"col_start":32,"col_end":32,"count":2555},{"col_start":47,"col_end":47,"count":485}]},{"line":"","counters":[]},{"line":"let to_bool = map ~left:false ~right:true","counters":[]},{"line":"","counters":[]},{"line":"let to_int = map ~left:0 ~right:1","counters":[]},{"line":"","counters":[]},{"line":"let of_int = function 0 -> Some Left | 1 -> Some Right | _ -> None","counters":[{"col_start":22,"col_end":22,"count":2555},{"col_start":39,"col_end":39,"count":485},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"let of_int_exn value =","counters":[]},{"line":"  of_int value","counters":[{"col_start":2,"col_end":2,"count":3040},{"col_start":7,"col_end":7,"count":3040}]},{"line":"  |> Option.value_exn","counters":[]},{"line":"       ~message:(sprintf \"Cannot convert integer %d into a direction\" value)","counters":[{"col_start":23,"col_end":23,"count":3040}]},{"line":"","counters":[]},{"line":"let flip = map ~left:Right ~right:Left","counters":[]},{"line":"","counters":[]},{"line":"let gen = Quickcheck.Let_syntax.(Quickcheck.Generator.bool >>| of_bool)","counters":[{"col_start":61,"col_end":61,"count":1}]},{"line":"","counters":[]},{"line":"let gen_var_length_list ?(start = 0) depth =","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  let open Quickcheck.Generator in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Int.gen_incl start (depth - 1) >>= fun l -> list_with_length l gen","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"let gen_list depth = Quickcheck.Generator.list_with_length depth gen","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let shrinker =","counters":[]},{"line":"  Quickcheck.Shrinker.create (fun dir ->","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"      Sequence.unfold ~init:dir ~f:(function","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        | Left ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            None","counters":[]},{"line":"        | Right ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Some (Left, Left) ) )","counters":[{"col_start":32,"col_end":32,"count":2}]}]}