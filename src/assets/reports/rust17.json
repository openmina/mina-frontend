{"filename":"src/generators/zkapp_command_builder.rs","lines":[{"line":"use std::collections::HashMap;","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::{Keypair, Signature};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    hash_with_kimchi,","counters":[]},{"line":"    scan_state::transaction_logic::zkapp_command::{AccountUpdate, Control, ZkAppCommand},","counters":[]},{"line":"    staged_ledger::pre_diff_info::HashableCompressedPubKey,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":9,"col_end":14,"count":0},{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct TransactionCommitment(pub Fp);","counters":[]},{"line":"","counters":[]},{"line":"impl TransactionCommitment {","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_base/zkapp_command.ml#L1365","counters":[]},{"line":"    fn create(account_updates_hash: Fp) -> Self {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        Self(account_updates_hash)","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// https://github.com/MinaProtocol/mina/blob/3753a8593cc1577bcf4da16620daf9946d88e8e5/src/lib/mina_base/zkapp_command.ml#L1368","counters":[]},{"line":"    fn create_complete(&self, memo_hash: Fp, fee_payer_hash: Fp) -> Self {","counters":[{"col_start":4,"col_end":74,"count":6}]},{"line":"        Self(hash_with_kimchi(","counters":[{"col_start":0,"col_end":30,"count":6}]},{"line":"            \"MinaAcctUpdateCons\",","counters":[{"col_start":0,"col_end":33,"count":6}]},{"line":"            &[memo_hash, fee_payer_hash, self.0],","counters":[{"col_start":0,"col_end":49,"count":6}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":6}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":6}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn get_transaction_commitments(","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    zkapp_command: &ZkAppCommand,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":") -> (TransactionCommitment, TransactionCommitment) {","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"    let memo_hash = zkapp_command.memo.hash();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    let account_updates_hash = zkapp_command.account_updates_hash();","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"    let fee_payer_hash = AccountUpdate::of_fee_payer(zkapp_command.fee_payer.clone()).digest();","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"","counters":[]},{"line":"    let txn_commitment = TransactionCommitment::create(account_updates_hash);","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"    let full_txn_commitment = txn_commitment.create_complete(memo_hash, fee_payer_hash);","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"","counters":[]},{"line":"    (txn_commitment, full_txn_commitment)","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// replace dummy signatures, proofs with valid ones for fee payer, other zkapp_command","counters":[]},{"line":"/// [keymap] maps compressed public keys to private keys","counters":[]},{"line":"///","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/f7f6700332bdfca77d9f3303e9cf3bc25f997e09/src/lib/zkapp_command_builder/zkapp_command_builder.ml#L94","counters":[]},{"line":"pub fn replace_authorizations(","counters":[{"col_start":0,"col_end":30,"count":2860}]},{"line":"    prover: Option<()>, // TODO: We don't support that yet","counters":[{"col_start":0,"col_end":58,"count":2860}]},{"line":"    keymap: &HashMap<HashableCompressedPubKey, Keypair>,","counters":[{"col_start":0,"col_end":56,"count":2860}]},{"line":"    zkapp_command: &mut ZkAppCommand,","counters":[{"col_start":0,"col_end":37,"count":2860}]},{"line":") {","counters":[{"col_start":0,"col_end":3,"count":2860}]},{"line":"    let (txn_commitment, full_txn_commitment) = get_transaction_commitments(zkapp_command);","counters":[{"col_start":0,"col_end":91,"count":2860}]},{"line":"","counters":[]},{"line":"    let sign_for_account_update = |use_full_commitment: bool, _kp: &Keypair| {","counters":[{"col_start":0,"col_end":34,"count":2860},{"col_start":77,"col_end":78,"count":0}]},{"line":"        let _commitment = if use_full_commitment {","counters":[{"col_start":12,"col_end":23,"count":0},{"col_start":29,"col_end":48,"count":0}]},{"line":"            full_txn_commitment.clone()","counters":[{"col_start":12,"col_end":39,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            txn_commitment.clone()","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        // TODO: Really sign the zkapp","counters":[]},{"line":"        Signature::dummy()","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    };","counters":[{"col_start":0,"col_end":5,"count":0},{"col_start":5,"col_end":6,"count":2860}]},{"line":"","counters":[]},{"line":"    let fee_payer_kp = keymap","counters":[{"col_start":0,"col_end":29,"count":2860}]},{"line":"        .get(&HashableCompressedPubKey(","counters":[{"col_start":0,"col_end":39,"count":2860}]},{"line":"            zkapp_command.fee_payer.body.public_key.clone(),","counters":[{"col_start":0,"col_end":60,"count":2860}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":2860}]},{"line":"        .unwrap();","counters":[{"col_start":0,"col_end":18,"count":2860}]},{"line":"","counters":[]},{"line":"    let fee_payer_signature = sign_for_account_update(true, fee_payer_kp);","counters":[{"col_start":0,"col_end":74,"count":2860}]},{"line":"","counters":[]},{"line":"    zkapp_command.fee_payer.authorization = fee_payer_signature;","counters":[{"col_start":0,"col_end":64,"count":2860}]},{"line":"","counters":[]},{"line":"    let account_updates_with_valid_signatures =","counters":[{"col_start":0,"col_end":47,"count":2860}]},{"line":"        zkapp_command.account_updates.map_to(|account_update| {","counters":[{"col_start":0,"col_end":45,"count":2860},{"col_start":62,"col_end":63,"count":0}]},{"line":"            let AccountUpdate {","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                body,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                authorization,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            } = account_update;","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"            let authorization_with_valid_signature = match authorization {","counters":[{"col_start":16,"col_end":50,"count":0},{"col_start":59,"col_end":72,"count":0}]},{"line":"                Control::Signature(_dummy) => {","counters":[{"col_start":35,"col_end":47,"count":0}]},{"line":"                    let pk = &body.public_key;","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    let kp = keymap","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                        .get(&HashableCompressedPubKey(pk.clone()))","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                        .expect(\"Could not find private key for public key in keymap\");","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"","counters":[]},{"line":"                    let use_full_commitment = body.use_full_commitment;","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    let signature = sign_for_account_update(use_full_commitment, kp);","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"                    Control::Signature(signature)","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                }","counters":[]},{"line":"                Control::Proof(_) => match prover {","counters":[{"col_start":43,"col_end":49,"count":0}]},{"line":"                    None => authorization.clone(),","counters":[{"col_start":28,"col_end":49,"count":0}]},{"line":"                    Some(_prover) => todo!(), // TODO","counters":[{"col_start":25,"col_end":44,"count":0}]},{"line":"                },","counters":[]},{"line":"                Control::NoneGiven => authorization.clone(),","counters":[{"col_start":38,"col_end":59,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            AccountUpdate {","counters":[{"col_start":12,"col_end":27,"count":0}]},{"line":"                authorization: authorization_with_valid_signature,","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                ..account_update.clone()","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":2860}]},{"line":"","counters":[]},{"line":"    zkapp_command.account_updates = account_updates_with_valid_signatures;","counters":[{"col_start":0,"col_end":74,"count":2860}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":2860}]}]}