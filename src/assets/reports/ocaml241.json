{"filename":"src/lib/logger/file_system/logger_file_system.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"module Dumb_logrotate = struct","counters":[]},{"line":"  open Core.Unix","counters":[]},{"line":"","counters":[]},{"line":"  let log_perm = 0o644","counters":[]},{"line":"","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { directory : string","counters":[]},{"line":"    ; log_filename : string","counters":[]},{"line":"    ; max_size : int","counters":[]},{"line":"    ; num_rotate : int","counters":[]},{"line":"    ; mutable curr_index : int","counters":[]},{"line":"    ; mutable primary_log : File_descr.t","counters":[]},{"line":"    ; mutable primary_log_size : int","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let create ~directory ~max_size ~log_filename ~num_rotate =","counters":[]},{"line":"    if not (Result.is_ok (access directory [ `Exists ])) then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      mkdir_p ~perm:0o755 directory ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"    if not (Result.is_ok (access directory [ `Exists; `Read; `Write ])) then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"      failwithf \"cannot create log files: read/write permissions required on %s\"","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"        directory () ;","counters":[]},{"line":"    let primary_log_loc = Filename.concat directory log_filename in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let primary_log_size, mode =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      if Result.is_ok (access primary_log_loc [ `Exists; `Read; `Write ]) then","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        let log_stats = stat primary_log_loc in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        (Int64.to_int_exn log_stats.st_size, [ O_RDWR; O_APPEND ])","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"      else (0, [ O_RDWR; O_CREAT ])","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    in","counters":[]},{"line":"    let primary_log = openfile ~perm:log_perm ~mode primary_log_loc in","counters":[]},{"line":"    { directory","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; log_filename","counters":[]},{"line":"    ; max_size","counters":[]},{"line":"    ; primary_log","counters":[]},{"line":"    ; primary_log_size","counters":[]},{"line":"    ; num_rotate","counters":[]},{"line":"    ; curr_index = 0","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let rotate t =","counters":[]},{"line":"    let primary_log_loc = Filename.concat t.directory t.log_filename in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let secondary_log_filename =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      t.log_filename ^ \".\" ^ string_of_int t.curr_index","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"    in","counters":[]},{"line":"    if t.curr_index < t.num_rotate then t.curr_index <- t.curr_index + 1","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    else t.curr_index <- 0 ;","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    let secondary_log_loc =","counters":[]},{"line":"      Filename.concat t.directory secondary_log_filename","counters":[]},{"line":"    in","counters":[]},{"line":"    close t.primary_log ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    rename ~src:primary_log_loc ~dst:secondary_log_loc ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    t.primary_log <-","counters":[]},{"line":"      openfile ~perm:log_perm ~mode:[ O_RDWR; O_CREAT ] primary_log_loc ;","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    t.primary_log_size <- 0","counters":[]},{"line":"","counters":[]},{"line":"  let transport t str =","counters":[]},{"line":"    if t.primary_log_size > t.max_size then rotate t ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"    let str = str ^ \"\\n\" in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let len = String.length str in","counters":[]},{"line":"    if write t.primary_log ~buf:(Bytes.of_string str) ~len <> len then","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      printf \"unexpected error writing to persistent log\" ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    t.primary_log_size <- t.primary_log_size + len","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let dumb_logrotate ~directory ~log_filename ~max_size ~num_rotate =","counters":[]},{"line":"  Logger.Transport.create","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Dumb_logrotate)","counters":[]},{"line":"    (Dumb_logrotate.create ~directory ~log_filename ~max_size ~num_rotate)","counters":[]},{"line":"","counters":[]},{"line":"let time_pretty_to_string timestamp =","counters":[]},{"line":"  Time.format timestamp \"%Y-%m-%d %H:%M:%S UTC\" ~zone:Time.Zone.utc","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let () = Logger.Time.set_pretty_to_string time_pretty_to_string","counters":[{"col_start":40,"col_end":40,"count":1},{"col_start":62,"col_end":62,"count":2}]}]}