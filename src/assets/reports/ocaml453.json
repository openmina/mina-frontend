{"filename":"src/lib/node_error_service/node_error_service.ml","lines":[{"line":"open Async","counters":[]},{"line":"open Core","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"(* needs to be kept in sync with the constant in minaprotocol/mina-deployments:src/node-status-error-system-backend/node_error/src/index.js *)","counters":[]},{"line":"let max_report_bytes = 10_000","counters":[]},{"line":"","counters":[]},{"line":"type node_state =","counters":[]},{"line":"  { peer_id : string","counters":[]},{"line":"  ; ip_address : string","counters":[]},{"line":"  ; chain_id : string","counters":[]},{"line":"  ; public_key : Public_key.Compressed.t option","counters":[]},{"line":"  ; catchup_job_states : Transition_frontier.Full_catchup_tree.job_states option","counters":[]},{"line":"  ; block_height_at_best_tip : int option","counters":[]},{"line":"  ; sync_status : Sync_status.t","counters":[]},{"line":"  ; hardware_info : string list option","counters":[]},{"line":"  ; uptime_of_node : string","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"type node_error_report =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  { version : int","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"  ; peer_id : string","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"  ; ip_address : string","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"  ; public_key : Public_key.Compressed.t option","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  ; git_branch : string","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"  ; commit_hash : string","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  ; chain_id : string","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"  ; contact_info : string option","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  ; hardware_info : string list option","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  ; timestamp : string","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"  ; id : string","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  ; error : Yojson.Safe.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"  ; catchup_job_states : Transition_frontier.Full_catchup_tree.job_states option","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":79,"col_end":79,"count":0}]},{"line":"  ; sync_status : Sync_status.t","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  ; block_height_at_best_tip : int option","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"  ; max_observed_block_height : int","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; max_observed_unvalidated_block_height : int","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  ; uptime_of_node : string","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  }","counters":[]},{"line":"[@@deriving to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"type config =","counters":[]},{"line":"  { get_node_state : unit -> node_state option Deferred.t","counters":[]},{"line":"  ; node_error_url : Uri.t","counters":[]},{"line":"  ; contact_info : string option","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let config = ref None","counters":[]},{"line":"","counters":[]},{"line":"let set_config ~get_node_state ~node_error_url ~contact_info =","counters":[]},{"line":"  if Option.is_some !config then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    failwith \"Node_error_service.set_config called more than once\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else config := Some { get_node_state; node_error_url; contact_info }","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let serialize_report report =","counters":[]},{"line":"  `Assoc [ (\"data\", node_error_report_to_yojson report) ]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"let send_node_error_report ~logger ~url report =","counters":[]},{"line":"  let json = serialize_report report in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let json_string = Yojson.Safe.to_string json in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  (* TODO: move length check to to send_node_error_data *)","counters":[]},{"line":"  if String.length json_string > max_report_bytes then (","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    [%log error]","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      \"Could not send error report because generated error exceeded max report \\","counters":[]},{"line":"       size\" ;","counters":[]},{"line":"    Deferred.unit )","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else","counters":[]},{"line":"    let headers =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Cohttp.Header.of_list [ (\"Content-Type\", \"application/json\") ]","counters":[]},{"line":"    in","counters":[]},{"line":"    match%map","counters":[]},{"line":"      Async.try_with (fun () ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          Cohttp_async.Client.post ~headers","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~body:(Cohttp_async.Body.of_string json_string)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"            url )","counters":[]},{"line":"    with","counters":[]},{"line":"    | Ok ({ status; _ }, body) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let metadata =","counters":[]},{"line":"          [ (\"data\", json); (\"url\", `String (Uri.to_string url)) ]","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"        in","counters":[]},{"line":"        if Cohttp.Code.code_of_status status = 200 then","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          [%log info] \"Sent node error data to URL $url\" ~metadata","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"        else","counters":[]},{"line":"          let extra_metadata =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match body with","counters":[]},{"line":"            | `String s ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [ (\"error\", `String s) ]","counters":[]},{"line":"            | `Strings ss ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [ (\"error\", `List (List.map ss ~f:(fun s -> `String s))) ]","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"            | `Empty | `Pipe _ ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"                []","counters":[]},{"line":"          in","counters":[]},{"line":"          [%log error] \"Failed to send node error data to URL $url\"","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"            ~metadata:(metadata @ extra_metadata)","counters":[]},{"line":"    | Error e ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log error] \"Failed to send node error data to URL $url\"","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          ~metadata:","counters":[]},{"line":"            [ (\"error\", `String (Exn.to_string e))","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"            ; (\"url\", `String (Uri.to_string url))","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"            ]","counters":[]},{"line":"","counters":[]},{"line":"let with_deps ~logger ~f =","counters":[]},{"line":"  match !config with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [%log error]","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        \"Could not send error report: Node_error_service was not configured\" ;","counters":[]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Some { get_node_state; node_error_url; contact_info } -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match%bind get_node_state () with","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log info]","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            \"Could not send error report: mina instance has not been created \\","counters":[]},{"line":"             yet.\" ;","counters":[]},{"line":"          Deferred.unit","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | Some node_state ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          f ~node_state ~node_error_url ~contact_info )","counters":[]},{"line":"","counters":[]},{"line":"let generate_report ~node_state ~contact_info error =","counters":[]},{"line":"  let commit_hash = Mina_version.commit_id in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let git_branch = Mina_version.branch in","counters":[]},{"line":"  let timestamp = Rfc3339_time.get_rfc3339_time () in","counters":[]},{"line":"  let id = Uuid_unix.create () |> Uuid.to_string in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  let ({ peer_id","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"       ; ip_address","counters":[]},{"line":"       ; public_key","counters":[]},{"line":"       ; chain_id","counters":[]},{"line":"       ; hardware_info","counters":[]},{"line":"       ; catchup_job_states","counters":[]},{"line":"       ; sync_status","counters":[]},{"line":"       ; block_height_at_best_tip","counters":[]},{"line":"       ; uptime_of_node","counters":[]},{"line":"       }","counters":[]},{"line":"        : node_state ) =","counters":[]},{"line":"    node_state","counters":[]},{"line":"  in","counters":[]},{"line":"  Some","counters":[]},{"line":"    { version = 1","counters":[]},{"line":"    ; peer_id","counters":[]},{"line":"    ; ip_address","counters":[]},{"line":"    ; public_key","counters":[]},{"line":"    ; git_branch","counters":[]},{"line":"    ; commit_hash","counters":[]},{"line":"    ; chain_id","counters":[]},{"line":"    ; contact_info","counters":[]},{"line":"    ; hardware_info","counters":[]},{"line":"    ; timestamp","counters":[]},{"line":"    ; id","counters":[]},{"line":"    ; error","counters":[]},{"line":"    ; catchup_job_states","counters":[]},{"line":"    ; sync_status","counters":[]},{"line":"    ; block_height_at_best_tip","counters":[]},{"line":"    ; max_observed_block_height =","counters":[]},{"line":"        !Mina_metrics.Transition_frontier.max_blocklength_observed","counters":[]},{"line":"    ; max_observed_unvalidated_block_height =","counters":[]},{"line":"        !Mina_metrics.Transition_frontier.max_unvalidated_blocklength_observed","counters":[]},{"line":"    ; uptime_of_node","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"let send_dynamic_report ~logger ~generate_error =","counters":[]},{"line":"  with_deps ~logger ~f:(fun ~node_state ~node_error_url ~contact_info ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      match generate_report ~node_state ~contact_info (`String \"\") with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Deferred.unit","counters":[]},{"line":"      | Some base_report ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* subtract 2 bytes for the size of empty string in json *)","counters":[]},{"line":"          let base_report_size =","counters":[]},{"line":"            String.length (Yojson.Safe.to_string @@ serialize_report base_report)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"            - 2","counters":[]},{"line":"          in","counters":[]},{"line":"          let available_bytes = max_report_bytes - base_report_size in","counters":[]},{"line":"          let report =","counters":[]},{"line":"            { base_report with error = generate_error available_bytes }","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"          in","counters":[]},{"line":"          send_node_error_report ~logger ~url:node_error_url report )","counters":[]},{"line":"","counters":[]},{"line":"let send_report ~logger ~error =","counters":[]},{"line":"  with_deps ~logger ~f:(fun ~node_state ~node_error_url ~contact_info ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      match","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        generate_report ~node_state ~contact_info","counters":[]},{"line":"          (Error_json.error_to_yojson error)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      with","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Deferred.unit","counters":[]},{"line":"      | Some report ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          send_node_error_report ~logger ~url:node_error_url report )","counters":[{"col_start":68,"col_end":68,"count":2}]}]}