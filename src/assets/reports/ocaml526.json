{"filename":"src/lib/mina_base/payment_payload.ml","lines":[{"line":"(* payment_payload.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module Amount = Currency.Amount","counters":[]},{"line":"module Fee = Currency.Fee","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ('public_key, 'amount) t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":34,"col_end":34,"count":5}]},{"line":"            ( 'public_key","counters":[]},{"line":"            , 'amount )","counters":[]},{"line":"            Mina_wire_types.Mina_base.Payment_payload.Poly.V2.t =","counters":[]},{"line":"        { source_pk : 'public_key; receiver_pk : 'public_key; amount : 'amount }","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":59,"col_end":59,"count":0},{"col_start":62,"col_end":62,"count":0},{"col_start":67,"col_end":67,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"      [@@deriving equal, sexp, hash, yojson, compare, hlist]","counters":[{"col_start":59,"col_end":59,"count":3}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"      type ('public_key, 'token_id, 'amount) t =","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":45,"col_end":45,"count":12}]},{"line":"        { source_pk : 'public_key","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"        ; receiver_pk : 'public_key","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; token_id : 'token_id","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; amount : 'amount","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving equal, sexp, hash, yojson, compare, hlist]","counters":[{"col_start":59,"col_end":59,"count":14}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1}]},{"line":"      (Public_key.Compressed.Stable.V1.t, Amount.Stable.V1.t) Poly.Stable.V2.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"    [@@deriving equal, sexp, hash, compare, yojson]","counters":[{"col_start":50,"col_end":50,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    [@@@with_all_version_tags]","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":9,"col_end":9,"count":2}]},{"line":"      ( Public_key.Compressed.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Token_id.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Amount.Stable.V1.t )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Poly.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving equal, sexp, hash, compare, yojson]","counters":[{"col_start":50,"col_end":50,"count":15}]},{"line":"","counters":[]},{"line":"    (* don't need to coerce old payments to new ones *)","counters":[]},{"line":"    let to_latest _ = failwith \"Not implemented\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"end]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let dummy =","counters":[]},{"line":"  Poly.","counters":[]},{"line":"    { source_pk = Public_key.Compressed.empty","counters":[]},{"line":"    ; receiver_pk = Public_key.Compressed.empty","counters":[]},{"line":"    ; amount = Amount.zero","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"type var = (Public_key.Compressed.var, Amount.var) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"let var_of_t ({ source_pk; receiver_pk; amount } : t) : var =","counters":[]},{"line":"  { source_pk = Public_key.Compressed.var_of_t source_pk","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"  ; receiver_pk = Public_key.Compressed.var_of_t receiver_pk","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"  ; amount = Amount.var_of_t amount","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let gen_aux ?source_pk ~max_amount =","counters":[]},{"line":"  let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind source_pk =","counters":[]},{"line":"    match source_pk with","counters":[]},{"line":"    | Some source_pk ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return source_pk","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Public_key.Compressed.gen","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind receiver_pk = Public_key.Compressed.gen in","counters":[]},{"line":"  let%map amount = Amount.gen_incl Amount.zero max_amount in","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  Poly.{ source_pk; receiver_pk; amount }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let gen ?source_pk ~max_amount = gen_aux ?source_pk ~max_amount","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"let gen_default_token ?source_pk ~max_amount = gen_aux ?source_pk ~max_amount","counters":[{"col_start":47,"col_end":47,"count":0},{"col_start":76,"col_end":76,"count":1}]}]}