{"filename":"src/lib/rosetta_lib/transaction.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"module Field = Snark_params.Tick.Field","counters":[]},{"line":"module Token_id = Mina_base.Token_id","counters":[]},{"line":"","counters":[]},{"line":"module Unsigned = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { random_oracle_input : (Field.t, bool) Random_oracle_input.Legacy.t","counters":[]},{"line":"    ; command : User_command_info.Partial.t","counters":[]},{"line":"    ; nonce : Unsigned_extended.UInt32.t","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  module Rendered = struct","counters":[]},{"line":"    type public_key = string [@@deriving yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    module Payment = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { to_ : public_key [@key \"to\"]","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; from : public_key","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ; fee : Unsigned_extended.UInt64.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        ; token : string","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; nonce : Unsigned_extended.UInt32.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; memo : string option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; amount : Unsigned_extended.UInt64.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        ; valid_until : Unsigned_extended.UInt32.t option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving yojson]","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Delegation = struct","counters":[]},{"line":"      type public_key = string [@@deriving yojson]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { delegator : public_key","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; new_delegate : public_key","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; fee : Unsigned_extended.UInt64.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        ; nonce : Unsigned_extended.UInt32.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        ; memo : string option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; valid_until : Unsigned_extended.UInt32.t option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving yojson]","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { random_oracle_input : string (* hex *) [@key \"randomOracleInput\"]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ; signer_input : Random_oracle_input.Legacy.Coding2.Rendered.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"            [@key \"signerInput\"]","counters":[]},{"line":"      ; payment : Payment.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      ; stake_delegation : Delegation.t option [@key \"stakeDelegation\"]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson]","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let string_of_field field =","counters":[]},{"line":"    assert (Field.size_in_bits = 255) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    Field.unpack field |> List.rev","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    |> Random_oracle_input.Legacy.Coding.string_of_field","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"  let field_of_string s =","counters":[]},{"line":"    assert (Field.size_in_bits = 255) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    Random_oracle_input.Legacy.Coding.field_of_string s ~size_in_bits:255","counters":[]},{"line":"    |> Result.map ~f:(fun bits -> List.rev bits |> Field.project)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let un_pk (`Pk pk) = pk","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"  let un_token_id (`Token_id id) = id","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"  let render_command ~nonce (command : User_command_info.Partial.t) =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    match command.kind with","counters":[]},{"line":"    | `Payment ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind amount =","counters":[]},{"line":"          Result.of_option command.amount","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            ~error:","counters":[]},{"line":"              (Errors.create","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                 (`Operations_not_valid","counters":[]},{"line":"                   [ Errors.Partial_reason.Amount_not_some ] ) )","counters":[]},{"line":"        in","counters":[]},{"line":"        let payment =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Rendered.Payment.to_ = un_pk command.receiver","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; from = un_pk command.source","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"          ; fee = command.fee","counters":[]},{"line":"          ; nonce","counters":[]},{"line":"          ; token = un_token_id command.token","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; memo = command.memo","counters":[]},{"line":"          ; amount","counters":[]},{"line":"          ; valid_until = command.valid_until","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        Result.return (`Payment payment)","counters":[]},{"line":"    | `Delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let delegation =","counters":[]},{"line":"          { Rendered.Delegation.delegator = un_pk command.source","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          ; new_delegate = un_pk command.receiver","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          ; fee = command.fee","counters":[]},{"line":"          ; nonce","counters":[]},{"line":"          ; memo = command.memo","counters":[]},{"line":"          ; valid_until = command.valid_until","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        Result.return (`Delegation delegation)","counters":[]},{"line":"","counters":[]},{"line":"  let render (t : t) =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let random_oracle_input =","counters":[]},{"line":"      Random_oracle_input.Legacy.Coding.serialize ~string_of_field","counters":[]},{"line":"        ~to_bool:Fn.id ~of_bool:Fn.id t.random_oracle_input","counters":[]},{"line":"      |> Hex.Safe.to_hex","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    in","counters":[]},{"line":"    let signer_input =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Random_oracle_input.Legacy.Coding2.serialize ~string_of_field","counters":[]},{"line":"        ~pack:Field.project t.random_oracle_input","counters":[]},{"line":"      |> Random_oracle_input.Legacy.Coding2.Rendered.map ~f:Hex.Safe.to_hex","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    in","counters":[]},{"line":"    match%map render_command ~nonce:t.nonce t.command with","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    | `Payment payment ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Rendered.random_oracle_input","counters":[]},{"line":"        ; signer_input","counters":[]},{"line":"        ; payment = Some payment","counters":[]},{"line":"        ; stake_delegation = None","counters":[]},{"line":"        }","counters":[]},{"line":"    | `Delegation delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Rendered.random_oracle_input","counters":[]},{"line":"        ; signer_input","counters":[]},{"line":"        ; payment = None","counters":[]},{"line":"        ; stake_delegation = Some delegation","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"  let of_rendered_payment (r : Rendered.Payment.t) : User_command_info.Partial.t","counters":[]},{"line":"      =","counters":[]},{"line":"    { User_command_info.Partial.receiver = `Pk r.to_","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; source = `Pk r.from","counters":[]},{"line":"    ; kind = `Payment","counters":[]},{"line":"    ; fee_payer = `Pk r.from","counters":[]},{"line":"    ; fee_token = `Token_id r.token","counters":[]},{"line":"    ; token = `Token_id r.token","counters":[]},{"line":"    ; fee = r.fee","counters":[]},{"line":"    ; amount = Some r.amount","counters":[]},{"line":"    ; valid_until = r.valid_until","counters":[]},{"line":"    ; memo = r.memo","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let of_rendered_delegation (r : Rendered.Delegation.t) :","counters":[]},{"line":"      User_command_info.Partial.t =","counters":[]},{"line":"    { User_command_info.Partial.receiver = `Pk r.new_delegate","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; source = `Pk r.delegator","counters":[]},{"line":"    ; kind = `Delegation","counters":[]},{"line":"    ; fee_payer = `Pk r.delegator","counters":[]},{"line":"    ; fee_token = `Token_id Token_id.(default |> to_string)","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"    ; token = `Token_id Token_id.(default |> to_string)","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"    ; fee = r.fee","counters":[]},{"line":"    ; amount = None","counters":[]},{"line":"    ; valid_until = r.valid_until","counters":[]},{"line":"    ; memo = r.memo","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let of_rendered (r : Rendered.t) : (t, Errors.t) Result.t =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind random_oracle_input =","counters":[]},{"line":"      Random_oracle_input.Legacy.Coding.deserialize ~field_of_string","counters":[]},{"line":"        ~of_bool:Fn.id","counters":[]},{"line":"        (String.to_list","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"           (Option.value_exn (Hex.Safe.of_hex r.random_oracle_input)) )","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      |> Result.map_error ~f:(fun e ->","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"             let parse_context =","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               match e with","counters":[]},{"line":"               | `Expected_eof ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   \"Extra bytes at the end of input\"","counters":[]},{"line":"               | `Unexpected_eof ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"                   \"Unexpected end of bytes stream\"","counters":[]},{"line":"             in","counters":[]},{"line":"             Errors.create","counters":[]},{"line":"               ~context:","counters":[]},{"line":"                 (sprintf \"Random oracle input deserialization: %s\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                    parse_context )","counters":[]},{"line":"               (`Json_parse None) )","counters":[]},{"line":"    in","counters":[]},{"line":"    match (r.payment, r.stake_delegation) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Some payment, None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.return","counters":[]},{"line":"          { command = of_rendered_payment payment","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; random_oracle_input","counters":[]},{"line":"          ; nonce = payment.nonce","counters":[]},{"line":"          }","counters":[]},{"line":"    | None, Some delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.return","counters":[]},{"line":"          { command = of_rendered_delegation delegation","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"          ; random_oracle_input","counters":[]},{"line":"          ; nonce = delegation.nonce","counters":[]},{"line":"          }","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.fail","counters":[]},{"line":"          (Errors.create ~context:\"Unsigned transaction un-rendering\"","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"             `Unsupported_operation_for_construction )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Signature = struct","counters":[]},{"line":"  let decode signature_raw =","counters":[]},{"line":"    Mina_base.Signature.Raw.decode signature_raw","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    |> Result.of_option","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"         ~error:","counters":[]},{"line":"           (Errors.create ~context:\"Signed transaction un-rendering\"","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"              `Unsupported_operation_for_construction )","counters":[]},{"line":"","counters":[]},{"line":"  let encode = Mina_base.Signature.Raw.encode","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Signed = struct","counters":[]},{"line":"  type t =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { command : User_command_info.Partial.t","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    ; nonce : Unsigned_extended.UInt32.t","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"    ; signature : Mina_base.Signature.t","counters":[]},{"line":"    }","counters":[]},{"line":"  [@@deriving equal]","counters":[]},{"line":"","counters":[]},{"line":"  module Rendered = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { signature : string","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; payment : Unsigned.Rendered.Payment.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      ; stake_delegation : Unsigned.Rendered.Delegation.t option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson]","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let render (t : t) =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let signature = Signature.encode t.signature in","counters":[]},{"line":"    match%map Unsigned.render_command ~nonce:t.nonce t.command with","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    | `Payment payment ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Rendered.signature; payment = Some payment; stake_delegation = None }","counters":[]},{"line":"    | `Delegation delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Rendered.signature","counters":[]},{"line":"        ; payment = None","counters":[]},{"line":"        ; stake_delegation = Some delegation","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"  let of_rendered (r : Rendered.t) : (t, Errors.t) Result.t =","counters":[]},{"line":"    let open Result.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%bind signature = Signature.decode r.signature in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    match (r.payment, r.stake_delegation) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Some payment, None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.return","counters":[]},{"line":"          { command = Unsigned.of_rendered_payment payment","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"          ; nonce = payment.nonce","counters":[]},{"line":"          ; signature","counters":[]},{"line":"          }","counters":[]},{"line":"    | None, Some delegation ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.return","counters":[]},{"line":"          { command = Unsigned.of_rendered_delegation delegation","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; nonce = delegation.nonce","counters":[]},{"line":"          ; signature","counters":[]},{"line":"          }","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Result.fail","counters":[]},{"line":"          (Errors.create ~context:\"Signed transaction un-rendering\"","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"             `Unsupported_operation_for_construction )","counters":[]},{"line":"","counters":[]},{"line":"  let to_mina_signed t =","counters":[]},{"line":"    Or_error.try_with_join (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        let open Or_error.Let_syntax in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let pk (`Pk x) =","counters":[]},{"line":"          Signature_lib.Public_key.Compressed.of_base58_check_exn x","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        in","counters":[]},{"line":"        let%map payload =","counters":[]},{"line":"          User_command_info.Partial.to_user_command_payload t.command","counters":[]},{"line":"            ~nonce:t.nonce","counters":[]},{"line":"          |> Result.map_error ~f:(fun err -> Error.of_string (Errors.show err))","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"        in","counters":[]},{"line":"        let command : Mina_base.Signed_command.t =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { Mina_base.Signed_command.Poly.signature = t.signature","counters":[]},{"line":"          ; signer =","counters":[]},{"line":"              pk t.command.fee_payer |> Signature_lib.Public_key.decompress_exn","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":78,"col_end":78,"count":0}]},{"line":"          ; payload","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        command )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let to_mina_signed transaction_json =","counters":[]},{"line":"  Or_error.try_with_join (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      let open Or_error.Let_syntax in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let%bind rendered =","counters":[]},{"line":"        Signed.Rendered.of_yojson transaction_json","counters":[]},{"line":"        |> Result.map_error ~f:Error.of_string","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind t =","counters":[]},{"line":"        Signed.of_rendered rendered","counters":[]},{"line":"        |> Result.map_error ~f:(fun err -> Error.of_string (Errors.show err))","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"      in","counters":[]},{"line":"      Signed.to_mina_signed t )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":1}]}]}