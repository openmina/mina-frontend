{"filename":"src/lib/graphql_basic_scalars/testing.ml","lines":[{"line":"(**","counters":[]},{"line":"   Utils for roundtrip testing of graphql scalars.","counters":[]},{"line":" *)","counters":[{"col_start":3,"col_end":3,"count":1}]},{"line":"open Utils","counters":[]},{"line":"","counters":[]},{"line":"module type Test_Intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val gen : t Base_quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"  val sexp_of_t : t -> Ppx_sexp_conv_lib.Sexp.t","counters":[]},{"line":"","counters":[]},{"line":"  val compare : t -> t -> int","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let list_of_seq seq =","counters":[]},{"line":"  let rec loop seq =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match seq () with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Seq.Nil ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        []","counters":[]},{"line":"    | Seq.Cons (Ok x, next) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        x :: loop next","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    | Seq.Cons (Error _, _) ->","counters":[]},{"line":"        assert false","counters":[]},{"line":"  in","counters":[]},{"line":"  loop seq","counters":[]},{"line":"","counters":[]},{"line":"let json_from_response = function","counters":[]},{"line":"  | Ok (`Response data) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      data","counters":[]},{"line":"  | Ok (`Stream stream) -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      try","counters":[]},{"line":"        match stream () with","counters":[]},{"line":"        | Seq.Cons (Ok _, _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            `List (list_of_seq stream)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"        | Seq.Cons (Error err, _) ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            err","counters":[]},{"line":"        | Seq.Nil ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            `Null","counters":[]},{"line":"      with _ -> `String \"caught stream exn\" )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  | Error err ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      err","counters":[]},{"line":"","counters":[]},{"line":"let test_query schema ctx query (f_test : Yojson.Basic.t -> unit) : unit =","counters":[]},{"line":"  match Graphql_parser.parse query with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Error err ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith err","counters":[]},{"line":"  | Ok doc ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Graphql.Schema.execute schema ctx doc |> json_from_response |> f_test","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"let get_test_field = function","counters":[]},{"line":"  | `Assoc [ (\"data\", `Assoc [ (\"test\", value) ]) ] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      value","counters":[]},{"line":"  | json ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Core_kernel.failwithf \"(%s) Unexpected format of JSON response:%s\" __LOC__","counters":[]},{"line":"        (Yojson.Basic.to_string json)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"        ()","counters":[]},{"line":"","counters":[]},{"line":"module Make_test","counters":[]},{"line":"    (S : Json_intf_any_typ with type ('a, 'b) typ := ('a, 'b) Graphql.Schema.typ)","counters":[]},{"line":"    (G : Test_Intf with type t = S.t) =","counters":[]},{"line":"struct","counters":[]},{"line":"  let query_server_and_compare value =","counters":[]},{"line":"    let schema =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Graphql.Schema.(","counters":[]},{"line":"        schema","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"          [ field \"test\"","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              ~typ:(non_null @@ S.typ ())","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"              ~args:Arg.[]","counters":[]},{"line":"              ~resolve:(fun _ () -> value)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"          ])","counters":[]},{"line":"    in","counters":[]},{"line":"    test_query schema () \"{ test }\" (fun response ->","counters":[]},{"line":"        [%test_eq: G.t] value (S.parse @@ get_test_field response) )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"test\" =","counters":[]},{"line":"    Core_kernel.Quickcheck.test G.gen ~sexp_of:G.sexp_of_t","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~f:query_server_and_compare","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}