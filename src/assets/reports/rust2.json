{"filename":"src/scan_state/conv.rs","lines":[{"line":"#![allow(unused_variables, unreachable_code)]","counters":[]},{"line":"","counters":[]},{"line":"use std::rc::Rc;","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_p2p_messages::{","counters":[]},{"line":"    pseq::PaddedSeq,","counters":[]},{"line":"    string::CharString,","counters":[]},{"line":"    v2::{","counters":[]},{"line":"        BlockTimeTimeStableV1, CurrencyAmountStableV1, CurrencyBalanceStableV1,","counters":[]},{"line":"        CurrencyFeeStableV1, DataHashLibStateHashStableV1, EpochSeed, LedgerProofProdStableV2,","counters":[]},{"line":"        MinaBaseAccountIdDigestStableV1, MinaBaseAccountIdStableV2,","counters":[]},{"line":"        MinaBaseAccountUpdateBodyEventsStableV1, MinaBaseAccountUpdateBodyFeePayerStableV1,","counters":[]},{"line":"        MinaBaseAccountUpdateBodyWireStableV1, MinaBaseAccountUpdateCallTypeStableV1,","counters":[]},{"line":"        MinaBaseAccountUpdateFeePayerStableV1, MinaBaseAccountUpdatePreconditionsStableV1,","counters":[]},{"line":"        MinaBaseAccountUpdateTWireStableV1, MinaBaseAccountUpdateUpdateStableV1,","counters":[]},{"line":"        MinaBaseAccountUpdateUpdateStableV1AppStateA,","counters":[]},{"line":"        MinaBaseAccountUpdateUpdateTimingInfoStableV1, MinaBaseCallStackDigestStableV1,","counters":[]},{"line":"        MinaBaseCoinbaseFeeTransferStableV1, MinaBaseCoinbaseStableV1, MinaBaseEpochSeedStableV1,","counters":[]},{"line":"        MinaBaseFeeExcessStableV1, MinaBaseFeeExcessStableV1Fee, MinaBaseFeeTransferSingleStableV2,","counters":[]},{"line":"        MinaBaseFeeTransferStableV2, MinaBaseLedgerHash0StableV1, MinaBasePaymentPayloadStableV2,","counters":[]},{"line":"        MinaBasePendingCoinbaseCoinbaseStackStableV1, MinaBasePendingCoinbaseStackHashStableV1,","counters":[]},{"line":"        MinaBasePendingCoinbaseStackVersionedStableV1, MinaBasePendingCoinbaseStateStackStableV1,","counters":[]},{"line":"        MinaBaseReceiptChainHashStableV1, MinaBaseSignedCommandMemoStableV1,","counters":[]},{"line":"        MinaBaseSignedCommandPayloadBodyStableV2, MinaBaseSignedCommandPayloadCommonStableV2,","counters":[]},{"line":"        MinaBaseSignedCommandPayloadStableV2, MinaBaseSignedCommandStableV2,","counters":[]},{"line":"        MinaBaseSokMessageDigestStableV1, MinaBaseSokMessageStableV1, MinaBaseStackFrameStableV1,","counters":[]},{"line":"        MinaBaseStakeDelegationStableV1, MinaBaseStateBodyHashStableV1,","counters":[]},{"line":"        MinaBaseTransactionStatusFailureCollectionStableV1,","counters":[]},{"line":"        MinaBaseTransactionStatusFailureStableV2, MinaBaseTransactionStatusStableV2,","counters":[]},{"line":"        MinaBaseUserCommandStableV2, MinaBaseZkappCommandTStableV1WireStableV1,","counters":[]},{"line":"        MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA,","counters":[]},{"line":"        MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA,","counters":[]},{"line":"        MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA,","counters":[]},{"line":"        MinaBaseZkappPreconditionAccountStableV2, MinaBaseZkappPreconditionAccountStableV2BalanceA,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateEpochDataStableV1,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateEpochDataStableV1EpochLedger,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateStableV1,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateStableV1AmountA,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateStableV1Length,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateStableV1LengthA,","counters":[]},{"line":"        MinaBaseZkappPreconditionProtocolStateStableV1TimeA,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedCoinbaseAppliedStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedCoinbaseAppliedStableV2Coinbase,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedCommandAppliedStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedFeeTransferAppliedStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedFeeTransferAppliedStableV2FeeTransfer,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedSignedCommandAppliedBodyStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedSignedCommandAppliedCommonStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedSignedCommandAppliedCommonStableV2UserCommand,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedSignedCommandAppliedStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedVaryingStableV2,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedZkappCommandAppliedStableV1,","counters":[]},{"line":"        MinaTransactionLogicTransactionAppliedZkappCommandAppliedStableV1Command,","counters":[]},{"line":"        MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1,","counters":[]},{"line":"        MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount, SgnStableV1,","counters":[]},{"line":"        StateHash, TransactionSnarkScanStateLedgerProofWithSokMessageStableV2,","counters":[]},{"line":"        TransactionSnarkScanStateTransactionWithWitnessStableV2, TransactionSnarkStableV2,","counters":[]},{"line":"        TransactionSnarkStatementStableV2, TransactionSnarkStatementWithSokStableV2,","counters":[]},{"line":"        TransactionSnarkStatementWithSokStableV2Source, UnsignedExtendedUInt32StableV1,","counters":[]},{"line":"        UnsignedExtendedUInt64Int64ForVersionTagsStableV1,","counters":[]},{"line":"    },","counters":[]},{"line":"};","counters":[]},{"line":"use mina_signer::Signature;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    array_into_with,","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::BlockTime,","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            signed_command::{PaymentPayload, StakeDelegationPayload},","counters":[]},{"line":"            zkapp_command::{self, AuthorizationKind, CallForest},","counters":[]},{"line":"            WithStatus,","counters":[]},{"line":"        },","counters":[]},{"line":"    },","counters":[]},{"line":"    Account, AccountId, TokenId, VerificationKey, VotingFor,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::{","counters":[]},{"line":"    currency::{Amount, Balance, Fee, Index, Length, Nonce, Sgn, Signed, Slot},","counters":[]},{"line":"    fee_excess::FeeExcess,","counters":[]},{"line":"    pending_coinbase,","counters":[]},{"line":"    scan_state::transaction_snark::{","counters":[]},{"line":"        LedgerProof, LedgerProofWithSokMessage, Registers, SokDigest, SokMessage, Statement,","counters":[]},{"line":"        TransactionSnark, TransactionWithWitness,","counters":[]},{"line":"    },","counters":[]},{"line":"    transaction_logic::{","counters":[]},{"line":"        self,","counters":[]},{"line":"        local_state::LocalState,","counters":[]},{"line":"        signed_command::SignedCommand,","counters":[]},{"line":"        transaction_applied::{self, TransactionApplied},","counters":[]},{"line":"        zkapp_command::{","counters":[]},{"line":"            AccountUpdate, FeePayer, FeePayerBody, SetOrKeep, WithHash, WithStackHash,","counters":[]},{"line":"        },","counters":[]},{"line":"        FeeTransfer, Memo, SingleFeeTransfer, TransactionFailure, TransactionStatus,","counters":[]},{"line":"    },","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"impl From<CurrencyAmountStableV1> for Amount {","counters":[]},{"line":"    fn from(value: CurrencyAmountStableV1) -> Self {","counters":[{"col_start":4,"col_end":52,"count":0}]},{"line":"        Self(value.as_u64())","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<CurrencyAmountStableV1> for Balance {","counters":[]},{"line":"    fn from(value: CurrencyAmountStableV1) -> Self {","counters":[{"col_start":4,"col_end":52,"count":0}]},{"line":"        Self(value.as_u64())","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<Amount> for CurrencyAmountStableV1 {","counters":[]},{"line":"    fn from(value: Amount) -> Self {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        Self(UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            (value.0 as i64).into(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Balance> for CurrencyBalanceStableV1 {","counters":[]},{"line":"    fn from(value: &Balance) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        Self((*value).into())","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<Balance> for CurrencyAmountStableV1 {","counters":[]},{"line":"    fn from(value: Balance) -> Self {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        Self(UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            (value.0 as i64).into(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount>","counters":[]},{"line":"    for Signed<Amount>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(","counters":[{"col_start":4,"col_end":12,"count":0}]},{"line":"        value: &MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount,","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"    ) -> Self {","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            magnitude: value.magnitude.clone().into(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            sgn: value.sgn.0.clone().into(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Signed<Amount>>","counters":[]},{"line":"    for MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &Signed<Amount>) -> Self {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            magnitude: value.magnitude.into(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"            sgn: ((&value.sgn).into(),),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&CurrencyFeeStableV1> for Fee {","counters":[]},{"line":"    fn from(value: &CurrencyFeeStableV1) -> Self {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        Self(value.as_u64())","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Nonce> for mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1 {","counters":[]},{"line":"    fn from(value: &Nonce) -> Self {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        Self((value.as_u32() as i32).into())","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1> for Nonce {","counters":[]},{"line":"    fn from(value: &mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1) -> Self {","counters":[{"col_start":4,"col_end":84,"count":0}]},{"line":"        Self::from_u32(value.as_u32())","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1> for Slot {","counters":[]},{"line":"    fn from(value: &mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1) -> Self {","counters":[{"col_start":4,"col_end":84,"count":334}]},{"line":"        Self::from_u32(value.as_u32())","counters":[{"col_start":0,"col_end":38,"count":334}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":334}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Slot> for mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1 {","counters":[]},{"line":"    fn from(value: &Slot) -> Self {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        Self((value.as_u32() as i32).into())","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Length> for mina_p2p_messages::v2::UnsignedExtendedUInt32StableV1 {","counters":[]},{"line":"    fn from(value: &Length) -> Self {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        Self((value.as_u32() as i32).into())","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<SgnStableV1> for Sgn {","counters":[]},{"line":"    fn from(value: SgnStableV1) -> Self {","counters":[{"col_start":4,"col_end":41,"count":334}]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":334}]},{"line":"            SgnStableV1::Pos => Self::Pos,","counters":[{"col_start":32,"col_end":41,"count":0}]},{"line":"            SgnStableV1::Neg => Self::Neg,","counters":[{"col_start":32,"col_end":41,"count":334}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":334}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseFeeExcessStableV1Fee> for Signed<Fee> {","counters":[]},{"line":"    fn from(value: &MinaBaseFeeExcessStableV1Fee) -> Self {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            magnitude: (&value.magnitude).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            sgn: value.sgn.0.clone().into(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Sgn> for SgnStableV1 {","counters":[]},{"line":"    fn from(value: &Sgn) -> Self {","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            Sgn::Pos => Self::Pos,","counters":[{"col_start":24,"col_end":33,"count":0}]},{"line":"            Sgn::Neg => Self::Neg,","counters":[{"col_start":24,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Fee> for CurrencyFeeStableV1 {","counters":[]},{"line":"    fn from(value: &Fee) -> Self {","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        Self(UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            (value.0 as i64).into(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Signed<Fee>> for MinaBaseFeeExcessStableV1Fee {","counters":[]},{"line":"    fn from(value: &Signed<Fee>) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            magnitude: (&value.magnitude).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            sgn: ((&value.sgn).into(),),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseFeeExcessStableV1> for FeeExcess {","counters":[]},{"line":"    fn from(value: &MinaBaseFeeExcessStableV1) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_token_l: (&value.fee_token_l.0).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            fee_excess_l: (&value.fee_excess_l).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            fee_token_r: (&value.fee_token_r.0).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            fee_excess_r: (&value.fee_excess_r).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&FeeExcess> for MinaBaseFeeExcessStableV1 {","counters":[]},{"line":"    fn from(value: &FeeExcess) -> Self {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_token_l: (&value.fee_token_l).into(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            fee_excess_l: (&value.fee_excess_l).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            fee_token_r: (&value.fee_token_r).into(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            fee_excess_r: (&value.fee_excess_r).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBasePendingCoinbaseStackVersionedStableV1> for pending_coinbase::Stack {","counters":[]},{"line":"    fn from(value: &MinaBasePendingCoinbaseStackVersionedStableV1) -> Self {","counters":[{"col_start":4,"col_end":76,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            data: pending_coinbase::CoinbaseStack(value.data.0.to_field()),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"            state: pending_coinbase::StateStack {","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                init: value.state.init.0.to_field(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                curr: value.state.curr.0.to_field(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseTransactionStatusFailureStableV2> for TransactionFailure {","counters":[]},{"line":"    fn from(value: &MinaBaseTransactionStatusFailureStableV2) -> Self {","counters":[{"col_start":4,"col_end":71,"count":0}]},{"line":"        use MinaBaseTransactionStatusFailureStableV2 as P2P;","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            P2P::Predicate => Self::Predicate,","counters":[{"col_start":30,"col_end":45,"count":0}]},{"line":"            P2P::SourceNotPresent => Self::SourceNotPresent,","counters":[{"col_start":37,"col_end":59,"count":0}]},{"line":"            P2P::ReceiverNotPresent => Self::ReceiverNotPresent,","counters":[{"col_start":39,"col_end":63,"count":0}]},{"line":"            P2P::AmountInsufficientToCreateAccount => Self::AmountInsufficientToCreateAccount,","counters":[{"col_start":54,"col_end":93,"count":0}]},{"line":"            P2P::CannotPayCreationFeeInToken => Self::CannotPayCreationFeeInToken,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::SourceInsufficientBalance => Self::SourceInsufficientBalance,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::SourceMinimumBalanceViolation => Self::SourceMinimumBalanceViolation,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::ReceiverAlreadyExists => Self::ReceiverAlreadyExists,","counters":[{"col_start":42,"col_end":69,"count":0}]},{"line":"            P2P::TokenOwnerNotCaller => Self::TokenOwnerNotCaller,","counters":[{"col_start":40,"col_end":65,"count":0}]},{"line":"            P2P::Overflow => Self::Overflow,","counters":[{"col_start":29,"col_end":43,"count":0}]},{"line":"            P2P::GlobalExcessOverflow => Self::GlobalExcessOverflow,","counters":[{"col_start":41,"col_end":67,"count":0}]},{"line":"            P2P::LocalExcessOverflow => Self::LocalExcessOverflow,","counters":[{"col_start":40,"col_end":65,"count":0}]},{"line":"            P2P::LocalSupplyIncreaseOverflow => Self::LocalSupplyIncreaseOverflow,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::GlobalSupplyIncreaseOverflow => Self::GlobalSupplyIncreaseOverflow,","counters":[{"col_start":49,"col_end":83,"count":0}]},{"line":"            P2P::SignedCommandOnZkappAccount => Self::SignedCommandOnZkappAccount,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::ZkappAccountNotPresent => Self::ZkappAccountNotPresent,","counters":[{"col_start":43,"col_end":71,"count":0}]},{"line":"            P2P::UpdateNotPermittedBalance => Self::UpdateNotPermittedBalance,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::UpdateNotPermittedTimingExistingAccount => {","counters":[]},{"line":"                Self::UpdateNotPermittedTimingExistingAccount","counters":[{"col_start":16,"col_end":61,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::UpdateNotPermittedDelegate => Self::UpdateNotPermittedDelegate,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedAppState => Self::UpdateNotPermittedAppState,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedVerificationKey => Self::UpdateNotPermittedVerificationKey,","counters":[{"col_start":54,"col_end":93,"count":0}]},{"line":"            P2P::UpdateNotPermittedSequenceState => Self::UpdateNotPermittedSequenceState,","counters":[{"col_start":52,"col_end":89,"count":0}]},{"line":"            P2P::UpdateNotPermittedZkappUri => Self::UpdateNotPermittedZkappUri,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedTokenSymbol => Self::UpdateNotPermittedTokenSymbol,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::UpdateNotPermittedPermissions => Self::UpdateNotPermittedPermissions,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::UpdateNotPermittedNonce => Self::UpdateNotPermittedNonce,","counters":[{"col_start":44,"col_end":73,"count":0}]},{"line":"            P2P::UpdateNotPermittedVotingFor => Self::UpdateNotPermittedVotingFor,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::ZkappCommandReplayCheckFailed => Self::ZkappCommandReplayCheckFailed,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::FeePayerNonceMustIncrease => Self::FeePayerNonceMustIncrease,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::FeePayerMustBeSigned => Self::FeePayerMustBeSigned,","counters":[{"col_start":41,"col_end":67,"count":0}]},{"line":"            P2P::AccountBalancePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountBalancePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":59,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountNoncePreconditionUnsatisfied => Self::AccountNoncePreconditionUnsatisfied,","counters":[{"col_start":56,"col_end":97,"count":0}]},{"line":"            P2P::AccountReceiptChainHashPreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountReceiptChainHashPreconditionUnsatisfied","counters":[{"col_start":16,"col_end":68,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountDelegatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountDelegatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":60,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountSequenceStatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountSequenceStatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":65,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountAppStatePreconditionUnsatisfied(v) => {","counters":[{"col_start":56,"col_end":63,"count":0}]},{"line":"                Self::AccountAppStatePreconditionUnsatisfied(v.as_u32() as usize)","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountProvedStatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountProvedStatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":63,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountIsNewPreconditionUnsatisfied => Self::AccountIsNewPreconditionUnsatisfied,","counters":[{"col_start":56,"col_end":97,"count":0}]},{"line":"            P2P::ProtocolStatePreconditionUnsatisfied => Self::ProtocolStatePreconditionUnsatisfied,","counters":[{"col_start":57,"col_end":99,"count":0}]},{"line":"            P2P::IncorrectNonce => Self::IncorrectNonce,","counters":[{"col_start":35,"col_end":55,"count":0}]},{"line":"            P2P::InvalidFeeExcess => Self::InvalidFeeExcess,","counters":[{"col_start":37,"col_end":59,"count":0}]},{"line":"            P2P::Cancelled => Self::Cancelled,","counters":[{"col_start":30,"col_end":45,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionFailure> for MinaBaseTransactionStatusFailureStableV2 {","counters":[]},{"line":"    fn from(value: &TransactionFailure) -> Self {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        use TransactionFailure as P2P;","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"","counters":[]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            P2P::Predicate => Self::Predicate,","counters":[{"col_start":30,"col_end":45,"count":0}]},{"line":"            P2P::SourceNotPresent => Self::SourceNotPresent,","counters":[{"col_start":37,"col_end":59,"count":0}]},{"line":"            P2P::ReceiverNotPresent => Self::ReceiverNotPresent,","counters":[{"col_start":39,"col_end":63,"count":0}]},{"line":"            P2P::AmountInsufficientToCreateAccount => Self::AmountInsufficientToCreateAccount,","counters":[{"col_start":54,"col_end":93,"count":0}]},{"line":"            P2P::CannotPayCreationFeeInToken => Self::CannotPayCreationFeeInToken,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::SourceInsufficientBalance => Self::SourceInsufficientBalance,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::SourceMinimumBalanceViolation => Self::SourceMinimumBalanceViolation,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::ReceiverAlreadyExists => Self::ReceiverAlreadyExists,","counters":[{"col_start":42,"col_end":69,"count":0}]},{"line":"            P2P::TokenOwnerNotCaller => Self::TokenOwnerNotCaller,","counters":[{"col_start":40,"col_end":65,"count":0}]},{"line":"            P2P::Overflow => Self::Overflow,","counters":[{"col_start":29,"col_end":43,"count":0}]},{"line":"            P2P::GlobalExcessOverflow => Self::GlobalExcessOverflow,","counters":[{"col_start":41,"col_end":67,"count":0}]},{"line":"            P2P::LocalExcessOverflow => Self::LocalExcessOverflow,","counters":[{"col_start":40,"col_end":65,"count":0}]},{"line":"            P2P::LocalSupplyIncreaseOverflow => Self::LocalSupplyIncreaseOverflow,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::GlobalSupplyIncreaseOverflow => Self::GlobalSupplyIncreaseOverflow,","counters":[{"col_start":49,"col_end":83,"count":0}]},{"line":"            P2P::SignedCommandOnZkappAccount => Self::SignedCommandOnZkappAccount,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::ZkappAccountNotPresent => Self::ZkappAccountNotPresent,","counters":[{"col_start":43,"col_end":71,"count":0}]},{"line":"            P2P::UpdateNotPermittedBalance => Self::UpdateNotPermittedBalance,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::UpdateNotPermittedTimingExistingAccount => {","counters":[]},{"line":"                Self::UpdateNotPermittedTimingExistingAccount","counters":[{"col_start":16,"col_end":61,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::UpdateNotPermittedDelegate => Self::UpdateNotPermittedDelegate,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedAppState => Self::UpdateNotPermittedAppState,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedVerificationKey => Self::UpdateNotPermittedVerificationKey,","counters":[{"col_start":54,"col_end":93,"count":0}]},{"line":"            P2P::UpdateNotPermittedSequenceState => Self::UpdateNotPermittedSequenceState,","counters":[{"col_start":52,"col_end":89,"count":0}]},{"line":"            P2P::UpdateNotPermittedZkappUri => Self::UpdateNotPermittedZkappUri,","counters":[{"col_start":47,"col_end":79,"count":0}]},{"line":"            P2P::UpdateNotPermittedTokenSymbol => Self::UpdateNotPermittedTokenSymbol,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::UpdateNotPermittedPermissions => Self::UpdateNotPermittedPermissions,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::UpdateNotPermittedNonce => Self::UpdateNotPermittedNonce,","counters":[{"col_start":44,"col_end":73,"count":0}]},{"line":"            P2P::UpdateNotPermittedVotingFor => Self::UpdateNotPermittedVotingFor,","counters":[{"col_start":48,"col_end":81,"count":0}]},{"line":"            P2P::ZkappCommandReplayCheckFailed => Self::ZkappCommandReplayCheckFailed,","counters":[{"col_start":50,"col_end":85,"count":0}]},{"line":"            P2P::FeePayerNonceMustIncrease => Self::FeePayerNonceMustIncrease,","counters":[{"col_start":46,"col_end":77,"count":0}]},{"line":"            P2P::FeePayerMustBeSigned => Self::FeePayerMustBeSigned,","counters":[{"col_start":41,"col_end":67,"count":0}]},{"line":"            P2P::AccountBalancePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountBalancePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":59,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountNoncePreconditionUnsatisfied => Self::AccountNoncePreconditionUnsatisfied,","counters":[{"col_start":56,"col_end":97,"count":0}]},{"line":"            P2P::AccountReceiptChainHashPreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountReceiptChainHashPreconditionUnsatisfied","counters":[{"col_start":16,"col_end":68,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountDelegatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountDelegatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":60,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountSequenceStatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountSequenceStatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":65,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountAppStatePreconditionUnsatisfied(v) => {","counters":[{"col_start":56,"col_end":63,"count":0}]},{"line":"                Self::AccountAppStatePreconditionUnsatisfied((*v as i32).into())","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountProvedStatePreconditionUnsatisfied => {","counters":[]},{"line":"                Self::AccountProvedStatePreconditionUnsatisfied","counters":[{"col_start":16,"col_end":63,"count":0}]},{"line":"            }","counters":[]},{"line":"            P2P::AccountIsNewPreconditionUnsatisfied => Self::AccountIsNewPreconditionUnsatisfied,","counters":[{"col_start":56,"col_end":97,"count":0}]},{"line":"            P2P::ProtocolStatePreconditionUnsatisfied => Self::ProtocolStatePreconditionUnsatisfied,","counters":[{"col_start":57,"col_end":99,"count":0}]},{"line":"            P2P::IncorrectNonce => Self::IncorrectNonce,","counters":[{"col_start":35,"col_end":55,"count":0}]},{"line":"            P2P::InvalidFeeExcess => Self::InvalidFeeExcess,","counters":[{"col_start":37,"col_end":59,"count":0}]},{"line":"            P2P::Cancelled => Self::Cancelled,","counters":[{"col_start":30,"col_end":45,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkStatementWithSokStableV2Source> for Registers {","counters":[]},{"line":"    fn from(value: &TransactionSnarkStatementWithSokStableV2Source) -> Self {","counters":[{"col_start":4,"col_end":77,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            ledger: value.ledger.to_field(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            pending_coinbase_stack: (&value.pending_coinbase_stack).into(),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"            local_state: LocalState {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                stack_frame: value.local_state.stack_frame.0.to_field(),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                call_stack: value.local_state.call_stack.0.to_field(),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                transaction_commitment: value.local_state.transaction_commitment.to_field(),","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"                full_transaction_commitment: value","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                    .local_state","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    .full_transaction_commitment","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                    .to_field(),","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                token_id: {","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    let id: MinaBaseAccountIdDigestStableV1 =","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                        value.local_state.token_id.clone().into_inner();","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                    id.into()","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                excess: (&value.local_state.excess).into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                supply_increase: (&value.local_state.supply_increase).into(),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                ledger: value.local_state.ledger.0.to_field(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                success: value.local_state.success,","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                account_update_index: Index(value.local_state.account_update_index.0.as_u32()),","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                failure_status_tbl: value","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    .local_state","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    .failure_status_tbl","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                    .0","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .map(|s| s.iter().map(|s| s.into()).collect())","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":42,"count":2860},{"col_start":46,"col_end":54,"count":0},{"col_start":54,"col_end":65,"count":2860},{"col_start":65,"col_end":66,"count":0}]},{"line":"                    .collect(),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkStatementStableV2> for Statement<()> {","counters":[]},{"line":"    fn from(value: &TransactionSnarkStatementStableV2) -> Self {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            source: (&value.source).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            target: (&value.target).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            supply_increase: (&value.supply_increase).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            fee_excess: (&value.fee_excess).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            sok_digest: (),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkStatementWithSokStableV2> for Statement<SokDigest> {","counters":[]},{"line":"    fn from(value: &TransactionSnarkStatementWithSokStableV2) -> Self {","counters":[{"col_start":4,"col_end":71,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            source: (&value.source).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            target: (&value.target).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            supply_increase: (&value.supply_increase).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            fee_excess: (&value.fee_excess).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            sok_digest: SokDigest(value.sok_digest.to_vec()),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Statement<SokDigest>> for TransactionSnarkStatementWithSokStableV2 {","counters":[]},{"line":"    fn from(value: &Statement<SokDigest>) -> Self {","counters":[{"col_start":4,"col_end":51,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            source: (&value.source).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            target: (&value.target).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            supply_increase: (&value.supply_increase).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            fee_excess: (&value.fee_excess).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            sok_digest: MinaBaseSokMessageDigestStableV1(value.sok_digest.as_slice().into()),","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseTransactionStatusStableV2> for TransactionStatus {","counters":[]},{"line":"    fn from(value: &MinaBaseTransactionStatusStableV2) -> Self {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            MinaBaseTransactionStatusStableV2::Applied => Self::Applied,","counters":[{"col_start":58,"col_end":71,"count":0}]},{"line":"            MinaBaseTransactionStatusStableV2::Failed(faileds) => Self::Failed(","counters":[{"col_start":54,"col_end":79,"count":0}]},{"line":"                faileds","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                    .0","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .map(|s| s.iter().map(Into::into).collect())","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"                    .collect(),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionStatus> for MinaBaseTransactionStatusStableV2 {","counters":[]},{"line":"    fn from(value: &TransactionStatus) -> Self {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            TransactionStatus::Applied => Self::Applied,","counters":[{"col_start":42,"col_end":55,"count":0}]},{"line":"            TransactionStatus::Failed(faileds) => {","counters":[{"col_start":38,"col_end":51,"count":0}]},{"line":"                Self::Failed(MinaBaseTransactionStatusFailureCollectionStableV1(","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                    faileds","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|s| s.iter().map(Into::into).collect())","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":67,"count":0},{"col_start":67,"col_end":68,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ))","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseAccountUpdateFeePayerStableV1> for FeePayer {","counters":[]},{"line":"    fn from(value: &MinaBaseAccountUpdateFeePayerStableV1) -> Self {","counters":[{"col_start":4,"col_end":68,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            body: FeePayerBody {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                public_key: value.body.public_key.clone().into_inner().into(),","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                fee: Fee::from_u64(value.body.fee.as_u64()),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                valid_until: value","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                    .body","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    .valid_until","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    .as_ref()","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                    .map(|until| Slot::from_u32(until.as_u32())),","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":33,"col_end":63,"count":0},{"col_start":63,"col_end":65,"count":0}]},{"line":"                nonce: Nonce::from_u32(value.body.nonce.as_u32()),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            authorization: Signature {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                rx: value.authorization.0.to_field(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                s: value.authorization.1.to_field(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&FeePayer> for MinaBaseAccountUpdateFeePayerStableV1 {","counters":[]},{"line":"    fn from(value: &FeePayer) -> Self {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            body: MinaBaseAccountUpdateBodyFeePayerStableV1 {","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                public_key: (&value.body.public_key).into(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                fee: (&value.body.fee).into(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                valid_until: value.body.valid_until.as_ref().map(|until| until.into()),","counters":[{"col_start":0,"col_end":65,"count":0},{"col_start":73,"col_end":85,"count":0},{"col_start":85,"col_end":87,"count":0}]},{"line":"                nonce: (&value.body.nonce).into(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            authorization: (&value.authorization).into(),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseAccountUpdateUpdateTimingInfoStableV1> for zkapp_command::Timing {","counters":[]},{"line":"    fn from(t: &MinaBaseAccountUpdateUpdateTimingInfoStableV1) -> Self {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            initial_minimum_balance: Balance::from_u64(t.initial_minimum_balance.as_u64()),","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"            cliff_time: Slot::from_u32(t.cliff_time.as_u32()),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            cliff_amount: Amount::from_u64(t.cliff_amount.as_u64()),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"            vesting_period: Slot::from_u32(t.vesting_period.as_u32()),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"            vesting_increment: Amount::from_u64(t.vesting_increment.as_u64()),","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&zkapp_command::Timing> for MinaBaseAccountUpdateUpdateTimingInfoStableV1 {","counters":[]},{"line":"    fn from(t: &zkapp_command::Timing) -> Self {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            initial_minimum_balance: CurrencyBalanceStableV1(t.initial_minimum_balance.into()),","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            cliff_time: UnsignedExtendedUInt32StableV1((t.cliff_time.as_u32() as i32).into()),","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"            cliff_amount: t.cliff_amount.into(),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"            vesting_period: UnsignedExtendedUInt32StableV1(","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                (t.vesting_period.as_u32() as i32).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            vesting_increment: t.vesting_increment.into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseZkappPreconditionProtocolStateStableV1Length>","counters":[]},{"line":"    for zkapp_command::Numeric<Length>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &MinaBaseZkappPreconditionProtocolStateStableV1Length) -> Self {","counters":[{"col_start":4,"col_end":83,"count":0}]},{"line":"        use zkapp_command::{ClosedInterval, Numeric};","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        use MinaBaseZkappPreconditionProtocolStateStableV1Length as MLength;","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            MLength::Check(length) => Numeric::Check(ClosedInterval {","counters":[{"col_start":27,"col_end":69,"count":0}]},{"line":"                lower: Length::from_u32(length.lower.0.as_u32()),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                upper: Length::from_u32(length.upper.0.as_u32()),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            MLength::Ignore => Numeric::Ignore,","counters":[{"col_start":31,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&zkapp_command::Numeric<Length>>","counters":[]},{"line":"    for MinaBaseZkappPreconditionProtocolStateStableV1Length","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &zkapp_command::Numeric<Length>) -> Self {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        use zkapp_command::Numeric;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        use MinaBaseZkappPreconditionProtocolStateStableV1Length as MLength;","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            Numeric::Check(length) => {","counters":[{"col_start":12,"col_end":39,"count":0}]},{"line":"                MLength::Check(MinaBaseZkappPreconditionProtocolStateStableV1LengthA {","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                    lower: (&length.lower).into(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                    upper: (&length.upper).into(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                })","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"            Numeric::Ignore => MLength::Ignore,","counters":[{"col_start":12,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseZkappPreconditionProtocolStateEpochDataStableV1> for zkapp_command::EpochData {","counters":[]},{"line":"    fn from(value: &MinaBaseZkappPreconditionProtocolStateEpochDataStableV1) -> Self {","counters":[{"col_start":4,"col_end":86,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateEpochDataStableV1EpochSeed as Seed;","counters":[{"col_start":0,"col_end":108,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateEpochDataStableV1StartCheckpoint as Start;","counters":[{"col_start":0,"col_end":115,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Amount as MAmount;","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1SnarkedLedgerHash as Hash;","counters":[{"col_start":0,"col_end":107,"count":0}]},{"line":"        use zkapp_command::{ClosedInterval, OrIgnore};","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            ledger: zkapp_command::EpochLedger {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                hash: match &value.ledger.hash {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    Hash::Check(hash) => OrIgnore::Check(hash.to_field()),","counters":[{"col_start":32,"col_end":73,"count":0}]},{"line":"                    Hash::Ignore => OrIgnore::Ignore,","counters":[{"col_start":36,"col_end":52,"count":0}]},{"line":"                },","counters":[]},{"line":"                total_currency: match &value.ledger.total_currency {","counters":[{"col_start":38,"col_end":66,"count":0}]},{"line":"                    MAmount::Check(amount) => OrIgnore::Check(ClosedInterval {","counters":[{"col_start":35,"col_end":78,"count":0}]},{"line":"                        lower: Amount::from_u64(amount.lower.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        upper: Amount::from_u64(amount.upper.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    MAmount::Ignore => OrIgnore::Ignore,","counters":[{"col_start":39,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            seed: match &value.seed {","counters":[{"col_start":24,"col_end":35,"count":0}]},{"line":"                Seed::Check(seed) => OrIgnore::Check(seed.to_field()),","counters":[{"col_start":28,"col_end":69,"count":0}]},{"line":"                Seed::Ignore => OrIgnore::Ignore,","counters":[{"col_start":32,"col_end":48,"count":0}]},{"line":"            },","counters":[]},{"line":"            start_checkpoint: match &value.start_checkpoint {","counters":[{"col_start":36,"col_end":59,"count":0}]},{"line":"                Start::Check(start) => OrIgnore::Check(start.to_field()),","counters":[{"col_start":29,"col_end":72,"count":0}]},{"line":"                Start::Ignore => OrIgnore::Ignore,","counters":[{"col_start":33,"col_end":49,"count":0}]},{"line":"            },","counters":[]},{"line":"            lock_checkpoint: match &value.lock_checkpoint {","counters":[{"col_start":35,"col_end":57,"count":0}]},{"line":"                Start::Check(start) => OrIgnore::Check(start.to_field()),","counters":[{"col_start":29,"col_end":72,"count":0}]},{"line":"                Start::Ignore => OrIgnore::Ignore,","counters":[{"col_start":33,"col_end":49,"count":0}]},{"line":"            },","counters":[]},{"line":"            epoch_length: (&value.epoch_length).into(),","counters":[{"col_start":26,"col_end":55,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn fp_to_epochseed(value: &Fp) -> EpochSeed {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    let hash: MinaBaseEpochSeedStableV1 = MinaBaseEpochSeedStableV1(value.into());","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"    hash.into()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"fn fp_to_statehash(value: &Fp) -> StateHash {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"    let hash: DataHashLibStateHashStableV1 = DataHashLibStateHashStableV1(value.into());","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"    hash.into()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"impl From<&zkapp_command::EpochData> for MinaBaseZkappPreconditionProtocolStateEpochDataStableV1 {","counters":[]},{"line":"    fn from(value: &zkapp_command::EpochData) -> Self {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateEpochDataStableV1EpochSeed as Seed;","counters":[{"col_start":0,"col_end":108,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateEpochDataStableV1StartCheckpoint as Start;","counters":[{"col_start":0,"col_end":115,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Amount as MAmount;","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1SnarkedLedgerHash as Hash;","counters":[{"col_start":0,"col_end":107,"count":0}]},{"line":"        use zkapp_command::OrIgnore;","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            ledger: MinaBaseZkappPreconditionProtocolStateEpochDataStableV1EpochLedger {","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                hash: match &value.ledger.hash {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    OrIgnore::Check(hash) => Hash::Check({","counters":[{"col_start":36,"col_end":58,"count":0}]},{"line":"                        let hash = MinaBaseLedgerHash0StableV1(hash.into());","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        hash.into()","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    OrIgnore::Ignore => Hash::Ignore,","counters":[{"col_start":40,"col_end":52,"count":0}]},{"line":"                },","counters":[]},{"line":"                total_currency: match &value.ledger.total_currency {","counters":[{"col_start":38,"col_end":66,"count":0}]},{"line":"                    OrIgnore::Check(amount) => {","counters":[{"col_start":36,"col_end":48,"count":0}]},{"line":"                        MAmount::Check(MinaBaseZkappPreconditionProtocolStateStableV1AmountA {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                            lower: amount.lower.into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            upper: amount.upper.into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    OrIgnore::Ignore => MAmount::Ignore,","counters":[{"col_start":40,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            seed: match &value.seed {","counters":[{"col_start":24,"col_end":35,"count":0}]},{"line":"                OrIgnore::Check(seed) => Seed::Check(fp_to_epochseed(seed)),","counters":[{"col_start":32,"col_end":75,"count":0}]},{"line":"                OrIgnore::Ignore => Seed::Ignore,","counters":[{"col_start":36,"col_end":48,"count":0}]},{"line":"            },","counters":[]},{"line":"            start_checkpoint: match &value.start_checkpoint {","counters":[{"col_start":36,"col_end":59,"count":0}]},{"line":"                OrIgnore::Check(start) => Start::Check(fp_to_statehash(start)),","counters":[{"col_start":32,"col_end":78,"count":0}]},{"line":"                OrIgnore::Ignore => Start::Ignore,","counters":[{"col_start":36,"col_end":49,"count":0}]},{"line":"            },","counters":[]},{"line":"            lock_checkpoint: match &value.lock_checkpoint {","counters":[{"col_start":35,"col_end":57,"count":0}]},{"line":"                OrIgnore::Check(start) => Start::Check(fp_to_statehash(start)),","counters":[{"col_start":32,"col_end":78,"count":0}]},{"line":"                OrIgnore::Ignore => Start::Ignore,","counters":[{"col_start":36,"col_end":49,"count":0}]},{"line":"            },","counters":[]},{"line":"            epoch_length: (&value.epoch_length).into(),","counters":[{"col_start":26,"col_end":55,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseAccountUpdatePreconditionsStableV1> for zkapp_command::Preconditions {","counters":[]},{"line":"    fn from(value: &MinaBaseAccountUpdatePreconditionsStableV1) -> Self {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateAccountPreconditionStableV1 as MAccount;","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Amount as MAmount;","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1SnarkedLedgerHash as Ledger;","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Time as Time;","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"        use zkapp_command::AccountPreconditions;","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        use zkapp_command::{ClosedInterval, Numeric, OrIgnore};","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        use MinaBaseZkappPreconditionProtocolStateStableV1Length as MLength;","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            network: zkapp_command::ZkAppPreconditions {","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                snarked_ledger_hash: match &value.network.snarked_ledger_hash {","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                    Ledger::Check(hash) => OrIgnore::Check(hash.to_field()),","counters":[{"col_start":34,"col_end":75,"count":0}]},{"line":"                    Ledger::Ignore => OrIgnore::Ignore,","counters":[{"col_start":38,"col_end":54,"count":0}]},{"line":"                },","counters":[]},{"line":"                timestamp: match &value.network.timestamp {","counters":[{"col_start":33,"col_end":57,"count":0}]},{"line":"                    Time::Check(time) => OrIgnore::Check(ClosedInterval {","counters":[{"col_start":32,"col_end":73,"count":0}]},{"line":"                        lower: BlockTime::from_u64(time.lower.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                        upper: BlockTime::from_u64(time.upper.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    Time::Ignore => OrIgnore::Ignore,","counters":[{"col_start":36,"col_end":52,"count":0}]},{"line":"                },","counters":[]},{"line":"                blockchain_length: (&value.network.blockchain_length).into(),","counters":[{"col_start":35,"col_end":77,"count":0}]},{"line":"                min_window_density: (&value.network.min_window_density).into(),","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"                last_vrf_output: value.network.last_vrf_output,","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                total_currency: match &value.network.total_currency {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    MAmount::Check(amount) => OrIgnore::Check(ClosedInterval {","counters":[{"col_start":35,"col_end":78,"count":0}]},{"line":"                        lower: Amount::from_u64(amount.lower.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        upper: Amount::from_u64(amount.upper.0 .0.as_u64()),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    MAmount::Ignore => OrIgnore::Ignore,","counters":[{"col_start":39,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"                global_slot_since_hard_fork: match &value.network.global_slot_since_hard_fork {","counters":[{"col_start":51,"col_end":93,"count":0}]},{"line":"                    MLength::Check(length) => Numeric::Check(ClosedInterval {","counters":[{"col_start":35,"col_end":77,"count":0}]},{"line":"                        lower: Slot::from_u32(length.lower.0.as_u32()),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                        upper: Slot::from_u32(length.upper.0.as_u32()),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    MLength::Ignore => OrIgnore::Ignore,","counters":[{"col_start":39,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"                global_slot_since_genesis: match &value.network.global_slot_since_genesis {","counters":[{"col_start":49,"col_end":89,"count":0}]},{"line":"                    MLength::Check(length) => Numeric::Check(ClosedInterval {","counters":[{"col_start":35,"col_end":77,"count":0}]},{"line":"                        lower: Slot::from_u32(length.lower.0.as_u32()),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                        upper: Slot::from_u32(length.upper.0.as_u32()),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    MLength::Ignore => OrIgnore::Ignore,","counters":[{"col_start":39,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"                staking_epoch_data: (&value.network.staking_epoch_data).into(),","counters":[{"col_start":36,"col_end":79,"count":0}]},{"line":"                next_epoch_data: (&value.network.next_epoch_data).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            account: match &value.account {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                MAccount::Full(account) => {","counters":[{"col_start":31,"col_end":44,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2Balance as MBalance;","counters":[{"col_start":0,"col_end":107,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2Delegate as Delegate;","counters":[{"col_start":0,"col_end":108,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2ProvedState as Proved;","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2ReceiptChainHash as Receipt;","counters":[{"col_start":0,"col_end":115,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2StateA as State;","counters":[{"col_start":0,"col_end":103,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Length as MNonce;","counters":[{"col_start":0,"col_end":110,"count":0}]},{"line":"","counters":[]},{"line":"                    let account = &**account;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    AccountPreconditions::Full(Box::new(zkapp_command::Account {","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                        balance: match &account.balance {","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            MBalance::Check(balance) => OrIgnore::Check(ClosedInterval {","counters":[{"col_start":44,"col_end":88,"count":0}]},{"line":"                                lower: Balance::from_u64(balance.lower.0.as_u64()),","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                                upper: Balance::from_u64(balance.upper.0.as_u64()),","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                            }),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                            MBalance::Ignore => OrIgnore::Ignore,","counters":[{"col_start":48,"col_end":64,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        nonce: match &account.nonce {","counters":[{"col_start":37,"col_end":51,"count":0}]},{"line":"                            MNonce::Check(balance) => OrIgnore::Check(ClosedInterval {","counters":[{"col_start":42,"col_end":86,"count":0}]},{"line":"                                lower: Nonce::from_u32(balance.lower.0.as_u32()),","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                                upper: Nonce::from_u32(balance.upper.0.as_u32()),","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                            }),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                            MNonce::Ignore => OrIgnore::Ignore,","counters":[{"col_start":46,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        receipt_chain_hash: match &account.receipt_chain_hash {","counters":[{"col_start":50,"col_end":77,"count":0}]},{"line":"                            Receipt::Check(hash) => OrIgnore::Check(hash.to_field()),","counters":[{"col_start":43,"col_end":84,"count":0}]},{"line":"                            Receipt::Ignore => OrIgnore::Ignore,","counters":[{"col_start":47,"col_end":63,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        delegate: match &account.delegate {","counters":[{"col_start":40,"col_end":57,"count":0}]},{"line":"                            Delegate::Check(delegate) => {","counters":[{"col_start":44,"col_end":58,"count":0}]},{"line":"                                OrIgnore::Check(delegate.clone().into_inner().into())","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"                            }","counters":[]},{"line":"                            Delegate::Ignore => OrIgnore::Ignore,","counters":[{"col_start":48,"col_end":64,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        state: array_into_with(&account.state, |s| match s {","counters":[{"col_start":31,"col_end":63,"count":0},{"col_start":67,"col_end":74,"count":0}]},{"line":"                            State::Check(s) => OrIgnore::Check(s.to_field()),","counters":[{"col_start":41,"col_end":76,"count":0}]},{"line":"                            State::Ignore => OrIgnore::Ignore,","counters":[{"col_start":45,"col_end":61,"count":0}]},{"line":"                        }),","counters":[{"col_start":24,"col_end":25,"count":0},{"col_start":25,"col_end":27,"count":0}]},{"line":"                        sequence_state: match &account.sequence_state {","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                            State::Check(s) => OrIgnore::Check(s.to_field()),","counters":[{"col_start":41,"col_end":76,"count":0}]},{"line":"                            State::Ignore => OrIgnore::Ignore,","counters":[{"col_start":45,"col_end":61,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        proved_state: match account.proved_state {","counters":[{"col_start":44,"col_end":64,"count":0}]},{"line":"                            Proved::Check(state) => OrIgnore::Check(state),","counters":[{"col_start":42,"col_end":74,"count":0}]},{"line":"                            Proved::Ignore => OrIgnore::Ignore,","counters":[{"col_start":46,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        is_new: match account.is_new {","counters":[{"col_start":38,"col_end":52,"count":0}]},{"line":"                            Proved::Check(state) => OrIgnore::Check(state),","counters":[{"col_start":42,"col_end":74,"count":0}]},{"line":"                            Proved::Ignore => OrIgnore::Ignore,","counters":[{"col_start":46,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                    }))","counters":[]},{"line":"                }","counters":[]},{"line":"                MAccount::Nonce(nonce) => {","counters":[{"col_start":32,"col_end":43,"count":0}]},{"line":"                    AccountPreconditions::Nonce(Nonce::from_u32(nonce.as_u32()))","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                }","counters":[]},{"line":"                MAccount::Accept => AccountPreconditions::Accept,","counters":[{"col_start":36,"col_end":64,"count":0}]},{"line":"            },","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&BlockTime> for BlockTimeTimeStableV1 {","counters":[]},{"line":"    fn from(value: &BlockTime) -> Self {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        Self(UnsignedExtendedUInt64Int64ForVersionTagsStableV1(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            (value.as_u64() as i64).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&zkapp_command::Preconditions> for MinaBaseAccountUpdatePreconditionsStableV1 {","counters":[]},{"line":"    fn from(value: &zkapp_command::Preconditions) -> Self {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateAccountPreconditionStableV1 as MAccount;","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Amount as MAmount;","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1SnarkedLedgerHash as Ledger;","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Time as Time;","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"        use zkapp_command::AccountPreconditions;","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        use zkapp_command::{Numeric, OrIgnore};","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        use MinaBaseZkappPreconditionProtocolStateStableV1Length as MLength;","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            network: MinaBaseZkappPreconditionProtocolStateStableV1 {","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                snarked_ledger_hash: match &value.network.snarked_ledger_hash {","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                    OrIgnore::Check(hash) => Ledger::Check({","counters":[{"col_start":36,"col_end":60,"count":0}]},{"line":"                        let hash = MinaBaseLedgerHash0StableV1(hash.into());","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        hash.into()","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    OrIgnore::Ignore => Ledger::Ignore,","counters":[{"col_start":40,"col_end":54,"count":0}]},{"line":"                },","counters":[]},{"line":"                timestamp: match &value.network.timestamp {","counters":[{"col_start":33,"col_end":57,"count":0}]},{"line":"                    OrIgnore::Check(time) => {","counters":[{"col_start":36,"col_end":46,"count":0}]},{"line":"                        Time::Check(MinaBaseZkappPreconditionProtocolStateStableV1TimeA {","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                            lower: (&time.lower).into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            upper: (&time.upper).into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    OrIgnore::Ignore => Time::Ignore,","counters":[{"col_start":40,"col_end":52,"count":0}]},{"line":"                },","counters":[]},{"line":"                blockchain_length: (&value.network.blockchain_length).into(),","counters":[{"col_start":35,"col_end":77,"count":0}]},{"line":"                min_window_density: (&value.network.min_window_density).into(),","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"                last_vrf_output: value.network.last_vrf_output,","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                total_currency: match &value.network.total_currency {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    OrIgnore::Check(amount) => {","counters":[{"col_start":36,"col_end":48,"count":0}]},{"line":"                        MAmount::Check(MinaBaseZkappPreconditionProtocolStateStableV1AmountA {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                            lower: amount.lower.into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            upper: amount.upper.into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    OrIgnore::Ignore => MAmount::Ignore,","counters":[{"col_start":40,"col_end":55,"count":0}]},{"line":"                },","counters":[]},{"line":"                global_slot_since_hard_fork: match &value.network.global_slot_since_hard_fork {","counters":[{"col_start":51,"col_end":93,"count":0}]},{"line":"                    Numeric::Check(length) => {","counters":[{"col_start":20,"col_end":47,"count":0}]},{"line":"                        MLength::Check(MinaBaseZkappPreconditionProtocolStateStableV1LengthA {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                            lower: (&length.lower).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                            upper: (&length.upper).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    Numeric::Ignore => MLength::Ignore,","counters":[{"col_start":20,"col_end":54,"count":0}]},{"line":"                },","counters":[]},{"line":"                global_slot_since_genesis: match &value.network.global_slot_since_genesis {","counters":[{"col_start":49,"col_end":89,"count":0}]},{"line":"                    Numeric::Check(length) => {","counters":[{"col_start":20,"col_end":47,"count":0}]},{"line":"                        MLength::Check(MinaBaseZkappPreconditionProtocolStateStableV1LengthA {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                            lower: (&length.lower).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                            upper: (&length.upper).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    Numeric::Ignore => MLength::Ignore,","counters":[{"col_start":20,"col_end":54,"count":0}]},{"line":"                },","counters":[]},{"line":"                staking_epoch_data: (&value.network.staking_epoch_data).into(),","counters":[{"col_start":36,"col_end":79,"count":0}]},{"line":"                next_epoch_data: (&value.network.next_epoch_data).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            account: match &value.account {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                AccountPreconditions::Full(account) => {","counters":[{"col_start":43,"col_end":56,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2Balance as MBalance;","counters":[{"col_start":0,"col_end":107,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2Delegate as Delegate;","counters":[{"col_start":0,"col_end":108,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2ProvedState as Proved;","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2ReceiptChainHash as Receipt;","counters":[{"col_start":0,"col_end":115,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionAccountStableV2StateA as State;","counters":[{"col_start":0,"col_end":103,"count":0}]},{"line":"                    use mina_p2p_messages::v2::MinaBaseZkappPreconditionProtocolStateStableV1Length as MNonce;","counters":[{"col_start":0,"col_end":110,"count":0}]},{"line":"","counters":[]},{"line":"                    let account = &**account;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    MAccount::Full(Box::new(MinaBaseZkappPreconditionAccountStableV2 {","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                        balance: match &account.balance {","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            OrIgnore::Check(balance) => {","counters":[{"col_start":44,"col_end":57,"count":0}]},{"line":"                                MBalance::Check(MinaBaseZkappPreconditionAccountStableV2BalanceA {","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"                                    lower: (&balance.lower).into(),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                                    upper: (&balance.upper).into(),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                                })","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            }","counters":[]},{"line":"                            OrIgnore::Ignore => MBalance::Ignore,","counters":[{"col_start":48,"col_end":64,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        nonce: match &account.nonce {","counters":[{"col_start":37,"col_end":51,"count":0}]},{"line":"                            OrIgnore::Check(nonce) => MNonce::Check(","counters":[{"col_start":44,"col_end":68,"count":0}]},{"line":"                                MinaBaseZkappPreconditionProtocolStateStableV1LengthA {","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                                    lower: (&nonce.lower).into(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                                    upper: (&nonce.upper).into(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                                },","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            ),","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                            OrIgnore::Ignore => MNonce::Ignore,","counters":[{"col_start":48,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        receipt_chain_hash: match &account.receipt_chain_hash {","counters":[{"col_start":50,"col_end":77,"count":0}]},{"line":"                            OrIgnore::Check(hash) => {","counters":[{"col_start":44,"col_end":54,"count":0}]},{"line":"                                Receipt::Check(MinaBaseReceiptChainHashStableV1(hash.into()))","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"                            }","counters":[]},{"line":"                            OrIgnore::Ignore => Receipt::Ignore,","counters":[{"col_start":48,"col_end":63,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        delegate: match &account.delegate {","counters":[{"col_start":40,"col_end":57,"count":0}]},{"line":"                            OrIgnore::Check(delegate) => Delegate::Check(delegate.into()),","counters":[{"col_start":44,"col_end":89,"count":0}]},{"line":"                            OrIgnore::Ignore => Delegate::Ignore,","counters":[{"col_start":48,"col_end":64,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        state: PaddedSeq(array_into_with(&account.state, |s| match s {","counters":[{"col_start":31,"col_end":73,"count":0},{"col_start":77,"col_end":84,"count":0}]},{"line":"                            OrIgnore::Check(s) => State::Check(s.into()),","counters":[{"col_start":44,"col_end":72,"count":0}]},{"line":"                            OrIgnore::Ignore => State::Ignore,","counters":[{"col_start":48,"col_end":61,"count":0}]},{"line":"                        })),","counters":[{"col_start":24,"col_end":25,"count":0},{"col_start":25,"col_end":28,"count":0}]},{"line":"                        sequence_state: match &account.sequence_state {","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                            OrIgnore::Check(s) => State::Check(s.into()),","counters":[{"col_start":44,"col_end":72,"count":0}]},{"line":"                            OrIgnore::Ignore => State::Ignore,","counters":[{"col_start":48,"col_end":61,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        proved_state: match account.proved_state {","counters":[{"col_start":44,"col_end":64,"count":0}]},{"line":"                            OrIgnore::Check(state) => Proved::Check(state),","counters":[{"col_start":44,"col_end":74,"count":0}]},{"line":"                            OrIgnore::Ignore => Proved::Ignore,","counters":[{"col_start":48,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                        is_new: match account.is_new {","counters":[{"col_start":38,"col_end":52,"count":0}]},{"line":"                            OrIgnore::Check(state) => Proved::Check(state),","counters":[{"col_start":44,"col_end":74,"count":0}]},{"line":"                            OrIgnore::Ignore => Proved::Ignore,","counters":[{"col_start":48,"col_end":62,"count":0}]},{"line":"                        },","counters":[]},{"line":"                    }))","counters":[]},{"line":"                }","counters":[]},{"line":"                AccountPreconditions::Nonce(nonce) => MAccount::Nonce(nonce.into()),","counters":[{"col_start":44,"col_end":83,"count":0}]},{"line":"                AccountPreconditions::Accept => MAccount::Accept,","counters":[{"col_start":48,"col_end":64,"count":0}]},{"line":"            },","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/mina_base/verification_key_wire.ml#L37","counters":[]},{"line":"fn of_vk(data: VerificationKey) -> WithHash<VerificationKey> {","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"    let hash = data.hash();","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    WithHash { data, hash }","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseAccountUpdateTWireStableV1> for AccountUpdate {","counters":[]},{"line":"    fn from(value: &MinaBaseAccountUpdateTWireStableV1) -> Self {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Delegate as Delegate;","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Permissions as Perm;","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Timing as Timing;","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1TokenSymbol as Symbol;","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1VerificationKey as VK;","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1VotingFor as Voting;","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1ZkappUri as Uri;","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"        use MinaBaseAccountUpdateUpdateStableV1AppStateA as AppState;","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            body: zkapp_command::Body {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                public_key: value.body.public_key.clone().into_inner().into(),","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                token_id: value.body.token_id.clone().into_inner().into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                update: zkapp_command::Update {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                    app_state: std::array::from_fn(|i| match &value.body.update.app_state[i] {","counters":[{"col_start":0,"col_end":51,"count":0},{"col_start":55,"col_end":92,"count":0}]},{"line":"                        AppState::Set(bigint) => SetOrKeep::Set(bigint.to_field()),","counters":[{"col_start":38,"col_end":82,"count":0}]},{"line":"                        AppState::Keep => SetOrKeep::Keep,","counters":[{"col_start":42,"col_end":57,"count":0}]},{"line":"                    }),","counters":[{"col_start":20,"col_end":21,"count":0},{"col_start":21,"col_end":23,"count":0}]},{"line":"                    delegate: match &value.body.update.delegate {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                        Delegate::Set(v) => SetOrKeep::Set(v.clone().into()),","counters":[{"col_start":38,"col_end":76,"count":0}]},{"line":"                        Delegate::Keep => SetOrKeep::Keep,","counters":[{"col_start":42,"col_end":57,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    verification_key: match &value.body.update.verification_key {","counters":[{"col_start":44,"col_end":79,"count":0}]},{"line":"                        VK::Set(vk) => SetOrKeep::Set(of_vk((&**vk).into())),","counters":[{"col_start":32,"col_end":76,"count":0}]},{"line":"                        VK::Keep => SetOrKeep::Keep,","counters":[{"col_start":36,"col_end":51,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    permissions: match &value.body.update.permissions {","counters":[{"col_start":39,"col_end":69,"count":0}]},{"line":"                        Perm::Set(perms) => SetOrKeep::Set((&**perms).into()),","counters":[{"col_start":34,"col_end":77,"count":0}]},{"line":"                        Perm::Keep => SetOrKeep::Keep,","counters":[{"col_start":38,"col_end":53,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    zkapp_uri: match &value.body.update.zkapp_uri {","counters":[{"col_start":37,"col_end":65,"count":0}]},{"line":"                        Uri::Set(s) => SetOrKeep::Set(s.try_into().unwrap()),","counters":[{"col_start":33,"col_end":76,"count":0}]},{"line":"                        Uri::Keep => SetOrKeep::Keep,","counters":[{"col_start":37,"col_end":52,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    token_symbol: match &value.body.update.token_symbol {","counters":[{"col_start":40,"col_end":71,"count":0}]},{"line":"                        Symbol::Set(s) => SetOrKeep::Set((&s.0).try_into().unwrap()),","counters":[{"col_start":36,"col_end":84,"count":0}]},{"line":"                        Symbol::Keep => SetOrKeep::Keep,","counters":[{"col_start":40,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    timing: match &value.body.update.timing {","counters":[{"col_start":34,"col_end":59,"count":0}]},{"line":"                        Timing::Set(timing) => SetOrKeep::Set((&**timing).into()),","counters":[{"col_start":36,"col_end":81,"count":0}]},{"line":"                        Timing::Keep => SetOrKeep::Keep,","counters":[{"col_start":40,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    voting_for: match &value.body.update.voting_for {","counters":[{"col_start":38,"col_end":67,"count":0}]},{"line":"                        Voting::Set(bigint) => SetOrKeep::Set(VotingFor(bigint.to_field())),","counters":[{"col_start":36,"col_end":91,"count":0}]},{"line":"                        Voting::Keep => SetOrKeep::Keep,","counters":[{"col_start":40,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                },","counters":[]},{"line":"                balance_change: Signed::<Amount> {","counters":[{"col_start":32,"col_end":50,"count":0}]},{"line":"                    magnitude: value.body.balance_change.magnitude.clone().into(),","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                    sgn: value.body.balance_change.sgn.0.clone().into(),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                increment_nonce: value.body.increment_nonce,","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                events: zkapp_command::Events(","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                    value","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        .body","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        .events","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .0","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|e| zkapp_command::Event(e.iter().map(|e| e.to_field()).collect()))","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":67,"count":0},{"col_start":71,"col_end":83,"count":0},{"col_start":83,"col_end":95,"count":0},{"col_start":95,"col_end":96,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                sequence_events: zkapp_command::SequenceEvents(","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                    value","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        .body","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        .sequence_events","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                        .0","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|e| zkapp_command::Event(e.iter().map(|e| e.to_field()).collect()))","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":67,"count":0},{"col_start":71,"col_end":83,"count":7905},{"col_start":83,"col_end":95,"count":0},{"col_start":95,"col_end":96,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                call_data: value.body.call_data.to_field(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                preconditions: (&value.body.preconditions).into(),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                use_full_commitment: value.body.use_full_commitment,","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                caller: TokenId::default(), // Modified later with `of_wire`","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                authorization_kind: match value.body.authorization_kind {","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::NoneGiven => AuthorizationKind::NoneGiven,","counters":[{"col_start":104,"col_end":132,"count":0}]},{"line":"                    mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::Signature => AuthorizationKind::Signature,","counters":[{"col_start":104,"col_end":132,"count":0}]},{"line":"                    mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::Proof => AuthorizationKind::Proof,","counters":[{"col_start":100,"col_end":124,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            authorization: match &value.authorization {","counters":[{"col_start":33,"col_end":53,"count":0}]},{"line":"                mina_p2p_messages::v2::MinaBaseControlStableV2::Proof(proof) => zkapp_command::Control::Proof((**proof).clone().into()),","counters":[{"col_start":70,"col_end":135,"count":0}]},{"line":"                mina_p2p_messages::v2::MinaBaseControlStableV2::Signature(signature) => zkapp_command::Control::Signature(Signature{","counters":[{"col_start":74,"col_end":132,"count":0}]},{"line":"                    rx: signature.0.to_field(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                    s: signature.1.to_field()","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"                mina_p2p_messages::v2::MinaBaseControlStableV2::NoneGiven => zkapp_command::Control::NoneGiven,","counters":[{"col_start":77,"col_end":110,"count":0}]},{"line":"            },","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Notes: childs","counters":[]},{"line":"impl From<&Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA>>","counters":[]},{"line":"    for CallForest<AccountUpdate>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA>) -> Self {","counters":[{"col_start":4,"col_end":99,"count":7440}]},{"line":"        use ark_ff::Zero;","counters":[{"col_start":0,"col_end":25,"count":7440}]},{"line":"","counters":[]},{"line":"        Self(","counters":[{"col_start":0,"col_end":13,"count":7440}]},{"line":"            value","counters":[{"col_start":0,"col_end":17,"count":7440}]},{"line":"                .iter()","counters":[{"col_start":0,"col_end":23,"count":7440}]},{"line":"                .map(|update| WithStackHash {","counters":[{"col_start":0,"col_end":21,"count":7440},{"col_start":30,"col_end":45,"count":465}]},{"line":"                    elt: zkapp_command::Tree {","counters":[{"col_start":0,"col_end":46,"count":465}]},{"line":"                        account_update: (&update.elt.account_update).into(),","counters":[{"col_start":0,"col_end":76,"count":465}]},{"line":"                        account_update_digest: Fp::zero(), // replaced later","counters":[{"col_start":0,"col_end":76,"count":465}]},{"line":"                        calls: (&update.elt.calls).into(),","counters":[{"col_start":0,"col_end":58,"count":465}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":465}]},{"line":"                    stack_hash: Fp::zero(), // replaced later","counters":[{"col_start":0,"col_end":61,"count":465}]},{"line":"                })","counters":[{"col_start":0,"col_end":17,"count":465},{"col_start":17,"col_end":18,"count":7440}]},{"line":"                .collect(),","counters":[{"col_start":0,"col_end":27,"count":7440}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":7440}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":7440}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Notes: root","counters":[]},{"line":"impl From<&Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA>>","counters":[]},{"line":"    for CallForest<AccountUpdate>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA>) -> Self {","counters":[{"col_start":4,"col_end":92,"count":1860}]},{"line":"        use ark_ff::Zero;","counters":[{"col_start":0,"col_end":25,"count":1860}]},{"line":"","counters":[]},{"line":"        let values = value","counters":[{"col_start":0,"col_end":26,"count":1860}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":1860}]},{"line":"            .map(|update| WithStackHash {","counters":[{"col_start":0,"col_end":17,"count":1860},{"col_start":26,"col_end":41,"count":2860}]},{"line":"                elt: zkapp_command::Tree {","counters":[{"col_start":0,"col_end":42,"count":2860}]},{"line":"                    account_update: (&update.elt.account_update).into(),","counters":[{"col_start":0,"col_end":72,"count":2860}]},{"line":"                    account_update_digest: Fp::zero(), // replaced later in `of_wire`","counters":[{"col_start":0,"col_end":85,"count":2860}]},{"line":"                    calls: (&update.elt.calls).into(),","counters":[{"col_start":0,"col_end":54,"count":2860}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":2860}]},{"line":"                stack_hash: Fp::zero(), // replaced later in `of_wire`","counters":[{"col_start":0,"col_end":70,"count":2860}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":2860},{"col_start":13,"col_end":14,"count":1860}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":1860}]},{"line":"","counters":[]},{"line":"        // https://github.com/MinaProtocol/mina/blob/3fe924c80a4d01f418b69f27398f5f93eb652514/src/lib/mina_base/zkapp_command.ml#L1113-L1115","counters":[{"col_start":0,"col_end":140,"count":1860}]},{"line":"","counters":[]},{"line":"        let mut call_forest = CallForest(values);","counters":[{"col_start":0,"col_end":49,"count":1860}]},{"line":"        call_forest.of_wire(value);","counters":[{"col_start":0,"col_end":35,"count":1860}]},{"line":"","counters":[]},{"line":"        call_forest","counters":[{"col_start":0,"col_end":19,"count":1860}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1860}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// We need this trait because `mina-p2p-messages` contains different types for the same data","counters":[]},{"line":"pub trait AsAccountUpdateWithHash {","counters":[]},{"line":"    fn elt(&self) -> &MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA;","counters":[]},{"line":"    fn elt_mut(&mut self) -> &mut MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA;","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl AsAccountUpdateWithHash for MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA {","counters":[]},{"line":"    fn elt(&self) -> &MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":4,"col_end":81,"count":0}]},{"line":"        &self.elt","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    fn elt_mut(&mut self) -> &mut MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        &mut self.elt","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl AsAccountUpdateWithHash for MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA {","counters":[]},{"line":"    fn elt(&self) -> &MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":4,"col_end":81,"count":0}]},{"line":"        &self.elt","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"    fn elt_mut(&mut self) -> &mut MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        &mut self.elt","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&AccountUpdate> for MinaBaseAccountUpdateTWireStableV1 {","counters":[]},{"line":"    fn from(value: &AccountUpdate) -> Self {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Delegate as Delegate;","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Permissions as Perm;","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1Timing as Timing;","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1TokenSymbol as Symbol;","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1VerificationKey as VK;","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1VotingFor as Voting;","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaBaseAccountUpdateUpdateStableV1ZkappUri as Uri;","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"        use MinaBaseAccountUpdateUpdateStableV1AppStateA as AppState;","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            body: MinaBaseAccountUpdateBodyWireStableV1 {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                public_key: (&value.body.public_key).into(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                token_id: (&value.body.token_id).into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                update: MinaBaseAccountUpdateUpdateStableV1 {","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                    app_state: PaddedSeq(std::array::from_fn(|i| match &value.body.update.app_state[i] {","counters":[{"col_start":0,"col_end":61,"count":0},{"col_start":65,"col_end":102,"count":0}]},{"line":"                        SetOrKeep::Set(bigint) => AppState::Set(bigint.into()),","counters":[{"col_start":39,"col_end":78,"count":0}]},{"line":"                        SetOrKeep::Keep => AppState::Keep,","counters":[{"col_start":43,"col_end":57,"count":0}]},{"line":"                    })),","counters":[{"col_start":20,"col_end":21,"count":0},{"col_start":21,"col_end":24,"count":0}]},{"line":"                    delegate: match &value.body.update.delegate {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                        SetOrKeep::Set(v) => Delegate::Set(v.clone().into()),","counters":[{"col_start":39,"col_end":76,"count":0}]},{"line":"                        SetOrKeep::Keep => Delegate::Keep,","counters":[{"col_start":43,"col_end":57,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    verification_key: match &value.body.update.verification_key {","counters":[{"col_start":44,"col_end":79,"count":0}]},{"line":"                        SetOrKeep::Set(vk) => VK::Set(Box::new((&vk.data).into())),","counters":[{"col_start":39,"col_end":82,"count":0}]},{"line":"                        SetOrKeep::Keep => VK::Keep,","counters":[{"col_start":43,"col_end":51,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    permissions: match &value.body.update.permissions {","counters":[{"col_start":39,"col_end":69,"count":0}]},{"line":"                        SetOrKeep::Set(perms) => Perm::Set(Box::new(perms.into())),","counters":[{"col_start":39,"col_end":82,"count":0}]},{"line":"                        SetOrKeep::Keep => Perm::Keep,","counters":[{"col_start":43,"col_end":53,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    zkapp_uri: match &value.body.update.zkapp_uri {","counters":[{"col_start":37,"col_end":65,"count":0}]},{"line":"                        SetOrKeep::Set(s) => Uri::Set(s.into()),","counters":[{"col_start":39,"col_end":63,"count":0}]},{"line":"                        SetOrKeep::Keep => Uri::Keep,","counters":[{"col_start":43,"col_end":52,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    token_symbol: match &value.body.update.token_symbol {","counters":[{"col_start":40,"col_end":71,"count":0}]},{"line":"                        SetOrKeep::Set(s) => Symbol::Set(MinaBaseSokMessageDigestStableV1(s.into())),","counters":[{"col_start":39,"col_end":100,"count":0}]},{"line":"                        SetOrKeep::Keep => Symbol::Keep,","counters":[{"col_start":43,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    timing: match &value.body.update.timing {","counters":[{"col_start":34,"col_end":59,"count":0}]},{"line":"                        SetOrKeep::Set(timing) => Timing::Set(Box::new(timing.into())),","counters":[{"col_start":39,"col_end":86,"count":0}]},{"line":"                        SetOrKeep::Keep => Timing::Keep,","counters":[{"col_start":43,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    voting_for: match &value.body.update.voting_for {","counters":[{"col_start":38,"col_end":67,"count":0}]},{"line":"                        SetOrKeep::Set(bigint) => Voting::Set(DataHashLibStateHashStableV1(bigint.0.into())),","counters":[{"col_start":39,"col_end":108,"count":0}]},{"line":"                        SetOrKeep::Keep => Voting::Keep,","counters":[{"col_start":43,"col_end":55,"count":0}]},{"line":"                    },","counters":[]},{"line":"                },","counters":[]},{"line":"                balance_change: MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount {","counters":[{"col_start":32,"col_end":106,"count":0}]},{"line":"                    magnitude: value.body.balance_change.magnitude.into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                    sgn: ((&value.body.balance_change.sgn).into(),),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                increment_nonce: value.body.increment_nonce,","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                events: MinaBaseAccountUpdateBodyEventsStableV1(","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                    value","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        .body","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        .events","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .0","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|e| e.0.iter().map(|e| e.into()).collect())","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":48,"count":0},{"col_start":52,"col_end":60,"count":0},{"col_start":60,"col_end":71,"count":0},{"col_start":71,"col_end":72,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                sequence_events: MinaBaseAccountUpdateBodyEventsStableV1(","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    value","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        .body","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        .sequence_events","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                        .0","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|e| e.0.iter().map(|e| e.into()).collect())","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":48,"count":5720},{"col_start":52,"col_end":60,"count":0},{"col_start":60,"col_end":71,"count":5720},{"col_start":71,"col_end":72,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                call_data: value.body.call_data.into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                preconditions: (&value.body.preconditions).into(),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                use_full_commitment: value.body.use_full_commitment,","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                caller: MinaBaseAccountUpdateCallTypeStableV1::Call, // Modified later with `to_wire`","counters":[{"col_start":0,"col_end":101,"count":0}]},{"line":"                authorization_kind: match value.body.authorization_kind {","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    AuthorizationKind::NoneGiven => mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::NoneGiven ,","counters":[{"col_start":52,"col_end":132,"count":0}]},{"line":"                    AuthorizationKind::Signature => mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::Signature ,","counters":[{"col_start":52,"col_end":132,"count":0}]},{"line":"                    AuthorizationKind::Proof => mina_p2p_messages::v2::MinaBaseAccountUpdateAuthorizationKindStableV1::Proof ,","counters":[{"col_start":48,"col_end":124,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            authorization: match &value.authorization {","counters":[{"col_start":33,"col_end":53,"count":0}]},{"line":"                zkapp_command::Control::Proof(proof) => mina_p2p_messages::v2::MinaBaseControlStableV2::Proof(Box::new((**proof).clone())),","counters":[{"col_start":46,"col_end":138,"count":0}]},{"line":"                zkapp_command::Control::Signature(sig) => mina_p2p_messages::v2::MinaBaseControlStableV2::Signature(sig.into()),","counters":[{"col_start":50,"col_end":127,"count":0}]},{"line":"                zkapp_command::Control::NoneGiven => mina_p2p_messages::v2::MinaBaseControlStableV2::NoneGiven,","counters":[{"col_start":53,"col_end":110,"count":0}]},{"line":"            },","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Childs","counters":[]},{"line":"impl From<&CallForest<AccountUpdate>>","counters":[]},{"line":"    for Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &CallForest<AccountUpdate>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        value","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .0","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                |update| MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAACallsA {","counters":[{"col_start":0,"col_end":16,"count":0},{"col_start":25,"col_end":90,"count":0}]},{"line":"                    elt: Box::new(MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"                        account_update: (&update.elt.account_update).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        account_update_digest: (),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                        calls: (&update.elt.calls).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                    stack_hash: (),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"            )","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Root","counters":[]},{"line":"impl From<&CallForest<AccountUpdate>>","counters":[]},{"line":"    for Vec<MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA>","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &CallForest<AccountUpdate>) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        let mut wired: Vec<_> = value","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            .0","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                |update| MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesA {","counters":[{"col_start":0,"col_end":16,"count":0},{"col_start":25,"col_end":83,"count":0}]},{"line":"                    elt: MinaBaseZkappCommandTStableV1WireStableV1AccountUpdatesAA {","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                        account_update: (&update.elt.account_update).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                        account_update_digest: (),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                        calls: (&update.elt.calls).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    stack_hash: (),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"            )","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        value.to_wire(&mut wired);","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        wired","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseFeeTransferSingleStableV2> for SingleFeeTransfer {","counters":[]},{"line":"    fn from(value: &MinaBaseFeeTransferSingleStableV2) -> Self {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            receiver_pk: (&value.receiver_pk).into(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            fee: Fee::from_u64(value.fee.as_u64()),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            fee_token: (&value.fee_token).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&SingleFeeTransfer> for MinaBaseFeeTransferSingleStableV2 {","counters":[]},{"line":"    fn from(value: &SingleFeeTransfer) -> Self {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            receiver_pk: (&value.receiver_pk).into(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"            fee: (&value.fee).into(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            fee_token: (&value.fee_token).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseFeeTransferStableV2> for FeeTransfer {","counters":[]},{"line":"    fn from(value: &MinaBaseFeeTransferStableV2) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        use super::scan_state::transaction_snark::OneOrTwo::{One, Two};","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            MinaBaseFeeTransferStableV2::One(ft) => FeeTransfer(One(ft.into())),","counters":[{"col_start":45,"col_end":79,"count":0}]},{"line":"            MinaBaseFeeTransferStableV2::Two((a, b)) => FeeTransfer(Two((a.into(), b.into()))),","counters":[{"col_start":46,"col_end":94,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&FeeTransfer> for MinaBaseFeeTransferStableV2 {","counters":[]},{"line":"    fn from(value: &FeeTransfer) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        use super::scan_state::transaction_snark::OneOrTwo::{One, Two};","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"        match &value.0 {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            One(ft) => MinaBaseFeeTransferStableV2::One(ft.into()),","counters":[{"col_start":16,"col_end":66,"count":0}]},{"line":"            Two((a, b)) => MinaBaseFeeTransferStableV2::Two((a.into(), b.into())),","counters":[{"col_start":17,"col_end":81,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseSignedCommandMemoStableV1> for Memo {","counters":[]},{"line":"    fn from(value: &MinaBaseSignedCommandMemoStableV1) -> Self {","counters":[{"col_start":4,"col_end":64,"count":0}]},{"line":"        Self(value.0.as_ref().try_into().unwrap())","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Memo> for MinaBaseSignedCommandMemoStableV1 {","counters":[]},{"line":"    fn from(value: &Memo) -> Self {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        Self(CharString::from(value.as_slice().to_vec()))","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseSignedCommandStableV2> for SignedCommand {","counters":[]},{"line":"    fn from(cmd: &MinaBaseSignedCommandStableV2) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            payload: transaction_logic::signed_command::SignedCommandPayload {","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                common: transaction_logic::signed_command::Common {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    fee: (&cmd.payload.common.fee).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    fee_payer_pk: (&cmd.payload.common.fee_payer_pk).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                    nonce: (&cmd.payload.common.nonce).into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    valid_until: (&cmd.payload.common.valid_until).into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                    memo: (&cmd.payload.common.memo).into(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                body: match &cmd.payload.body {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    MinaBaseSignedCommandPayloadBodyStableV2::Payment(payload) => {","counters":[{"col_start":70,"col_end":83,"count":0}]},{"line":"                        transaction_logic::signed_command::Body::Payment(PaymentPayload {","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                            source_pk: (&payload.source_pk).into(),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                            receiver_pk: (&payload.receiver_pk).into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            amount: payload.amount.clone().into(),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    }","counters":[]},{"line":"                    MinaBaseSignedCommandPayloadBodyStableV2::StakeDelegation(","counters":[]},{"line":"                        MinaBaseStakeDelegationStableV1::SetDelegate {","counters":[]},{"line":"                            delegator,","counters":[{"col_start":28,"col_end":38,"count":0}]},{"line":"                            new_delegate,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ) => transaction_logic::signed_command::Body::StakeDelegation(","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                        StakeDelegationPayload::SetDelegate {","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                            delegator: delegator.into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            new_delegate: new_delegate.into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            signer: (&cmd.signer).into(),","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"            signature: (&cmd.signature).into(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&SignedCommand> for MinaBaseSignedCommandStableV2 {","counters":[]},{"line":"    fn from(cmd: &SignedCommand) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            payload: MinaBaseSignedCommandPayloadStableV2 {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                common: MinaBaseSignedCommandPayloadCommonStableV2 {","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                    fee: (&cmd.payload.common.fee).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    fee_payer_pk: (&cmd.payload.common.fee_payer_pk).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                    nonce: (&cmd.payload.common.nonce).into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    valid_until: (&cmd.payload.common.valid_until).into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                    memo: MinaBaseSignedCommandMemoStableV1(","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                        cmd.payload.common.memo.as_slice().into(),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                body: match &cmd.payload.body {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    crate::scan_state::transaction_logic::signed_command::Body::Payment(","counters":[]},{"line":"                        payload,","counters":[{"col_start":24,"col_end":32,"count":0}]},{"line":"                    ) => MinaBaseSignedCommandPayloadBodyStableV2::Payment(","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                        MinaBasePaymentPayloadStableV2 {","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            source_pk: (&payload.source_pk).into(),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                            receiver_pk: (&payload.receiver_pk).into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            amount: payload.amount.into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                    crate::scan_state::transaction_logic::signed_command::Body::StakeDelegation(","counters":[]},{"line":"                        StakeDelegationPayload::SetDelegate {","counters":[]},{"line":"                            delegator,","counters":[{"col_start":28,"col_end":38,"count":0}]},{"line":"                            new_delegate,","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ) => MinaBaseSignedCommandPayloadBodyStableV2::StakeDelegation(","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                        MinaBaseStakeDelegationStableV1::SetDelegate {","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                            delegator: delegator.into(),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            new_delegate: new_delegate.into(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            signer: (&cmd.signer).into(),","counters":[{"col_start":20,"col_end":41,"count":0}]},{"line":"            signature: (&cmd.signature).into(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseZkappCommandTStableV1WireStableV1> for zkapp_command::ZkAppCommand {","counters":[]},{"line":"    fn from(cmd: &MinaBaseZkappCommandTStableV1WireStableV1) -> Self {","counters":[{"col_start":4,"col_end":70,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_payer: (&cmd.fee_payer).into(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            account_updates: (&cmd.account_updates).into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            memo: (&cmd.memo).into(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&zkapp_command::ZkAppCommand> for MinaBaseZkappCommandTStableV1WireStableV1 {","counters":[]},{"line":"    fn from(cmd: &zkapp_command::ZkAppCommand) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee_payer: (&cmd.fee_payer).into(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            account_updates: (&cmd.account_updates).into(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            memo: (&cmd.memo).into(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkScanStateTransactionWithWitnessStableV2> for TransactionWithWitness {","counters":[]},{"line":"    fn from(value: &TransactionSnarkScanStateTransactionWithWitnessStableV2) -> Self {","counters":[{"col_start":4,"col_end":86,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaTransactionLogicTransactionAppliedVaryingStableV2::*;","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaTransactionLogicTransactionAppliedCommandAppliedStableV2::*;","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"        use mina_p2p_messages::v2::MinaTransactionLogicTransactionAppliedSignedCommandAppliedBodyStableV2::*;","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"        use mina_p2p_messages::v2::TransactionSnarkPendingCoinbaseStackStateInitStackStableV1::{Base, Merge};","counters":[{"col_start":0,"col_end":109,"count":0}]},{"line":"        use crate::scan_state::scan_state::transaction_snark::InitStack;","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"        use transaction_applied::signed_command_applied;","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            transaction_with_info: TransactionApplied {","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                previous_hash: value.transaction_with_info.previous_hash.to_field(),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                varying: match &value.transaction_with_info.varying {","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    Command(cmd) => match cmd {","counters":[{"col_start":28,"col_end":45,"count":0}]},{"line":"                        SignedCommand(cmd) => transaction_applied::Varying::Command(","counters":[{"col_start":38,"col_end":84,"count":0}]},{"line":"                            transaction_applied::CommandApplied::SignedCommand(Box::new(","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                                transaction_applied::SignedCommandApplied {","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                                    common: transaction_applied::signed_command_applied::Common {","counters":[{"col_start":0,"col_end":97,"count":0}]},{"line":"                                        user_command: WithStatus {","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                                            data: (&cmd.common.user_command.data).into(),","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                                            status: (&cmd.common.user_command.status).into(),","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"                                        },","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                                    },","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                                    body: match &cmd.body {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                                        Payment { new_accounts } => {","counters":[{"col_start":50,"col_end":69,"count":0}]},{"line":"                                            signed_command_applied::Body::Payments {","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                                                new_accounts: new_accounts","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                                    .iter()","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                                                    .cloned()","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                                                    .map(Into::into)","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                                                    .collect(),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                                            }","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                                        }","counters":[]},{"line":"                                        StakeDelegation { previous_delegate } => {","counters":[{"col_start":58,"col_end":82,"count":20}]},{"line":"                                            signed_command_applied::Body::StakeDelegation {","counters":[{"col_start":0,"col_end":91,"count":20}]},{"line":"                                                previous_delegate: previous_delegate","counters":[{"col_start":0,"col_end":84,"count":20}]},{"line":"                                                    .as_ref()","counters":[{"col_start":0,"col_end":61,"count":20}]},{"line":"                                                    .map(|d| d.into()),","counters":[{"col_start":0,"col_end":57,"count":20},{"col_start":61,"col_end":69,"count":0},{"col_start":69,"col_end":71,"count":20}]},{"line":"                                            }","counters":[{"col_start":0,"col_end":45,"count":20}]},{"line":"                                        }","counters":[]},{"line":"                                        Failed => signed_command_applied::Body::Failed,","counters":[{"col_start":50,"col_end":86,"count":0}]},{"line":"                                    },","counters":[]},{"line":"                                },","counters":[]},{"line":"                            )),","counters":[]},{"line":"                        ),","counters":[]},{"line":"                        ZkappCommand(cmd) => transaction_applied::Varying::Command(","counters":[{"col_start":37,"col_end":83,"count":0}]},{"line":"                            transaction_applied::CommandApplied::ZkappCommand(Box::new(","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                                transaction_applied::ZkappCommandApplied {","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                    accounts: cmd","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                        .accounts","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                        .iter()","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                                        .map(|(id, account_opt)| {","counters":[{"col_start":0,"col_end":45,"count":0},{"col_start":65,"col_end":66,"count":0}]},{"line":"                                            let id: AccountId = id.into();","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                            // TODO: Don't clone here","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                                            let account: Option<Account> =","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                                account_opt.as_ref().map(|acc| acc.clone().into());","counters":[{"col_start":0,"col_end":73,"count":0},{"col_start":79,"col_end":97,"count":0},{"col_start":97,"col_end":99,"count":0}]},{"line":"","counters":[]},{"line":"                                            (id, account)","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                                        })","counters":[{"col_start":0,"col_end":41,"count":0},{"col_start":41,"col_end":42,"count":0}]},{"line":"                                        .collect(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                                    command: WithStatus {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                                        data: (&cmd.command.data).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                                        status: (&cmd.command.status).into(),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                                    },","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                                    new_accounts: cmd.new_accounts.iter().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                                },","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            )),","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    FeeTransfer(ft) => transaction_applied::Varying::FeeTransfer(","counters":[{"col_start":32,"col_end":81,"count":0}]},{"line":"                        transaction_applied::FeeTransferApplied {","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                            fee_transfer: WithStatus {","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                data: (&ft.fee_transfer.data).into(),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                                status: (&ft.fee_transfer.status).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                            },","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                            new_accounts: ft.new_accounts.iter().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                            burned_tokens: ft.burned_tokens.clone().into(),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                    Coinbase(cb) => transaction_applied::Varying::Coinbase(transaction_applied::CoinbaseApplied {","counters":[{"col_start":29,"col_end":113,"count":0}]},{"line":"                        coinbase: WithStatus {","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                            data: crate::scan_state::transaction_logic::Coinbase {","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                                receiver: (&cb.coinbase.data.receiver).into(),","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                                amount: cb.coinbase.data.amount.clone().into(),","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"                                fee_transfer: cb.coinbase.data.fee_transfer.as_ref().map(|ft| {","counters":[{"col_start":0,"col_end":89,"count":0},{"col_start":94,"col_end":95,"count":76906}]},{"line":"                                    crate::scan_state::transaction_logic::CoinbaseFeeTransfer {","counters":[{"col_start":0,"col_end":95,"count":76906}]},{"line":"                                        receiver_pk: (&ft.receiver_pk).into(),","counters":[{"col_start":0,"col_end":78,"count":76906}]},{"line":"                                        fee: Fee::from_u64(ft.fee.as_u64()),","counters":[{"col_start":0,"col_end":76,"count":76906}]},{"line":"                                    }","counters":[{"col_start":0,"col_end":37,"count":76906}]},{"line":"                                }),","counters":[{"col_start":0,"col_end":33,"count":76906},{"col_start":33,"col_end":35,"count":0}]},{"line":"                            },","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                            status: (&cb.coinbase.status).into(),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        new_accounts: cb.new_accounts.iter().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                        burned_tokens: cb.burned_tokens.clone().into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    }),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            state_hash: {","counters":[]},{"line":"                let (state, body) = &value.state_hash;","counters":[{"col_start":21,"col_end":54,"count":20}]},{"line":"                (state.to_field(), body.to_field())","counters":[{"col_start":0,"col_end":51,"count":20}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":20}]},{"line":"            statement: (&value.statement).into(),","counters":[{"col_start":0,"col_end":49,"count":20}]},{"line":"            init_stack: match &value.init_stack {","counters":[{"col_start":0,"col_end":47,"count":20}]},{"line":"                Base(base) => InitStack::Base(pending_coinbase::Stack {","counters":[{"col_start":21,"col_end":71,"count":-18}]},{"line":"                    data: pending_coinbase::CoinbaseStack(base.data.to_field()),","counters":[{"col_start":0,"col_end":80,"count":-18}]},{"line":"                    state: pending_coinbase::StateStack {","counters":[{"col_start":0,"col_end":57,"count":-18}]},{"line":"                        init: base.state.init.to_field(),","counters":[{"col_start":0,"col_end":57,"count":-18}]},{"line":"                        curr: base.state.curr.to_field(),","counters":[{"col_start":0,"col_end":57,"count":-18}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":-18}]},{"line":"                }),","counters":[{"col_start":0,"col_end":18,"count":-18}]},{"line":"                Merge => InitStack::Merge,","counters":[{"col_start":25,"col_end":41,"count":38}]},{"line":"            },","counters":[]},{"line":"            ledger_witness: (&value.ledger_witness).into(),","counters":[{"col_start":28,"col_end":59,"count":20}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":20}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":20}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TokenId> for mina_p2p_messages::v2::TokenIdKeyHash {","counters":[]},{"line":"    fn from(value: &TokenId) -> Self {","counters":[{"col_start":4,"col_end":38,"count":0}]},{"line":"        let id: MinaBaseAccountIdDigestStableV1 = value.clone().into();","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"        id.into()","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Registers> for TransactionSnarkStatementWithSokStableV2Source {","counters":[]},{"line":"    fn from(value: &Registers) -> Self {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            ledger: MinaBaseLedgerHash0StableV1(value.ledger.into()).into(),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"            pending_coinbase_stack: MinaBasePendingCoinbaseStackVersionedStableV1 {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                data: MinaBasePendingCoinbaseCoinbaseStackStableV1(","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                    value.pending_coinbase_stack.data.0.into(),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                state: MinaBasePendingCoinbaseStateStackStableV1 {","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                    init: MinaBasePendingCoinbaseStackHashStableV1(","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                        value.pending_coinbase_stack.state.init.into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    curr: MinaBasePendingCoinbaseStackHashStableV1(","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                        value.pending_coinbase_stack.state.curr.into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            local_state: MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1 {","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                stack_frame: MinaBaseStackFrameStableV1(value.local_state.stack_frame.into()),","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                call_stack: MinaBaseCallStackDigestStableV1(value.local_state.call_stack.into()),","counters":[{"col_start":0,"col_end":97,"count":0}]},{"line":"                transaction_commitment: value.local_state.transaction_commitment.into(),","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                full_transaction_commitment: value.local_state.full_transaction_commitment.into(),","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"                token_id: (&value.local_state.token_id).into(),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                excess: MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount {","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"                    magnitude: value.local_state.excess.magnitude.into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    sgn: ((&value.local_state.excess.sgn).into(),),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                supply_increase:","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    MinaTransactionLogicZkappCommandLogicLocalStateValueStableV1SignedAmount {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                        magnitude: value.local_state.supply_increase.magnitude.into(),","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                        sgn: ((&value.local_state.supply_increase.sgn).into(),),","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ledger: {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    let hash = MinaBaseLedgerHash0StableV1(value.local_state.ledger.into());","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"                    hash.into()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                success: value.local_state.success,","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                account_update_index: UnsignedExtendedUInt32StableV1(","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                    (value.local_state.account_update_index.0 as i32).into(),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                failure_status_tbl: MinaBaseTransactionStatusFailureCollectionStableV1(","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                    value","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                        .local_state","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                        .failure_status_tbl","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .map(|s| s.iter().map(|s| s.into()).collect())","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":33,"col_end":46,"count":0},{"col_start":50,"col_end":58,"count":0},{"col_start":58,"col_end":69,"count":0},{"col_start":69,"col_end":70,"count":0}]},{"line":"                        .collect(),","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&Statement<()>> for TransactionSnarkStatementStableV2 {","counters":[]},{"line":"    fn from(value: &Statement<()>) -> Self {","counters":[{"col_start":4,"col_end":44,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            source: (&value.source).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            target: (&value.target).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            supply_increase: (&value.supply_increase).into(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            fee_excess: (&value.fee_excess).into(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            sok_digest: (),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&transaction_logic::Coinbase> for MinaBaseCoinbaseStableV1 {","counters":[]},{"line":"    fn from(value: &transaction_logic::Coinbase) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            receiver: (&value.receiver).into(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            amount: value.amount.into(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            fee_transfer: value.fee_transfer.as_ref().map(|ft| {","counters":[{"col_start":0,"col_end":58,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"                MinaBaseCoinbaseFeeTransferStableV1 {","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    receiver_pk: (&ft.receiver_pk).into(),","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    fee: (&ft.fee).into(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }),","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn to_ledger_hash(value: &Fp) -> mina_p2p_messages::v2::LedgerHash {","counters":[{"col_start":0,"col_end":72,"count":268786}]},{"line":"    let hash = MinaBaseLedgerHash0StableV1(value.into());","counters":[{"col_start":0,"col_end":57,"count":268786}]},{"line":"    hash.into()","counters":[{"col_start":0,"col_end":15,"count":268786}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":268786}]},{"line":"","counters":[]},{"line":"impl From<&TransactionWithWitness> for TransactionSnarkScanStateTransactionWithWitnessStableV2 {","counters":[]},{"line":"    fn from(value: &TransactionWithWitness) -> Self {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        use super::scan_state::transaction_snark::InitStack;","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        use mina_p2p_messages::v2::TransactionSnarkPendingCoinbaseStackStateInitStackStableV1::{","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            Base, Merge,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            transaction_with_info: MinaTransactionLogicTransactionAppliedStableV2 {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                previous_hash: {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    let hash = MinaBaseLedgerHash0StableV1(","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                        value.transaction_with_info.previous_hash.into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    );","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    hash.into()","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                },","counters":[]},{"line":"                varying: match &value.transaction_with_info.varying {","counters":[{"col_start":31,"col_end":67,"count":0}]},{"line":"                    transaction_applied::Varying::Command(","counters":[]},{"line":"                        transaction_applied::CommandApplied::SignedCommand(cmd),","counters":[{"col_start":75,"col_end":80,"count":0}]},{"line":"                    ) => {","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        MinaTransactionLogicTransactionAppliedVaryingStableV2::Command(","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                            MinaTransactionLogicTransactionAppliedCommandAppliedStableV2::SignedCommand(","counters":[{"col_start":0,"col_end":104,"count":0}]},{"line":"                                MinaTransactionLogicTransactionAppliedSignedCommandAppliedStableV2 {","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                                    common: MinaTransactionLogicTransactionAppliedSignedCommandAppliedCommonStableV2 {","counters":[{"col_start":0,"col_end":118,"count":0}]},{"line":"                                        user_command: MinaTransactionLogicTransactionAppliedSignedCommandAppliedCommonStableV2UserCommand {","counters":[{"col_start":0,"col_end":139,"count":0}]},{"line":"                                            data: (&cmd.common.user_command.data).into(),","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                                            status: (&cmd.common.user_command.status).into(),","counters":[{"col_start":0,"col_end":93,"count":0}]},{"line":"                                        },","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                                    },","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                                    body: match &cmd.body {","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                                        transaction_applied::signed_command_applied::Body::Payments { new_accounts } =>","counters":[{"col_start":102,"col_end":119,"count":0}]},{"line":"                                            MinaTransactionLogicTransactionAppliedSignedCommandAppliedBodyStableV2::Payment {","counters":[{"col_start":0,"col_end":125,"count":0}]},{"line":"                                            new_accounts: new_accounts.iter().cloned().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":113,"count":0}]},{"line":"                                        },","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                                        transaction_applied::signed_command_applied::Body::StakeDelegation { previous_delegate } =>","counters":[{"col_start":109,"col_end":131,"count":0}]},{"line":"                                            MinaTransactionLogicTransactionAppliedSignedCommandAppliedBodyStableV2::StakeDelegation {","counters":[{"col_start":0,"col_end":133,"count":0}]},{"line":"                                            previous_delegate: previous_delegate.as_ref().map(Into::into)","counters":[{"col_start":0,"col_end":105,"count":0}]},{"line":"                                        },","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                                        transaction_applied::signed_command_applied::Body::Failed =>","counters":[]},{"line":"                                            MinaTransactionLogicTransactionAppliedSignedCommandAppliedBodyStableV2::Failed,","counters":[{"col_start":44,"col_end":122,"count":0}]},{"line":"                                    },","counters":[]},{"line":"                                }))","counters":[]},{"line":"                    }","counters":[]},{"line":"                    transaction_applied::Varying::Command(","counters":[]},{"line":"                        transaction_applied::CommandApplied::ZkappCommand(cmd),","counters":[{"col_start":74,"col_end":79,"count":0}]},{"line":"                    ) =>","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                        MinaTransactionLogicTransactionAppliedVaryingStableV2::Command(","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                            MinaTransactionLogicTransactionAppliedCommandAppliedStableV2::ZkappCommand(","counters":[{"col_start":0,"col_end":103,"count":0}]},{"line":"                                MinaTransactionLogicTransactionAppliedZkappCommandAppliedStableV1 {","counters":[{"col_start":0,"col_end":99,"count":0}]},{"line":"                                accounts: cmd.accounts.iter().map(|(id, account_opt)| {","counters":[{"col_start":0,"col_end":66,"count":0},{"col_start":86,"col_end":87,"count":0}]},{"line":"                                    let id: MinaBaseAccountIdStableV2 = id.clone().into();","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"                                    let account_opt = account_opt.as_ref().map(|acc| acc.clone().into());","counters":[{"col_start":0,"col_end":79,"count":0},{"col_start":85,"col_end":103,"count":0},{"col_start":103,"col_end":105,"count":0}]},{"line":"                                    (id, account_opt)","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                                }).collect(),","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":33,"col_end":45,"count":0}]},{"line":"                                command: MinaTransactionLogicTransactionAppliedZkappCommandAppliedStableV1Command {","counters":[{"col_start":0,"col_end":115,"count":0}]},{"line":"                                    data: (&cmd.command.data).into(),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                                    status: (&cmd.command.status).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                                },","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                new_accounts: cmd.new_accounts.iter().cloned().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":105,"count":0}]},{"line":"                            })","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    transaction_applied::Varying::FeeTransfer(ft) =>","counters":[{"col_start":62,"col_end":68,"count":0}]},{"line":"                        MinaTransactionLogicTransactionAppliedVaryingStableV2::FeeTransfer(","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                            MinaTransactionLogicTransactionAppliedFeeTransferAppliedStableV2 {","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                                fee_transfer: MinaTransactionLogicTransactionAppliedFeeTransferAppliedStableV2FeeTransfer {","counters":[{"col_start":0,"col_end":123,"count":0}]},{"line":"                                    data: (&ft.fee_transfer.data).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                                    status: (&ft.fee_transfer.status).into(),","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                                },","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                new_accounts: ft.new_accounts.iter().cloned().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":104,"count":0}]},{"line":"                                burned_tokens: ft.burned_tokens.into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            }),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    transaction_applied::Varying::Coinbase(cb) =>","counters":[{"col_start":59,"col_end":65,"count":0}]},{"line":"                        MinaTransactionLogicTransactionAppliedVaryingStableV2::Coinbase(","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"                            MinaTransactionLogicTransactionAppliedCoinbaseAppliedStableV2 {","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                                coinbase: MinaTransactionLogicTransactionAppliedCoinbaseAppliedStableV2Coinbase {","counters":[{"col_start":0,"col_end":113,"count":0}]},{"line":"                                    data: (&cb.coinbase.data).into(),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"                                    status: (&cb.coinbase.status).into(),","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                                },","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                new_accounts: cb.new_accounts.iter().cloned().map(Into::into).collect(),","counters":[{"col_start":0,"col_end":104,"count":0}]},{"line":"                                burned_tokens: cb.burned_tokens.into(),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                },","counters":[]},{"line":"            },","counters":[]},{"line":"            state_hash: {","counters":[]},{"line":"                let (state, body) = &value.state_hash;","counters":[{"col_start":21,"col_end":54,"count":0}]},{"line":"                let state = DataHashLibStateHashStableV1(state.into());","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"                (state.into(), MinaBaseStateBodyHashStableV1(body.into()))","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            statement: (&value.statement).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            init_stack: match &value.init_stack {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                InitStack::Base(base) => Base(MinaBasePendingCoinbaseStackVersionedStableV1 {","counters":[{"col_start":32,"col_end":93,"count":0}]},{"line":"                    data: MinaBasePendingCoinbaseCoinbaseStackStableV1(base.data.0.into()),","counters":[{"col_start":0,"col_end":91,"count":0}]},{"line":"                    state: MinaBasePendingCoinbaseStateStackStableV1 {","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                        init: MinaBasePendingCoinbaseStackHashStableV1(base.state.init.into()),","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                        curr: MinaBasePendingCoinbaseStackHashStableV1(base.state.curr.into()),","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                }),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                InitStack::Merge => Merge,","counters":[{"col_start":36,"col_end":41,"count":0}]},{"line":"            },","counters":[]},{"line":"            ledger_witness: (&value.ledger_witness).into(),","counters":[{"col_start":28,"col_end":59,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtWrite for TransactionWithWitness {","counters":[]},{"line":"    fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        let p2p: TransactionSnarkScanStateTransactionWithWitnessStableV2 = self.into();","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"        p2p.binprot_write(w)","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkStableV2> for TransactionSnark<SokDigest> {","counters":[]},{"line":"    fn from(value: &TransactionSnarkStableV2) -> Self {","counters":[{"col_start":4,"col_end":55,"count":268786}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":268786}]},{"line":"            statement: (&value.statement).into(),","counters":[{"col_start":0,"col_end":49,"count":268786}]},{"line":"            proof: Rc::new(value.proof.clone()),","counters":[{"col_start":0,"col_end":48,"count":268786}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":268786}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":268786}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnark<SokDigest>> for TransactionSnarkStableV2 {","counters":[]},{"line":"    fn from(value: &TransactionSnark<SokDigest>) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            statement: (&value.statement).into(),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            proof: (*value.proof).clone(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&LedgerProofProdStableV2> for LedgerProof {","counters":[]},{"line":"    fn from(value: &LedgerProofProdStableV2) -> Self {","counters":[{"col_start":4,"col_end":54,"count":192503}]},{"line":"        Self((&value.0).into())","counters":[{"col_start":0,"col_end":31,"count":192503}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":192503}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&LedgerProof> for LedgerProofProdStableV2 {","counters":[]},{"line":"    fn from(value: &LedgerProof) -> Self {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        Self((&value.0).into())","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// impl binprot::BinProtWrite for LedgerProof {","counters":[]},{"line":"//     fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[]},{"line":"//         let p2p: LedgerProofProdStableV2 = self.into();","counters":[]},{"line":"//         p2p.binprot_write(w)","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseSokMessageStableV1> for SokMessage {","counters":[]},{"line":"    fn from(value: &MinaBaseSokMessageStableV1) -> Self {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee: (&value.fee).into(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            prover: (&value.prover).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&SokMessage> for MinaBaseSokMessageStableV1 {","counters":[]},{"line":"    fn from(value: &SokMessage) -> Self {","counters":[{"col_start":4,"col_end":41,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            fee: (&value.fee).into(),","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            prover: (&value.prover).into(),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&LedgerProofWithSokMessage>","counters":[]},{"line":"    for TransactionSnarkScanStateLedgerProofWithSokMessageStableV2","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &LedgerProofWithSokMessage) -> Self {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        Self((&value.proof).into(), (&value.sok_message).into())","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&TransactionSnarkScanStateLedgerProofWithSokMessageStableV2>","counters":[]},{"line":"    for LedgerProofWithSokMessage","counters":[]},{"line":"{","counters":[]},{"line":"    fn from(value: &TransactionSnarkScanStateLedgerProofWithSokMessageStableV2) -> Self {","counters":[{"col_start":4,"col_end":89,"count":59000}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":59000}]},{"line":"            proof: (&value.0).into(),","counters":[{"col_start":0,"col_end":37,"count":59000}]},{"line":"            sok_message: (&value.1).into(),","counters":[{"col_start":0,"col_end":43,"count":59000}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":59000}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":59000}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl binprot::BinProtWrite for LedgerProofWithSokMessage {","counters":[]},{"line":"    fn binprot_write<W: std::io::Write>(&self, w: &mut W) -> std::io::Result<()> {","counters":[{"col_start":4,"col_end":82,"count":807602}]},{"line":"        let p2p: TransactionSnarkScanStateLedgerProofWithSokMessageStableV2 = self.into();","counters":[{"col_start":0,"col_end":90,"count":807602}]},{"line":"        p2p.binprot_write(w)","counters":[{"col_start":0,"col_end":28,"count":807602}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":807602}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl From<&MinaBaseUserCommandStableV2> for transaction_logic::valid::UserCommand {","counters":[]},{"line":"    fn from(value: &MinaBaseUserCommandStableV2) -> Self {","counters":[{"col_start":4,"col_end":58,"count":0}]},{"line":"        match value {","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            MinaBaseUserCommandStableV2::ZkappCommand(_) => todo!(),","counters":[{"col_start":60,"col_end":67,"count":0}]},{"line":"            MinaBaseUserCommandStableV2::SignedCommand(cmd) => {","counters":[{"col_start":55,"col_end":64,"count":0}]},{"line":"                Self::SignedCommand(Box::new(SignedCommand {","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                    payload: transaction_logic::signed_command::SignedCommandPayload {","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                        common: transaction_logic::signed_command::Common {","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                            fee: (&cmd.payload.common.fee).into(),","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"                            fee_payer_pk: (&cmd.payload.common.fee_payer_pk).into(),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                            nonce: (&cmd.payload.common.nonce).into(),","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                            valid_until: (&cmd.payload.common.valid_until).into(),","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                            memo: (&cmd.payload.common.memo).into(),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                        },","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        body: match &cmd.payload.body {","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                            MinaBaseSignedCommandPayloadBodyStableV2::Payment(payment) => {","counters":[{"col_start":78,"col_end":91,"count":0}]},{"line":"                                transaction_logic::signed_command::Body::Payment(PaymentPayload {","counters":[{"col_start":0,"col_end":97,"count":0}]},{"line":"                                    source_pk: (&payment.source_pk).into(),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                                    receiver_pk: (&payment.receiver_pk).into(),","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"                                    amount: payment.amount.clone().into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                })","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            }","counters":[]},{"line":"                            MinaBaseSignedCommandPayloadBodyStableV2::StakeDelegation(","counters":[]},{"line":"                                delegation,","counters":[{"col_start":32,"col_end":43,"count":0}]},{"line":"                            ) => {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                let MinaBaseStakeDelegationStableV1::SetDelegate {","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"                                    delegator,","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                                    new_delegate,","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                } = &delegation;","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"                                transaction_logic::signed_command::Body::StakeDelegation(","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"                                    StakeDelegationPayload::SetDelegate {","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                                        delegator: delegator.into(),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                                        new_delegate: new_delegate.into(),","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                                    },","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                                )","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            }","counters":[]},{"line":"                        },","counters":[]},{"line":"                    },","counters":[]},{"line":"                    signer: (&cmd.signer).into(),","counters":[{"col_start":28,"col_end":49,"count":0}]},{"line":"                    signature: (&cmd.signature).into(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                }))","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}