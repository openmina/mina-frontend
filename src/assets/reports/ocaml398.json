{"filename":"src/lib/transition_frontier/extensions/best_tip_diff.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Frontier_base","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t = { logger : Logger.t; best_tip_diff_logger : Logger.t }","counters":[]},{"line":"","counters":[]},{"line":"  type view =","counters":[]},{"line":"    { new_commands : User_command.Valid.t With_status.t list","counters":[]},{"line":"    ; removed_commands : User_command.Valid.t With_status.t list","counters":[]},{"line":"    ; reorg_best_tip : bool","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  module Log_event = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { protocol_state : Mina_state.Protocol_state.Value.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      ; state_hash : State_hash.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; just_emitted_a_proof : bool","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving yojson, sexp]","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"","counters":[]},{"line":"    let compare t t' = State_hash.compare t.state_hash t'.state_hash","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"    type Structured_log_events.t +=","counters":[]},{"line":"      | New_best_tip_event of","counters":[]},{"line":"          { added_transitions : t list","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; removed_transitions : t list","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; reorg_best_tip : bool","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          }","counters":[]},{"line":"      [@@deriving register_event { msg = \"Formed a new best tip\" }]","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":31,"col_end":31,"count":3}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let breadcrumb_commands =","counters":[]},{"line":"    Fn.compose Mina_block.Validated.valid_commands","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"      Breadcrumb.validated_transition","counters":[]},{"line":"","counters":[]},{"line":"  let create ~logger frontier =","counters":[]},{"line":"    let best_tip_diff_logger =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Logger.create ~id:Logger.Logger_id.best_tip_diff ()","counters":[]},{"line":"    in","counters":[]},{"line":"    ( { logger; best_tip_diff_logger }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    , { new_commands = breadcrumb_commands (Full_frontier.root frontier)","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"      ; removed_commands = []","counters":[]},{"line":"      ; reorg_best_tip = false","counters":[]},{"line":"      } )","counters":[]},{"line":"","counters":[]},{"line":"  (* Get the breadcrumbs that are on bc1's path but not bc2's, and vice versa.","counters":[]},{"line":"     Ordered oldest to newest. *)","counters":[]},{"line":"  let get_path_diff t frontier (bc1 : Breadcrumb.t) (bc2 : Breadcrumb.t) :","counters":[]},{"line":"      Breadcrumb.t list * Breadcrumb.t list =","counters":[]},{"line":"    let ancestor = Full_frontier.common_ancestor frontier bc1 bc2 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    (* Find the breadcrumbs connecting t1 and t2, excluding t1. Precondition:","counters":[]},{"line":"       t1 is an ancestor of t2. *)","counters":[]},{"line":"    let path_from_to t1 t2 =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let rec go cursor acc =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        if Breadcrumb.equal cursor t1 then acc","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        else","counters":[]},{"line":"          go","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Full_frontier.find_exn frontier @@ Breadcrumb.parent_hash cursor)","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"            (cursor :: acc)","counters":[]},{"line":"      in","counters":[]},{"line":"      go t2 []","counters":[]},{"line":"    in","counters":[]},{"line":"    [%log' debug t.logger] !\"Common ancestor: %{sexp: State_hash.t}\" ancestor ;","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    ( path_from_to (Full_frontier.find_exn frontier ancestor) bc1","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    , path_from_to (Full_frontier.find_exn frontier ancestor) bc2 )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"  let handle_diffs t frontier diffs_with_mutants : view option =","counters":[]},{"line":"    let open Diff.Full.With_mutant in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let view, should_broadcast =","counters":[]},{"line":"      List.fold diffs_with_mutants","counters":[]},{"line":"        ~init:","counters":[]},{"line":"          ( { new_commands = []; removed_commands = []; reorg_best_tip = false }","counters":[]},{"line":"          , false )","counters":[]},{"line":"        ~f:","counters":[]},{"line":"          (fun ( ({ new_commands; removed_commands; reorg_best_tip = _ } as acc)","counters":[]},{"line":"               , should_broadcast ) -> function","counters":[]},{"line":"            | E (Best_tip_changed new_best_tip, old_best_tip_hash) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                let new_best_tip_breadcrumb =","counters":[]},{"line":"                  Full_frontier.find_exn frontier new_best_tip","counters":[]},{"line":"                in","counters":[]},{"line":"                let old_best_tip =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (*FIXME #4404*)","counters":[]},{"line":"                  Full_frontier.find_exn frontier old_best_tip_hash","counters":[]},{"line":"                in","counters":[]},{"line":"                let added_to_best_tip_path, removed_from_best_tip_path =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  get_path_diff t frontier new_best_tip_breadcrumb old_best_tip","counters":[]},{"line":"                in","counters":[]},{"line":"                let new_commands =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  List.bind added_to_best_tip_path ~f:breadcrumb_commands","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  @ new_commands","counters":[]},{"line":"                in","counters":[]},{"line":"                let removed_commands =","counters":[]},{"line":"                  List.bind removed_from_best_tip_path ~f:breadcrumb_commands","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  @ removed_commands","counters":[]},{"line":"                in","counters":[]},{"line":"                let reorg_best_tip =","counters":[]},{"line":"                  not (List.is_empty removed_from_best_tip_path)","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                in","counters":[]},{"line":"                let added_transitions =","counters":[]},{"line":"                  List.map","counters":[]},{"line":"                    ~f:(fun b ->","counters":[]},{"line":"                      { Log_event.protocol_state = Breadcrumb.protocol_state b","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"                      ; state_hash = Breadcrumb.state_hash b","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                      ; just_emitted_a_proof = Breadcrumb.just_emitted_a_proof b","counters":[{"col_start":77,"col_end":77,"count":0}]},{"line":"                      } )","counters":[]},{"line":"                    added_to_best_tip_path","counters":[]},{"line":"                in","counters":[]},{"line":"                let removed_transitions =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  List.map","counters":[]},{"line":"                    ~f:(fun b ->","counters":[]},{"line":"                      { Log_event.protocol_state = Breadcrumb.protocol_state b","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":75,"col_end":75,"count":0}]},{"line":"                      ; state_hash = Breadcrumb.state_hash b","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"                      ; just_emitted_a_proof = Breadcrumb.just_emitted_a_proof b","counters":[{"col_start":77,"col_end":77,"count":0}]},{"line":"                      } )","counters":[]},{"line":"                    removed_from_best_tip_path","counters":[]},{"line":"                in","counters":[]},{"line":"                let event =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Log_event.New_best_tip_event","counters":[]},{"line":"                    { added_transitions; removed_transitions; reorg_best_tip }","counters":[]},{"line":"                in","counters":[]},{"line":"                [%str_log' debug t.logger]","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                  ~metadata:","counters":[]},{"line":"                    [ ( \"no_of_added_breadcrumbs\"","counters":[]},{"line":"                      , `Int (List.length added_to_best_tip_path) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                    ; ( \"no_of_removed_breadcrumbs\"","counters":[]},{"line":"                      , `Int (List.length removed_from_best_tip_path) )","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                    ]","counters":[]},{"line":"                  event ;","counters":[]},{"line":"                [%str_log' best_tip_diff t.best_tip_diff_logger] event ;","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"                ({ new_commands; removed_commands; reorg_best_tip }, true)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"            | E (New_node (Full _), _) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (acc, should_broadcast)","counters":[]},{"line":"            | E (Root_transitioned _, _) ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (acc, should_broadcast) )","counters":[]},{"line":"    in","counters":[]},{"line":"    Option.some_if should_broadcast view","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"module Broadcasted = Functor.Make_broadcasted (T)","counters":[{"col_start":48,"col_end":48,"count":2}]}]}