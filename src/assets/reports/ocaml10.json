{"filename":"src/lib/mina_base/coinbase_fee_transfer_intf.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"module type Full = sig","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      type t = private","counters":[]},{"line":"        { receiver_pk : Public_key.Compressed.Stable.V1.t","counters":[]},{"line":"        ; fee : Currency.Fee.Stable.V1.t","counters":[]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, compare, equal, yojson, hash]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  val create : receiver_pk:Public_key.Compressed.t -> fee:Currency.Fee.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Codable.Base58_check_intf with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val receiver_pk : t -> Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"  val receiver : t -> Account_id.t","counters":[]},{"line":"","counters":[]},{"line":"  val fee : t -> Currency.Fee.t","counters":[]},{"line":"","counters":[]},{"line":"  val to_fee_transfer : t -> Fee_transfer.Single.t","counters":[]},{"line":"","counters":[]},{"line":"  module Gen : sig","counters":[]},{"line":"    (** [gen ?min_fee max_fee] generates fee transfers between [min_fee] and","counters":[]},{"line":"        [max_fee].","counters":[]},{"line":"","counters":[]},{"line":"        @param min_fee defaults to zero *)","counters":[]},{"line":"    val gen :","counters":[]},{"line":"      ?min_fee:Currency.Fee.t -> Currency.Fee.t -> t Quickcheck.Generator.t","counters":[]},{"line":"","counters":[]},{"line":"    (** [with_random_receivers ~key ?min_fee coinbase_amount] creates coinbase","counters":[]},{"line":"        fee transfers with fees between [min_fee] and [coinbase_amount]","counters":[]},{"line":"","counters":[]},{"line":"        @param min_fee defaults to {!val:Currency.Fee.zero}","counters":[]},{"line":"     *)","counters":[]},{"line":"    val with_random_receivers :","counters":[]},{"line":"         keys:Signature_keypair.t array","counters":[]},{"line":"      -> ?min_fee:Currency.Fee.t","counters":[]},{"line":"      -> Currency.Amount.t","counters":[]},{"line":"      -> t Quickcheck.Generator.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}