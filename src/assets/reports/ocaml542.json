{"filename":"src/lib/mina_wire_types/mina_base/mina_base_signed_command.ml","lines":[{"line":"open Utils","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type ('payload, 'pk, 'signature) t =","counters":[]},{"line":"      { payload : 'payload; signer : 'pk; signature : 'signature }","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module V1 = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Mina_base_signed_command_payload.V1.t","counters":[]},{"line":"    , Public_key.V1.t","counters":[]},{"line":"    , Mina_base_signature.V1.t )","counters":[]},{"line":"    Poly.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module V2 = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Mina_base_signed_command_payload.V2.t","counters":[]},{"line":"    , Public_key.V1.t","counters":[]},{"line":"    , Mina_base_signature.V1.t )","counters":[]},{"line":"    Poly.V1.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Types = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    module With_valid_signature : V2S0 with type V2.t = private V2.t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Concrete = Types.S with type With_valid_signature.V2.t = V2.t","counters":[]},{"line":"","counters":[]},{"line":"module M = struct","counters":[]},{"line":"  module With_valid_signature = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = V2.t","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Local_sig = Utils.Signature(Types).S","counters":[]},{"line":"","counters":[]},{"line":"module Make","counters":[]},{"line":"    (Signature : Local_sig) (F : functor (A : Concrete) -> Signature(A).S) =","counters":[]},{"line":"  F (M)","counters":[]},{"line":"include M","counters":[]}]}