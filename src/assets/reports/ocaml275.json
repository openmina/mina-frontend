{"filename":"src/libp2p_ipc/libp2p_ipc.ml","lines":[{"line":"open Async","counters":[]},{"line":"open Core","counters":[]},{"line":"open Stdint","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"(* TODO: convert most of these return values from builders to readers *)","counters":[]},{"line":"","counters":[]},{"line":"include Ipc","counters":[]},{"line":"module Rpcs = Rpcs","counters":[]},{"line":"module Build = Build","counters":[]},{"line":"open Build","counters":[]},{"line":"","counters":[]},{"line":"exception Received_undefined_union of string * int","counters":[]},{"line":"","counters":[]},{"line":"module Make_capnp_unique_id (Capnp_id : sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val of_uint64 : Uint64.t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_uint64 : t -> Uint64.t","counters":[]},{"line":"end)","counters":[]},{"line":"() =","counters":[]},{"line":"struct","counters":[]},{"line":"  module Uid = Unique_id.Int63 ()","counters":[]},{"line":"","counters":[]},{"line":"  let of_int63 n = n |> Int63.to_int64 |> Uint64.of_int64 |> Capnp_id.of_uint64","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"  let to_int63 capnp_id =","counters":[]},{"line":"    capnp_id |> Capnp_id.to_uint64 |> Uint64.to_int64 |> Int63.of_int64_exn","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"  let of_uid (uid : Uid.t) = of_int63 (uid :> Int63.t)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type t = Capnp_id.t","counters":[]},{"line":"","counters":[]},{"line":"    let sexp_of_t = Fn.compose Int63.sexp_of_t to_int63","counters":[{"col_start":29,"col_end":29,"count":2}]},{"line":"","counters":[]},{"line":"    let t_of_sexp = Fn.compose of_int63 Int63.t_of_sexp","counters":[{"col_start":29,"col_end":29,"count":2}]},{"line":"","counters":[]},{"line":"    let hash = Fn.compose Int63.hash to_int63","counters":[{"col_start":24,"col_end":24,"count":2}]},{"line":"","counters":[]},{"line":"    let hash_fold_t state id = id |> to_int63 |> Int63.hash_fold_t state","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let compare a b = Int63.compare (to_int63 a) (to_int63 b)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T","counters":[]},{"line":"  include Comparable.Make (T)","counters":[]},{"line":"  include Hashable.Make (T)","counters":[]},{"line":"","counters":[]},{"line":"  let to_string = Fn.compose Uint64.to_string Capnp_id.to_uint64","counters":[{"col_start":27,"col_end":27,"count":2}]},{"line":"","counters":[]},{"line":"  let create () = of_uid (Uid.create ())","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Sequence_number =","counters":[]},{"line":"  Make_capnp_unique_id","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type t = sequence_number","counters":[]},{"line":"","counters":[]},{"line":"      let of_uint64 n =","counters":[]},{"line":"        build","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (module Builder.SequenceNumber)","counters":[]},{"line":"          (op Builder.SequenceNumber.seqno_set n)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"      let to_uint64 = Reader.SequenceNumber.seqno_get","counters":[]},{"line":"    end)","counters":[]},{"line":"    ()","counters":[]},{"line":"","counters":[]},{"line":"module Subscription_id =","counters":[]},{"line":"  Make_capnp_unique_id","counters":[]},{"line":"    (struct","counters":[]},{"line":"      type t = subscription_id","counters":[]},{"line":"","counters":[]},{"line":"      let of_uint64 n =","counters":[]},{"line":"        build","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (module Builder.SubscriptionId)","counters":[]},{"line":"          (op Builder.SubscriptionId.id_set n)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"      let to_uint64 = Reader.SubscriptionId.id_get","counters":[]},{"line":"    end)","counters":[]},{"line":"    ()","counters":[]},{"line":"","counters":[]},{"line":"let undefined_union ~context n = raise (Received_undefined_union (context, n))","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"let () =","counters":[]},{"line":"  Stdlib.Printexc.register_printer (function","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"    | Received_undefined_union (ctx, n) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some","counters":[]},{"line":"          (Printf.sprintf","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"             \"Received an undefined union for %s over the libp2p IPC: %n \" ctx n )","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None )","counters":[]},{"line":"","counters":[]},{"line":"let compression = `None","counters":[]},{"line":"","counters":[]},{"line":"let now () =","counters":[]},{"line":"  let now_int64 =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (* can we make this int time? worried about float truncation *)","counters":[]},{"line":"    Time_ns.now () |> Time_ns.to_span_since_epoch |> Time_ns.Span.to_ns","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"    |> Int64.of_float","counters":[]},{"line":"  in","counters":[]},{"line":"  build (module Builder.UnixNano) Builder.UnixNano.(op nano_sec_set now_int64)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"let unsafe_parse_peer_id peer_id =","counters":[]},{"line":"  peer_id |> Reader.PeerId.id_get |> Peer.Id.unsafe_of_string","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"let unsafe_parse_peer peer_info =","counters":[]},{"line":"  let open Reader.PeerInfo in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let libp2p_port = libp2p_port_get peer_info in","counters":[]},{"line":"  let host = Unix.Inet_addr.of_string (host_get peer_info) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  let peer_id = unsafe_parse_peer_id (peer_id_get peer_info) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"  Peer.create host ~libp2p_port ~peer_id","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let stream_id_to_string = Fn.compose Uint64.to_string Reader.StreamId.id_get","counters":[{"col_start":35,"col_end":35,"count":1}]},{"line":"","counters":[]},{"line":"let multiaddr_to_string = Reader.Multiaddr.representation_get","counters":[]},{"line":"","counters":[]},{"line":"let unix_nano_to_time_span unix_nano =","counters":[]},{"line":"  unix_nano |> Reader.UnixNano.nano_sec_get |> Float.of_int64","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"  |> Time_ns.Span.of_ns |> Time_ns.of_span_since_epoch","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"let create_multiaddr representation =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Multiaddr)","counters":[]},{"line":"    (op Builder.Multiaddr.representation_set representation)","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let create_topic_level topics =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.TopicLevel)","counters":[]},{"line":"    (list_op Builder.TopicLevel.topics_set_list topics)","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"let create_peer_id peer_id =","counters":[]},{"line":"  build' (module Builder.PeerId) (op Builder.PeerId.id_set peer_id)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"let create_libp2p_config ~private_key ~statedir ~listen_on ?metrics_port","counters":[]},{"line":"    ~external_multiaddr ~network_id ~unsafe_no_trust_ip ~flood ~direct_peers","counters":[]},{"line":"    ~seed_peers ~known_private_ip_nets ~peer_exchange ~peer_protection_ratio","counters":[]},{"line":"    ~min_connections ~max_connections ~validation_queue_size ~gating_config","counters":[]},{"line":"    ~topic_config =","counters":[]},{"line":"  build","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pConfig)","counters":[]},{"line":"    Builder.Libp2pConfig.(","counters":[]},{"line":"      op private_key_set private_key","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"      *> op statedir_set statedir","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> list_op listen_on_set_list listen_on","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      *> optional op metrics_port_set_exn metrics_port","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      *> builder_op external_multiaddr_set_builder external_multiaddr","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"      *> op network_id_set network_id","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op unsafe_no_trust_ip_set unsafe_no_trust_ip","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op flood_set flood","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> list_op direct_peers_set_list direct_peers","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      *> list_op seed_peers_set_list seed_peers","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      *> list_op known_private_ip_nets_set_list known_private_ip_nets","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      *> op peer_exchange_set peer_exchange","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op peer_protection_ratio_set peer_protection_ratio","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op min_connections_set_int_exn min_connections","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op max_connections_set_int_exn max_connections","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> op validation_queue_size_set_int_exn validation_queue_size","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"      *> reader_op gating_config_set_reader gating_config","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"      *> list_op topic_config_set_list","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"           (List.map ~f:create_topic_level topic_config))","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"let create_gating_config ~banned_ips ~banned_peers ~trusted_ips ~trusted_peers","counters":[]},{"line":"    ~isolate =","counters":[]},{"line":"  build","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    (module Builder.GatingConfig)","counters":[]},{"line":"    Builder.GatingConfig.(","counters":[]},{"line":"      list_op banned_ips_set_list banned_ips","counters":[{"col_start":12,"col_end":12,"count":1}]},{"line":"      *> list_op banned_peer_ids_set_list banned_peers","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"      *> list_op trusted_ips_set_list trusted_ips","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"      *> list_op trusted_peer_ids_set_list trusted_peers","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":15,"col_end":15,"count":1}]},{"line":"      *> op isolate_set isolate)","counters":[{"col_start":7,"col_end":7,"count":1},{"col_start":10,"col_end":10,"count":1}]},{"line":"","counters":[]},{"line":"let create_rpc_header ~sequence_number =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.RpcMessageHeader)","counters":[]},{"line":"    Builder.RpcMessageHeader.(","counters":[]},{"line":"      reader_op time_sent_set_reader (now ())","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"      *> reader_op sequence_number_set_reader sequence_number)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"let rpc_request_body_set req body =","counters":[]},{"line":"  let open Builder.Libp2pHelperInterface.RpcRequest in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match body with","counters":[]},{"line":"  | Configure b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ configure_set_builder req b","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"  | SetGatingConfig b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ set_gating_config_set_builder req b","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"  | Listen b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ listen_set_builder req b","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  | GetListeningAddrs b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ get_listening_addrs_set_builder req b","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"  | BeginAdvertising b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ begin_advertising_set_builder req b","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"  | AddPeer b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ add_peer_set_builder req b","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  | ListPeers b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ list_peers_set_builder req b","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"  | BandwidthInfo b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ bandwidth_info_set_builder req b","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  | GenerateKeypair b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ generate_keypair_set_builder req b","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  | Publish b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ publish_set_builder req b","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  | Subscribe b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ subscribe_set_builder req b","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"  | Unsubscribe b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ unsubscribe_set_builder req b","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  | AddStreamHandler b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ add_stream_handler_set_builder req b","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  | RemoveStreamHandler b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ remove_stream_handler_set_builder req b","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"  | OpenStream b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ open_stream_set_builder req b","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  | CloseStream b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ close_stream_set_builder req b","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  | ResetStream b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ reset_stream_set_builder req b","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  | SendStream b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ send_stream_set_builder req b","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  | SetNodeStatus b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ set_node_status_set_builder req b","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"  | GetPeerNodeStatus b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ get_peer_node_status_set_builder req b","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"  | TestDecodeBitswapBlocks b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ test_decode_bitswap_blocks_set_builder req b","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"  | TestEncodeBitswapBlocks b ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ignore @@ test_encode_bitswap_blocks_set_builder req b","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"  | Undefined _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith \"cannot set undefined rpc request body\"","counters":[]},{"line":"","counters":[]},{"line":"let create_rpc_request ~sequence_number body =","counters":[]},{"line":"  let header = create_rpc_header ~sequence_number in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  build'","counters":[]},{"line":"    (module Builder.Libp2pHelperInterface.RpcRequest)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.RpcRequest.(","counters":[]},{"line":"      builder_op header_set_builder header *> op rpc_request_body_set body)","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let rpc_response_to_or_error resp =","counters":[]},{"line":"  let open Reader.Libp2pHelperInterface.RpcResponse in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match get resp with","counters":[]},{"line":"  | Error err ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Or_error.error_string err","counters":[]},{"line":"  | Success body ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Or_error.return (Reader.Libp2pHelperInterface.RpcResponseSuccess.get body)","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"  | Undefined n ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      undefined_union ~context:\"Libp2pHelperInterface.RpcResponse\" n","counters":[]},{"line":"","counters":[]},{"line":"let rpc_request_to_outgoing_message request =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pHelperInterface.Message)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.Message.(","counters":[]},{"line":"      builder_op rpc_request_set_builder request)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"let create_push_message_header () =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.PushMessageHeader)","counters":[]},{"line":"    Builder.PushMessageHeader.(reader_op time_sent_set_reader (now ()))","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"let push_message_to_outgoing_message request =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pHelperInterface.Message)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.Message.(","counters":[]},{"line":"      builder_op push_message_set_builder request)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"let create_add_resource_push_message ~tag ~data =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pHelperInterface.PushMessage)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.PushMessage.(","counters":[]},{"line":"      builder_op header_set_builder (create_push_message_header ())","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      *> reader_op add_resource_set_reader","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"           (build","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              (module Builder.Libp2pHelperInterface.AddResource)","counters":[]},{"line":"              Builder.Libp2pHelperInterface.AddResource.(","counters":[]},{"line":"                op tag_set_exn tag *> op data_set data) ))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"let create_heartbeat_peer_push_message ~peer_id =","counters":[]},{"line":"  let id =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Builder.PeerId)","counters":[]},{"line":"      Builder.PeerId.(op id_set (Peer.Id.to_string peer_id))","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  in","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pHelperInterface.PushMessage)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.PushMessage.(","counters":[]},{"line":"      builder_op header_set_builder (create_push_message_header ())","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      *> reader_op heartbeat_peer_set_reader","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"           (build","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              (module Builder.Libp2pHelperInterface.HeartbeatPeer)","counters":[]},{"line":"              Builder.Libp2pHelperInterface.HeartbeatPeer.(","counters":[]},{"line":"                builder_op id_set_builder id) ))","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"let create_validation_push_message ~validation_id ~validation_result =","counters":[]},{"line":"  build'","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Builder.Libp2pHelperInterface.PushMessage)","counters":[]},{"line":"    Builder.Libp2pHelperInterface.PushMessage.(","counters":[]},{"line":"      builder_op header_set_builder (create_push_message_header ())","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      *> reader_op validation_set_reader","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"           (build","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"              (module Builder.Libp2pHelperInterface.Validation)","counters":[]},{"line":"              Builder.Libp2pHelperInterface.Validation.(","counters":[]},{"line":"                reader_op validation_id_set_reader validation_id","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                *> op result_set validation_result) ))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let read_and_decode_message =","counters":[]},{"line":"  let open Incremental_parsing in","counters":[]},{"line":"  let open Let_syntax in","counters":[]},{"line":"  let open Decoders in","counters":[]},{"line":"  let%bind segment_count = parse uint32 >>| Uint32.(( + ) one) in","counters":[{"col_start":31,"col_end":31,"count":1},{"col_start":42,"col_end":42,"count":1}]},{"line":"  let%bind segment_sizes =","counters":[]},{"line":"    parse (monomorphic_list uint32 (Uint32.to_int segment_count))","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%map segments =","counters":[]},{"line":"    parse","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      (polymorphic_list","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"         (List.map segment_sizes ~f:(fun n -> bytes (Uint32.to_int n * 8))) )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"  in","counters":[]},{"line":"  Capnp.BytesMessage.Message.of_storage segments","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let rec stream_messages frag_stream w =","counters":[]},{"line":"  let%bind () =","counters":[]},{"line":"    read_and_decode_message frag_stream","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    >>| Reader.DaemonInterface.Message.of_message >>| Or_error.return","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"    >>= Strict_pipe.Writer.write w","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"  in","counters":[]},{"line":"  stream_messages frag_stream w","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let read_incoming_messages reader =","counters":[]},{"line":"  let r, w = Strict_pipe.create Strict_pipe.Synchronous in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let fragment_stream = Incremental_parsing.Fragment_stream.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  O1trace.background_thread \"stream_libp2p_ipc_messages\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      stream_messages fragment_stream w ) ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  O1trace.background_thread \"accumulate_libp2p_ipc_message_fragments\" (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      Strict_pipe.Reader.iter_without_pushback reader ~f:(fun fragment ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          Incremental_parsing.Fragment_stream.add_fragment fragment_stream","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (Stdlib.Bytes.unsafe_of_string fragment) ) ) ;","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  r","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let write_outgoing_message writer msg =","counters":[]},{"line":"  msg |> Builder.Libp2pHelperInterface.Message.to_message","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"  |> Capnp.Codecs.serialize_iter ~compression ~f:(Writer.write writer)","counters":[{"col_start":61,"col_end":61,"count":0},{"col_start":69,"col_end":69,"count":2}]}]}