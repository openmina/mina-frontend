{"filename":"src/lib/perf_histograms/intf.ml","lines":[{"line":"open Async","counters":[]},{"line":"","counters":[]},{"line":"type ('q, 'r) dispatch =","counters":[]},{"line":"  Versioned_rpc.Connection_with_menu.t -> 'q -> 'r Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"type ('q, 'r, 'state) impl = 'state -> version:int -> 'q -> 'r Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"module Rpc = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    module Caller : sig","counters":[]},{"line":"      type query","counters":[]},{"line":"","counters":[]},{"line":"      type response","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Callee : sig","counters":[]},{"line":"      type query","counters":[]},{"line":"","counters":[]},{"line":"      type response","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include","counters":[]},{"line":"      Versioned_rpc.Both_convert.Plain.S","counters":[]},{"line":"        with type callee_query := Callee.query","counters":[]},{"line":"         and type callee_response := Callee.response","counters":[]},{"line":"         and type caller_query := Caller.query","counters":[]},{"line":"         and type caller_response := Caller.response","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Versioned_rpc (M : Rpc.S) = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type query [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"    type response [@@deriving bin_io]","counters":[]},{"line":"","counters":[]},{"line":"    val version : int","counters":[]},{"line":"","counters":[]},{"line":"    val query_of_caller_model : M.Caller.query -> query","counters":[]},{"line":"","counters":[]},{"line":"    val callee_model_of_query : query -> M.Callee.query","counters":[]},{"line":"","counters":[]},{"line":"    val response_of_callee_model : M.Callee.response -> response","counters":[]},{"line":"","counters":[]},{"line":"    val caller_model_of_response : response -> M.Caller.response","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Patched = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    type callee_query","counters":[]},{"line":"","counters":[]},{"line":"    type callee_response","counters":[]},{"line":"","counters":[]},{"line":"    type caller_query","counters":[]},{"line":"","counters":[]},{"line":"    type caller_response","counters":[]},{"line":"","counters":[]},{"line":"    val dispatch_multi : (caller_query, caller_response) dispatch","counters":[]},{"line":"","counters":[]},{"line":"    val implement_multi :","counters":[]},{"line":"         ?log_not_previously_seen_version:(name:string -> int -> unit)","counters":[]},{"line":"      -> (callee_query, callee_response, 'state) impl","counters":[]},{"line":"      -> 'state Async.Rpc.Implementation.t list","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}