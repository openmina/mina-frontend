{"filename":"src/lib/blake2/blake2.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module Make () = struct","counters":[]},{"line":"  let digest_size_in_bits = 256","counters":[]},{"line":"","counters":[]},{"line":"  let digest_size_in_bytes = digest_size_in_bits / 8","counters":[]},{"line":"","counters":[]},{"line":"  module T0 = struct","counters":[]},{"line":"    include Digestif.Make_BLAKE2B (struct","counters":[]},{"line":"      let digest_size = digest_size_in_bytes","counters":[]},{"line":"    end)","counters":[]},{"line":"","counters":[]},{"line":"    let hash = Fn.compose String.hash to_raw_string","counters":[{"col_start":24,"col_end":24,"count":3}]},{"line":"","counters":[]},{"line":"    let hash_fold_t state t = Hash.fold_string state (to_raw_string t)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"    let compare = unsafe_compare","counters":[]},{"line":"","counters":[]},{"line":"    let of_string = of_raw_string","counters":[]},{"line":"","counters":[]},{"line":"    let to_string = to_raw_string","counters":[]},{"line":"","counters":[]},{"line":"    let gen =","counters":[]},{"line":"      let char_generator =","counters":[]},{"line":"        Base_quickcheck.Generator.of_list","counters":[]},{"line":"          [ '0'","counters":[]},{"line":"          ; '1'","counters":[]},{"line":"          ; '2'","counters":[]},{"line":"          ; '3'","counters":[]},{"line":"          ; '4'","counters":[]},{"line":"          ; '5'","counters":[]},{"line":"          ; '6'","counters":[]},{"line":"          ; '7'","counters":[]},{"line":"          ; '8'","counters":[]},{"line":"          ; '9'","counters":[]},{"line":"          ; 'A'","counters":[]},{"line":"          ; 'B'","counters":[]},{"line":"          ; 'C'","counters":[]},{"line":"          ; 'D'","counters":[]},{"line":"          ; 'E'","counters":[]},{"line":"          ; 'F'","counters":[]},{"line":"          ]","counters":[]},{"line":"      in","counters":[]},{"line":"      String.gen_with_length (digest_size_in_bytes * 2) char_generator","counters":[{"col_start":6,"col_end":6,"count":3},{"col_start":27,"col_end":27,"count":3}]},{"line":"      |> Quickcheck.Generator.map ~f:of_hex","counters":[{"col_start":32,"col_end":32,"count":3}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module T1 = struct","counters":[]},{"line":"    include T0","counters":[]},{"line":"    include Sexpable.Of_stringable (T0)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    [@@@with_top_version_tag]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = T1.t [@@deriving hash, sexp, compare, equal]","counters":[{"col_start":6,"col_end":6,"count":9},{"col_start":58,"col_end":58,"count":36}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      let to_yojson t : Yojson.Safe.t = `String (T1.to_hex t)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"      let of_yojson (v : Yojson.Safe.t) =","counters":[]},{"line":"        let open Ppx_deriving_yojson_runtime in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        match v with","counters":[]},{"line":"        | `String s ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Option.value_map ~default:(Result.Error \"not a hex string\")","counters":[]},{"line":"              ~f:(fun x -> Result.Ok x)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              (T1.of_hex_opt s)","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Result.Error \"not a string\"","counters":[]},{"line":"","counters":[]},{"line":"      module Arg = struct","counters":[]},{"line":"        type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"        [%%define_locally T1.(to_string, of_string)]","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      include Binable.Of_stringable_without_uuid (Arg)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  [%%define_locally Stable.Latest.(to_yojson, of_yojson)]","counters":[]},{"line":"","counters":[]},{"line":"  [%%define_locally","counters":[]},{"line":"  T1.","counters":[]},{"line":"    ( of_raw_string","counters":[]},{"line":"    , to_raw_string","counters":[]},{"line":"    , digest_string","counters":[]},{"line":"    , digest_bigstring","counters":[]},{"line":"    , to_hex","counters":[]},{"line":"    , of_hex","counters":[]},{"line":"    , gen )]","counters":[]},{"line":"","counters":[]},{"line":"  (* do not create bin_io serialization *)","counters":[]},{"line":"  include Hashable.Make (T1)","counters":[]},{"line":"  include Comparable.Make (T1)","counters":[]},{"line":"","counters":[]},{"line":"  (* Little endian *)","counters":[]},{"line":"  let bits_to_string bits =","counters":[]},{"line":"    let n = Array.length bits in","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"    let rec make_byte offset acc (i : int) =","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"      let finished = Int.(i = 8 || offset + i >= n) in","counters":[{"col_start":6,"col_end":6,"count":570},{"col_start":30,"col_end":30,"count":62},{"col_start":49,"col_end":49,"count":2}]},{"line":"      if finished then Char.of_int_exn acc","counters":[{"col_start":23,"col_end":23,"count":64}]},{"line":"      else","counters":[]},{"line":"        let acc = if bits.(offset + i) then acc lor (1 lsl i) else acc in","counters":[{"col_start":8,"col_end":8,"count":506},{"col_start":44,"col_end":44,"count":256},{"col_start":67,"col_end":67,"count":250}]},{"line":"        make_byte offset acc (i + 1)","counters":[]},{"line":"    in","counters":[]},{"line":"    let len = (n + 7) / 8 in","counters":[]},{"line":"    String.init len ~f:(fun i -> make_byte (8 * i) 0 0)","counters":[{"col_start":33,"col_end":33,"count":64}]},{"line":"","counters":[]},{"line":"  let string_to_bits s =","counters":[]},{"line":"    Array.init","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (8 * String.length s)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      ~f:(fun i ->","counters":[]},{"line":"        let c = Char.to_int s.[i / 8] in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        let j = i mod 8 in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Int.((c lsr j) land 1 = 1) )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Make ()","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"bits_to_string\" =","counters":[]},{"line":"  [%test_eq: string]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (bits_to_string [| true; false |])","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    (String.of_char_list [ Char.of_int_exn 1 ])","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"string to bits\" =","counters":[]},{"line":"  Quickcheck.test ~trials:5 String.quickcheck_generator ~f:(fun s ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      [%test_eq: string] s (bits_to_string (string_to_bits s)) )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":63,"col_end":63,"count":2}]}]}