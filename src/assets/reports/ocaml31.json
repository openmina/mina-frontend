{"filename":"src/lib/pickles/composition_types/digest.ml","lines":[{"line":"open Pickles_types","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"module Limbs = Nat.N4","counters":[]},{"line":"","counters":[]},{"line":"module Constant = struct","counters":[]},{"line":"  include Limb_vector.Constant.Make (Limbs)","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":11,"col_end":11,"count":1}]},{"line":"        Limb_vector.Constant.Hex64.Stable.V1.t Vector.Vector_4.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"      [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  (* Force the typechecker to verify that these types are equal. *)","counters":[]},{"line":"  let () =","counters":[]},{"line":"    let _f : unit -> (t, Stable.Latest.t) Type_equal.t =","counters":[]},{"line":"     fun () -> Type_equal.T","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    ()","counters":[]},{"line":"","counters":[]},{"line":"  open Backend","counters":[]},{"line":"","counters":[]},{"line":"  let to_tick_field x = Tick.Field.of_bits (to_bits x)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let to_tock_field x = Tock.Field.of_bits (to_bits x)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let of_tick_field x = of_bits (Tick.Field.to_bits x)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Impl : Snarky_backendless.Snark_intf.Run) = struct","counters":[]},{"line":"  open Impl","counters":[]},{"line":"","counters":[]},{"line":"  type t = Field.t","counters":[]},{"line":"","counters":[]},{"line":"  let to_bits = Field.choose_preimage_var ~length:Field.size_in_bits","counters":[]},{"line":"","counters":[]},{"line":"  module Unsafe = struct","counters":[]},{"line":"    let to_bits_unboolean x =","counters":[]},{"line":"      with_label __LOC__ (fun () ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"          let length = Field.size_in_bits in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let res =","counters":[]},{"line":"            exists","counters":[]},{"line":"              (Typ.list Boolean.typ_unchecked ~length)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"              ~compute:As_prover.(fun () -> Field.Constant.unpack (read_var x))","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          in","counters":[]},{"line":"          Field.Assert.equal x (Field.project res) ;","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          res )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let () = assert (Field.size_in_bits < 64 * Nat.to_int Limbs.n)","counters":[{"col_start":18,"col_end":18,"count":4},{"col_start":54,"col_end":54,"count":4}]},{"line":"","counters":[]},{"line":"  module Constant = struct","counters":[]},{"line":"    include Constant","counters":[]},{"line":"","counters":[]},{"line":"    let to_bits x = List.take (to_bits x) Field.size_in_bits","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ =","counters":[]},{"line":"    Typ.transport Field.typ","counters":[{"col_start":16,"col_end":16,"count":4}]},{"line":"      ~there:(Fn.compose Field.Constant.project Constant.to_bits)","counters":[{"col_start":23,"col_end":23,"count":4}]},{"line":"      ~back:(Fn.compose Constant.of_bits Field.Constant.unpack)","counters":[{"col_start":22,"col_end":22,"count":4}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}