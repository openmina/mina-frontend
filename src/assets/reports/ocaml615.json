{"filename":"src/lib/pickles/wrap_domains.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Import","counters":[]},{"line":"open Poly_types","counters":[]},{"line":"open Hlist","counters":[]},{"line":"","counters":[]},{"line":"(* Compute the domains corresponding to wrap_main *)","counters":[]},{"line":"module Make","counters":[]},{"line":"    (A : T0)","counters":[]},{"line":"    (A_value : T0)","counters":[]},{"line":"    (Ret_var : T0)","counters":[]},{"line":"    (Ret_value : T0)","counters":[]},{"line":"    (Auxiliary_var : T0)","counters":[]},{"line":"    (Auxiliary_value : T0) =","counters":[]},{"line":"struct","counters":[]},{"line":"  module I =","counters":[]},{"line":"    Inductive_rule.T (A) (A_value) (Ret_var) (Ret_value) (Auxiliary_var)","counters":[]},{"line":"      (Auxiliary_value)","counters":[]},{"line":"","counters":[]},{"line":"  let f_debug full_signature num_choices choices_length ~self ~choices","counters":[]},{"line":"      ~max_proofs_verified =","counters":[]},{"line":"    let num_choices = Hlist.Length.to_nat choices_length in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let dummy_step_domains =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Vector.init num_choices ~f:(fun _ -> Fix_domains.rough_domains)","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    in","counters":[]},{"line":"    let dummy_step_widths =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Vector.init num_choices ~f:(fun _ ->","counters":[]},{"line":"          Nat.to_int (Nat.Add.n max_proofs_verified) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"    in","counters":[]},{"line":"    let dummy_step_keys =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      lazy","counters":[]},{"line":"        (Vector.init num_choices ~f:(fun _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"             let g = Backend.Tock.Inner_curve.(to_affine_exn one) in","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"             Verification_key.dummy_commitments g ) )","counters":[]},{"line":"    in","counters":[]},{"line":"    Timer.clock __LOC__ ;","counters":[]},{"line":"    let _, main =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Wrap_main.wrap_main full_signature choices_length dummy_step_keys","counters":[]},{"line":"        dummy_step_widths dummy_step_domains max_proofs_verified","counters":[]},{"line":"    in","counters":[]},{"line":"    Timer.clock __LOC__ ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Fix_domains.domains","counters":[]},{"line":"        (module Impls.Wrap)","counters":[]},{"line":"        (Impls.Wrap.input ())","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        (T (Snarky_backendless.Typ.unit (), Fn.id, Fn.id))","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"        main","counters":[]},{"line":"    in","counters":[]},{"line":"    Timer.clock __LOC__ ; t","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  let f full_signature num_choices choices_length ~self ~choices","counters":[]},{"line":"      ~max_proofs_verified =","counters":[]},{"line":"    let res =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Common.wrap_domains","counters":[]},{"line":"        ~proofs_verified:(Nat.to_int (Nat.Add.n max_proofs_verified))","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"    in","counters":[]},{"line":"    ( if debug then","counters":[]},{"line":"      let res' =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        f_debug full_signature num_choices choices_length ~self ~choices","counters":[]},{"line":"          ~max_proofs_verified","counters":[]},{"line":"      in","counters":[]},{"line":"      [%test_eq: Domains.t] res res' ) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"    res","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}