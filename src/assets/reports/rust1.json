{"filename":"src/ffi/transaction_fuzzer.rs","lines":[{"line":"use mina_curves::pasta::Fq;","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_p2p_messages::number::Number;","counters":[]},{"line":"use mina_p2p_messages::pseq::PaddedSeq;","counters":[]},{"line":"use mina_p2p_messages::v2::{","counters":[]},{"line":"    CompositionTypesBranchDataDomainLog2StableV1, CompositionTypesBranchDataStableV1,","counters":[]},{"line":"    CompositionTypesDigestConstantStableV1, LedgerHash, LimbVectorConstantHex64StableV1,","counters":[]},{"line":"    PicklesBaseProofsVerifiedStableV1,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2MessagesForNextStepProof,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2MessagesForNextWrapProof,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2PrevEvals,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2PrevEvalsEvals,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvals,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvalsLookupA,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2Proof,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2ProofMessages,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2ProofMessagesLookupA,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2ProofOpenings,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2ProofOpeningsProof,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2Statement,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2StatementFp,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2StatementPlonk,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2StatementProofState,","counters":[]},{"line":"    PicklesProofProofsVerified2ReprStableV2StatementProofStateDeferredValues,","counters":[]},{"line":"    PicklesProofProofsVerifiedMaxStableV2,","counters":[]},{"line":"    PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2,","counters":[]},{"line":"    PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2A,","counters":[]},{"line":"    PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2AChallenge,","counters":[]},{"line":"};","counters":[]},{"line":"use mina_signer::{","counters":[]},{"line":"    CompressedPubKey, CurvePoint, Keypair, NetworkId, ScalarField, SecKey, Signature, Signer,","counters":[]},{"line":"};","counters":[]},{"line":"use ocaml_interop::{","counters":[]},{"line":"    ocaml_export, FromOCaml, OCaml, OCamlBytes, OCamlInt64, OCamlList, OCamlRef, ToOCaml,","counters":[]},{"line":"};","counters":[]},{"line":"use rand::distributions::{Alphanumeric, DistString};","counters":[]},{"line":"use rand::seq::SliceRandom;","counters":[]},{"line":"use std::rc::Rc;","counters":[]},{"line":"use std::str::FromStr;","counters":[]},{"line":"use std::{array, iter};","counters":[]},{"line":"use tuple_map::*;","counters":[]},{"line":"","counters":[]},{"line":"use crate::coverage::reports::CoverageReport;","counters":[]},{"line":"use crate::coverage::stats::Stats;","counters":[]},{"line":"use crate::ffi::util::{deserialize, serialize};","counters":[]},{"line":"use crate::coverage::cov::Cov;","counters":[]},{"line":"use crate::scan_state::currency::{","counters":[]},{"line":"    Amount, Balance, BlockTime, Fee, Length, Magnitude, MinMax, Nonce, Sgn, Signed, Slot,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::scan_state::scan_state::ConstraintConstants;","counters":[]},{"line":"use crate::scan_state::transaction_logic::protocol_state::{","counters":[]},{"line":"    EpochData, EpochLedger, ProtocolStateView,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::scan_state::transaction_logic::signed_command::{","counters":[]},{"line":"    PaymentPayload, SignedCommand, SignedCommandPayload,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::scan_state::transaction_logic::transaction_applied::{","counters":[]},{"line":"    signed_command_applied, CommandApplied, TransactionApplied, Varying,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::scan_state::transaction_logic::transaction_union_payload::TransactionUnionPayload;","counters":[]},{"line":"use crate::scan_state::transaction_logic::zkapp_command::{","counters":[]},{"line":"    self, AccountPreconditions, AccountUpdate, ClosedInterval, FeePayer, FeePayerBody, Numeric,","counters":[]},{"line":"    OrIgnore, SetOrKeep, Update, WithHash, ZkAppCommand,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::scan_state::transaction_logic::{","counters":[]},{"line":"    apply_transaction, signed_command, Memo, Transaction, UserCommand,","counters":[]},{"line":"};","counters":[]},{"line":"use crate::staged_ledger::sparse_ledger::LedgerIntf;","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    Account, AccountId, AuthRequired, CurveAffine, Mask, Permissions, PlonkVerificationKeyEvals,","counters":[]},{"line":"    ProofVerified, Timing, TokenId, TokenSymbol, VerificationKey, VotingFor, ZkAppUri,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use ark_ec::{AffineCurve, ProjectiveCurve};","counters":[]},{"line":"use ark_ff::UniformRand;","counters":[]},{"line":"use ark_ff::{Field, SquareRootField, Zero};","counters":[]},{"line":"use rand::rngs::SmallRng;","counters":[]},{"line":"use rand::{self, Rng, SeedableRng};","counters":[]},{"line":"","counters":[]},{"line":"pub struct CoverageStats {","counters":[]},{"line":"    pub rust: Option<Stats>,","counters":[]},{"line":"    pub ocaml: Option<Stats>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl CoverageStats {","counters":[]},{"line":"    pub fn new(rust_cov_stats: Stats, caml_cov_stats: Stats) -> Self {","counters":[{"col_start":4,"col_end":70,"count":28203}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":28203}]},{"line":"            rust: Some(rust_cov_stats),","counters":[{"col_start":0,"col_end":39,"count":28203}]},{"line":"            ocaml: Some(caml_cov_stats),","counters":[{"col_start":0,"col_end":40,"count":28203}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":28203}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":28203}]},{"line":"","counters":[]},{"line":"    pub fn empty() -> Self {","counters":[{"col_start":4,"col_end":28,"count":4480}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":4480}]},{"line":"            rust: None,","counters":[{"col_start":0,"col_end":23,"count":4480}]},{"line":"            ocaml: None,","counters":[{"col_start":0,"col_end":24,"count":4480}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":4480}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":4480}]},{"line":"","counters":[]},{"line":"    pub fn print(&self) {","counters":[]},{"line":"        if let Some(stats) = &self.rust {","counters":[{"col_start":20,"col_end":25,"count":0},{"col_start":29,"col_end":39,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"            let rust_sources = vec![","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                \"scan_state/transaction_logic.rs\",","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                \"scan_state/zkapp_logic.rs\",","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"              ];","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"            let stats = stats.filter_filenames(&rust_sources);","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            println!(\"=== COV Rust ===\\n{}\", stats);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(stats) = &self.ocaml {","counters":[{"col_start":20,"col_end":25,"count":-61764},{"col_start":29,"col_end":40,"count":0},{"col_start":41,"col_end":42,"count":-61764}]},{"line":"            let ocaml_sources = vec![","counters":[{"col_start":0,"col_end":37,"count":-61764}]},{"line":"                \"lib/transaction_logic/mina_transaction_logic.ml\",","counters":[{"col_start":0,"col_end":66,"count":-61764}]},{"line":"                \"lib/transaction_logic/zkapp_command_logic.ml\",","counters":[{"col_start":0,"col_end":63,"count":-61764}]},{"line":"                \"lib/mina_base/zkapp_command.ml\",","counters":[{"col_start":0,"col_end":49,"count":-61764}]},{"line":"                \"lib/mina_base/account_update.ml\",","counters":[{"col_start":0,"col_end":50,"count":-61764}]},{"line":"                \"lib/mina_base/zkapp_precondition.ml\",","counters":[{"col_start":0,"col_end":54,"count":-61764}]},{"line":"              ];","counters":[{"col_start":0,"col_end":16,"count":-61764}]},{"line":"","counters":[]},{"line":"            let stats = stats.filter_filenames(&ocaml_sources);","counters":[{"col_start":0,"col_end":63,"count":-61764}]},{"line":"            println!(\"=== COV OCaml ===\\n{}\", stats);","counters":[{"col_start":0,"col_end":53,"count":-61764}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":-61764},{"col_start":9,"col_end":10,"count":61764}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn sign_payload(keypair: &Keypair, payload: &SignedCommandPayload) -> Signature {","counters":[]},{"line":"    let tx = TransactionUnionPayload::of_user_command_payload(payload);","counters":[]},{"line":"    let mut signer = mina_signer::create_legacy(NetworkId::TESTNET);","counters":[]},{"line":"    signer.sign(keypair, &tx)","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn new_signed_command(","counters":[]},{"line":"    keypair: &Keypair,","counters":[]},{"line":"    fee: Fee,","counters":[]},{"line":"    fee_payer_pk: CompressedPubKey,","counters":[]},{"line":"    nonce: Nonce,","counters":[]},{"line":"    valid_until: Option<Slot>,","counters":[]},{"line":"    memo: Memo,","counters":[]},{"line":"    body: signed_command::Body,","counters":[]},{"line":") -> SignedCommand {","counters":[]},{"line":"    let payload = SignedCommandPayload::create(fee, fee_payer_pk, nonce, valid_until, memo, body);","counters":[]},{"line":"    let signature = sign_payload(keypair, &payload);","counters":[]},{"line":"","counters":[]},{"line":"    SignedCommand {","counters":[]},{"line":"        payload,","counters":[]},{"line":"        signer: keypair.public.into_compressed(),","counters":[]},{"line":"        signature,","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn new_payment(","counters":[]},{"line":"    source_pk: CompressedPubKey,","counters":[]},{"line":"    receiver_pk: CompressedPubKey,","counters":[]},{"line":"    amount: Amount,","counters":[]},{"line":") -> signed_command::Body {","counters":[]},{"line":"    let payload = PaymentPayload {","counters":[]},{"line":"        source_pk,","counters":[]},{"line":"        receiver_pk,","counters":[]},{"line":"        amount,","counters":[]},{"line":"    };","counters":[]},{"line":"    signed_command::Body::Payment(payload)","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"fn new_payment_tx(","counters":[]},{"line":"    keypair: &Keypair,","counters":[]},{"line":"    fee: Fee,","counters":[]},{"line":"    fee_payer_pk: CompressedPubKey,","counters":[]},{"line":"    nonce: Nonce,","counters":[]},{"line":"    valid_until: Option<Slot>,","counters":[]},{"line":"    memo: Memo,","counters":[]},{"line":"    receiver_pk: CompressedPubKey,","counters":[]},{"line":"    amount: Amount,","counters":[]},{"line":") -> SignedCommand {","counters":[]},{"line":"    let body = new_payment(keypair.public.into_compressed(), receiver_pk, amount);","counters":[]},{"line":"    new_signed_command(keypair, fee, fee_payer_pk, nonce, valid_until, memo, body)","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/*","counters":[]},{"line":"    Reimplement random key generation w/o the restriction on CryptoRgn trait.","counters":[]},{"line":"    Since we are only using this for fuzzing we want a faster (unsafe) Rng like SmallRng.","counters":[]},{"line":"*/","counters":[]},{"line":"fn gen_sk(rng: &mut SmallRng) -> SecKey {","counters":[{"col_start":0,"col_end":41,"count":3454}]},{"line":"    let secret: ScalarField = ScalarField::rand(rng);","counters":[{"col_start":0,"col_end":53,"count":3454}]},{"line":"    SecKey::new(secret)","counters":[{"col_start":0,"col_end":23,"count":3454}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":3454}]},{"line":"","counters":[]},{"line":"fn gen_keypair(rng: &mut SmallRng) -> Keypair {","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"    let sec_key = gen_sk(rng);","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    let scalar = sec_key.into_scalar();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    let public = CurvePoint::prime_subgroup_generator()","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        .mul(scalar)","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"        .into_affine();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"    Keypair::from_parts_unsafe(scalar, public)","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"// Taken from ocaml_tests","counters":[]},{"line":"/// Same values when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"fn dummy_state_view(global_slot_since_genesis: Option<Slot>) -> ProtocolStateView {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"    // TODO: Use OCaml implementation, not hardcoded value","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"    let f = |s: &str| Fp::from_str(s).unwrap();","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":22,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"    ProtocolStateView {","counters":[{"col_start":4,"col_end":23,"count":0}]},{"line":"        snarked_ledger_hash: f(","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        ),","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        timestamp: BlockTime::from_u64(1600251300000),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        blockchain_length: Length::from_u32(1),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        min_window_density: Length::from_u32(77),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        last_vrf_output: (),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        global_slot_since_hard_fork: Slot::from_u32(0),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        global_slot_since_genesis: global_slot_since_genesis.unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"        staking_epoch_data: EpochData {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            ledger: EpochLedger {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                hash: f(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            seed: Fp::zero(),","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            start_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            lock_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            epoch_length: Length::from_u32(1),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        next_epoch_data: EpochData {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            ledger: EpochLedger {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                hash: f(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            seed: f(","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"                \"18512313064034685696641580142878809378857342939026666126913761777372978255172\",","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            start_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            lock_checkpoint: f(","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                \"9196091926153144288494889289330016873963015481670968646275122329689722912273\",","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            epoch_length: Length::from_u32(2),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"/// Same values when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"const CONSTRAINT_CONSTANTS: ConstraintConstants = ConstraintConstants {","counters":[]},{"line":"    sub_windows_per_window: 11,","counters":[]},{"line":"    ledger_depth: 35,","counters":[]},{"line":"    work_delay: 2,","counters":[]},{"line":"    block_window_duration_ms: 180000,","counters":[]},{"line":"    transaction_capacity_log_2: 7,","counters":[]},{"line":"    pending_coinbase_depth: 5,","counters":[]},{"line":"    coinbase_amount: Amount::from_u64(720000000000),","counters":[]},{"line":"    supercharged_coinbase_factor: 2,","counters":[]},{"line":"    account_creation_fee: Fee::from_u64(1000000000),","counters":[]},{"line":"    fork: None,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"struct FuzzerCtx {","counters":[]},{"line":"    constraint_constants: ConstraintConstants,","counters":[]},{"line":"    txn_state_view: ProtocolStateView,","counters":[]},{"line":"    ledger: Mask,","counters":[]},{"line":"    rng: SmallRng,","counters":[]},{"line":"    potential_senders: Vec<Keypair>,","counters":[]},{"line":"    potential_new_accounts: Vec<Keypair>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FuzzerCtx {","counters":[]},{"line":"    fn new(seed: u64, constraint_constants: ConstraintConstants) -> Self {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        let depth = constraint_constants.ledger_depth as usize;","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            constraint_constants,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            txn_state_view: dummy_state_view(None),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            ledger: {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                let root = Mask::new_root(crate::Database::create(depth.try_into().unwrap()));","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                root.make_child()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            rng: SmallRng::seed_from_u64(seed),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            potential_senders: Vec::new(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            potential_new_accounts: Vec::new(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn create_inital_accounts(&mut self, n: usize) {","counters":[{"col_start":4,"col_end":52,"count":77666}]},{"line":"        for _ in 0..n {","counters":[{"col_start":0,"col_end":21,"count":77666}]},{"line":"            loop {","counters":[{"col_start":12,"col_end":18,"count":8960}]},{"line":"                let keypair = gen_keypair(&mut self.rng);","counters":[{"col_start":0,"col_end":57,"count":8960}]},{"line":"","counters":[]},{"line":"                if !self","counters":[{"col_start":0,"col_end":24,"count":8960}]},{"line":"                    .potential_senders","counters":[{"col_start":0,"col_end":38,"count":8960}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":8960}]},{"line":"                    .any(|x| x.public == keypair.public)","counters":[{"col_start":0,"col_end":25,"count":8960},{"col_start":29,"col_end":55,"count":17920},{"col_start":55,"col_end":56,"count":8960}]},{"line":"                {","counters":[]},{"line":"                    let pk_compressed = keypair.public.into_compressed();","counters":[{"col_start":24,"col_end":73,"count":4480}]},{"line":"                    let account_id = AccountId::new(pk_compressed, TokenId::default());","counters":[{"col_start":0,"col_end":87,"count":4480}]},{"line":"                    let mut account = Account::initialize(&account_id);","counters":[{"col_start":0,"col_end":71,"count":4480}]},{"line":"","counters":[]},{"line":"                    account.balance =","counters":[{"col_start":0,"col_end":37,"count":4480}]},{"line":"                        Balance::from_u64(self.rng.gen_range(1_000_000_000..u64::MAX));","counters":[{"col_start":0,"col_end":87,"count":4480}]},{"line":"                    account.nonce = Nonce::from_u32(self.rng.gen_range(0..1000));","counters":[{"col_start":0,"col_end":81,"count":4480}]},{"line":"                    account.timing = Timing::Untimed;","counters":[{"col_start":0,"col_end":53,"count":4480}]},{"line":"","counters":[]},{"line":"                    self.potential_senders.push(keypair);","counters":[{"col_start":0,"col_end":57,"count":4480}]},{"line":"                    self.ledger.create_new_account(account_id, account).unwrap();","counters":[{"col_start":0,"col_end":81,"count":4480}]},{"line":"                    break;","counters":[{"col_start":0,"col_end":25,"count":4480}]},{"line":"                }","counters":[{"col_start":17,"col_end":18,"count":4480}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_base_field(&mut self) -> Fp {","counters":[]},{"line":"        let mut bf = None;","counters":[]},{"line":"","counters":[]},{"line":"        // TODO: optimize by masking out MSBs from bytes and remove loop","counters":[]},{"line":"        while bf.is_none() {","counters":[]},{"line":"            let bytes = self.rng.gen::<[u8; 32]>();","counters":[]},{"line":"            bf = Fp::from_random_bytes_with_flags::<ark_serialize::EmptyFlags>(&bytes);","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        bf.unwrap().0","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn rnd_option<F, T>(&mut self, mut f: F) -> Option<T>","counters":[{"col_start":4,"col_end":57,"count":10}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":10}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":10}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":10}]},{"line":"        if self.rng.gen_bool(0.9) {","counters":[{"col_start":0,"col_end":33,"count":10}]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":6799}]},{"line":"        } else {","counters":[]},{"line":"            Some(f(self))","counters":[{"col_start":12,"col_end":25,"count":10}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":10}]},{"line":"","counters":[]},{"line":"    fn rnd_or_ignore<F, T>(&mut self, mut f: F) -> OrIgnore<T>","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"        if self.rng.gen_bool(0.9) {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            OrIgnore::Ignore","counters":[{"col_start":12,"col_end":28,"count":2974}]},{"line":"        } else {","counters":[]},{"line":"            OrIgnore::Check(f(self))","counters":[{"col_start":12,"col_end":36,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_set_or_keep<F, T: Clone>(&mut self, mut f: F) -> SetOrKeep<T>","counters":[{"col_start":4,"col_end":72,"count":11099}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":11099}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":11099}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":11099}]},{"line":"        if self.rng.gen_bool(0.9) {","counters":[{"col_start":0,"col_end":33,"count":11099}]},{"line":"            SetOrKeep::Keep","counters":[{"col_start":12,"col_end":27,"count":29950}]},{"line":"        } else {","counters":[]},{"line":"            SetOrKeep::Set(f(self))","counters":[{"col_start":12,"col_end":35,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":11099}]},{"line":"","counters":[]},{"line":"    fn rnd_closed_interval<F, T: MinMax>(&mut self, mut f: F) -> ClosedInterval<T>","counters":[{"col_start":4,"col_end":82,"count":4480}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":4480}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":4480}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":4480}]},{"line":"        ClosedInterval {","counters":[{"col_start":0,"col_end":24,"count":4480}]},{"line":"            lower: f(self),","counters":[{"col_start":0,"col_end":27,"count":4480}]},{"line":"            upper: f(self),","counters":[{"col_start":0,"col_end":27,"count":4480}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":4480}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":4480}]},{"line":"","counters":[]},{"line":"    fn rnd_numeric<F, T: MinMax>(&mut self, mut f: F) -> Numeric<T>","counters":[{"col_start":4,"col_end":67,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"        self.rnd_or_ignore(|x| x.rnd_closed_interval(|x| f(x)))","counters":[{"col_start":0,"col_end":27,"count":0},{"col_start":31,"col_end":53,"count":67},{"col_start":57,"col_end":61,"count":2},{"col_start":61,"col_end":62,"count":67},{"col_start":62,"col_end":63,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_signed<F, T: Magnitude + Ord>(&mut self, mut f: F) -> Signed<T>","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":4,"count":0}]},{"line":"        let sgn = if self.rng.gen_bool(0.5) {","counters":[{"col_start":12,"col_end":15,"count":0},{"col_start":21,"col_end":43,"count":0}]},{"line":"            Sgn::Pos","counters":[{"col_start":12,"col_end":20,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Sgn::Neg","counters":[{"col_start":12,"col_end":20,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        Signed::create(f(self), sgn)","counters":[{"col_start":8,"col_end":36,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_slot(&mut self) -> Slot {","counters":[{"col_start":4,"col_end":36,"count":0}]},{"line":"        Slot::from_u32(self.rng.gen_range(","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            self.txn_state_view.global_slot_since_genesis.as_u32()..Slot::max().as_u32(),","counters":[{"col_start":0,"col_end":89,"count":0}]},{"line":"        ))","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_pubkey(&mut self) -> CompressedPubKey {","counters":[{"col_start":4,"col_end":50,"count":22875866}]},{"line":"        let keypair = self","counters":[{"col_start":0,"col_end":26,"count":22875866}]},{"line":"            .potential_senders","counters":[{"col_start":0,"col_end":30,"count":22875866}]},{"line":"            .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":34,"count":22875866}]},{"line":"            .unwrap()","counters":[{"col_start":0,"col_end":21,"count":22875866}]},{"line":"            .clone();","counters":[{"col_start":0,"col_end":21,"count":22875866}]},{"line":"        keypair.public.into_compressed()","counters":[{"col_start":0,"col_end":40,"count":22875866}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":22875866}]},{"line":"","counters":[]},{"line":"    fn find_keypair(&mut self, pkey: &CompressedPubKey) -> Option<&Keypair> {","counters":[]},{"line":"        self.potential_senders","counters":[]},{"line":"            .iter()","counters":[]},{"line":"            .find(|x| x.public.into_compressed() == *pkey)","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn rnd_pubkey_new(&mut self) -> CompressedPubKey {","counters":[]},{"line":"        let keypair = gen_keypair(&mut self.rng);","counters":[]},{"line":"        let pk = keypair.public.into_compressed();","counters":[]},{"line":"","counters":[]},{"line":"        if !self","counters":[]},{"line":"            .potential_senders","counters":[]},{"line":"            .iter()","counters":[]},{"line":"            .any(|x| x.public == keypair.public)","counters":[]},{"line":"        {","counters":[]},{"line":"            self.potential_new_accounts.push(keypair)","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        pk","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn rnd_memo(&mut self) -> Memo {","counters":[{"col_start":4,"col_end":36,"count":2394731}]},{"line":"        Memo::with_number(self.rng.gen())","counters":[{"col_start":0,"col_end":41,"count":2394731}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2394731}]},{"line":"","counters":[]},{"line":"    fn account_from_pubkey(&mut self, pkey: &CompressedPubKey) -> Account {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        let account_location = self","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            .ledger","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .location_of_account(&AccountId::new(pkey.clone(), TokenId::default()));","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"","counters":[]},{"line":"        let location = account_location.unwrap();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        self.ledger.get(&location).unwrap()","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_balance_u64(&mut self, account: &Account) -> u64 {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        let balance = account.balance.as_u64();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        if balance > 1 {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            self.rng.gen_range(0..balance)","counters":[{"col_start":12,"col_end":42,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            0","counters":[{"col_start":12,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_fee(&mut self, account: &Account) -> Fee {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        Fee::from_u64(self.rnd_balance_u64(account))","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_balance(&mut self, account: &Account) -> Balance {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        Balance::from_u64(self.rnd_balance_u64(account))","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_amount(&mut self, account: &Account, fee: Fee) -> Amount {","counters":[{"col_start":4,"col_end":69,"count":0}]},{"line":"        let balance = self.rnd_balance_u64(account);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        Amount::from_u64(balance.saturating_sub(fee.as_u64()))","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_fee_payer(&mut self) -> FeePayer {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        let public_key = self.rnd_pubkey();","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        let account = self.account_from_pubkey(&public_key);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        FeePayer {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            body: FeePayerBody {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                public_key,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                fee: self.rnd_fee(&account),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                valid_until: self.rnd_option(Self::rnd_slot),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                nonce: account.nonce,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            // filled later when tx is complete","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            authorization: Signature::dummy(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_fp(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"        Fp::rand(&mut self.rng)","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_curve_point<F: Field + SquareRootField + From<i32>>(&mut self) -> (F, F) {","counters":[{"col_start":4,"col_end":85,"count":0}]},{"line":"        /*","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"            WARNING: we need to generate valid curve points to avoid binprot deserializarion","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"            exceptions in the OCaml side. However this is an expensive task.","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"            TODO: a more efficient way of doing this?","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        */","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        let mut x = F::rand(&mut self.rng);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        loop {","counters":[]},{"line":"            let y_squared = x.square().mul(x).add(Into::<F>::into(5));","counters":[{"col_start":16,"col_end":69,"count":2}]},{"line":"","counters":[]},{"line":"            if let Some(y) = y_squared.sqrt() {","counters":[{"col_start":24,"col_end":25,"count":0},{"col_start":29,"col_end":45,"count":2}]},{"line":"                return (x, y);","counters":[{"col_start":23,"col_end":29,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":2},{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            x.add_assign(F::one());","counters":[{"col_start":0,"col_end":34,"count":2}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_curve_affine(&mut self) -> CurveAffine<Fp> {","counters":[{"col_start":4,"col_end":55,"count":1}]},{"line":"        let (x, y) = self.rnd_curve_point();","counters":[{"col_start":0,"col_end":44,"count":1}]},{"line":"        CurveAffine::<Fp>(x, y)","counters":[{"col_start":0,"col_end":31,"count":1}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1}]},{"line":"","counters":[]},{"line":"    fn rnd_plonk_verification_key_evals(&mut self) -> PlonkVerificationKeyEvals {","counters":[{"col_start":4,"col_end":81,"count":0}]},{"line":"        PlonkVerificationKeyEvals {","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            sigma: array::from_fn(|_| self.rnd_curve_affine()),","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":38,"col_end":61,"count":0},{"col_start":61,"col_end":63,"count":0}]},{"line":"            coefficients: array::from_fn(|_| self.rnd_curve_affine()),","counters":[{"col_start":0,"col_end":41,"count":0},{"col_start":45,"col_end":68,"count":0},{"col_start":68,"col_end":70,"count":0}]},{"line":"            generic: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            psm: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            complete_add: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"            mul: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            emul: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            endomul_scalar: self.rnd_curve_affine(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_verification_key(&mut self) -> WithHash<VerificationKey> {","counters":[{"col_start":4,"col_end":69,"count":0}]},{"line":"        let data = VerificationKey {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            max_proofs_verified: vec![ProofVerified::N0, ProofVerified::N1, ProofVerified::N2]","counters":[{"col_start":0,"col_end":94,"count":0}]},{"line":"                .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                .unwrap()","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                .clone(),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            wrap_index: self.rnd_plonk_verification_key_evals(),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            wrap_vk: None, // TODO","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        let hash = data.digest();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"        WithHash { data, hash }","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_auth_required(&mut self) -> AuthRequired {","counters":[{"col_start":4,"col_end":53,"count":104}]},{"line":"        *vec![","counters":[{"col_start":0,"col_end":14,"count":104}]},{"line":"            AuthRequired::None,","counters":[{"col_start":0,"col_end":31,"count":104}]},{"line":"            AuthRequired::Either,","counters":[{"col_start":0,"col_end":33,"count":104}]},{"line":"            AuthRequired::Proof,","counters":[{"col_start":0,"col_end":32,"count":104}]},{"line":"            AuthRequired::Signature,","counters":[{"col_start":0,"col_end":36,"count":104}]},{"line":"            AuthRequired::Impossible,","counters":[{"col_start":0,"col_end":37,"count":104}]},{"line":"            //AuthRequired::Both,","counters":[{"col_start":0,"col_end":33,"count":104}]},{"line":"        ]","counters":[{"col_start":0,"col_end":9,"count":104}]},{"line":"        .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":30,"count":104}]},{"line":"        .unwrap()","counters":[{"col_start":0,"col_end":17,"count":104}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":104}]},{"line":"","counters":[]},{"line":"    fn rnd_permissions(&mut self) -> Permissions<AuthRequired> {","counters":[{"col_start":4,"col_end":64,"count":104}]},{"line":"        Permissions::<AuthRequired> {","counters":[{"col_start":0,"col_end":37,"count":104}]},{"line":"            edit_state: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":49,"count":104}]},{"line":"            send: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":43,"count":104}]},{"line":"            receive: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":46,"count":104}]},{"line":"            set_delegate: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":51,"count":104}]},{"line":"            set_permissions: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":54,"count":104}]},{"line":"            set_verification_key: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":59,"count":104}]},{"line":"            set_zkapp_uri: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":52,"count":104}]},{"line":"            edit_sequence_state: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":58,"count":104}]},{"line":"            set_token_symbol: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":55,"count":104}]},{"line":"            increment_nonce: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":54,"count":104}]},{"line":"            set_voting_for: self.rnd_auth_required(),","counters":[{"col_start":0,"col_end":53,"count":104}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":104}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":104}]},{"line":"","counters":[]},{"line":"    fn rnd_zkapp_uri(&mut self) -> ZkAppUri {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        /*","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"            TODO: this needs to be fixed (assign a boundary) in the protocol since it is","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"            possible to set a zkApp URI of arbitrary size.","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"            Since the field is opaque to the Mina protocol logic, randomly generating","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"            URIs makes little sense and will consume a significant amount of ledger space.","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"        */","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        ZkAppUri::new()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_token_symbol(&mut self) -> TokenSymbol {","counters":[{"col_start":4,"col_end":51,"count":0}]},{"line":"        /*","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"            TokenSymbol must be <= 6 **bytes**. This boundary doesn't exist at type-level,","counters":[{"col_start":0,"col_end":90,"count":0}]},{"line":"            instead it is check by binprot after deserializing the *string* object:","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"            https://github.com/MinaProtocol/mina/blob/develop/src/lib/mina_base/account.ml#L124","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"","counters":[]},{"line":"            We will let this function generate strings larger than 6 bytes with low probability,","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            just to cover the error handling code, but must of the time we want to avoid failing","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            this check.","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        */","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        if self.rng.gen_bool(0.9) {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            TokenSymbol::default()","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            let rnd_len = self.rng.gen_range(1..=6);","counters":[{"col_start":16,"col_end":52,"count":0}]},{"line":"            // TODO: fix n random chars for n random bytes","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            TokenSymbol(Alphanumeric.sample_string(&mut self.rng, rnd_len))","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_timing(&mut self, account: &Account) -> zkapp_command::Timing {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        let fee = self.rnd_fee(account);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let fee2 = self.rnd_fee(account);","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"        zkapp_command::Timing {","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            initial_minimum_balance: self.rnd_balance(account),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            cliff_time: self.rnd_slot(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            cliff_amount: self.rnd_amount(account, fee),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            vesting_period: self.rnd_slot(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            vesting_increment: self.rnd_amount(account, fee2),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_voting_for(&mut self) -> VotingFor {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        VotingFor(self.rnd_fp())","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_update(&mut self, account: &Account) -> Update {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        Update {","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            app_state: array::from_fn(|_| self.rnd_set_or_keep(Self::rnd_fp)),","counters":[{"col_start":0,"col_end":38,"count":0},{"col_start":42,"col_end":76,"count":0},{"col_start":76,"col_end":78,"count":0}]},{"line":"            delegate: self.rnd_set_or_keep(Self::rnd_pubkey),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            verification_key: self.rnd_set_or_keep(Self::rnd_verification_key),","counters":[{"col_start":0,"col_end":79,"count":0}]},{"line":"            permissions: self.rnd_set_or_keep(Self::rnd_permissions),","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"            zkapp_uri: self.rnd_set_or_keep(Self::rnd_zkapp_uri),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            token_symbol: self.rnd_set_or_keep(Self::rnd_token_symbol),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            timing: self.rnd_set_or_keep(|x| Self::rnd_timing(x, account)),","counters":[{"col_start":0,"col_end":41,"count":0},{"col_start":45,"col_end":73,"count":0},{"col_start":73,"col_end":75,"count":0}]},{"line":"            voting_for: self.rnd_set_or_keep(Self::rnd_voting_for),","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_events(&mut self) -> zkapp_command::Events {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        /*","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"           An Event is a list of arrays of Fp, there doesn't seem to be any limit","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"           neither in the size of the list or the array's size. The total size should","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"           be bounded by the transport protocol (currently libp2p, ~32MB).","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"           Since this field is ignored by nodes (except maybe for archive nodes), we","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"           we will generate empty events (at least for the moment).","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"        */","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        zkapp_command::Events(Vec::new())","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_sequence_events(&mut self) -> zkapp_command::SequenceEvents {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        // See comment above in rnd_events","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        zkapp_command::SequenceEvents(Vec::new())","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_block_time(&mut self) -> BlockTime {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        self.rng.gen()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_length(&mut self) -> Length {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        self.rng.gen()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_nonce(&mut self, account: &Account) -> Nonce {","counters":[{"col_start":4,"col_end":57,"count":170531489}]},{"line":"        if self.rng.gen_bool(0.9) {","counters":[{"col_start":0,"col_end":33,"count":170531489}]},{"line":"            account.nonce","counters":[{"col_start":12,"col_end":25,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            self.rng.gen()","counters":[{"col_start":12,"col_end":26,"count":170531489}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":170531489}]},{"line":"","counters":[]},{"line":"    fn rnd_epoch_data(&mut self) -> zkapp_command::EpochData {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        zkapp_command::EpochData {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            ledger: zkapp_command::EpochLedger {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                hash: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                total_currency: self.rnd_numeric(|x| x.rng.gen()),","counters":[{"col_start":0,"col_end":49,"count":0},{"col_start":53,"col_end":64,"count":0},{"col_start":64,"col_end":66,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            seed: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            start_checkpoint: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"            lock_checkpoint: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            epoch_length: self.rnd_numeric(Self::rnd_length),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_zkapp_preconditions(&mut self, account: &Account) -> zkapp_command::ZkAppPreconditions {","counters":[{"col_start":4,"col_end":99,"count":170531489}]},{"line":"        zkapp_command::ZkAppPreconditions {","counters":[{"col_start":0,"col_end":43,"count":170531489}]},{"line":"            snarked_ledger_hash: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":66,"count":170531489}]},{"line":"            timestamp: self.rnd_numeric(Self::rnd_block_time),","counters":[{"col_start":0,"col_end":62,"count":170531489}]},{"line":"            blockchain_length: self.rnd_numeric(Self::rnd_length),","counters":[{"col_start":0,"col_end":66,"count":170531489}]},{"line":"            min_window_density: self.rnd_numeric(Self::rnd_length),","counters":[{"col_start":0,"col_end":67,"count":170531489}]},{"line":"            last_vrf_output: (),","counters":[{"col_start":0,"col_end":32,"count":170531489}]},{"line":"            total_currency: self.rnd_numeric(|x| Self::rnd_amount(x, account, Fee::from_u64(0))),","counters":[{"col_start":0,"col_end":45,"count":170531489},{"col_start":49,"col_end":95,"count":170531489},{"col_start":95,"col_end":97,"count":170531489}]},{"line":"            global_slot_since_hard_fork: self.rnd_numeric(Self::rnd_slot),","counters":[{"col_start":0,"col_end":74,"count":170531489}]},{"line":"            global_slot_since_genesis: self.rnd_numeric(Self::rnd_slot),","counters":[{"col_start":0,"col_end":72,"count":170531489}]},{"line":"            staking_epoch_data: self.rnd_epoch_data(),","counters":[{"col_start":0,"col_end":54,"count":170531489}]},{"line":"            next_epoch_data: self.rnd_epoch_data(),","counters":[{"col_start":0,"col_end":51,"count":170531489}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":170531489}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":170531489}]},{"line":"","counters":[]},{"line":"    fn rnd_account(&mut self, account: &Account) -> zkapp_command::Account {","counters":[{"col_start":4,"col_end":76,"count":0}]},{"line":"        zkapp_command::Account {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            balance: self.rnd_numeric(|x| Self::rnd_balance(x, account)),","counters":[{"col_start":0,"col_end":38,"count":0},{"col_start":42,"col_end":71,"count":0},{"col_start":71,"col_end":73,"count":0}]},{"line":"            nonce: self.rnd_numeric(|x| Self::rnd_nonce(x, account)),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":67,"count":170531489},{"col_start":67,"col_end":69,"count":0}]},{"line":"            receipt_chain_hash: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"            delegate: self.rnd_or_ignore(Self::rnd_pubkey),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            state: array::from_fn(|_| self.rnd_or_ignore(Self::rnd_fp)),","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":38,"col_end":70,"count":0},{"col_start":70,"col_end":72,"count":0}]},{"line":"            sequence_state: self.rnd_or_ignore(Self::rnd_fp),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            proved_state: self.rnd_or_ignore(|x| x.rng.gen_bool(0.1)),","counters":[{"col_start":0,"col_end":45,"count":0},{"col_start":49,"col_end":68,"count":10081079},{"col_start":68,"col_end":70,"count":0}]},{"line":"            is_new: self.rnd_or_ignore(|x| x.rng.gen_bool(0.1)),","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":43,"col_end":62,"count":2129537},{"col_start":62,"col_end":64,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_account_preconditions(&mut self, account: &Account) -> AccountPreconditions {","counters":[{"col_start":4,"col_end":88,"count":0}]},{"line":"        match vec![0, 1, 2].choose(&mut self.rng).unwrap() {","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            0 => AccountPreconditions::Accept,","counters":[{"col_start":17,"col_end":45,"count":-2129537}]},{"line":"            1 => AccountPreconditions::Nonce(self.rnd_nonce(account)),","counters":[{"col_start":17,"col_end":69,"count":0}]},{"line":"            _ => AccountPreconditions::Full(Box::new(self.rnd_account(account))),","counters":[{"col_start":17,"col_end":80,"count":2129537}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_preconditions(&mut self, account: &Account) -> zkapp_command::Preconditions {","counters":[{"col_start":4,"col_end":88,"count":0}]},{"line":"        zkapp_command::Preconditions {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            network: self.rnd_zkapp_preconditions(account),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            account: self.rnd_account_preconditions(account),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_authorization(&mut self) -> zkapp_command::AuthorizationKind {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        vec![","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"            zkapp_command::AuthorizationKind::NoneGiven,","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            zkapp_command::AuthorizationKind::Signature,","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            zkapp_command::AuthorizationKind::Proof,","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        ]","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        .unwrap()","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        .clone()","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_wrap_challenges_vector(","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    ) -> PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2AChallenge {","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"        PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2AChallenge {","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            inner: PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":44,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                LimbVectorConstantHex64StableV1(Number(self.rng.gen()))","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            })),","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":16,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_proof_state(&mut self) -> PicklesProofProofsVerified2ReprStableV2StatementProofState {","counters":[{"col_start":4,"col_end":97,"count":2129537}]},{"line":"        PicklesProofProofsVerified2ReprStableV2StatementProofState {","counters":[{"col_start":0,"col_end":68,"count":2129537}]},{"line":"            deferred_values:","counters":[{"col_start":0,"col_end":28,"count":2129537}]},{"line":"                PicklesProofProofsVerified2ReprStableV2StatementProofStateDeferredValues {","counters":[{"col_start":0,"col_end":90,"count":2129537}]},{"line":"                    plonk: PicklesProofProofsVerified2ReprStableV2StatementPlonk {","counters":[{"col_start":0,"col_end":82,"count":2129537}]},{"line":"                        alpha: self.rnd_wrap_challenges_vector(),","counters":[{"col_start":0,"col_end":65,"count":2129537}]},{"line":"                        beta: PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":55,"count":2129537},{"col_start":59,"col_end":60,"count":0}]},{"line":"                            LimbVectorConstantHex64StableV1(Number(self.rng.gen()))","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                        })),","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":25,"col_end":28,"count":2129537}]},{"line":"                        gamma: PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":56,"count":2129537},{"col_start":60,"col_end":61,"count":0}]},{"line":"                            LimbVectorConstantHex64StableV1(Number(self.rng.gen()))","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"                        })),","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":25,"col_end":28,"count":2129537}]},{"line":"                        zeta: self.rnd_wrap_challenges_vector(),","counters":[{"col_start":0,"col_end":64,"count":2129537}]},{"line":"                        joint_combiner: self.rnd_option(|x| Self::rnd_wrap_challenges_vector(x)),","counters":[{"col_start":0,"col_end":56,"count":2129537},{"col_start":60,"col_end":95,"count":2129537},{"col_start":95,"col_end":97,"count":2129537}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":2129537}]},{"line":"                    combined_inner_product:","counters":[{"col_start":0,"col_end":43,"count":2129537}]},{"line":"                        PicklesProofProofsVerified2ReprStableV2StatementFp::ShiftedValue(","counters":[{"col_start":0,"col_end":89,"count":2129537}]},{"line":"                            mina_p2p_messages::bigint::BigInt::from(self.rnd_fp()),","counters":[{"col_start":0,"col_end":83,"count":2129537}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":26,"count":2129537}]},{"line":"                    b: PicklesProofProofsVerified2ReprStableV2StatementFp::ShiftedValue(","counters":[{"col_start":0,"col_end":88,"count":2129537}]},{"line":"                        mina_p2p_messages::bigint::BigInt::from(self.rnd_fp()),","counters":[{"col_start":0,"col_end":79,"count":2129537}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":2129537}]},{"line":"                    xi: self.rnd_wrap_challenges_vector(),","counters":[{"col_start":0,"col_end":58,"count":2129537}]},{"line":"                    bulletproof_challenges: PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":69,"count":2129537},{"col_start":73,"col_end":74,"count":0}]},{"line":"                        PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2A {","counters":[{"col_start":0,"col_end":102,"count":0}]},{"line":"                            prechallenge: self.rnd_wrap_challenges_vector()","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"                        }","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    })),","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":21,"col_end":24,"count":2129537}]},{"line":"                    branch_data: CompositionTypesBranchDataStableV1 {","counters":[{"col_start":0,"col_end":69,"count":2129537}]},{"line":"                        proofs_verified: (vec![","counters":[{"col_start":0,"col_end":47,"count":2129537}]},{"line":"                            PicklesBaseProofsVerifiedStableV1::N0,","counters":[{"col_start":0,"col_end":66,"count":2129537}]},{"line":"                            PicklesBaseProofsVerifiedStableV1::N1,","counters":[{"col_start":0,"col_end":66,"count":2129537}]},{"line":"                            PicklesBaseProofsVerifiedStableV1::N2,","counters":[{"col_start":0,"col_end":66,"count":2129537}]},{"line":"                        ]","counters":[{"col_start":0,"col_end":25,"count":2129537}]},{"line":"                        .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":46,"count":2129537}]},{"line":"                        .unwrap()","counters":[{"col_start":0,"col_end":33,"count":2129537}]},{"line":"                        .clone(),),","counters":[{"col_start":0,"col_end":35,"count":2129537}]},{"line":"                        domain_log2: CompositionTypesBranchDataDomainLog2StableV1(","counters":[{"col_start":0,"col_end":82,"count":2129537}]},{"line":"                            mina_p2p_messages::char::Char(self.rng.gen()),","counters":[{"col_start":0,"col_end":74,"count":2129537}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":26,"count":2129537}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":2129537}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":2129537}]},{"line":"            sponge_digest_before_evaluations: CompositionTypesDigestConstantStableV1(PaddedSeq(","counters":[{"col_start":0,"col_end":95,"count":2129537}]},{"line":"                array::from_fn(|_| LimbVectorConstantHex64StableV1(Number(self.rng.gen()))),","counters":[{"col_start":0,"col_end":31,"count":2129537},{"col_start":35,"col_end":90,"count":0},{"col_start":90,"col_end":92,"count":2129537}]},{"line":"            )),","counters":[{"col_start":0,"col_end":15,"count":2129537}]},{"line":"            messages_for_next_wrap_proof:","counters":[{"col_start":0,"col_end":41,"count":2129537}]},{"line":"                PicklesProofProofsVerified2ReprStableV2MessagesForNextWrapProof {","counters":[{"col_start":0,"col_end":81,"count":2129537}]},{"line":"                    challenge_polynomial_commitment: self","counters":[{"col_start":0,"col_end":57,"count":2129537}]},{"line":"                        .rnd_curve_point::<Fq>()","counters":[{"col_start":0,"col_end":48,"count":2129537}]},{"line":"                        .map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":70,"count":2129537}]},{"line":"                    old_bulletproof_challenges: PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":73,"count":2129537},{"col_start":77,"col_end":78,"count":0}]},{"line":"                        PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2(","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                            PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":53,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"                                PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2A {","counters":[{"col_start":0,"col_end":110,"count":0}]},{"line":"                                        prechallenge: self.rnd_wrap_challenges_vector()","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                                    }","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            })),","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":29,"col_end":32,"count":0}]},{"line":"                        )","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    })),","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":21,"col_end":24,"count":2129537}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":2129537}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":2129537}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2129537}]},{"line":"","counters":[]},{"line":"    fn rnd_vec<F, T>(&mut self, mut f: F, size: usize) -> Vec<T>","counters":[{"col_start":4,"col_end":64,"count":20166859}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":20166859}]},{"line":"        F: FnMut(&mut Self) -> T,","counters":[{"col_start":0,"col_end":33,"count":20166859}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":20166859}]},{"line":"        //let size = self.rng.gen_range(0..=max_size);","counters":[{"col_start":0,"col_end":54,"count":20166859}]},{"line":"        iter::repeat_with(|| f(self)).take(size).collect()","counters":[{"col_start":0,"col_end":26,"count":20166859},{"col_start":29,"col_end":36,"count":101985},{"col_start":36,"col_end":58,"count":20166859}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":20166859}]},{"line":"","counters":[]},{"line":"    fn rnd_proof(&mut self) -> zkapp_command::SideLoadedProof {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        let proof = PicklesProofProofsVerifiedMaxStableV2 {","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"            statement: PicklesProofProofsVerified2ReprStableV2Statement {","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                proof_state: self.rnd_proof_state(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                messages_for_next_step_proof: PicklesProofProofsVerified2ReprStableV2MessagesForNextStepProof {","counters":[{"col_start":0,"col_end":111,"count":0}]},{"line":"                    app_state: (),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                    challenge_polynomial_commitments: self.rnd_vec(","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                        |x| {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":29,"count":6799}]},{"line":"                            x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from)","counters":[{"col_start":0,"col_end":98,"count":6799}]},{"line":"                        },","counters":[{"col_start":0,"col_end":25,"count":6799},{"col_start":25,"col_end":26,"count":0}]},{"line":"                        1","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    old_bulletproof_challenges: self.rnd_vec(","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                        |x| {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":29,"count":6799}]},{"line":"                            PaddedSeq(array::from_fn(|_| {","counters":[{"col_start":0,"col_end":53,"count":6799},{"col_start":57,"col_end":58,"count":0}]},{"line":"                                PicklesReducedMessagesForNextProofOverSameFieldWrapChallengesVectorStableV2A {","counters":[{"col_start":0,"col_end":110,"count":0}]},{"line":"                                        prechallenge: x.rnd_wrap_challenges_vector()","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                                    }","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            }))","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":29,"col_end":31,"count":6799}]},{"line":"                        },","counters":[{"col_start":0,"col_end":25,"count":6799},{"col_start":25,"col_end":26,"count":0}]},{"line":"                        1","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    )","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            prev_evals: PicklesProofProofsVerified2ReprStableV2PrevEvals {","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                evals: PicklesProofProofsVerified2ReprStableV2PrevEvalsEvals {","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                    public_input: self.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":108,"count":0}]},{"line":"                    evals: PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvals {","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                        w: PaddedSeq(","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            array::from_fn(|_| self.rnd_vec(","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":47,"col_end":60,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":101985},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip()","counters":[{"col_start":53,"col_end":53,"count":0},{"col_start":0,"col_end":53,"count":0}]},{"line":"                        )),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                        z: self.rnd_vec(","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        s: PaddedSeq(","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            array::from_fn(|_| self.rnd_vec(","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":47,"col_end":60,"count":0}]},{"line":"                                |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":106,"count":40794},{"col_start":106,"col_end":107,"count":0}]},{"line":"                                1","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            ).into_iter().unzip()","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":0,"col_end":49,"count":0}]},{"line":"                        )),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                        generic_selector: self.rnd_vec(","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        poseidon_selector: self.rnd_vec(","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        lookup: self.rnd_option(|x| {","counters":[{"col_start":0,"col_end":48,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"                            PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvalsLookupA {","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                                sorted: x.rnd_vec(|x| x.rnd_vec(","counters":[{"col_start":0,"col_end":50,"count":0},{"col_start":54,"col_end":64,"count":672}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":672},{"col_start":40,"col_end":110,"count":672},{"col_start":110,"col_end":111,"count":672}]},{"line":"                                   1","counters":[{"col_start":0,"col_end":36,"count":672}]},{"line":"                                ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":53,"count":672},{"col_start":53,"col_end":54,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                aggreg: x.rnd_vec(","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":672},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                table: x.rnd_vec(","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":672},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                runtime: x.rnd_option(|x| x.rnd_vec(","counters":[{"col_start":0,"col_end":54,"count":0},{"col_start":58,"col_end":68,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":68},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip())","counters":[{"col_start":0,"col_end":53,"count":0},{"col_start":53,"col_end":54,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":25,"col_end":26,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                ft_eval1:  mina_p2p_messages::bigint::BigInt::from(self.rnd_fp())","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            proof: PicklesProofProofsVerified2ReprStableV2Proof {","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                messages: PicklesProofProofsVerified2ReprStableV2ProofMessages {","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                    w_comm: PaddedSeq(","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                        array::from_fn(|_| {","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"                            self.rnd_vec(","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                                |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":106,"count":101985},{"col_start":106,"col_end":107,"count":0}]},{"line":"                                1","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            )","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        }","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":0,"col_end":25,"count":0}]},{"line":"                        )","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    z_comm: self.rnd_vec(","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":98,"count":6799},{"col_start":98,"col_end":99,"count":0}]},{"line":"                        1","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    t_comm: self.rnd_vec(","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":28,"col_end":98,"count":6799},{"col_start":98,"col_end":99,"count":0}]},{"line":"                        1","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    ),","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    lookup: self.rnd_option(|x| {","counters":[{"col_start":0,"col_end":44,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                        PicklesProofProofsVerified2ReprStableV2ProofMessagesLookupA {","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"                            sorted: x.rnd_vec(","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                                |x| x.rnd_vec(","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":46,"count":689}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":689},{"col_start":40,"col_end":110,"count":689},{"col_start":110,"col_end":111,"count":689}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":689}]},{"line":"                                ),","counters":[{"col_start":0,"col_end":33,"count":689},{"col_start":33,"col_end":34,"count":0}]},{"line":"                                1","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            ),","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                            aggreg: x.rnd_vec(","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                                    |x|x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":39,"col_end":109,"count":689},{"col_start":109,"col_end":110,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                            runtime: x.rnd_option(","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                                |x| x.rnd_vec(","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":46,"count":0}]},{"line":"                                    |x|x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":39,"col_end":109,"count":82},{"col_start":109,"col_end":110,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                )","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":0,"col_end":33,"count":0}]},{"line":"                            )","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        }","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    })","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":21,"col_end":22,"count":0}]},{"line":"                },","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                openings: PicklesProofProofsVerified2ReprStableV2ProofOpenings {","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                    proof: PicklesProofProofsVerified2ReprStableV2ProofOpeningsProof {","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"                        lr: self.rnd_vec(","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                            |x| {","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":33,"count":6799}]},{"line":"                                (","counters":[{"col_start":0,"col_end":33,"count":6799}]},{"line":"                                    x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":107,"count":6799}]},{"line":"                                    x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from)","counters":[{"col_start":0,"col_end":106,"count":6799}]},{"line":"                                )","counters":[{"col_start":0,"col_end":33,"count":6799}]},{"line":"                            },","counters":[{"col_start":0,"col_end":29,"count":6799},{"col_start":29,"col_end":30,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ),","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                        z_1: mina_p2p_messages::bigint::BigInt::from(self.rnd_fp()),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                        z_2: mina_p2p_messages::bigint::BigInt::from(self.rnd_fp()),","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                        delta: self.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":105,"count":0}]},{"line":"                        challenge_polynomial_commitment: self.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from)","counters":[{"col_start":0,"col_end":130,"count":0}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    evals: PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvals {","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                        w: PaddedSeq(","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            array::from_fn(|_| self.rnd_vec(","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":47,"col_end":60,"count":5938}]},{"line":"                                |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":32,"count":5938},{"col_start":36,"col_end":106,"count":101985},{"col_start":106,"col_end":107,"count":5938}]},{"line":"                                1","counters":[{"col_start":0,"col_end":33,"count":5938}]},{"line":"                            ).into_iter().unzip()","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":0,"col_end":49,"count":5938}]},{"line":"                        )),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                        z: self.rnd_vec(","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        s: PaddedSeq(","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                            array::from_fn(|_| self.rnd_vec(","counters":[{"col_start":0,"col_end":43,"count":0},{"col_start":47,"col_end":60,"count":0}]},{"line":"                                |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":106,"count":40794},{"col_start":106,"col_end":107,"count":0}]},{"line":"                                1","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            ).into_iter().unzip()","counters":[{"col_start":49,"col_end":49,"count":0},{"col_start":0,"col_end":49,"count":0}]},{"line":"                        )),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                        generic_selector: self.rnd_vec(","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        poseidon_selector: self.rnd_vec(","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                            |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":32,"col_end":102,"count":6799},{"col_start":102,"col_end":103,"count":0}]},{"line":"                            1","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                        lookup: self.rnd_option(|x| {","counters":[{"col_start":0,"col_end":48,"count":0},{"col_start":52,"col_end":53,"count":0}]},{"line":"                            PicklesProofProofsVerified2ReprStableV2PrevEvalsEvalsEvalsLookupA {","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"                                sorted: x.rnd_vec(","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                                    |x| x.rnd_vec(","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":50,"count":674}]},{"line":"                                        |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":40,"count":674},{"col_start":44,"col_end":114,"count":674},{"col_start":114,"col_end":115,"count":674}]},{"line":"                                        1","counters":[{"col_start":0,"col_end":41,"count":674}]},{"line":"                                    ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":57,"count":674},{"col_start":57,"col_end":58,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                                aggreg: x.rnd_vec(","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":674},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                table: x.rnd_vec(","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                                    |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":110,"count":674},{"col_start":110,"col_end":111,"count":0}]},{"line":"                                    1","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                                ).into_iter().unzip(),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                runtime: x.rnd_option(","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                                    |x| x.rnd_vec(","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":40,"col_end":50,"count":0}]},{"line":"                                        |x| x.rnd_curve_point::<Fp>().map(mina_p2p_messages::bigint::BigInt::from),","counters":[{"col_start":0,"col_end":40,"count":0},{"col_start":44,"col_end":114,"count":64},{"col_start":114,"col_end":115,"count":0}]},{"line":"                                        1","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                                    ).into_iter().unzip()","counters":[{"col_start":57,"col_end":57,"count":0},{"col_start":0,"col_end":57,"count":0}]},{"line":"                                )","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                            }","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        })","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":25,"col_end":26,"count":0}]},{"line":"                    },","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                    ft_eval1: mina_p2p_messages::bigint::BigInt::from(self.rnd_fp())","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        Rc::new(proof)","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_control(&mut self) -> zkapp_command::Control {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        match vec![0, 1, 2].choose(&mut self.rng).unwrap() {","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            0 => zkapp_command::Control::NoneGiven,","counters":[{"col_start":17,"col_end":50,"count":0}]},{"line":"            // TODO: calculate signature after building the transaction","counters":[]},{"line":"            1 => zkapp_command::Control::Signature(Signature::dummy()),","counters":[{"col_start":17,"col_end":70,"count":0}]},{"line":"            _ => zkapp_command::Control::Proof(self.rnd_proof()),","counters":[{"col_start":17,"col_end":64,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_account_update(&mut self) -> AccountUpdate {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        let public_key = self.rnd_pubkey();","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        let account = self.account_from_pubkey(&public_key);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        AccountUpdate {","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            body: zkapp_command::Body {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                public_key,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                token_id: TokenId::default(), // TODO: randomize","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                update: self.rnd_update(&account),","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                balance_change: self","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                    .rnd_signed(|x| Self::rnd_amount(x, &account, Fee::from_u64(0))),","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":36,"col_end":83,"count":0},{"col_start":83,"col_end":85,"count":0}]},{"line":"                increment_nonce: self.rng.gen_bool(0.9),","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                events: self.rnd_events(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                sequence_events: self.rnd_sequence_events(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                call_data: self.rnd_fp(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                preconditions: self.rnd_preconditions(&account),","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                use_full_commitment: self.rng.gen_bool(0.5),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                caller: TokenId::default(), // TODO: randomize (MinaBaseAccountUpdateCallTypeStableV1)","counters":[{"col_start":0,"col_end":102,"count":0}]},{"line":"                authorization_kind: self.rnd_authorization(),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            authorization: self.rnd_control(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_forest(&mut self) -> zkapp_command::CallForest<AccountUpdate> {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        let mut forest = zkapp_command::CallForest::<AccountUpdate>::new();","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        let count = self.rng.gen_range(0..8);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        //let count = 2;","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"        for _ in 0..count {","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":26,"col_end":27,"count":0}]},{"line":"            let calls = if self.rng.gen_bool(0.8) {","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":27,"col_end":49,"count":0}]},{"line":"                None","counters":[{"col_start":16,"col_end":20,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                Some(self.rnd_forest())","counters":[{"col_start":16,"col_end":39,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            forest = forest.cons(calls, self.rnd_account_update());","counters":[{"col_start":21,"col_end":66,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        //println!(\"rnd_forest len {}\", forest.0.len());","counters":[]},{"line":"        forest","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn rnd_zkapp_command(&mut self) -> ZkAppCommand {","counters":[{"col_start":4,"col_end":53,"count":25152}]},{"line":"        let fee_payer = self.rnd_fee_payer();","counters":[{"col_start":0,"col_end":45,"count":25152}]},{"line":"        let account_updates = self.rnd_forest();","counters":[{"col_start":0,"col_end":48,"count":25152}]},{"line":"        let memo = self.rnd_memo();","counters":[{"col_start":0,"col_end":35,"count":25152}]},{"line":"","counters":[]},{"line":"        ZkAppCommand {","counters":[{"col_start":0,"col_end":22,"count":25152}]},{"line":"            fee_payer,","counters":[{"col_start":0,"col_end":22,"count":25152}]},{"line":"            account_updates,","counters":[{"col_start":0,"col_end":28,"count":25152}]},{"line":"            memo,","counters":[{"col_start":0,"col_end":17,"count":25152}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":25152}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":25152}]},{"line":"","counters":[]},{"line":"    fn rnd_payment_tx(&mut self) -> SignedCommand {","counters":[]},{"line":"        let fee_payer_pk = self.rnd_pubkey();","counters":[]},{"line":"        let account = self.account_from_pubkey(&fee_payer_pk);","counters":[]},{"line":"        let fee = self.rnd_fee(&account);","counters":[]},{"line":"        let valid_until = self.rnd_option(Self::rnd_slot);","counters":[]},{"line":"        let memo = self.rnd_memo();","counters":[]},{"line":"        let receiver_pk = if self.rng.gen_bool(0.8) {","counters":[]},{"line":"            // use existing account","counters":[]},{"line":"            self.rnd_pubkey()","counters":[]},{"line":"        } else {","counters":[]},{"line":"            // create new account","counters":[]},{"line":"            self.rnd_pubkey_new()","counters":[]},{"line":"        };","counters":[]},{"line":"        let amount = self.rnd_amount(&account, fee);","counters":[]},{"line":"","counters":[]},{"line":"        new_payment_tx(","counters":[]},{"line":"            self.find_keypair(&fee_payer_pk).unwrap(),","counters":[]},{"line":"            fee,","counters":[]},{"line":"            fee_payer_pk,","counters":[]},{"line":"            account.nonce,","counters":[]},{"line":"            valid_until,","counters":[]},{"line":"            memo,","counters":[]},{"line":"            receiver_pk,","counters":[]},{"line":"            amount,","counters":[]},{"line":"        )","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn apply_transaction(&mut self, tx: &Transaction) -> Result<TransactionApplied, String> {","counters":[{"col_start":4,"col_end":93,"count":1697670}]},{"line":"        apply_transaction(","counters":[{"col_start":0,"col_end":26,"count":1697670}]},{"line":"            &self.constraint_constants,","counters":[{"col_start":0,"col_end":39,"count":1697670}]},{"line":"            &self.txn_state_view,","counters":[{"col_start":0,"col_end":33,"count":1697670}]},{"line":"            &mut self.ledger,","counters":[{"col_start":0,"col_end":29,"count":1697670}]},{"line":"            &tx,","counters":[{"col_start":0,"col_end":16,"count":1697670}]},{"line":"        )","counters":[{"col_start":0,"col_end":9,"count":1697670}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1697670}]},{"line":"","counters":[]},{"line":"    fn rnd_transaction(&mut self) -> Transaction {","counters":[{"col_start":4,"col_end":50,"count":23241422}]},{"line":"        let zkapp_command = self.rnd_zkapp_command();","counters":[{"col_start":0,"col_end":53,"count":23241422}]},{"line":"        Transaction::Command(UserCommand::ZkAppCommand(Box::new(zkapp_command)))","counters":[{"col_start":0,"col_end":80,"count":23241422}]},{"line":"","counters":[]},{"line":"        //let signed_command = self.rnd_payment_tx();","counters":[{"col_start":0,"col_end":53,"count":23241422}]},{"line":"        //Transaction::Command(UserCommand::SignedCommand(Box::new(signed_command)))","counters":[{"col_start":0,"col_end":84,"count":23241422}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":23241422}]},{"line":"","counters":[]},{"line":"    fn get_ledger_root(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":41,"count":1108150}]},{"line":"        self.ledger.merkle_root()","counters":[{"col_start":0,"col_end":33,"count":1108150}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":1108150}]},{"line":"","counters":[]},{"line":"    fn get_ledger_accounts(&self) -> Vec<Account> {","counters":[{"col_start":4,"col_end":51,"count":0}]},{"line":"        let locations = self.ledger.account_locations();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        locations","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|x| self.ledger.get(x).unwrap())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":48,"count":1427324},{"col_start":48,"col_end":49,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"ocaml_export! {","counters":[]},{"line":"    fn rust_transaction_fuzzer(","counters":[]},{"line":"        rt,","counters":[]},{"line":"        set_initial_accounts_method: OCamlRef<fn(OCamlBytes) -> OCamlBytes>,","counters":[]},{"line":"        apply_transaction_method: OCamlRef<fn(OCamlBytes) -> OCamlBytes>,","counters":[]},{"line":"        get_coverage_method: OCamlRef<fn(OCamlBytes) -> OCamlList<(OCamlBytes, OCamlList<OCamlInt64>, OCamlList<OCamlInt64>)>>,","counters":[]},{"line":"    ) {","counters":[]},{"line":"        let mut cov = Cov::new();","counters":[]},{"line":"        let file_counters = cov.get_file_counters();","counters":[]},{"line":"        cov.dump();","counters":[]},{"line":"","counters":[]},{"line":"        println!(\"Rust called\");","counters":[]},{"line":"        let mut ctx = FuzzerCtx::new(0, CONSTRAINT_CONSTANTS);","counters":[]},{"line":"","counters":[]},{"line":"        println!(\"New context\");","counters":[]},{"line":"        ctx.create_inital_accounts(10);","counters":[]},{"line":"","counters":[]},{"line":"        println!(\"Initial accounts\");","counters":[]},{"line":"        let initial_accounts = serialize(&ctx.get_ledger_accounts());","counters":[]},{"line":"        let ocaml_method = set_initial_accounts_method.to_boxroot(rt);","counters":[]},{"line":"        let rust_ledger_root_hash = ctx.get_ledger_root();","counters":[]},{"line":"","counters":[]},{"line":"        println!(\"calling set_initial_accounts (OCaml)\");","counters":[]},{"line":"        // Duplicate initial accounts in the OCaml side","counters":[]},{"line":"        let ocaml_ledger_root_hash: OCaml<OCamlBytes> = ocaml_method.try_call(rt, &initial_accounts).unwrap();","counters":[]},{"line":"        let x: Vec<u8> = ocaml_ledger_root_hash.to_rust();","counters":[]},{"line":"        let mut ocaml_ledger_root_hash = Fp::from(deserialize::<LedgerHash>(x.as_slice()).0.clone());","counters":[]},{"line":"","counters":[]},{"line":"        println!(\"Initial ledger hash =>\\n  Rust: {:?}\\n  OCaml: {:?}\", rust_ledger_root_hash, ocaml_ledger_root_hash);","counters":[]},{"line":"        assert!(ocaml_ledger_root_hash == rust_ledger_root_hash);","counters":[]},{"line":"        let mut iter_num = 0;","counters":[]},{"line":"        let mut cov_stats = CoverageStats::empty();","counters":[]},{"line":"","counters":[]},{"line":"        loop {","counters":[]},{"line":"            if (iter_num % 100) == 0 {","counters":[]},{"line":"                let ocaml_method = get_coverage_method.to_boxroot(rt);","counters":[]},{"line":"                let bisect_dump = Vec::<(String, Vec::<i64>, Vec::<i64>)>::from_ocaml(ocaml_method.try_call(rt, &Vec::new()).unwrap());","counters":[]},{"line":"                let caml_cov_stats = Stats::from_bisect_dump(&bisect_dump);","counters":[]},{"line":"                let rust_cov_stats = Stats::from_file_counters(&file_counters);","counters":[]},{"line":"","counters":[]},{"line":"                if cov_stats.ocaml.is_none() || caml_cov_stats.has_coverage_increased(&cov_stats.ocaml.unwrap()) {","counters":[]},{"line":"                    let report_ocaml = CoverageReport::from_bisect_dump(&bisect_dump);","counters":[]},{"line":"                    //println!(\"{}\", report_ocaml);","counters":[]},{"line":"                    println!(\"Saving coverage report (OCaml)\");","counters":[]},{"line":"                    report_ocaml.write_files(\"ocaml\".to_string());","counters":[]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"                if cov_stats.rust.is_none() || rust_cov_stats.has_coverage_increased(&cov_stats.rust.unwrap()) {","counters":[]},{"line":"                    let llvm_dump = cov.dump();","counters":[]},{"line":"                    let report_rust = CoverageReport::from_llvm_dump(&llvm_dump);","counters":[]},{"line":"                    //println!(\"{}\", report_rust);","counters":[]},{"line":"                    println!(\"Saving coverage report (Rust)\");","counters":[]},{"line":"                    report_rust.write_files(\"rust\".to_string());","counters":[]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"                cov_stats = CoverageStats::new(rust_cov_stats, caml_cov_stats);","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            println!(\"Iteration {}\", iter_num);","counters":[]},{"line":"            cov_stats.print();","counters":[]},{"line":"            iter_num += 1;","counters":[]},{"line":"            let tx = ctx.rnd_transaction();","counters":[]},{"line":"            //println!(\"tx {:?}\", tx);","counters":[]},{"line":"","counters":[]},{"line":"            /*","counters":[]},{"line":"                We don't have generated types for Transaction, but we have one","counters":[]},{"line":"                for UserCommand (MinaBaseUserCommandStableV2). Extract and","counters":[]},{"line":"                serialize the inner UserCommand and let a OCaml wrapper build","counters":[]},{"line":"                the transaction.","counters":[]},{"line":"            */","counters":[]},{"line":"            let user_command = match &tx {","counters":[]},{"line":"                Transaction::Command(user_command) => serialize(user_command),","counters":[]},{"line":"                _ => unimplemented!()","counters":[]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            let ocaml_method = apply_transaction_method.to_boxroot(rt);","counters":[]},{"line":"            match ocaml_method.try_call(rt, &user_command) {","counters":[]},{"line":"                Ok(ledger_root_hash) => {","counters":[]},{"line":"                    let x: Vec<u8> = ledger_root_hash.to_rust();","counters":[]},{"line":"                    let root_hash_deserialized = deserialize::<LedgerHash>(x.as_slice()).0.clone();","counters":[]},{"line":"                    ocaml_ledger_root_hash = Fp::from(root_hash_deserialized);","counters":[]},{"line":"","counters":[]},{"line":"                }","counters":[]},{"line":"                Err(e) => {","counters":[]},{"line":"                    println!(\"Error: {:?}\", e);","counters":[]},{"line":"                    panic!()","counters":[]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            let applied = ctx.apply_transaction(&tx);","counters":[]},{"line":"            //println!(\"tx: {:?} applied: {:?}\", tx, applied);","counters":[]},{"line":"            //println!(\"applied: {:?}\", applied);","counters":[]},{"line":"","counters":[]},{"line":"            // Add new accounts created by the transaction to the potential senders list","counters":[]},{"line":"            if applied.is_ok() {","counters":[]},{"line":"                let new_accounts = match applied.unwrap().varying {","counters":[]},{"line":"                    Varying::Command(command) => {","counters":[]},{"line":"                        match command {","counters":[]},{"line":"                            CommandApplied::SignedCommand(cmd) => {","counters":[]},{"line":"                                match cmd.body {","counters":[]},{"line":"                                    signed_command_applied::Body::Payments { new_accounts } => Some(new_accounts),","counters":[]},{"line":"                                    _ => None","counters":[]},{"line":"                                }","counters":[]},{"line":"                            },","counters":[]},{"line":"                            CommandApplied::ZkappCommand(cmd) => {","counters":[]},{"line":"                                Some(cmd.new_accounts)","counters":[]},{"line":"                            }","counters":[]},{"line":"                        }","counters":[]},{"line":"                    },","counters":[]},{"line":"                    _ => unimplemented!()","counters":[]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                if let Some(new_accounts) = new_accounts {","counters":[]},{"line":"                    let new_accounts = ctx.potential_new_accounts","counters":[]},{"line":"                    .iter()","counters":[]},{"line":"                    .filter(|kp| new_accounts.iter().any(|acc| acc.public_key == kp.public.into_compressed()));","counters":[{"col_start":33,"col_end":57,"count":0},{"col_start":63,"col_end":108,"count":0},{"col_start":108,"col_end":109,"count":0}]},{"line":"","counters":[]},{"line":"                    for acc in new_accounts {","counters":[]},{"line":"                        if !ctx","counters":[]},{"line":"                        .potential_senders","counters":[]},{"line":"                        .iter()","counters":[]},{"line":"                        .any(|x| x.public == acc.public)","counters":[{"col_start":33,"col_end":55,"count":0}]},{"line":"                        {","counters":[]},{"line":"                          ctx.potential_senders.push(acc.clone())","counters":[]},{"line":"                        }","counters":[]},{"line":"                    }","counters":[]},{"line":"","counters":[]},{"line":"                    ctx.potential_new_accounts.clear();","counters":[]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"            let rust_ledger_root_hash = ctx.get_ledger_root();","counters":[]},{"line":"","counters":[]},{"line":"            println!(\"ledger hash =>\\n  Rust: {:?}\\n  OCaml: {:?}\", rust_ledger_root_hash, ocaml_ledger_root_hash);","counters":[]},{"line":"            if ocaml_ledger_root_hash != rust_ledger_root_hash {","counters":[]},{"line":"                std::process::exit(-1)","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        OCaml::unit()","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"}","counters":[]}]}