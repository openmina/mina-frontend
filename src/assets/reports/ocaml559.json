{"filename":"src/lib/mina_base/transaction_union_tag.ml","lines":[{"line":"(* transaction_union_tag.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%else]","counters":[]},{"line":"","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[{"col_start":0,"col_end":0,"count":6}]},{"line":"  | Payment","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Stake_delegation","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Create_account","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Mint_tokens","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Fee_transfer","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Coinbase","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"[@@deriving enum, equal, sexp]","counters":[]},{"line":"","counters":[]},{"line":"let to_string = function","counters":[]},{"line":"  | Payment ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"payment\"","counters":[]},{"line":"  | Stake_delegation ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"delegation\"","counters":[]},{"line":"  | Create_account ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"create_account\"","counters":[]},{"line":"  | Mint_tokens ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"mint_tokens\"","counters":[]},{"line":"  | Fee_transfer ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"fee-transfer\"","counters":[]},{"line":"  | Coinbase ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      \"coinbase\"","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  Quickcheck.Generator.map (Int.gen_incl min max) ~f:(fun i ->","counters":[{"col_start":25,"col_end":25,"count":1},{"col_start":39,"col_end":39,"count":1}]},{"line":"      Option.value_exn (of_enum i) )","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"module Bits = struct","counters":[]},{"line":"  type t = bool * bool * bool [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let of_int i : t =","counters":[]},{"line":"    let test_mask mask = i land mask = mask in","counters":[{"col_start":4,"col_end":4,"count":6},{"col_start":25,"col_end":25,"count":18}]},{"line":"    (test_mask 0b100, test_mask 0b10, test_mask 0b1)","counters":[{"col_start":13,"col_end":13,"count":6},{"col_start":30,"col_end":30,"count":6},{"col_start":46,"col_end":46,"count":6}]},{"line":"","counters":[]},{"line":"  let of_t x = of_int (to_enum x)","counters":[{"col_start":15,"col_end":15,"count":6},{"col_start":29,"col_end":29,"count":6}]},{"line":"","counters":[]},{"line":"  let payment = of_t Payment","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"","counters":[]},{"line":"  let stake_delegation = of_t Stake_delegation","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"","counters":[]},{"line":"  let create_account = of_t Create_account","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"  let mint_tokens = of_t Mint_tokens","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"  let fee_transfer = of_t Fee_transfer","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"  let coinbase = of_t Coinbase","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"  let to_bits (b1, b2, b3) = [ b1; b2; b3 ]","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input_legacy t = Random_oracle.Input.Legacy.bitstring (to_bits t)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = Boolean.var * Boolean.var * Boolean.var","counters":[]},{"line":"","counters":[]},{"line":"  let typ = Typ.tuple3 Boolean.typ Boolean.typ Boolean.typ","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"","counters":[]},{"line":"  let constant (b1, b2, b3) =","counters":[]},{"line":"    Boolean.(var_of_value b1, var_of_value b2, var_of_value b3)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Unpacked = struct","counters":[]},{"line":"  (* Invariant: exactly one of the tag identifiers must be true. *)","counters":[]},{"line":"  module Poly = struct","counters":[]},{"line":"    type 'bool t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { is_payment : 'bool","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; is_stake_delegation : 'bool","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      ; is_create_account : 'bool","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; is_mint_tokens : 'bool","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      ; is_fee_transfer : 'bool","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      ; is_coinbase : 'bool","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ; is_user_command : 'bool","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving equal, hlist]","counters":[]},{"line":"","counters":[]},{"line":"    [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"    let typ (bool : ('bool_var, 'bool) Typ.t) : ('bool_var t, 'bool t) Typ.t =","counters":[]},{"line":"      Typ.of_hlistable","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        [ bool; bool; bool; bool; bool; bool; bool ]","counters":[]},{"line":"        ~var_to_hlist:to_hlist ~var_of_hlist:of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"        ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"    [%%endif]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  type t = bool Poly.t [@@deriving equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"  (* An invalid value with all types empty. Do not use directly. *)","counters":[]},{"line":"  let empty : t =","counters":[]},{"line":"    { is_payment = false","counters":[]},{"line":"    ; is_stake_delegation = false","counters":[]},{"line":"    ; is_create_account = false","counters":[]},{"line":"    ; is_mint_tokens = false","counters":[]},{"line":"    ; is_fee_transfer = false","counters":[]},{"line":"    ; is_coinbase = false","counters":[]},{"line":"    ; is_user_command = false","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let payment = { empty with is_payment = true; is_user_command = true }","counters":[]},{"line":"","counters":[]},{"line":"  let stake_delegation =","counters":[]},{"line":"    { empty with is_stake_delegation = true; is_user_command = true }","counters":[]},{"line":"","counters":[]},{"line":"  let create_account =","counters":[]},{"line":"    { empty with is_create_account = true; is_user_command = true }","counters":[]},{"line":"","counters":[]},{"line":"  let mint_tokens = { empty with is_mint_tokens = true; is_user_command = true }","counters":[]},{"line":"","counters":[]},{"line":"  let fee_transfer =","counters":[]},{"line":"    { empty with is_fee_transfer = true; is_user_command = false }","counters":[]},{"line":"","counters":[]},{"line":"  let coinbase = { empty with is_coinbase = true; is_user_command = false }","counters":[]},{"line":"","counters":[]},{"line":"  let of_bits_t (bits : Bits.t) : t =","counters":[]},{"line":"    match","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.Assoc.find ~equal:Bits.equal","counters":[]},{"line":"        [ (Bits.payment, payment)","counters":[]},{"line":"        ; (Bits.stake_delegation, stake_delegation)","counters":[]},{"line":"        ; (Bits.create_account, create_account)","counters":[]},{"line":"        ; (Bits.mint_tokens, mint_tokens)","counters":[]},{"line":"        ; (Bits.fee_transfer, fee_transfer)","counters":[]},{"line":"        ; (Bits.coinbase, coinbase)","counters":[]},{"line":"        ]","counters":[]},{"line":"        bits","counters":[]},{"line":"    with","counters":[]},{"line":"    | Some t ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        t","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        raise (Invalid_argument \"Transaction_union_tag.Unpacked.of_bits_t\")","counters":[]},{"line":"","counters":[]},{"line":"  let to_bits_t (t : t) : Bits.t =","counters":[]},{"line":"    match","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.Assoc.find ~equal","counters":[]},{"line":"        [ (payment, Bits.payment)","counters":[]},{"line":"        ; (stake_delegation, Bits.stake_delegation)","counters":[]},{"line":"        ; (create_account, Bits.create_account)","counters":[]},{"line":"        ; (mint_tokens, Bits.mint_tokens)","counters":[]},{"line":"        ; (fee_transfer, Bits.fee_transfer)","counters":[]},{"line":"        ; (coinbase, Bits.coinbase)","counters":[]},{"line":"        ]","counters":[]},{"line":"        t","counters":[]},{"line":"    with","counters":[]},{"line":"    | Some bits ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        bits","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        raise (Invalid_argument \"Transaction_union_tag.Unpacked.to_bits_t\")","counters":[]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = Boolean.var Poly.t","counters":[]},{"line":"","counters":[]},{"line":"  let to_bits_var","counters":[]},{"line":"      ({ is_payment","counters":[]},{"line":"       ; is_stake_delegation","counters":[]},{"line":"       ; is_create_account","counters":[]},{"line":"       ; is_mint_tokens","counters":[]},{"line":"       ; is_fee_transfer","counters":[]},{"line":"       ; is_coinbase","counters":[]},{"line":"       ; is_user_command = _","counters":[]},{"line":"       } :","counters":[]},{"line":"        var ) =","counters":[]},{"line":"    (* For each bit, compute the sum of all the tags for which that bit is true","counters":[]},{"line":"       in its bit representation.","counters":[]},{"line":"","counters":[]},{"line":"       Since we have the invariant that exactly one tag identifier is true,","counters":[]},{"line":"       exactly the bits in that tag's bit representation will be true in the","counters":[]},{"line":"       resulting bits.","counters":[]},{"line":"    *)","counters":[]},{"line":"    let b1, b2, b3 =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      List.fold","counters":[]},{"line":"        ~init:Field.(Var.(constant zero, constant zero, constant zero))","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        [ (Bits.payment, is_payment)","counters":[]},{"line":"        ; (Bits.stake_delegation, is_stake_delegation)","counters":[]},{"line":"        ; (Bits.create_account, is_create_account)","counters":[]},{"line":"        ; (Bits.mint_tokens, is_mint_tokens)","counters":[]},{"line":"        ; (Bits.fee_transfer, is_fee_transfer)","counters":[]},{"line":"        ; (Bits.coinbase, is_coinbase)","counters":[]},{"line":"        ]","counters":[]},{"line":"        ~f:(fun (acc1, acc2, acc3) ((bit1, bit2, bit3), bool_var) ->","counters":[]},{"line":"          let add_if_true bit acc =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if bit then Field.Var.add acc (bool_var :> Field.Var.t) else acc","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"          in","counters":[]},{"line":"          (add_if_true bit1 acc1, add_if_true bit2 acc2, add_if_true bit3 acc3)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"          )","counters":[]},{"line":"    in","counters":[]},{"line":"    Boolean.Unsafe.(of_cvar b1, of_cvar b2, of_cvar b3)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  let typ : (var, t) Typ.t =","counters":[]},{"line":"    let (Typ base_typ) = Poly.typ Boolean.typ in","counters":[]},{"line":"    Typ","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      { base_typ with","counters":[]},{"line":"        check =","counters":[]},{"line":"          (fun ( { is_payment","counters":[]},{"line":"                 ; is_stake_delegation","counters":[]},{"line":"                 ; is_create_account","counters":[]},{"line":"                 ; is_mint_tokens","counters":[]},{"line":"                 ; is_fee_transfer","counters":[]},{"line":"                 ; is_coinbase","counters":[]},{"line":"                 ; is_user_command","counters":[]},{"line":"                 } as t ) ->","counters":[]},{"line":"            let open Checked.Let_syntax in","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            make_checked_ast","counters":[]},{"line":"            @@ let%bind () = run_checked_ast @@ base_typ.check t in","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"               let%bind () =","counters":[]},{"line":"                 [%with_label_ \"Only one tag is set\"] (fun () ->","counters":[{"col_start":51,"col_end":51,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"                     Boolean.Assert.exactly_one","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                       [ is_payment","counters":[]},{"line":"                       ; is_stake_delegation","counters":[]},{"line":"                       ; is_create_account","counters":[]},{"line":"                       ; is_mint_tokens","counters":[]},{"line":"                       ; is_fee_transfer","counters":[]},{"line":"                       ; is_coinbase","counters":[]},{"line":"                       ] )","counters":[]},{"line":"               in","counters":[]},{"line":"               [%with_label_ \"User command flag is correctly set\"] (fun () ->","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":64,"col_end":64,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"                   Boolean.Assert.exactly_one","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                     [ is_user_command; is_fee_transfer; is_coinbase ] ) )","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"  let constant","counters":[]},{"line":"      ({ is_payment","counters":[]},{"line":"       ; is_stake_delegation","counters":[]},{"line":"       ; is_create_account","counters":[]},{"line":"       ; is_mint_tokens","counters":[]},{"line":"       ; is_fee_transfer","counters":[]},{"line":"       ; is_coinbase","counters":[]},{"line":"       ; is_user_command","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) : var =","counters":[]},{"line":"    { is_payment = Boolean.var_of_value is_payment","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    ; is_stake_delegation = Boolean.var_of_value is_stake_delegation","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"    ; is_create_account = Boolean.var_of_value is_create_account","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; is_mint_tokens = Boolean.var_of_value is_mint_tokens","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    ; is_fee_transfer = Boolean.var_of_value is_fee_transfer","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    ; is_coinbase = Boolean.var_of_value is_coinbase","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"    ; is_user_command = Boolean.var_of_value is_user_command","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let is_payment ({ is_payment; _ } : var) = is_payment","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let is_stake_delegation ({ is_stake_delegation; _ } : var) =","counters":[]},{"line":"    is_stake_delegation","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let is_create_account ({ is_create_account; _ } : var) = is_create_account","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"  let is_mint_tokens ({ is_mint_tokens; _ } : var) = is_mint_tokens","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"  let is_fee_transfer ({ is_fee_transfer; _ } : var) = is_fee_transfer","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let is_coinbase ({ is_coinbase; _ } : var) = is_coinbase","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let is_user_command ({ is_user_command; _ } : var) = is_user_command","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let to_bits t = Bits.to_bits (to_bits_var t)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input_legacy t = Random_oracle.Input.Legacy.bitstring (to_bits t)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let unpacked_t_of_t = function","counters":[]},{"line":"  | Payment ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.payment","counters":[]},{"line":"  | Stake_delegation ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.stake_delegation","counters":[]},{"line":"  | Create_account ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.create_account","counters":[]},{"line":"  | Mint_tokens ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.mint_tokens","counters":[]},{"line":"  | Fee_transfer ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.fee_transfer","counters":[]},{"line":"  | Coinbase ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Unpacked.coinbase","counters":[]},{"line":"","counters":[]},{"line":"let to_bits tag = Bits.to_bits (Unpacked.to_bits_t (unpacked_t_of_t tag))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"let to_input_legacy tag = Random_oracle.Input.Legacy.bitstring (to_bits tag)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"let t_of_unpacked_t (unpacked : Unpacked.t) : t =","counters":[]},{"line":"  match","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.Assoc.find ~equal:Unpacked.equal","counters":[]},{"line":"      [ (Unpacked.payment, Payment)","counters":[]},{"line":"      ; (Unpacked.stake_delegation, Stake_delegation)","counters":[]},{"line":"      ; (Unpacked.create_account, Create_account)","counters":[]},{"line":"      ; (Unpacked.mint_tokens, Mint_tokens)","counters":[]},{"line":"      ; (Unpacked.fee_transfer, Fee_transfer)","counters":[]},{"line":"      ; (Unpacked.coinbase, Coinbase)","counters":[]},{"line":"      ]","counters":[]},{"line":"      unpacked","counters":[]},{"line":"  with","counters":[]},{"line":"  | Some t ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      t","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      raise (Invalid_argument \"Transaction_union_tag.t_of_unpacked_t\")","counters":[]},{"line":"","counters":[]},{"line":"let bits_t_of_t tag = Unpacked.to_bits_t (unpacked_t_of_t tag)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"let t_of_bits_t tag = t_of_unpacked_t (Unpacked.of_bits_t tag)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"let unpacked_of_t tag = Unpacked.constant (unpacked_t_of_t tag)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"let bits_of_t tag = Bits.constant (bits_t_of_t tag)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"let unpacked_typ =","counters":[]},{"line":"  Typ.transport Unpacked.typ ~there:unpacked_t_of_t ~back:t_of_unpacked_t","counters":[{"col_start":14,"col_end":14,"count":1}]},{"line":"","counters":[]},{"line":"let bits_typ = Typ.transport Bits.typ ~there:bits_t_of_t ~back:t_of_bits_t","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"let%test_module \"predicates\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    let test_predicate checked unchecked =","counters":[]},{"line":"      let checked x = Checked.return (checked x) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      for i = min to max do","counters":[]},{"line":"        Test_util.test_equal unpacked_typ Boolean.typ checked unchecked","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          (Option.value_exn (of_enum i))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      done","counters":[]},{"line":"","counters":[]},{"line":"    let one_of xs t = List.mem xs ~equal t","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_payment\" =","counters":[]},{"line":"      test_predicate Unpacked.is_payment (equal Payment)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_stake_delegation\" =","counters":[]},{"line":"      test_predicate Unpacked.is_stake_delegation (equal Stake_delegation)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_create_account\" =","counters":[]},{"line":"      test_predicate Unpacked.is_create_account (equal Create_account)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_mint_tokens\" =","counters":[]},{"line":"      test_predicate Unpacked.is_mint_tokens (equal Mint_tokens)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_fee_transfer\" =","counters":[]},{"line":"      test_predicate Unpacked.is_fee_transfer (equal Fee_transfer)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_coinbase\" =","counters":[]},{"line":"      test_predicate Unpacked.is_coinbase (equal Coinbase)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"is_user_command\" =","counters":[]},{"line":"      test_predicate Unpacked.is_user_command","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (one_of [ Payment; Stake_delegation; Create_account; Mint_tokens ])","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"not_user_command\" =","counters":[]},{"line":"      test_predicate","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (fun x -> Boolean.not (Unpacked.is_user_command x))","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        (one_of [ Fee_transfer; Coinbase ])","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"    let%test_unit \"bit_representation\" =","counters":[]},{"line":"      for i = min to max do","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Test_util.test_equal unpacked_typ Bits.typ","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          (Fn.compose Checked.return Unpacked.to_bits_var)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"          bits_t_of_t","counters":[]},{"line":"          (Option.value_exn (of_enum i))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      done","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}