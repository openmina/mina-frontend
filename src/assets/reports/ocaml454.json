{"filename":"src/lib/merkle_ledger/intf.ml","lines":[{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"module type Key = sig","counters":[]},{"line":"  type t [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V1 : sig","counters":[]},{"line":"      type t [@@deriving sexp, bin_io]","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Latest = V1","counters":[]},{"line":"  end","counters":[]},{"line":"  with type V1.t = t","counters":[]},{"line":"","counters":[]},{"line":"  val empty : t","counters":[]},{"line":"","counters":[]},{"line":"  val to_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Token_id = sig","counters":[]},{"line":"  type t [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module Latest : sig","counters":[]},{"line":"      type t [@@deriving bin_io]","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"  with type Latest.t = t","counters":[]},{"line":"","counters":[]},{"line":"  val default : t","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S_binable with type t := t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Account_id = sig","counters":[]},{"line":"  type key","counters":[]},{"line":"","counters":[]},{"line":"  type token_id","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned:","counters":[]},{"line":"  module Stable : sig","counters":[]},{"line":"    module V2 : sig","counters":[]},{"line":"      type t [@@deriving sexp, bin_io]","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"  (* [@@deriving bin_io_unversioned, sexp, equal, compare, hash, yojson] *)","counters":[]},{"line":"","counters":[]},{"line":"  val public_key : t -> key","counters":[]},{"line":"","counters":[]},{"line":"  val token_id : t -> token_id","counters":[]},{"line":"","counters":[]},{"line":"  val create : key -> token_id -> t","counters":[]},{"line":"","counters":[]},{"line":"  val derive_token_id : owner:t -> token_id","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  include Comparable.S with type t := t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Balance = sig","counters":[]},{"line":"  type t [@@deriving equal]","counters":[]},{"line":"","counters":[]},{"line":"  val zero : t","counters":[]},{"line":"","counters":[]},{"line":"  val to_int : t -> int","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Account = sig","counters":[]},{"line":"  type t [@@deriving bin_io, equal, sexp, compare]","counters":[]},{"line":"","counters":[]},{"line":"  type token_id","counters":[]},{"line":"","counters":[]},{"line":"  type account_id","counters":[]},{"line":"","counters":[]},{"line":"  type balance","counters":[]},{"line":"","counters":[]},{"line":"  val token : t -> token_id","counters":[]},{"line":"","counters":[]},{"line":"  val identifier : t -> account_id","counters":[]},{"line":"","counters":[]},{"line":"  val balance : t -> balance","counters":[]},{"line":"","counters":[]},{"line":"  val token_owner : t -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val empty : t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Hash = sig","counters":[]},{"line":"  type t = Snark_params.Tick.Field.t","counters":[]},{"line":"  [@@deriving bin_io, compare, equal, sexp, yojson]","counters":[]},{"line":"","counters":[]},{"line":"  val to_base58_check : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.S_binable with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  type account","counters":[]},{"line":"","counters":[]},{"line":"  val merge : height:int -> t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val hash_account : account -> t","counters":[]},{"line":"","counters":[]},{"line":"  val empty_account : t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Depth = sig","counters":[]},{"line":"  val depth : int","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Key_value_database = sig","counters":[]},{"line":"  type t [@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"  type config","counters":[]},{"line":"","counters":[]},{"line":"  include","counters":[]},{"line":"    Key_value_database.Intf.Ident","counters":[]},{"line":"      with type t := t","counters":[]},{"line":"       and type key := Bigstring.t","counters":[]},{"line":"       and type value := Bigstring.t","counters":[]},{"line":"       and type config := config","counters":[]},{"line":"","counters":[]},{"line":"  val create_checkpoint : t -> string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val make_checkpoint : t -> string -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val get_uuid : t -> Uuid.t","counters":[]},{"line":"","counters":[]},{"line":"  val set_batch :","counters":[]},{"line":"       t","counters":[]},{"line":"    -> ?remove_keys:Bigstring.t list","counters":[]},{"line":"    -> key_data_pairs:(Bigstring.t * Bigstring.t) list","counters":[]},{"line":"    -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val to_alist : t -> (Bigstring.t * Bigstring.t) list","counters":[]},{"line":"","counters":[]},{"line":"  (* an association list, sorted by key *)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Storage_locations = sig","counters":[]},{"line":"  val key_value_db_dir : string","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}