{"filename":"src/tree.rs","lines":[{"line":"use std::{collections::BTreeMap, fmt::Debug};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    address::Address,","counters":[]},{"line":"    base::AccountIndex,","counters":[]},{"line":"    tree_version::{TreeVersion, V2},","counters":[]},{"line":"};","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[]},{"line":"struct Leaf<T: TreeVersion> {","counters":[]},{"line":"    account: Option<Box<T::Account>>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(PartialEq)]","counters":[]},{"line":"pub struct HashesMatrix {","counters":[]},{"line":"    /// 2 dimensions matrix","counters":[]},{"line":"    // matrix: Vec<Option<Fp>>,","counters":[]},{"line":"    matrix: BTreeMap<u64, Fp>,","counters":[]},{"line":"    empty_hashes: Vec<Option<Fp>>,","counters":[]},{"line":"    ledger_depth: usize,","counters":[]},{"line":"    nhashes: usize,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Clone for HashesMatrix {","counters":[]},{"line":"    fn clone(&self) -> Self {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            matrix: self.matrix.clone(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            empty_hashes: self.empty_hashes.clone(),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            ledger_depth: self.ledger_depth,","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            nhashes: self.nhashes,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Debug for HashesMatrix {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        // const SPACES: &[usize] = &[","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        //     0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192,","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"        // ];","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"        // let mut s = String::with_capacity(self.matrix.len() * 2);","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        // let mut spaces = SPACES;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        // let mut current = 0;","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        // let naccounts = 2u64.pow(self.ledger_depth as u32) as usize;","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"        // for h in self.matrix.iter() {","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        //     let c = if h.is_some() { 'I' } else { '0' };","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"        //     s.push(c);","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"        //     if current == spaces[0] && current != naccounts {","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        //         s.push(' ');","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        //         current = 0;","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        //         spaces = &spaces[1..];","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        //     }","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"        //     current += 1;","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        // }","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"        f.debug_struct(\"HashesMatrix\")","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            // .field(\"matrix\", &s)","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            .field(\"matrix_len\", &self.matrix.len())","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            // .field(\"real_matrix\", &real)","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            // .field(\"empty_hashes\", &self.empty_hashes)","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            // .field(\"ledger_depth\", &self.ledger_depth)","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"            .field(\"nhashes\", &self.nhashes)","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            // .field(\"capacity\", &self.matrix.capacity())","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"            .finish()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl HashesMatrix {","counters":[]},{"line":"    pub fn new(ledger_depth: usize) -> Self {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        // let capacity = 2 * 2usize.pow(ledger_depth as u32) - 1;","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            // matrix: vec![None; capacity],","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            matrix: BTreeMap::new(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            ledger_depth,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            empty_hashes: vec![None; ledger_depth],","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            nhashes: 0,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get(&self, addr: &Address) -> Option<&Fp> {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        let linear = addr.to_linear_index();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        // self.matrix.get(linear)?.as_ref()","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        let linear: u64 = linear.try_into().unwrap();","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        self.matrix.get(&linear)","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn set(&mut self, addr: &Address, hash: Fp) {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        let linear = addr.to_linear_index();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        // if self.matrix.len() <= linear {","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        //     self.matrix.resize(linear + 1, None);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        // }","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"","counters":[]},{"line":"        // assert!(self.matrix[linear].is_none());","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        // self.matrix[linear] = Some(hash);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        let linear: u64 = linear.try_into().unwrap();","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        let old = self.matrix.insert(linear, hash);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        assert!(old.is_none());","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        self.nhashes += 1;","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn remove(&mut self, addr: &Address) {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let linear = addr.to_linear_index();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        self.remove_at_index(linear);","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove_at_index(&mut self, index: usize) {","counters":[{"col_start":4,"col_end":49,"count":4}]},{"line":"        let linear: u64 = index.try_into().unwrap();","counters":[{"col_start":0,"col_end":52,"count":4}]},{"line":"        let old = self.matrix.remove(&linear);","counters":[{"col_start":0,"col_end":46,"count":4}]},{"line":"        if old.is_some() {","counters":[{"col_start":0,"col_end":24,"count":4},{"col_start":25,"col_end":26,"count":0}]},{"line":"            self.nhashes -= 1;","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":4}]},{"line":"","counters":[]},{"line":"        // let hash = match self.matrix.get_mut(index) {","counters":[]},{"line":"        //     Some(hash) => hash,","counters":[]},{"line":"        //     None => return,","counters":[]},{"line":"        // };","counters":[]},{"line":"","counters":[]},{"line":"        // if hash.is_some() {","counters":[]},{"line":"        //     self.nhashes -= 1;","counters":[]},{"line":"        //     *hash = None;","counters":[]},{"line":"        // }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":4}]},{"line":"","counters":[]},{"line":"    pub fn invalidate_hashes(&mut self, account_index: AccountIndex) {","counters":[{"col_start":4,"col_end":70,"count":0}]},{"line":"        let mut addr = Address::from_index(account_index, self.ledger_depth);","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"","counters":[]},{"line":"        loop {","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"            let index = addr.to_linear_index();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            self.remove_at_index(index);","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            addr = match addr.parent() {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                Some(addr) => addr,","counters":[{"col_start":21,"col_end":34,"count":0}]},{"line":"                None => break,","counters":[{"col_start":24,"col_end":30,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty_hash_at_depth(&mut self, depth: usize) -> Fp {","counters":[]},{"line":"        if let Some(Some(hash)) = self.empty_hashes.get(depth) {","counters":[{"col_start":25,"col_end":29,"count":0},{"col_start":34,"col_end":62,"count":0}]},{"line":"            return *hash;","counters":[{"col_start":19,"col_end":24,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let hash = V2::empty_hash_at_depth(depth);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        self.empty_hashes[depth] = Some(hash);","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"        hash","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn clear(&mut self) {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        let ledger_depth = self.ledger_depth;","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        // let capacity = 2 * 2usize.pow(ledger_depth as u32) - 1;","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"        *self = Self {","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            // matrix: vec![None; capacity],","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            matrix: BTreeMap::new(),","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            ledger_depth,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            empty_hashes: vec![None; ledger_depth],","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            nhashes: 0,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        // self.matrix.clear();","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        // self.empty_hashes.clear();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        // self.nhashes = 0;","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"// #[derive(Clone)]","counters":[]},{"line":"// pub struct Database<T: TreeVersion> {","counters":[]},{"line":"//     accounts: Vec<Option<T::Account>>,","counters":[]},{"line":"//     pub hashes_matrix: HashesMatrix,","counters":[]},{"line":"//     id_to_addr: HashMap<AccountId, Address>,","counters":[]},{"line":"//     token_to_account: HashMap<T::TokenId, AccountId>,","counters":[]},{"line":"//     depth: u8,","counters":[]},{"line":"//     last_location: Option<Address>,","counters":[]},{"line":"//     naccounts: usize,","counters":[]},{"line":"//     uuid: Uuid,","counters":[]},{"line":"//     directory: PathBuf,","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// impl<T: TreeVersion> Debug for Database<T> {","counters":[]},{"line":"//     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[]},{"line":"//         f.debug_struct(\"Database\")","counters":[]},{"line":"//             // .field(\"accounts\", &self.accounts)","counters":[]},{"line":"//             .field(\"hashes_matrix\", &self.hashes_matrix)","counters":[]},{"line":"//             // .field(\"id_to_addr\", &self.id_to_addr)","counters":[]},{"line":"//             // .field(\"token_to_account\", &self.token_to_account)","counters":[]},{"line":"//             // .field(\"depth\", &self.depth)","counters":[]},{"line":"//             // .field(\"last_location\", &self.last_location)","counters":[]},{"line":"//             .field(\"naccounts\", &self.naccounts)","counters":[]},{"line":"//             .field(\"uuid\", &self.uuid)","counters":[]},{"line":"//             .field(\"directory\", &self.directory)","counters":[]},{"line":"//             .finish()","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// #[derive(Debug, PartialEq, Eq)]","counters":[]},{"line":"// pub enum DatabaseError {","counters":[]},{"line":"//     OutOfLeaves,","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// impl Database<V2> {","counters":[]},{"line":"//     pub fn clone_db(&self, new_directory: PathBuf) -> Self {","counters":[]},{"line":"//         Self {","counters":[]},{"line":"//             // root: self.root.clone(),","counters":[]},{"line":"//             accounts: self.accounts.clone(),","counters":[]},{"line":"//             id_to_addr: self.id_to_addr.clone(),","counters":[]},{"line":"//             token_to_account: self.token_to_account.clone(),","counters":[]},{"line":"//             depth: self.depth,","counters":[]},{"line":"//             last_location: self.last_location.clone(),","counters":[]},{"line":"//             naccounts: self.naccounts,","counters":[]},{"line":"//             uuid: next_uuid(),","counters":[]},{"line":"//             directory: new_directory,","counters":[]},{"line":"//             hashes_matrix: HashesMatrix::new(self.depth as usize),","counters":[]},{"line":"//             // root_hash: RefCell::new(*self.root_hash.borrow()),","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn remove(&mut self, addr: Address) -> Option<Account> {","counters":[]},{"line":"//         let index = addr.to_index();","counters":[]},{"line":"//         let index: usize = index.0 as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         if let Some(account) = self.accounts.get_mut(index) {","counters":[]},{"line":"//             return account.take();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         None","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn create_account(","counters":[]},{"line":"//         &mut self,","counters":[]},{"line":"//         account_id: AccountId,","counters":[]},{"line":"//         account: Account,","counters":[]},{"line":"//     ) -> Result<GetOrCreated, DatabaseError> {","counters":[]},{"line":"//         // if self.root.is_none() {","counters":[]},{"line":"//         //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"//         // }","counters":[]},{"line":"","counters":[]},{"line":"//         if let Some(addr) = self.id_to_addr.get(&account_id).cloned() {","counters":[]},{"line":"//             return Ok(GetOrCreated::Existed(addr));","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let token_id = account.token_id.clone();","counters":[]},{"line":"//         let location = match self.last_location.as_ref() {","counters":[]},{"line":"//             Some(last) => last.next().ok_or(DatabaseError::OutOfLeaves)?,","counters":[]},{"line":"//             None => Address::first(self.depth as usize),","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(location.to_index(), self.accounts.len());","counters":[]},{"line":"//         self.accounts.push(Some(account));","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = self.root.as_mut().unwrap();","counters":[]},{"line":"//         // root.add_account_on_path(account, location.iter());","counters":[]},{"line":"","counters":[]},{"line":"//         self.last_location = Some(location.clone());","counters":[]},{"line":"//         self.naccounts += 1;","counters":[]},{"line":"","counters":[]},{"line":"//         self.token_to_account.insert(token_id, account_id.clone());","counters":[]},{"line":"//         self.id_to_addr.insert(account_id, location.clone());","counters":[]},{"line":"","counters":[]},{"line":"//         // self.root_hash.borrow_mut().take();","counters":[]},{"line":"","counters":[]},{"line":"//         Ok(GetOrCreated::Added(location))","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     pub fn iter_with_addr<F>(&self, mut fun: F)","counters":[]},{"line":"//     where","counters":[]},{"line":"//         F: FnMut(Address, &Account),","counters":[]},{"line":"//     {","counters":[]},{"line":"//         let depth = self.depth as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         for (index, account) in self.accounts.iter().enumerate() {","counters":[]},{"line":"//             let account = match account {","counters":[]},{"line":"//                 Some(account) => account,","counters":[]},{"line":"//                 None => continue,","counters":[]},{"line":"//             };","counters":[]},{"line":"","counters":[]},{"line":"//             let addr = Address::from_index(index.into(), depth);","counters":[]},{"line":"//             fun(addr, account);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn emulate_tree_to_get_hash_at(&mut self, addr: Address) -> Fp {","counters":[]},{"line":"//         if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//             return *hash;","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         // let tree_depth = self.depth() as usize;","counters":[]},{"line":"//         // let mut children = addr.iter_children(tree_depth);","counters":[]},{"line":"","counters":[]},{"line":"//         // // First child","counters":[]},{"line":"//         // let first_account_index = children.next().unwrap().to_index().0 as u64;","counters":[]},{"line":"//         // let mut nremaining = self","counters":[]},{"line":"//         //     .naccounts()","counters":[]},{"line":"//         //     .saturating_sub(first_account_index as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         let last_account = self","counters":[]},{"line":"//             .last_filled()","counters":[]},{"line":"//             .unwrap_or_else(|| Address::first(self.depth as usize));","counters":[]},{"line":"","counters":[]},{"line":"//         self.emulate_tree_recursive(addr, &last_account)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // fn emulate_recursive(&mut self, addr: Address, nremaining: &mut usize) -> Fp {","counters":[]},{"line":"//     fn emulate_tree_recursive(&mut self, addr: Address, last_account: &Address) -> Fp {","counters":[]},{"line":"//         let tree_depth = self.depth as usize;","counters":[]},{"line":"//         let current_depth = tree_depth - addr.length();","counters":[]},{"line":"","counters":[]},{"line":"//         if current_depth == 0 {","counters":[]},{"line":"//             return self","counters":[]},{"line":"//                 .get_account_hash(addr.to_index())","counters":[]},{"line":"//                 .unwrap_or_else(|| self.hashes_matrix.empty_hash_at_depth(0));","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let mut get_child_hash = |addr: Address| {","counters":[]},{"line":"//             if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//                 *hash","counters":[]},{"line":"//             } else if addr.is_before(last_account) {","counters":[]},{"line":"//                 self.emulate_tree_recursive(addr, last_account)","counters":[]},{"line":"//             } else {","counters":[]},{"line":"//                 self.hashes_matrix.empty_hash_at_depth(current_depth - 1)","counters":[]},{"line":"//             }","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         let left_hash = get_child_hash(addr.child_left());","counters":[]},{"line":"//         let right_hash = get_child_hash(addr.child_right());","counters":[]},{"line":"","counters":[]},{"line":"//         match self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//             Some(hash) => *hash,","counters":[]},{"line":"//             None => {","counters":[]},{"line":"//                 let hash = V2::hash_node(current_depth - 1, left_hash, right_hash);","counters":[]},{"line":"//                 self.hashes_matrix.set(&addr, hash);","counters":[]},{"line":"//                 hash","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn emulate_tree_to_get_path(","counters":[]},{"line":"//         &mut self,","counters":[]},{"line":"//         addr: Address,","counters":[]},{"line":"//         last_account: &Address,","counters":[]},{"line":"//         path: &mut AddressIterator,","counters":[]},{"line":"//         merkle_path: &mut Vec<MerklePath>,","counters":[]},{"line":"//     ) -> Fp {","counters":[]},{"line":"//         let tree_depth = self.depth as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         if addr.length() == self.depth as usize {","counters":[]},{"line":"//             return self","counters":[]},{"line":"//                 .get_account_hash(addr.to_index())","counters":[]},{"line":"//                 .unwrap_or_else(|| self.hashes_matrix.empty_hash_at_depth(0));","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let next_direction = path.next();","counters":[]},{"line":"","counters":[]},{"line":"//         // We go until the end of the path","counters":[]},{"line":"//         if let Some(direction) = next_direction.as_ref() {","counters":[]},{"line":"//             let child = match direction {","counters":[]},{"line":"//                 Direction::Left => addr.child_left(),","counters":[]},{"line":"//                 Direction::Right => addr.child_right(),","counters":[]},{"line":"//             };","counters":[]},{"line":"//             self.emulate_tree_to_get_path(child, last_account, path, merkle_path);","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         let depth_in_tree = tree_depth - addr.length();","counters":[]},{"line":"","counters":[]},{"line":"//         let mut get_child_hash = |addr: Address| match self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//             Some(hash) => *hash,","counters":[]},{"line":"//             None => {","counters":[]},{"line":"//                 if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//                     *hash","counters":[]},{"line":"//                 } else if addr.is_before(last_account) {","counters":[]},{"line":"//                     self.emulate_tree_to_get_path(addr, last_account, path, merkle_path)","counters":[]},{"line":"//                 } else {","counters":[]},{"line":"//                     self.hashes_matrix.empty_hash_at_depth(depth_in_tree - 1)","counters":[]},{"line":"//                 }","counters":[]},{"line":"//             }","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         let left = get_child_hash(addr.child_left());","counters":[]},{"line":"//         let right = get_child_hash(addr.child_right());","counters":[]},{"line":"","counters":[]},{"line":"//         if let Some(direction) = next_direction {","counters":[]},{"line":"//             let hash = match direction {","counters":[]},{"line":"//                 Direction::Left => MerklePath::Left(right),","counters":[]},{"line":"//                 Direction::Right => MerklePath::Right(left),","counters":[]},{"line":"//             };","counters":[]},{"line":"//             merkle_path.push(hash);","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         match self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//             Some(hash) => *hash,","counters":[]},{"line":"//             None => {","counters":[]},{"line":"//                 let hash = V2::hash_node(depth_in_tree - 1, left, right);","counters":[]},{"line":"//                 self.hashes_matrix.set(&addr, hash);","counters":[]},{"line":"//                 hash","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     pub fn create_checkpoint(&self, directory_name: String) {","counters":[]},{"line":"//         elog!(\"create_checkpoint {}\", directory_name);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     pub fn make_checkpoint(&self, directory_name: String) {","counters":[]},{"line":"//         elog!(\"make_checkpoint {}\", directory_name);","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// impl Database<V1> {","counters":[]},{"line":"//     pub fn create_account(","counters":[]},{"line":"//         &mut self,","counters":[]},{"line":"//         _account_id: (),","counters":[]},{"line":"//         account: AccountLegacy,","counters":[]},{"line":"//     ) -> Result<Address, DatabaseError> {","counters":[]},{"line":"//         // if self.root.is_none() {","counters":[]},{"line":"//         //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"//         // }","counters":[]},{"line":"","counters":[]},{"line":"//         let location = match self.last_location.as_ref() {","counters":[]},{"line":"//             Some(last) => last.next().ok_or(DatabaseError::OutOfLeaves)?,","counters":[]},{"line":"//             None => Address::first(self.depth as usize),","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(location.to_index(), self.accounts.len());","counters":[]},{"line":"//         self.accounts.push(Some(account));","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = self.root.as_mut().unwrap();","counters":[]},{"line":"//         // let path_iter = location.clone().into_iter();","counters":[]},{"line":"//         // root.add_account_on_path(account, path_iter);","counters":[]},{"line":"","counters":[]},{"line":"//         self.last_location = Some(location.clone());","counters":[]},{"line":"//         self.naccounts += 1;","counters":[]},{"line":"","counters":[]},{"line":"//         Ok(location)","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// impl Database<V2> {","counters":[]},{"line":"//     pub fn create_with_dir(depth: u8, dir_name: Option<PathBuf>) -> Self {","counters":[]},{"line":"//         assert!((1..0xfe).contains(&depth));","counters":[]},{"line":"","counters":[]},{"line":"//         let max_naccounts = 2u64.pow(depth.min(25) as u32);","counters":[]},{"line":"","counters":[]},{"line":"//         let uuid = next_uuid();","counters":[]},{"line":"","counters":[]},{"line":"//         let path = match dir_name {","counters":[]},{"line":"//             Some(dir_name) => dir_name,","counters":[]},{"line":"//             None => {","counters":[]},{"line":"//                 let directory = \"minadb-\".to_owned() + &uuid;","counters":[]},{"line":"","counters":[]},{"line":"//                 let mut path = PathBuf::from(\"/tmp\");","counters":[]},{"line":"//                 path.push(&directory);","counters":[]},{"line":"//                 path","counters":[]},{"line":"//             }","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"DB depth={:?} uuid={:?} pid={:?} path={:?}\",","counters":[]},{"line":"//         //     depth,","counters":[]},{"line":"//         //     uuid,","counters":[]},{"line":"//         //     crate::util::pid(),","counters":[]},{"line":"//         //     path","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         std::fs::create_dir_all(&path).ok();","counters":[]},{"line":"","counters":[]},{"line":"//         Self {","counters":[]},{"line":"//             depth,","counters":[]},{"line":"//             accounts: Vec::with_capacity(20_000),","counters":[]},{"line":"//             last_location: None,","counters":[]},{"line":"//             naccounts: 0,","counters":[]},{"line":"//             id_to_addr: HashMap::with_capacity(max_naccounts as usize / 2),","counters":[]},{"line":"//             token_to_account: HashMap::with_capacity(max_naccounts as usize / 2),","counters":[]},{"line":"//             uuid,","counters":[]},{"line":"//             directory: path,","counters":[]},{"line":"//             hashes_matrix: HashesMatrix::new(depth as usize),","counters":[]},{"line":"//             // root_hash: Default::default(),","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     pub fn create(depth: u8) -> Self {","counters":[]},{"line":"//         Self::create_with_dir(depth, None)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     pub fn root_hash(&mut self) -> Fp {","counters":[]},{"line":"//         self.emulate_tree_to_get_hash_at(Address::root())","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // Do not use","counters":[]},{"line":"//     pub fn naccounts(&self) -> usize {","counters":[]},{"line":"//         self.accounts.iter().filter_map(Option::as_ref).count()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // fn naccounts_recursive(&self, elem: &NodeOrLeaf<T>, naccounts: &mut usize) {","counters":[]},{"line":"//     //     match elem {","counters":[]},{"line":"//     //         NodeOrLeaf::Leaf(_) => *naccounts += 1,","counters":[]},{"line":"//     //         NodeOrLeaf::Node(node) => {","counters":[]},{"line":"//     //             if let Some(left) = node.left.as_ref() {","counters":[]},{"line":"//     //                 self.naccounts_recursive(left, naccounts);","counters":[]},{"line":"//     //             };","counters":[]},{"line":"//     //             if let Some(right) = node.right.as_ref() {","counters":[]},{"line":"//     //                 self.naccounts_recursive(right, naccounts);","counters":[]},{"line":"//     //             };","counters":[]},{"line":"//     //         }","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     // }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// impl BaseLedger for Database<V2> {","counters":[]},{"line":"//     fn to_list(&self) -> Vec<Account> {","counters":[]},{"line":"//         self.accounts","counters":[]},{"line":"//             .iter()","counters":[]},{"line":"//             .filter_map(Option::as_ref)","counters":[]},{"line":"//             .cloned()","counters":[]},{"line":"//             .collect()","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return Vec::new(),","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // let mut accounts = Vec::with_capacity(100);","counters":[]},{"line":"","counters":[]},{"line":"//         // root.iter_recursive(&mut |account| {","counters":[]},{"line":"//         //     accounts.push(account.clone());","counters":[]},{"line":"//         //     ControlFlow::Continue(())","counters":[]},{"line":"//         // });","counters":[]},{"line":"","counters":[]},{"line":"//         // accounts","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn iter<F>(&self, fun: F)","counters":[]},{"line":"//     where","counters":[]},{"line":"//         F: FnMut(&Account),","counters":[]},{"line":"//     {","counters":[]},{"line":"//         self.accounts","counters":[]},{"line":"//             .iter()","counters":[]},{"line":"//             .filter_map(Option::as_ref)","counters":[]},{"line":"//             .for_each(fun);","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return,","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // root.iter_recursive(&mut |account| {","counters":[]},{"line":"//         //     fun(account);","counters":[]},{"line":"//         //     ControlFlow::Continue(())","counters":[]},{"line":"//         // });","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn fold<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"//     where","counters":[]},{"line":"//         F: FnMut(B, &Account) -> B,","counters":[]},{"line":"//     {","counters":[]},{"line":"//         let mut accum = init;","counters":[]},{"line":"//         for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"//             accum = fun(accum, account);","counters":[]},{"line":"//         }","counters":[]},{"line":"//         accum","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return init,","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // let mut accum = Some(init);","counters":[]},{"line":"//         // root.iter_recursive(&mut |account| {","counters":[]},{"line":"//         //     let res = fun(accum.take().unwrap(), account);","counters":[]},{"line":"//         //     accum = Some(res);","counters":[]},{"line":"//         //     ControlFlow::Continue(())","counters":[]},{"line":"//         // });","counters":[]},{"line":"","counters":[]},{"line":"//         // accum.unwrap()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn fold_with_ignored_accounts<B, F>(","counters":[]},{"line":"//         &self,","counters":[]},{"line":"//         ignoreds: HashSet<AccountId>,","counters":[]},{"line":"//         init: B,","counters":[]},{"line":"//         mut fun: F,","counters":[]},{"line":"//     ) -> B","counters":[]},{"line":"//     where","counters":[]},{"line":"//         F: FnMut(B, &Account) -> B,","counters":[]},{"line":"//     {","counters":[]},{"line":"//         let mut accum = init;","counters":[]},{"line":"//         for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"//             let account_id = account.id();","counters":[]},{"line":"","counters":[]},{"line":"//             if !ignoreds.contains(&account_id) {","counters":[]},{"line":"//                 accum = fun(accum, account);","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"//         accum","counters":[]},{"line":"//         // self.fold(init, |accum, account| {","counters":[]},{"line":"//         //     let account_id = account.id();","counters":[]},{"line":"","counters":[]},{"line":"//         //     if !ignoreds.contains(&account_id) {","counters":[]},{"line":"//         //         fun(accum, account)","counters":[]},{"line":"//         //     } else {","counters":[]},{"line":"//         //         accum","counters":[]},{"line":"//         //     }","counters":[]},{"line":"//         // })","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn fold_until<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"//     where","counters":[]},{"line":"//         F: FnMut(B, &Account) -> ControlFlow<B, B>,","counters":[]},{"line":"//     {","counters":[]},{"line":"//         let mut accum = init;","counters":[]},{"line":"//         for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"//             match fun(accum, account) {","counters":[]},{"line":"//                 ControlFlow::Continue(v) => {","counters":[]},{"line":"//                     accum = v;","counters":[]},{"line":"//                 }","counters":[]},{"line":"//                 ControlFlow::Break(v) => {","counters":[]},{"line":"//                     accum = v;","counters":[]},{"line":"//                     break;","counters":[]},{"line":"//                 }","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"//         accum","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return init,","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // let mut accum = Some(init);","counters":[]},{"line":"//         // root.iter_recursive(&mut |account| match fun(accum.take().unwrap(), account) {","counters":[]},{"line":"//         //     ControlFlow::Continue(account) => {","counters":[]},{"line":"//         //         accum = Some(account);","counters":[]},{"line":"//         //         ControlFlow::Continue(())","counters":[]},{"line":"//         //     }","counters":[]},{"line":"//         //     ControlFlow::Break(account) => {","counters":[]},{"line":"//         //         accum = Some(account);","counters":[]},{"line":"//         //         ControlFlow::Break(())","counters":[]},{"line":"//         //     }","counters":[]},{"line":"//         // });","counters":[]},{"line":"","counters":[]},{"line":"//         // accum.unwrap()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn accounts(&self) -> HashSet<AccountId> {","counters":[]},{"line":"//         self.id_to_addr.keys().cloned().collect()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn token_owner(&self, token_id: TokenId) -> Option<AccountId> {","counters":[]},{"line":"//         self.token_to_account.get(&token_id).cloned()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn token_owners(&self) -> HashSet<AccountId> {","counters":[]},{"line":"//         self.token_to_account.values().cloned().collect()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn tokens(&self, public_key: CompressedPubKey) -> HashSet<TokenId> {","counters":[]},{"line":"//         let mut set = HashSet::with_capacity(100);","counters":[]},{"line":"","counters":[]},{"line":"//         for account in self.accounts.iter().filter_map(Option::as_ref) {","counters":[]},{"line":"//             if account.public_key == public_key {","counters":[]},{"line":"//                 set.insert(account.token_id.clone());","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return HashSet::default(),","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // let mut set = HashSet::with_capacity(self.naccounts);","counters":[]},{"line":"","counters":[]},{"line":"//         // root.iter_recursive(&mut |account| {","counters":[]},{"line":"//         //     if account.public_key == public_key {","counters":[]},{"line":"//         //         set.insert(account.token_id.clone());","counters":[]},{"line":"//         //     }","counters":[]},{"line":"","counters":[]},{"line":"//         //     ControlFlow::Continue(())","counters":[]},{"line":"//         // });","counters":[]},{"line":"","counters":[]},{"line":"//         set","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn location_of_account(&self, account_id: &AccountId) -> Option<Address> {","counters":[]},{"line":"//         let res = self.id_to_addr.get(account_id).cloned();","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"location_of_account id={:?}\\n{:?}\", account_id, res);","counters":[]},{"line":"","counters":[]},{"line":"//         res","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn location_of_account_batch(","counters":[]},{"line":"//         &self,","counters":[]},{"line":"//         account_ids: &[AccountId],","counters":[]},{"line":"//     ) -> Vec<(AccountId, Option<Address>)> {","counters":[]},{"line":"//         let res: Vec<_> = account_ids","counters":[]},{"line":"//             .iter()","counters":[]},{"line":"//             .map(|account_id| {","counters":[]},{"line":"//                 let addr = self.id_to_addr.get(account_id).cloned();","counters":[]},{"line":"//                 (account_id.clone(), addr)","counters":[]},{"line":"//             })","counters":[]},{"line":"//             .collect();","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(","counters":[]},{"line":"//             \"location_of_account_batch ids={:?}\\nres={:?}={:?}\",","counters":[]},{"line":"//             account_ids,","counters":[]},{"line":"//             res.len(),","counters":[]},{"line":"//             res","counters":[]},{"line":"//         );","counters":[]},{"line":"","counters":[]},{"line":"//         res","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_or_create_account(","counters":[]},{"line":"//         &mut self,","counters":[]},{"line":"//         account_id: AccountId,","counters":[]},{"line":"//         account: Account,","counters":[]},{"line":"//     ) -> Result<GetOrCreated, DatabaseError> {","counters":[]},{"line":"//         let result = self.create_account(account_id, account);","counters":[]},{"line":"","counters":[]},{"line":"//         if let Ok(GetOrCreated::Added(addr)) = result.as_ref() {","counters":[]},{"line":"//             let account_index = addr.to_index();","counters":[]},{"line":"//             self.hashes_matrix.invalidate_hashes(account_index);","counters":[]},{"line":"//         };","counters":[]},{"line":"","counters":[]},{"line":"//         result","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn close(&self) {","counters":[]},{"line":"//         elog!(","counters":[]},{"line":"//             \"close pid={:?} uuid={:?} path={:?}\",","counters":[]},{"line":"//             crate::util::pid(),","counters":[]},{"line":"//             self.uuid,","counters":[]},{"line":"//             self.directory","counters":[]},{"line":"//         );","counters":[]},{"line":"//         // Drop","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn last_filled(&self) -> Option<Address> {","counters":[]},{"line":"//         self.last_location.clone()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_uuid(&self) -> crate::base::Uuid {","counters":[]},{"line":"//         self.uuid.clone()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_directory(&self) -> Option<PathBuf> {","counters":[]},{"line":"//         Some(self.directory.clone())","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_account_hash(&mut self, account_index: AccountIndex) -> Option<Fp> {","counters":[]},{"line":"//         let addr = Address::from_index(account_index, self.depth as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         if let Some(hash) = self.hashes_matrix.get(&addr) {","counters":[]},{"line":"//             return Some(*hash);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let account = self.get(addr.clone())?;","counters":[]},{"line":"//         let hash = account.hash();","counters":[]},{"line":"","counters":[]},{"line":"//         self.hashes_matrix.set(&addr, hash);","counters":[]},{"line":"","counters":[]},{"line":"//         Some(hash)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get(&self, addr: Address) -> Option<Account> {","counters":[]},{"line":"//         let index = addr.to_index();","counters":[]},{"line":"//         let index: usize = index.0 as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         self.accounts.get(index)?.clone()","counters":[]},{"line":"","counters":[]},{"line":"//         // let acc = self.root.as_ref()?.get_on_path(addr.into_iter()).cloned();","counters":[]},{"line":"","counters":[]},{"line":"//         // if let Some(account) = &acc {","counters":[]},{"line":"//         //     elog!(\"ACCOUNT{:?}\", account.hash().to_string());","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // acc","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_batch(&self, addr: &[Address]) -> Vec<(Address, Option<Account>)> {","counters":[]},{"line":"//         let res: Vec<_> = addr","counters":[]},{"line":"//             .iter()","counters":[]},{"line":"//             .map(|addr| (addr.clone(), self.get(addr.clone())))","counters":[]},{"line":"//             .collect();","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => Cow::Borrowed(root),","counters":[]},{"line":"//         //     None => Cow::Owned(NodeOrLeaf::Node(Node::default())),","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // let res: Vec<_> = addr","counters":[]},{"line":"//         //     .iter()","counters":[]},{"line":"//         //     .map(|addr| (addr.clone(), root.get_on_path(addr.iter()).cloned()))","counters":[]},{"line":"//         //     .collect();","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"get_batch addrs={:?}\\nres={:?}={:?}\", addr, res.len(), res);","counters":[]},{"line":"","counters":[]},{"line":"//         res","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn set(&mut self, addr: Address, account: Account) {","counters":[]},{"line":"//         let index = addr.to_index();","counters":[]},{"line":"","counters":[]},{"line":"//         self.hashes_matrix.invalidate_hashes(index.clone());","counters":[]},{"line":"","counters":[]},{"line":"//         let index: usize = index.0 as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         if self.accounts.len() <= index {","counters":[]},{"line":"//             self.accounts.resize(index + 1, None);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // if self.root.is_none() {","counters":[]},{"line":"//         //     self.root = Some(NodeOrLeaf::Node(Node::default()));","counters":[]},{"line":"//         // }","counters":[]},{"line":"","counters":[]},{"line":"//         let id = account.id();","counters":[]},{"line":"//         // let root = self.root.as_mut().unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         // Remove account at the address and it's index","counters":[]},{"line":"//         if let Some(account) = self.get(addr.clone()) {","counters":[]},{"line":"//             let id = account.id();","counters":[]},{"line":"//             self.id_to_addr.remove(&id);","counters":[]},{"line":"//             self.token_to_account.remove(&id.token_id);","counters":[]},{"line":"//         } else {","counters":[]},{"line":"//             self.naccounts += 1;","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         self.token_to_account","counters":[]},{"line":"//             .insert(account.token_id.clone(), id.clone());","counters":[]},{"line":"//         self.id_to_addr.insert(id, addr.clone());","counters":[]},{"line":"//         self.accounts[index] = Some(account);","counters":[]},{"line":"//         // root.add_account_on_path(account, addr.iter());","counters":[]},{"line":"","counters":[]},{"line":"//         if self","counters":[]},{"line":"//             .last_location","counters":[]},{"line":"//             .as_ref()","counters":[]},{"line":"//             .map(|l| l.to_index() < addr.to_index())","counters":[]},{"line":"//             .unwrap_or(true)","counters":[]},{"line":"//         {","counters":[]},{"line":"//             self.last_location = Some(addr);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // self.root_hash.borrow_mut().take();","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn set_batch(&mut self, list: &[(Address, Account)]) {","counters":[]},{"line":"//         elog!(\"SET_BATCH {:?}\", list.len());","counters":[]},{"line":"//         // elog!(\"SET_BATCH {:?} {:?}\", list.len(), list);","counters":[]},{"line":"//         for (addr, account) in list {","counters":[]},{"line":"//             assert_eq!(addr.length(), self.depth as usize, \"addr={:?}\", addr);","counters":[]},{"line":"//             self.set(addr.clone(), account.clone());","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_at_index(&self, index: AccountIndex) -> Option<Account> {","counters":[]},{"line":"//         let addr = Address::from_index(index, self.depth as usize);","counters":[]},{"line":"//         self.get(addr)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn set_at_index(&mut self, index: AccountIndex, account: Account) -> Result<(), ()> {","counters":[]},{"line":"//         let addr = Address::from_index(index, self.depth as usize);","counters":[]},{"line":"//         self.set(addr, account);","counters":[]},{"line":"","counters":[]},{"line":"//         // self.root_hash.borrow_mut().take();","counters":[]},{"line":"","counters":[]},{"line":"//         Ok(())","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn index_of_account(&self, account_id: AccountId) -> Option<AccountIndex> {","counters":[]},{"line":"//         self.id_to_addr.get(&account_id).map(Address::to_index)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn merkle_root(&mut self) -> Fp {","counters":[]},{"line":"//         // let now = crate::util::Instant::now();","counters":[]},{"line":"","counters":[]},{"line":"//         self.root_hash()","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match *self.root_hash.borrow() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => self.root_hash(),","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"uuid={:?} ROOT={} num_account={:?} elapsed={:?}\",","counters":[]},{"line":"//         //     self.get_uuid(),","counters":[]},{"line":"//         //     root,","counters":[]},{"line":"//         //     self.num_accounts(),","counters":[]},{"line":"//         //     now.elapsed(),","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         // self.root_hash.borrow_mut().replace(root);","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"PATH={:#?}\", self.merkle_path(Address::first(self.depth as usize)));","counters":[]},{"line":"","counters":[]},{"line":"//         // self.merkle_path(Address::first(self.depth as usize));","counters":[]},{"line":"","counters":[]},{"line":"//         // root","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn merkle_path(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[]},{"line":"//         elog!(\"merkle_path called depth={:?} addr={:?}\", self.depth, addr);","counters":[]},{"line":"","counters":[]},{"line":"//         let mut merkle_path = Vec::with_capacity(addr.length());","counters":[]},{"line":"//         let mut path = addr.into_iter();","counters":[]},{"line":"//         let addr = Address::root();","counters":[]},{"line":"","counters":[]},{"line":"//         let last_account = self","counters":[]},{"line":"//             .last_filled()","counters":[]},{"line":"//             .unwrap_or_else(|| Address::first(self.depth as usize));","counters":[]},{"line":"","counters":[]},{"line":"//         // let tree_index = TreeIndex::root(self.depth() as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         self.emulate_tree_to_get_path(addr, &last_account, &mut path, &mut merkle_path);","counters":[]},{"line":"","counters":[]},{"line":"//         merkle_path","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn merkle_path_at_index(&mut self, index: AccountIndex) -> Vec<MerklePath> {","counters":[]},{"line":"//         let addr = Address::from_index(index, self.depth as usize);","counters":[]},{"line":"//         self.merkle_path(addr)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn remove_accounts(&mut self, ids: &[AccountId]) {","counters":[]},{"line":"//         // let root = match self.root.as_mut() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return,","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         let mut addrs = ids","counters":[]},{"line":"//             .iter()","counters":[]},{"line":"//             .map(|accound_id| self.id_to_addr.remove(accound_id).unwrap())","counters":[]},{"line":"//             .collect::<Vec<_>>();","counters":[]},{"line":"//         addrs.sort_by_key(Address::to_index);","counters":[]},{"line":"","counters":[]},{"line":"//         for addr in addrs.iter().rev() {","counters":[]},{"line":"//             // let leaf = match root.get_mut_leaf_on_path(addr.iter()) {","counters":[]},{"line":"//             //     Some(leaf) => leaf,","counters":[]},{"line":"//             //     None => continue,","counters":[]},{"line":"//             // };","counters":[]},{"line":"","counters":[]},{"line":"//             // let account = match leaf.account.take() {","counters":[]},{"line":"//             //     Some(account) => account,","counters":[]},{"line":"//             //     None => continue,","counters":[]},{"line":"//             // };","counters":[]},{"line":"","counters":[]},{"line":"//             let account_index = addr.to_index();","counters":[]},{"line":"//             self.hashes_matrix.invalidate_hashes(account_index);","counters":[]},{"line":"","counters":[]},{"line":"//             let account = match self.remove(addr.clone()) {","counters":[]},{"line":"//                 Some(account) => account,","counters":[]},{"line":"//                 None => continue,","counters":[]},{"line":"//             };","counters":[]},{"line":"","counters":[]},{"line":"//             // let index = addr.to_index();","counters":[]},{"line":"//             // let account = std::mem::take()","counters":[]},{"line":"","counters":[]},{"line":"//             let id = account.id();","counters":[]},{"line":"//             self.id_to_addr.remove(&id);","counters":[]},{"line":"//             self.token_to_account.remove(&id.token_id);","counters":[]},{"line":"","counters":[]},{"line":"//             self.naccounts = self","counters":[]},{"line":"//                 .naccounts","counters":[]},{"line":"//                 .checked_sub(1)","counters":[]},{"line":"//                 .expect(\"invalid naccounts counter\");","counters":[]},{"line":"","counters":[]},{"line":"//             if self","counters":[]},{"line":"//                 .last_location","counters":[]},{"line":"//                 .as_ref()","counters":[]},{"line":"//                 .map(|last| last == addr)","counters":[]},{"line":"//                 .unwrap_or(false)","counters":[]},{"line":"//             {","counters":[]},{"line":"//                 self.last_location = addr.prev();","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // self.root_hash.borrow_mut().take();","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn detached_signal(&mut self) {","counters":[]},{"line":"//         todo!()","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn depth(&self) -> u8 {","counters":[]},{"line":"//         self.depth","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn num_accounts(&self) -> usize {","counters":[]},{"line":"//         self.naccounts","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn merkle_path_at_addr(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[]},{"line":"//         self.merkle_path(addr)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_inner_hash_at_addr(&mut self, addr: Address) -> Result<Fp, ()> {","counters":[]},{"line":"//         let res = self.emulate_tree_to_get_hash_at(addr.clone());","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"get_inner_hash_at_addr addr={:?} hash={}\", addr, res);","counters":[]},{"line":"","counters":[]},{"line":"//         Ok(res)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn set_inner_hash_at_addr(&mut self, _addr: Address, _hash: Fp) -> Result<(), ()> {","counters":[]},{"line":"//         // No-op for now, because we don't store the hashes anywhere","counters":[]},{"line":"//         Ok(())","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn set_all_accounts_rooted_at(","counters":[]},{"line":"//         &mut self,","counters":[]},{"line":"//         addr: Address,","counters":[]},{"line":"//         accounts: &[Account],","counters":[]},{"line":"//     ) -> Result<(), ()> {","counters":[]},{"line":"//         if addr.length() > self.depth as usize {","counters":[]},{"line":"//             return Err(());","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         for (child_addr, account) in addr.iter_children(self.depth as usize).zip(accounts) {","counters":[]},{"line":"//             self.set(child_addr, account.clone());","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         Ok(())","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn get_all_accounts_rooted_at(&self, addr: Address) -> Option<Vec<(Address, Account)>> {","counters":[]},{"line":"//         if addr.length() > self.depth as usize {","counters":[]},{"line":"//             return None;","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // let root = match self.root.as_ref() {","counters":[]},{"line":"//         //     Some(root) => root,","counters":[]},{"line":"//         //     None => return None,","counters":[]},{"line":"//         // };","counters":[]},{"line":"","counters":[]},{"line":"//         let children = addr.iter_children(self.depth as usize);","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(children.len());","counters":[]},{"line":"","counters":[]},{"line":"//         for child_addr in children {","counters":[]},{"line":"//             let account = match self.get(child_addr.clone()) {","counters":[]},{"line":"//                 Some(account) => account,","counters":[]},{"line":"//                 None => continue,","counters":[]},{"line":"//             };","counters":[]},{"line":"//             accounts.push((child_addr, account));","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         if accounts.is_empty() {","counters":[]},{"line":"//             None","counters":[]},{"line":"//         } else {","counters":[]},{"line":"//             Some(accounts)","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn make_space_for(&mut self, _space: usize) {","counters":[]},{"line":"//         // No op, we're in memory","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// #[cfg(test)]","counters":[]},{"line":"// mod tests {","counters":[]},{"line":"//     use ark_ff::One;","counters":[]},{"line":"//     use o1_utils::FieldHelpers;","counters":[]},{"line":"","counters":[]},{"line":"//     #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"//     use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"//     use crate::{","counters":[]},{"line":"//         account::Account,","counters":[]},{"line":"//         tree_version::{account_empty_legacy_hash, V1, V2},","counters":[]},{"line":"//     };","counters":[]},{"line":"","counters":[]},{"line":"//     use super::*;","counters":[]},{"line":"","counters":[]},{"line":"//     // #[test]","counters":[]},{"line":"//     // fn test_legacy_db() {","counters":[]},{"line":"//     //     let two: usize = 2;","counters":[]},{"line":"","counters":[]},{"line":"//     //     for depth in 2..15 {","counters":[]},{"line":"//     //         let mut db = Database::<V1>::create(depth);","counters":[]},{"line":"","counters":[]},{"line":"//     //         for _ in 0..two.pow(depth as u32) {","counters":[]},{"line":"//     //             db.create_account((), AccountLegacy::create()).unwrap();","counters":[]},{"line":"//     //         }","counters":[]},{"line":"","counters":[]},{"line":"//     //         let naccounts = db.naccounts();","counters":[]},{"line":"//     //         assert_eq!(naccounts, two.pow(depth as u32));","counters":[]},{"line":"","counters":[]},{"line":"//     //         assert_eq!(","counters":[]},{"line":"//     //             db.create_account((), AccountLegacy::create()).unwrap_err(),","counters":[]},{"line":"//     //             DatabaseError::OutOfLeaves","counters":[]},{"line":"//     //         );","counters":[]},{"line":"","counters":[]},{"line":"//     //         elog!(\"depth={:?} naccounts={:?}\", depth, naccounts);","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     // }","counters":[]},{"line":"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_matrix() {","counters":[]},{"line":"//         const DEPTH: usize = 4;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut matrix = HashesMatrix::new(DEPTH);","counters":[]},{"line":"//         let one = Fp::one();","counters":[]},{"line":"","counters":[]},{"line":"//         for index in 0..16 {","counters":[]},{"line":"//             let account_index = AccountIndex::from(index);","counters":[]},{"line":"//             let addr = Address::from_index(account_index, DEPTH);","counters":[]},{"line":"//             matrix.set(&addr, one);","counters":[]},{"line":"","counters":[]},{"line":"//             elog!(\"{:?} MATRIX {:#?}\", index + 1, matrix);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let addr = Address::root();","counters":[]},{"line":"","counters":[]},{"line":"//         matrix.set(&addr, one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"","counters":[]},{"line":"//         matrix.set(&addr.child_left(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"//         matrix.set(&addr.child_right(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"","counters":[]},{"line":"//         matrix.set(&addr.child_left().child_left(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"//         matrix.set(&addr.child_left().child_right(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"//         matrix.set(&addr.child_right().child_left(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"//         matrix.set(&addr.child_right().child_right(), one);","counters":[]},{"line":"//         elog!(\"{:?} MATRIX {:#?}\", \"root\", matrix);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_db_v2() {","counters":[]},{"line":"//         let two: usize = 2;","counters":[]},{"line":"","counters":[]},{"line":"//         for depth in 2..15 {","counters":[]},{"line":"//             let mut db = Database::<V2>::create(depth);","counters":[]},{"line":"","counters":[]},{"line":"//             for _ in 0..two.pow(depth as u32) {","counters":[]},{"line":"//                 let account = Account::rand();","counters":[]},{"line":"//                 let id = account.id();","counters":[]},{"line":"//                 db.create_account(id, account).unwrap();","counters":[]},{"line":"//             }","counters":[]},{"line":"","counters":[]},{"line":"//             let naccounts = db.naccounts();","counters":[]},{"line":"//             assert_eq!(naccounts, two.pow(depth as u32));","counters":[]},{"line":"","counters":[]},{"line":"//             let account = Account::create();","counters":[]},{"line":"//             let id = account.id();","counters":[]},{"line":"//             assert_eq!(","counters":[]},{"line":"//                 db.create_account(id, account).unwrap_err(),","counters":[]},{"line":"//                 DatabaseError::OutOfLeaves","counters":[]},{"line":"//             );","counters":[]},{"line":"","counters":[]},{"line":"//             elog!(\"depth={:?} naccounts={:?}\", depth, naccounts);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // RUSTFLAGS=\"-C target-feature=+atomics,+bulk-memory,+mutable-globals\" wasm-pack test --release --chrome -- -Z build-std=std,panic_abort -- hashing","counters":[]},{"line":"//     #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_hashing_tree_with_web_workers() {","counters":[]},{"line":"//         use web_sys::console;","counters":[]},{"line":"","counters":[]},{"line":"//         use std::time::Duration;","counters":[]},{"line":"//         use wasm_thread as thread;","counters":[]},{"line":"","counters":[]},{"line":"//         use crate::account;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut msg = format!(\"hello\");","counters":[]},{"line":"","counters":[]},{"line":"//         const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"//         const NTHREADS: usize = 8;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//         use wasm_bindgen::prelude::*;","counters":[]},{"line":"","counters":[]},{"line":"//         fn perf_to_duration(amt: f64) -> std::time::Duration {","counters":[]},{"line":"//             let secs = (amt as u64) / 1_000;","counters":[]},{"line":"//             let nanos = (((amt as u64) % 1_000) as u32) * 1_000_000;","counters":[]},{"line":"//             std::time::Duration::new(secs, nanos)","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         #[cfg(target_arch = \"wasm32\")]","counters":[]},{"line":"//         #[wasm_bindgen(inline_js = r#\"","counters":[]},{"line":"// export function performance_now() {","counters":[]},{"line":"//   return performance.now();","counters":[]},{"line":"// }\"#)]","counters":[]},{"line":"//         extern \"C\" {","counters":[]},{"line":"//             fn performance_now() -> f64;","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         thread::spawn(move || {","counters":[]},{"line":"//             console::time_with_label(\"threads\");","counters":[]},{"line":"//             console::log_1(&format!(\"hello from first thread {:?}\", thread::current().id()).into());","counters":[]},{"line":"","counters":[]},{"line":"//             let start = performance_now();","counters":[]},{"line":"","counters":[]},{"line":"//             let mut joins = Vec::with_capacity(NTHREADS);","counters":[]},{"line":"","counters":[]},{"line":"//             for _ in 0..NTHREADS {","counters":[]},{"line":"//                 let accounts = accounts.split_off(accounts.len() - (NACCOUNTS as usize / NTHREADS));","counters":[]},{"line":"","counters":[]},{"line":"//                 let join = thread::spawn(move || {","counters":[]},{"line":"//                     console::log_1(","counters":[]},{"line":"//                         &format!(\"hello from thread {:?}\", thread::current().id()).into(),","counters":[]},{"line":"//                     );","counters":[]},{"line":"","counters":[]},{"line":"//                     let hash = accounts.iter().map(|a| a.hash()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//                     console::log_1(","counters":[]},{"line":"//                         &format!(\"ending from thread {:?}\", thread::current().id()).into(),","counters":[]},{"line":"//                     );","counters":[]},{"line":"","counters":[]},{"line":"//                     hash.len()","counters":[]},{"line":"//                 });","counters":[]},{"line":"","counters":[]},{"line":"//                 joins.push(join);","counters":[]},{"line":"//             }","counters":[]},{"line":"","counters":[]},{"line":"//             let nhashes: usize = joins.into_iter().map(|j| j.join().unwrap()).sum();","counters":[]},{"line":"","counters":[]},{"line":"//             assert_eq!(nhashes, NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"//             let end = performance_now();","counters":[]},{"line":"","counters":[]},{"line":"//             console::log_1(","counters":[]},{"line":"//                 &format!(","counters":[]},{"line":"//                     \"nhashes={:?} nthreads={:?} time={:?}\",","counters":[]},{"line":"//                     nhashes,","counters":[]},{"line":"//                     NTHREADS,","counters":[]},{"line":"//                     perf_to_duration(end - start)","counters":[]},{"line":"//                 )","counters":[]},{"line":"//                 .into(),","counters":[]},{"line":"//             );","counters":[]},{"line":"//             console::time_end_with_label(\"threads\");","counters":[]},{"line":"//         });","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_hashing_tree() {","counters":[]},{"line":"//         use web_sys::console;","counters":[]},{"line":"","counters":[]},{"line":"//         const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"","counters":[]},{"line":"//         console::time_with_label(\"generate random accounts\");","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(20);","counters":[]},{"line":"","counters":[]},{"line":"//         console::log_1(&format!(\"{:?} accounts in nodejs\", NACCOUNTS).into());","counters":[]},{"line":"","counters":[]},{"line":"//         let accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//         for (index, mut account) in accounts.into_iter().enumerate() {","counters":[]},{"line":"//             account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"//             let id = account.id();","counters":[]},{"line":"//             db.create_account(id, account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         console::time_end_with_label(\"generate random accounts\");","counters":[]},{"line":"//         assert_eq!(db.naccounts, NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         console::time_with_label(\"compute merkle root\");","counters":[]},{"line":"//         db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         console::time_end_with_label(\"compute merkle root\");","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[cfg(not(target_family = \"wasm\"))]","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_hashing_tree() {","counters":[]},{"line":"//         const NACCOUNTS: u64 = 1_000;","counters":[]},{"line":"","counters":[]},{"line":"//         let now = std::time::Instant::now();","counters":[]},{"line":"//         let mut db = Database::<V2>::create(20);","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"{:?} accounts natively\", NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"//         let accounts = (0..NACCOUNTS).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//         for (index, mut account) in accounts.into_iter().enumerate() {","counters":[]},{"line":"//             account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"//             let id = account.id();","counters":[]},{"line":"//             db.create_account(id, account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"generate random accounts {:?}\", now.elapsed());","counters":[]},{"line":"//         assert_eq!(db.naccounts, NACCOUNTS as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         let now = std::time::Instant::now();","counters":[]},{"line":"//         db.merkle_root();","counters":[]},{"line":"//         elog!(\"compute merkle root {:?}\", now.elapsed());","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_legacy_hash_empty() {","counters":[]},{"line":"//         let account_empty_hash = account_empty_legacy_hash();","counters":[]},{"line":"//         assert_eq!(","counters":[]},{"line":"//             account_empty_hash.to_hex(),","counters":[]},{"line":"//             \"70ccdba14f829608e59a37ed98ffcaeef06dad928d568a9adbde13e3dd104a20\"","counters":[]},{"line":"//         );","counters":[]},{"line":"","counters":[]},{"line":"//         for (depth, s) in [","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 0,","counters":[]},{"line":"//                 \"70ccdba14f829608e59a37ed98ffcaeef06dad928d568a9adbde13e3dd104a20\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 5,","counters":[]},{"line":"//                 \"4590712e4bd873ba93d01b665940e0edc48db1a7c90859948b7799f45a443b15\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 10,","counters":[]},{"line":"//                 \"ba083b16b757794c81233d4ebf1ab000ba4a174a8174c1e8ee8bf0846ec2e10d\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 11,","counters":[]},{"line":"//                 \"5d65e7d5f4c5441ac614769b913400aa3201f3bf9c0f33441dbf0a33a1239822\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 100,","counters":[]},{"line":"//                 \"0e4ecb6104658cf8c06fca64f7f1cb3b0f1a830ab50c8c7ed9de544b8e6b2530\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 2000,","counters":[]},{"line":"//                 \"b05105f8281f75efaf3c6b324563685c8be3a01b1c7d3f314ae733d869d95209\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//         ] {","counters":[]},{"line":"//             let hash = V1::empty_hash_at_depth(depth);","counters":[]},{"line":"//             assert_eq!(hash.to_hex(), s, \"invalid hash at depth={:?}\", depth);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_hash_empty() {","counters":[]},{"line":"//         let account_empty_hash = Account::empty().hash();","counters":[]},{"line":"//         assert_eq!(","counters":[]},{"line":"//             account_empty_hash.to_hex(),","counters":[]},{"line":"//             \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\"","counters":[]},{"line":"//         );","counters":[]},{"line":"","counters":[]},{"line":"//         for (depth, s) in [","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 0,","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 5,","counters":[]},{"line":"//                 \"8eb1532b8663c5af0841ea4287b360404bcd468510a8a7e4d1a602e1a565ad3f\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 10,","counters":[]},{"line":"//                 \"c3fb7a2eeb9008a80dcf6c4e9a07a47d27dda8026e3fd9bd8df78438801bfa14\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 11,","counters":[]},{"line":"//                 \"f310151e53c916a3b682d28ed806ceb6f0c7be39aa54b8facfc4f4afc790083f\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 100,","counters":[]},{"line":"//                 \"f32563e80fa14c9ce0d56d33f6fa361e4bbcffd7cc8478f68036110dfae88c3f\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//             (","counters":[]},{"line":"//                 2000,","counters":[]},{"line":"//                 \"b6f8c732dcfeb5acc3f684b2936a03553422d7ceac45ffd2f60992e3e87f3312\",","counters":[]},{"line":"//             ),","counters":[]},{"line":"//         ] {","counters":[]},{"line":"//             let hash = V2::empty_hash_at_depth(depth);","counters":[]},{"line":"//             assert_eq!(hash.to_hex(), s, \"invalid hash at depth={:?}\", depth);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // /// An empty tree produces the same hash than a tree full of empty accounts","counters":[]},{"line":"//     // #[test]","counters":[]},{"line":"//     // fn test_root_hash_v2() {","counters":[]},{"line":"//     //     let mut db = Database::<V2>::create(4);","counters":[]},{"line":"//     //     for _ in 0..16 {","counters":[]},{"line":"//     //         db.create_account((), Account::empty()).unwrap();","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         db.create_account((), Account::empty()).unwrap_err(),","counters":[]},{"line":"//     //         DatabaseError::OutOfLeaves","counters":[]},{"line":"//     //     );","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     elog!(\"ROOT_HASH={:?}\", hash.to_string());","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"","counters":[]},{"line":"//     //     let mut db = Database::<V2>::create(4);","counters":[]},{"line":"//     //     for _ in 0..1 {","counters":[]},{"line":"//     //         db.create_account((), Account::empty()).unwrap();","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"","counters":[]},{"line":"//     //     let db = Database::<V2>::create(4);","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"169bada2f4bb2ea2b8189f47cf2b665e3e0fb135233242ae1b52794eb3fe7924\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"//     // }","counters":[]},{"line":"","counters":[]},{"line":"//     /// Accounts inserted in a different order produce different root hash","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_root_hash_different_orders() {","counters":[]},{"line":"//         let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"//         let accounts = (0..16).map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//         for account in &accounts {","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"//                 .unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"//         let root_hash_1 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(4);","counters":[]},{"line":"//         for account in accounts.iter().rev() {","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account.clone())","counters":[]},{"line":"//                 .unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"//         let root_hash_2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         // Different orders, different root hash","counters":[]},{"line":"//         assert_ne!(root_hash_1, root_hash_2);","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(4);","counters":[]},{"line":"//         for account in accounts {","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"//         let root_hash_3 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         // Same orders, same root hash","counters":[]},{"line":"//         assert_eq!(root_hash_1, root_hash_3);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // /// An empty tree produces the same hash than a tree full of empty accounts","counters":[]},{"line":"//     // #[test]","counters":[]},{"line":"//     // fn test_root_hash_legacy() {","counters":[]},{"line":"//     //     let mut db = Database::<V1>::create(4);","counters":[]},{"line":"//     //     for _ in 0..16 {","counters":[]},{"line":"//     //         db.create_account((), AccountLegacy::empty()).unwrap();","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         db.create_account((), AccountLegacy::empty()).unwrap_err(),","counters":[]},{"line":"//     //         DatabaseError::OutOfLeaves","counters":[]},{"line":"//     //     );","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"","counters":[]},{"line":"//     //     let mut db = Database::<V1>::create(4);","counters":[]},{"line":"//     //     for _ in 0..1 {","counters":[]},{"line":"//     //         db.create_account((), AccountLegacy::empty()).unwrap();","counters":[]},{"line":"//     //     }","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"","counters":[]},{"line":"//     //     let db = Database::<V1>::create(4);","counters":[]},{"line":"//     //     let hash = db.root_hash();","counters":[]},{"line":"//     //     assert_eq!(","counters":[]},{"line":"//     //         hash.to_hex(),","counters":[]},{"line":"//     //         \"2db7d27130b6fe46b95541a70bc69ac51d9ea02825f7a7ab41ec4c414989421e\"","counters":[]},{"line":"//     //     );","counters":[]},{"line":"//     // }","counters":[]},{"line":"// }","counters":[]},{"line":"","counters":[]},{"line":"// #[cfg(test)]","counters":[]},{"line":"// mod tests_ocaml {","counters":[]},{"line":"//     use o1_utils::FieldHelpers;","counters":[]},{"line":"//     use rand::Rng;","counters":[]},{"line":"","counters":[]},{"line":"//     #[cfg(target_family = \"wasm\")]","counters":[]},{"line":"//     use wasm_bindgen_test::wasm_bindgen_test as test;","counters":[]},{"line":"","counters":[]},{"line":"//     use super::*;","counters":[]},{"line":"","counters":[]},{"line":"//     // \"add and retrieve an account\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_add_retrieve_account() {","counters":[]},{"line":"//         let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"//         let account = Account::rand();","counters":[]},{"line":"//         let location = db.create_account(account.id(), account.clone()).unwrap();","counters":[]},{"line":"//         let get_account = db.get(location.clone()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(account, get_account);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"accounts are atomic\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_accounts_are_atomic() {","counters":[]},{"line":"//         let mut db = Database::<V2>::create(4);","counters":[]},{"line":"","counters":[]},{"line":"//         let account = Account::rand();","counters":[]},{"line":"//         let location: Address = db","counters":[]},{"line":"//             .create_account(account.id(), account.clone())","counters":[]},{"line":"//             .unwrap()","counters":[]},{"line":"//             .addr();","counters":[]},{"line":"","counters":[]},{"line":"//         db.set(location.clone(), account.clone());","counters":[]},{"line":"//         let loc = db.location_of_account(&account.id()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(location, loc);","counters":[]},{"line":"//         assert_eq!(db.get(location), db.get(loc));","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"length\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_lengths() {","counters":[]},{"line":"//         for naccounts in 50..100 {","counters":[]},{"line":"//             let mut db = Database::<V2>::create(10);","counters":[]},{"line":"//             let mut unique = HashSet::with_capacity(naccounts);","counters":[]},{"line":"","counters":[]},{"line":"//             for _ in 0..naccounts {","counters":[]},{"line":"//                 let account = loop {","counters":[]},{"line":"//                     let account = Account::rand();","counters":[]},{"line":"//                     if unique.insert(account.id()) {","counters":[]},{"line":"//                         break account;","counters":[]},{"line":"//                     }","counters":[]},{"line":"//                 };","counters":[]},{"line":"","counters":[]},{"line":"//                 db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//             }","counters":[]},{"line":"","counters":[]},{"line":"//             assert_eq!(db.num_accounts(), naccounts);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"get_or_create_acount does not update an account if key already\"\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_no_update_if_exist() {","counters":[]},{"line":"//         let mut db = Database::<V2>::create(10);","counters":[]},{"line":"","counters":[]},{"line":"//         let mut account1 = Account::rand();","counters":[]},{"line":"//         account1.balance = 100;","counters":[]},{"line":"","counters":[]},{"line":"//         let location1 = db","counters":[]},{"line":"//             .get_or_create_account(account1.id(), account1.clone())","counters":[]},{"line":"//             .unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         let mut account2 = account1;","counters":[]},{"line":"//         account2.balance = 200;","counters":[]},{"line":"","counters":[]},{"line":"//         let location2 = db","counters":[]},{"line":"//             .get_or_create_account(account2.id(), account2.clone())","counters":[]},{"line":"//             .unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         let addr1: Address = location1.clone();","counters":[]},{"line":"//         let addr2: Address = location2.clone();","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(addr1, addr2);","counters":[]},{"line":"//         assert!(matches!(location2, GetOrCreated::Existed(_)));","counters":[]},{"line":"//         assert_ne!(db.get(location1.addr()).unwrap(), account2);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"get_or_create_account t account = location_of_account account.key\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_location_of_account() {","counters":[]},{"line":"//         for naccounts in 50..100 {","counters":[]},{"line":"//             let mut db = Database::<V2>::create(10);","counters":[]},{"line":"","counters":[]},{"line":"//             for _ in 0..naccounts {","counters":[]},{"line":"//                 let account = Account::rand();","counters":[]},{"line":"","counters":[]},{"line":"//                 let account_id = account.id();","counters":[]},{"line":"//                 let location = db","counters":[]},{"line":"//                     .get_or_create_account(account_id.clone(), account)","counters":[]},{"line":"//                     .unwrap();","counters":[]},{"line":"//                 let addr: Address = location.addr();","counters":[]},{"line":"","counters":[]},{"line":"//                 assert_eq!(addr, db.location_of_account(&account_id).unwrap());","counters":[]},{"line":"//             }","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"//     //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_set_inner_hash() {","counters":[]},{"line":"//         // TODO","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     fn create_full_db(depth: usize) -> Database<V2> {","counters":[]},{"line":"//         let mut db = Database::<V2>::create(depth as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..2u64.pow(depth as u32) {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         db","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"//     //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_get_set_all_same_root_hash() {","counters":[]},{"line":"//         let mut db = create_full_db(7);","counters":[]},{"line":"","counters":[]},{"line":"//         let merkle_root1 = db.merkle_root();","counters":[]},{"line":"//         let root = Address::root();","counters":[]},{"line":"","counters":[]},{"line":"//         let accounts = db.get_all_accounts_rooted_at(root.clone()).unwrap();","counters":[]},{"line":"//         let accounts = accounts.into_iter().map(|acc| acc.1).collect::<Vec<_>>();","counters":[]},{"line":"//         db.set_all_accounts_rooted_at(root, &accounts).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//         let merkle_root2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(merkle_root1, merkle_root2);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"set_inner_hash_at_addr_exn(address,hash);","counters":[]},{"line":"//     //  get_inner_hash_at_addr_exn(address) = hash\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_set_batch_accounts_change_root_hash() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..5 {","counters":[]},{"line":"//             let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"//             let addr = Address::rand_nonleaf(DEPTH);","counters":[]},{"line":"//             let children = addr.iter_children(DEPTH);","counters":[]},{"line":"//             let accounts = children","counters":[]},{"line":"//                 .map(|addr| (addr, Account::rand()))","counters":[]},{"line":"//                 .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//             let merkle_root1 = db.merkle_root();","counters":[]},{"line":"//             elog!(\"naccounts={:?}\", accounts.len());","counters":[]},{"line":"//             db.set_batch_accounts(&accounts);","counters":[]},{"line":"//             let merkle_root2 = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//             assert_ne!(merkle_root1, merkle_root2);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"We can retrieve accounts by their by key after using","counters":[]},{"line":"//     //  set_batch_accounts\"\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_retrieve_account_after_set_batch() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         let mut addr = Address::root();","counters":[]},{"line":"//         for _ in 0..63 {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             addr = db","counters":[]},{"line":"//                 .get_or_create_account(account.id(), account)","counters":[]},{"line":"//                 .unwrap()","counters":[]},{"line":"//                 .addr();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let last_location = db.last_filled().unwrap();","counters":[]},{"line":"//         assert_eq!(addr, last_location);","counters":[]},{"line":"","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(2u64.pow(DEPTH as u32) as usize);","counters":[]},{"line":"","counters":[]},{"line":"//         while let Some(next_addr) = addr.next() {","counters":[]},{"line":"//             accounts.push((next_addr.clone(), Account::rand()));","counters":[]},{"line":"//             addr = next_addr;","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         db.set_batch_accounts(&accounts);","counters":[]},{"line":"","counters":[]},{"line":"//         for (addr, account) in &accounts {","counters":[]},{"line":"//             let account_id = account.id();","counters":[]},{"line":"//             let location = db.location_of_account(&account_id).unwrap();","counters":[]},{"line":"//             let queried_account = db.get(location.clone()).unwrap();","counters":[]},{"line":"","counters":[]},{"line":"//             assert_eq!(*addr, location);","counters":[]},{"line":"//             assert_eq!(*account, queried_account);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let expected_last_location = last_location.to_index().0 + accounts.len() as u64;","counters":[]},{"line":"//         let actual_last_location = db.last_filled().unwrap().to_index().0;","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(expected_last_location, actual_last_location);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"If the entire database is full,","counters":[]},{"line":"//     //  set_all_accounts_rooted_at_exn(address,accounts);get_all_accounts_rooted_at_exn(address)","counters":[]},{"line":"//     //  = accounts\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_set_accounts_rooted_equal_get_accounts_rooted() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..5 {","counters":[]},{"line":"//             let addr = Address::rand_nonleaf(DEPTH);","counters":[]},{"line":"//             let children = addr.iter_children(DEPTH);","counters":[]},{"line":"//             let accounts = children.map(|_| Account::rand()).collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//             db.set_all_accounts_rooted_at(addr.clone(), &accounts)","counters":[]},{"line":"//                 .unwrap();","counters":[]},{"line":"//             let list = db","counters":[]},{"line":"//                 .get_all_accounts_rooted_at(addr)","counters":[]},{"line":"//                 .unwrap()","counters":[]},{"line":"//                 .into_iter()","counters":[]},{"line":"//                 .map(|(_, acc)| acc)","counters":[]},{"line":"//                 .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//             assert!(!accounts.is_empty());","counters":[]},{"line":"//             assert_eq!(accounts, list);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"create_empty doesn't modify the hash\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_create_empty_doesnt_modify_hash() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         let start_hash = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         let account = Account::empty();","counters":[]},{"line":"//         assert!(matches!(","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap(),","counters":[]},{"line":"//             GetOrCreated::Added(_)","counters":[]},{"line":"//         ));","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(start_hash, db.merkle_root());","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"get_at_index_exn t (index_of_account_exn t public_key) =","counters":[]},{"line":"//     // account\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_get_indexed() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             accounts.push(account.clone());","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         for account in accounts {","counters":[]},{"line":"//             let account_id = account.id();","counters":[]},{"line":"//             let index_of_account = db.index_of_account(account_id).unwrap();","counters":[]},{"line":"//             let indexed_account = db.get_at_index(index_of_account).unwrap();","counters":[]},{"line":"//             assert_eq!(account, indexed_account);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"set_at_index_exn t index  account; get_at_index_exn t","counters":[]},{"line":"//     // index = account\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_set_get_indexed_equal() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = create_full_db(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..50 {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             let index = rand::thread_rng().gen_range(0..NACCOUNTS);","counters":[]},{"line":"//             let index = AccountIndex(index as u64);","counters":[]},{"line":"","counters":[]},{"line":"//             db.set_at_index(index.clone(), account.clone()).unwrap();","counters":[]},{"line":"//             let at_index = db.get_at_index(index).unwrap();","counters":[]},{"line":"//             assert_eq!(account, at_index);","counters":[]},{"line":"//         }","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"iter\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_iter() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             accounts.push(account.clone());","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(accounts, db.to_list(),)","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"Add 2^d accounts (for testing, d is small)\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_retrieve() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             accounts.push(account.clone());","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let retrieved = db","counters":[]},{"line":"//             .get_all_accounts_rooted_at(Address::root())","counters":[]},{"line":"//             .unwrap()","counters":[]},{"line":"//             .into_iter()","counters":[]},{"line":"//             .map(|(_, acc)| acc)","counters":[]},{"line":"//             .collect::<Vec<_>>();","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(accounts, retrieved);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"removing accounts restores Merkle root\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_remove_restore_root_hash() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         let root_hash = db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         let mut accounts = Vec::with_capacity(NACCOUNTS);","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             accounts.push(account.id());","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"//         assert_ne!(root_hash, db.merkle_root());","counters":[]},{"line":"","counters":[]},{"line":"//         db.remove_accounts(&accounts);","counters":[]},{"line":"//         assert_eq!(root_hash, db.merkle_root());","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"fold over account balances\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_fold_over_account_balance() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         let mut total_balance: u128 = 0;","counters":[]},{"line":"","counters":[]},{"line":"//         for _ in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             total_balance += account.balance as u128;","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let retrieved = db.fold(0u128, |acc, account| acc + account.balance as u128);","counters":[]},{"line":"//         assert_eq!(total_balance, retrieved);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"fold_until over account balances\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_fold_until_over_account_balance() {","counters":[]},{"line":"//         const DEPTH: usize = 7;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         let mut total_balance: u128 = 0;","counters":[]},{"line":"//         let mut last_id: AccountId = Account::empty().id();","counters":[]},{"line":"","counters":[]},{"line":"//         for i in 0..NACCOUNTS {","counters":[]},{"line":"//             let account = Account::rand();","counters":[]},{"line":"//             if i <= 30 {","counters":[]},{"line":"//                 total_balance += account.balance as u128;","counters":[]},{"line":"//                 last_id = account.id();","counters":[]},{"line":"//             }","counters":[]},{"line":"//             db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         let retrieved = db.fold_until(0u128, |mut acc, account| {","counters":[]},{"line":"//             acc += account.balance as u128;","counters":[]},{"line":"","counters":[]},{"line":"//             if account.id() != last_id {","counters":[]},{"line":"//                 ControlFlow::Continue(acc)","counters":[]},{"line":"//             } else {","counters":[]},{"line":"//                 ControlFlow::Break(acc)","counters":[]},{"line":"//             }","counters":[]},{"line":"//         });","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(total_balance, retrieved);","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_merkle_path_long() {","counters":[]},{"line":"//         const DEPTH: usize = 4;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         for index in 0..NACCOUNTS / 2 {","counters":[]},{"line":"//             let mut account = Account::empty();","counters":[]},{"line":"//             account.token_id = TokenId::from(index as u64);","counters":[]},{"line":"","counters":[]},{"line":"//             // elog!(\"account{}={}\", index, account.hash().to_hex());","counters":[]},{"line":"","counters":[]},{"line":"//             let res = db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//             assert!(matches!(res, GetOrCreated::Added(_)));","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"naccounts={:?}\", db.last_filled());","counters":[]},{"line":"","counters":[]},{"line":"//         let expected = [","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"71298a5f73dd7d57f0ab0c4dacac55e2b2ce1c193edc2353835b269c2a9be13b\",","counters":[]},{"line":"//                 \"64d19228e63f9b57b028553f27f55ea097632017f37fd4af09f0ca35f82b7332\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"c5eb02a1d128c64711c49e37529579542d809f502af3e3e2770bc8fa4ca74412\",","counters":[]},{"line":"//                 \"71298a5f73dd7d57f0ab0c4dacac55e2b2ce1c193edc2353835b269c2a9be13b\",","counters":[]},{"line":"//                 \"64d19228e63f9b57b028553f27f55ea097632017f37fd4af09f0ca35f82b7332\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"4f2e586da9cb93d4616566321e9ad17ae67347a72376b6ccec7aedb9c3ced82e\",","counters":[]},{"line":"//                 \"f19a56d3eca39b57e18837af817f45936e0924db7efbbb57e63ae7398807ba2e\",","counters":[]},{"line":"//                 \"64d19228e63f9b57b028553f27f55ea097632017f37fd4af09f0ca35f82b7332\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"38647347399604e47925219669694bd7cd7701e872fa3d9ac4d39d5aca8f132a\",","counters":[]},{"line":"//                 \"f19a56d3eca39b57e18837af817f45936e0924db7efbbb57e63ae7398807ba2e\",","counters":[]},{"line":"//                 \"64d19228e63f9b57b028553f27f55ea097632017f37fd4af09f0ca35f82b7332\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"cd0744a5cfd8fe2d87521c892541dd6a71453fe783c2155ac8a440ad7a1cad2c\",","counters":[]},{"line":"//                 \"abe1d4fab2bdebf82cc7984d15d47d758de9c3dd2f69cdcaabb3a1fe27794d24\",","counters":[]},{"line":"//                 \"abe5bcdbdaed54618f00cab4e4c49c11eda843dce6ec041f532ee723cf80d626\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d8df812fa7cce8f3947ea41b8ad3521785b5b6f3f131da67fa617b66913acd0f\",","counters":[]},{"line":"//                 \"abe1d4fab2bdebf82cc7984d15d47d758de9c3dd2f69cdcaabb3a1fe27794d24\",","counters":[]},{"line":"//                 \"abe5bcdbdaed54618f00cab4e4c49c11eda843dce6ec041f532ee723cf80d626\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"508811d43431391b810f672a1454add86952de9b0a21e914148a89e993521d15\",","counters":[]},{"line":"//                 \"22f9538d5ec69873bf6b44a282c15cc71f22fe07e316508778f1fbbc7e79b425\",","counters":[]},{"line":"//                 \"abe5bcdbdaed54618f00cab4e4c49c11eda843dce6ec041f532ee723cf80d626\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"bdfebc93f1171b0f0894a3e1fdf4248b07df335fc8ad7239b679eaab11074d0c\",","counters":[]},{"line":"//                 \"22f9538d5ec69873bf6b44a282c15cc71f22fe07e316508778f1fbbc7e79b425\",","counters":[]},{"line":"//                 \"abe5bcdbdaed54618f00cab4e4c49c11eda843dce6ec041f532ee723cf80d626\",","counters":[]},{"line":"//                 \"55b6cdf6bdb5c706c6dc2564e850d298e4cef8e341cc168048f1e74e1b4b281b\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//             &[","counters":[]},{"line":"//                 \"d4d7b7ce909834320e88ec673845a34218e266aef76ae8b0762fef9c915c3a0f\",","counters":[]},{"line":"//                 \"0621ecfccd1f4b6f29537e023cd007eeb04b056815bcba90ee8e5331941b572c\",","counters":[]},{"line":"//                 \"6cfac5c1603e77955841833596a94e1705aa3e15ecd5ab2a582f1156027b1231\",","counters":[]},{"line":"//                 \"83db2f65d14022f2070cb1eec617a2cf92990bc9ee5a683124875b97cd1b7029\",","counters":[]},{"line":"//             ][..],","counters":[]},{"line":"//         ];","counters":[]},{"line":"","counters":[]},{"line":"//         let mut hashes = Vec::with_capacity(100);","counters":[]},{"line":"","counters":[]},{"line":"//         let root = Address::root();","counters":[]},{"line":"//         let nchild = root.iter_children(DEPTH);","counters":[]},{"line":"","counters":[]},{"line":"//         for child in nchild {","counters":[]},{"line":"//             let path = db.merkle_path(child);","counters":[]},{"line":"//             let path = path.iter().map(|p| p.hash().to_hex()).collect::<Vec<_>>();","counters":[]},{"line":"//             hashes.push(path);","counters":[]},{"line":"//         }","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"expected={:#?}\", expected);","counters":[]},{"line":"//         // elog!(\"computed={:#?}\", hashes);","counters":[]},{"line":"","counters":[]},{"line":"//         assert_eq!(&expected[..], hashes.as_slice());","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"fold_until over account balances\"","counters":[]},{"line":"//     #[test]","counters":[]},{"line":"//     fn test_merkle_path_test2() {","counters":[]},{"line":"//         const DEPTH: usize = 20;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         db.merkle_path(Address::first(20));","counters":[]},{"line":"//     }","counters":[]},{"line":"","counters":[]},{"line":"//     // \"fold_until over account balances\"","counters":[]},{"line":"//     // #[test]","counters":[]},{"line":"//     fn test_merkle_path_test() {","counters":[]},{"line":"//         const DEPTH: usize = 4;","counters":[]},{"line":"//         const NACCOUNTS: usize = 2u64.pow(DEPTH as u32) as usize;","counters":[]},{"line":"","counters":[]},{"line":"//         elog!(\"empty={}\", Account::empty().hash());","counters":[]},{"line":"//         elog!(\"depth1={}\", V2::empty_hash_at_depth(1));","counters":[]},{"line":"//         elog!(\"depth2={}\", V2::empty_hash_at_depth(2));","counters":[]},{"line":"//         elog!(\"depth3={}\", V2::empty_hash_at_depth(3));","counters":[]},{"line":"//         elog!(\"depth4={}\", V2::empty_hash_at_depth(4));","counters":[]},{"line":"","counters":[]},{"line":"//         // let db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         // db.merkle_root();","counters":[]},{"line":"//         // db.merkle_path(Address::first(DEPTH));","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"WITH_ACC\");","counters":[]},{"line":"","counters":[]},{"line":"//         // let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"//         // let mut account = Account::empty();","counters":[]},{"line":"//         // account.token_symbol = \"seb\".to_string();","counters":[]},{"line":"//         // db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         // db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         let mut db = Database::<V2>::create(DEPTH as u8);","counters":[]},{"line":"","counters":[]},{"line":"//         // for _ in 0..NACCOUNTS {","counters":[]},{"line":"//         //     let account = Account::rand();","counters":[]},{"line":"//         //     db.get_or_create_account(account.id(), account).unwrap();","counters":[]},{"line":"//         // }","counters":[]},{"line":"","counters":[]},{"line":"//         db.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"//         db.merkle_path(Address::first(DEPTH));","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_0={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"0000\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_0={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"0001\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_0={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"0010\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_0={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"0101\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"A\");","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_3={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"000\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_3={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"001\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_3={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"010\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_3={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"101\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"A\");","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_2={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"10\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_2={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"01\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"A\");","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_1={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"1\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_1={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"0\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"","counters":[]},{"line":"//         // elog!(\"A\");","counters":[]},{"line":"//         // elog!(","counters":[]},{"line":"//         //     \"INNER_AT_0={}\",","counters":[]},{"line":"//         //     db.get_inner_hash_at_addr(Address::try_from(\"\").unwrap())","counters":[]},{"line":"//         //         .unwrap()","counters":[]},{"line":"//         // );","counters":[]},{"line":"//     }","counters":[]},{"line":"// }","counters":[]}]}