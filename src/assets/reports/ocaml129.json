{"filename":"src/lib/transition_handler/validator.ml","lines":[{"line":"open Async_kernel","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"open Cache_lib","counters":[]},{"line":"open Mina_block","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"module type CONTEXT = sig","counters":[]},{"line":"  val logger : Logger.t","counters":[]},{"line":"","counters":[]},{"line":"  val precomputed_values : Precomputed_values.t","counters":[]},{"line":"","counters":[]},{"line":"  val constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"","counters":[]},{"line":"  val consensus_constants : Consensus.Constants.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let validate_transition ~context:(module Context : CONTEXT) ~frontier","counters":[]},{"line":"    ~unprocessed_transition_cache enveloped_transition =","counters":[]},{"line":"  let module Context = struct","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    include Context","counters":[]},{"line":"","counters":[]},{"line":"    let logger =","counters":[]},{"line":"      Logger.extend logger","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"        [ (\"selection_context\", `String \"Transition_handler.Validator\") ]","counters":[]},{"line":"  end in","counters":[]},{"line":"  let open Result.Let_syntax in","counters":[]},{"line":"  let transition =","counters":[]},{"line":"    Envelope.Incoming.data enveloped_transition","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    |> Mina_block.Validation.block_with_hash","counters":[]},{"line":"  in","counters":[]},{"line":"  let transition_hash = State_hash.With_state_hashes.state_hash transition in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let root_breadcrumb = Transition_frontier.root frontier in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () =","counters":[]},{"line":"    Option.fold","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      (Transition_frontier.find frontier transition_hash)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      ~init:Result.(Ok ())","counters":[]},{"line":"      ~f:(fun _ _ -> Result.Error (`In_frontier transition_hash))","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind () =","counters":[]},{"line":"    Option.fold","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      (Unprocessed_transition_cache.final_state unprocessed_transition_cache","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"         enveloped_transition )","counters":[]},{"line":"      ~init:Result.(Ok ())","counters":[]},{"line":"      ~f:(fun _ final_state -> Result.Error (`In_process final_state))","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%map () =","counters":[]},{"line":"    Result.ok_if_true","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      (Consensus.Hooks.equal_select_status `Take","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"         (Consensus.Hooks.select","counters":[]},{"line":"            ~context:(module Context)","counters":[]},{"line":"            ~existing:","counters":[]},{"line":"              (Transition_frontier.Breadcrumb.consensus_state_with_hashes","counters":[{"col_start":72,"col_end":72,"count":0}]},{"line":"                 root_breadcrumb )","counters":[]},{"line":"            ~candidate:(With_hash.map ~f:Mina_block.consensus_state transition) ) )","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      ~error:`Disconnected","counters":[]},{"line":"  in","counters":[]},{"line":"  (* we expect this to be Ok since we just checked the cache *)","counters":[]},{"line":"  Unprocessed_transition_cache.register_exn unprocessed_transition_cache","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    enveloped_transition","counters":[]},{"line":"","counters":[]},{"line":"let run ~context:(module Context : CONTEXT) ~trust_system ~time_controller","counters":[]},{"line":"    ~frontier ~transition_reader","counters":[]},{"line":"    ~(valid_transition_writer :","counters":[]},{"line":"       ( [ `Block of","counters":[]},{"line":"           ( Mina_block.initial_valid_block Envelope.Incoming.t","counters":[]},{"line":"           , State_hash.t )","counters":[]},{"line":"           Cached.t ]","counters":[]},{"line":"         * [ `Valid_cb of Mina_net2.Validation_callback.t option ]","counters":[]},{"line":"       , drop_head buffered","counters":[]},{"line":"       , unit )","counters":[]},{"line":"       Writer.t ) ~unprocessed_transition_cache =","counters":[]},{"line":"  let open Context in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let module Lru = Core_extended_cache.Lru in","counters":[]},{"line":"  O1trace.background_thread \"validate_blocks_against_frontier\" (fun () ->","counters":[]},{"line":"      Reader.iter transition_reader","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~f:(fun (`Block transition_env, `Valid_cb vc) ->","counters":[]},{"line":"          let transition_with_hash, _ = Envelope.Incoming.data transition_env in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let transition_hash =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            State_hash.With_state_hashes.state_hash transition_with_hash","counters":[]},{"line":"          in","counters":[]},{"line":"          let transition = With_hash.data transition_with_hash in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let sender = Envelope.Incoming.sender transition_env in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          match","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            validate_transition","counters":[]},{"line":"              ~context:(module Context)","counters":[]},{"line":"              ~frontier ~unprocessed_transition_cache transition_env","counters":[]},{"line":"          with","counters":[]},{"line":"          | Ok cached_transition ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              let%map () =","counters":[]},{"line":"                Trust_system.record_envelope_sender trust_system logger sender","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                  ( Trust_system.Actions.Sent_useful_gossip","counters":[]},{"line":"                  , Some","counters":[]},{"line":"                      ( \"external transition $state_hash\"","counters":[]},{"line":"                      , [ (\"state_hash\", State_hash.to_yojson transition_hash)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"                        ; (\"transition\", Mina_block.to_yojson transition)","counters":[{"col_start":60,"col_end":60,"count":0}]},{"line":"                        ] ) )","counters":[]},{"line":"              in","counters":[]},{"line":"              let transition_time =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Mina_block.header transition","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                |> Header.protocol_state |> Protocol_state.blockchain_state","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"                |> Blockchain_state.timestamp |> Block_time.to_time_exn","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"              in","counters":[]},{"line":"              Perf_histograms.add_span","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ~name:\"accepted_transition_remote_latency\"","counters":[]},{"line":"                (Core_kernel.Time.diff","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                   Block_time.(now time_controller |> to_time_exn)","counters":[{"col_start":33,"col_end":33,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"                   transition_time ) ;","counters":[]},{"line":"              Writer.write valid_transition_writer","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                (`Block cached_transition, `Valid_cb vc)","counters":[]},{"line":"          | Error (`In_frontier _) | Error (`In_process _) ->","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"              Trust_system.record_envelope_sender trust_system logger sender","counters":[]},{"line":"                ( Trust_system.Actions.Sent_old_gossip","counters":[]},{"line":"                , Some","counters":[]},{"line":"                    ( \"external transition with state hash $state_hash\"","counters":[]},{"line":"                    , [ (\"state_hash\", State_hash.to_yojson transition_hash)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                      ; (\"transition\", Mina_block.to_yojson transition)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                      ] ) )","counters":[]},{"line":"          | Error `Disconnected ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_metrics.(Counter.inc_one Rejected_blocks.worse_than_root) ;","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"              [%log error]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"                ~metadata:","counters":[]},{"line":"                  [ (\"state_hash\", State_hash.to_yojson transition_hash)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                  ; (\"reason\", `String \"not selected over current root\")","counters":[]},{"line":"                  ; ( \"protocol_state\"","counters":[]},{"line":"                    , Header.protocol_state (Mina_block.header transition)","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"                      |> Protocol_state.value_to_yojson )","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"                  ]","counters":[]},{"line":"                \"Validation error: external transition with state hash \\","counters":[]},{"line":"                 $state_hash was rejected for reason $reason\" ;","counters":[]},{"line":"              Trust_system.record_envelope_sender trust_system logger sender","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                ( Trust_system.Actions.Disconnected_chain","counters":[]},{"line":"                , Some","counters":[]},{"line":"                    ( \"received transition that was not connected to our chain \\","counters":[]},{"line":"                       from $sender\"","counters":[]},{"line":"                    , [ ( \"sender\"","counters":[]},{"line":"                        , Envelope.Sender.to_yojson","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"                            (Envelope.Incoming.sender transition_env) )","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                      ; (\"transition\", Mina_block.to_yojson transition)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"                      ] ) ) ) )","counters":[{"col_start":30,"col_end":30,"count":2}]}]}