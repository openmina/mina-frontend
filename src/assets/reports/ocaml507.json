{"filename":"src/lib/mina_base/account.ml","lines":[{"line":"(* account.ml *)","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_util","counters":[]},{"line":"open Snark_params","counters":[]},{"line":"open Tick","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"open Fold_lib","counters":[]},{"line":"open Mina_base_import","counters":[]},{"line":"","counters":[]},{"line":"module Index = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      module T = struct","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"        type t = int [@@deriving to_yojson, sexp, hash, compare]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0}]},{"line":"      end","counters":[{"col_start":8,"col_end":8,"count":5}]},{"line":"","counters":[]},{"line":"      include T","counters":[]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      include Hashable.Make_binable (T)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  include Hashable.Make_binable (Stable.Latest)","counters":[]},{"line":"","counters":[]},{"line":"  let to_int = Int.to_int","counters":[]},{"line":"","counters":[]},{"line":"  let gen ~ledger_depth = Int.gen_incl 0 ((1 lsl ledger_depth) - 1)","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  module Vector = struct","counters":[]},{"line":"    include Int","counters":[]},{"line":"","counters":[]},{"line":"    let empty = zero","counters":[]},{"line":"","counters":[]},{"line":"    let get t i = (t lsr i) land 1 = 1","counters":[{"col_start":18,"col_end":18,"count":40}]},{"line":"","counters":[]},{"line":"    let set v i b = if b then v lor (one lsl i) else v land lnot (one lsl i)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":53,"col_end":53,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_bits ~ledger_depth t = List.init ledger_depth ~f:(Vector.get t)","counters":[{"col_start":32,"col_end":32,"count":4},{"col_start":68,"col_end":68,"count":4}]},{"line":"","counters":[]},{"line":"  let of_bits = List.foldi ~init:Vector.empty ~f:(fun i t b -> Vector.set t i b)","counters":[{"col_start":63,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input ~ledger_depth x =","counters":[]},{"line":"    List.map (to_bits ~ledger_depth x) ~f:(fun b -> (field_of_bool b, 1))","counters":[{"col_start":4,"col_end":4,"count":4},{"col_start":11,"col_end":11,"count":4},{"col_start":20,"col_end":20,"count":4},{"col_start":52,"col_end":52,"count":40},{"col_start":65,"col_end":65,"count":40}]},{"line":"    |> List.to_array |> Random_oracle.Input.Chunked.packeds","counters":[{"col_start":19,"col_end":19,"count":4}]},{"line":"","counters":[]},{"line":"  let fold_bits ~ledger_depth t =","counters":[]},{"line":"    { Fold.fold =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        (fun ~init ~f ->","counters":[]},{"line":"          let rec go acc i =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            if i = ledger_depth then acc else go (f acc (Vector.get t i)) (i + 1)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"          in","counters":[]},{"line":"          go init 0 )","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let fold ~ledger_depth t =","counters":[]},{"line":"    Fold.group3 ~default:false (fold_bits ~ledger_depth t)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  module Unpacked = struct","counters":[]},{"line":"    type var = Tick.Boolean.var list","counters":[]},{"line":"","counters":[]},{"line":"    type value = Vector.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_input x =","counters":[]},{"line":"      List.map x ~f:(fun (b : Boolean.var) -> ((b :> Field.Var.t), 1))","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      |> List.to_array |> Random_oracle.Input.Chunked.packeds","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"    let typ ~ledger_depth : (var, value) Tick.Typ.t =","counters":[]},{"line":"      Typ.transport","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Typ.list ~length:ledger_depth Boolean.typ)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        ~there:(to_bits ~ledger_depth) ~back:of_bits","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Nonce = Account_nonce","counters":[]},{"line":"","counters":[]},{"line":"module Token_symbol = struct","counters":[]},{"line":"  [%%versioned_binable","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      module T = struct","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        type t = string [@@deriving sexp, equal, compare, hash, yojson]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"        let max_length = 6","counters":[]},{"line":"","counters":[]},{"line":"        let check (x : t) = assert (String.length x <= max_length)","counters":[{"col_start":35,"col_end":35,"count":472},{"col_start":48,"col_end":48,"count":236}]},{"line":"","counters":[]},{"line":"        let t_of_sexp sexp =","counters":[]},{"line":"          let res = t_of_sexp sexp in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          check res ; res","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"        let of_yojson json =","counters":[]},{"line":"          let res = of_yojson json in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Result.bind res ~f:(fun res ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"              Result.try_with (fun () -> check res)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"              |> Result.map ~f:(Fn.const res)","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"              |> Result.map_error","counters":[]},{"line":"                   ~f:(Fn.const \"Token_symbol.of_yojson: symbol is too long\") )","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      end","counters":[{"col_start":8,"col_end":8,"count":1}]},{"line":"","counters":[]},{"line":"      include T","counters":[]},{"line":"","counters":[]},{"line":"      include","counters":[]},{"line":"        Binable.Of_binable_without_uuid","counters":[]},{"line":"          (Core_kernel.String.Stable.V1)","counters":[]},{"line":"          (struct","counters":[]},{"line":"            type t = string","counters":[]},{"line":"","counters":[]},{"line":"            let to_binable = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"            let of_binable x = check x ; x","counters":[{"col_start":31,"col_end":31,"count":236},{"col_start":41,"col_end":41,"count":236}]},{"line":"          end)","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  [%%define_locally","counters":[]},{"line":"  Stable.Latest.","counters":[]},{"line":"    (sexp_of_t, t_of_sexp, equal, to_yojson, of_yojson, max_length, check)]","counters":[]},{"line":"","counters":[]},{"line":"  let default = \"\"","counters":[]},{"line":"","counters":[]},{"line":"  (* 48 = max_length * 8 *)","counters":[]},{"line":"  module Num_bits = Pickles_types.Nat.N48","counters":[]},{"line":"","counters":[]},{"line":"  let num_bits = Pickles_types.Nat.to_int Num_bits.n","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"","counters":[]},{"line":"  let to_bits (x : t) =","counters":[]},{"line":"    Pickles_types.Vector.init Num_bits.n ~f:(fun i ->","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"        let byte_index = i / 8 in","counters":[{"col_start":8,"col_end":8,"count":96}]},{"line":"        if byte_index < String.length x then","counters":[{"col_start":36,"col_end":36,"count":96}]},{"line":"          let c = x.[byte_index] |> Char.to_int in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          c land (1 lsl (i mod 8)) <> 0","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        else false )","counters":[{"col_start":13,"col_end":13,"count":96}]},{"line":"","counters":[]},{"line":"  let of_bits x : t =","counters":[]},{"line":"    let c, j, chars =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Pickles_types.Vector.fold x ~init:(0, 0, []) ~f:(fun (c, j, chars) x ->","counters":[]},{"line":"          let c = c lor ((if x then 1 else 0) lsl j) in","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"          if j = 7 then (0, 0, Char.of_int_exn c :: chars) else (c, j + 1, chars) )","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"    in","counters":[]},{"line":"    assert (c = 0) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"    assert (j = 0) ;","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    let chars = List.drop_while ~f:(fun c -> Char.to_int c = 0) chars in","counters":[{"col_start":45,"col_end":45,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"    String.of_char_list (List.rev chars)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"to_bits of_bits roundtrip\" =","counters":[]},{"line":"    Quickcheck.test ~trials:30 ~seed:(`Deterministic \"\")","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Quickcheck.Generator.list_with_length","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"         (Pickles_types.Nat.to_int Num_bits.n)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"         Quickcheck.Generator.bool )","counters":[]},{"line":"      ~f:(fun x ->","counters":[]},{"line":"        let v = Pickles_types.Vector.of_list_and_length_exn x Num_bits.n in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        Pickles_types.Vector.iter2","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (to_bits (of_bits v))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"          v","counters":[]},{"line":"          ~f:(fun x y -> assert (Bool.equal x y)) )","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"of_bits to_bits roundtrip\" =","counters":[]},{"line":"    Quickcheck.test ~trials:30 ~seed:(`Deterministic \"\")","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"      let%bind len = Int.gen_incl 0 max_length in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"      String.gen_with_length len","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Char.gen_uniform_inclusive Char.min_value Char.max_value))","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      ~f:(fun x -> assert (String.equal (of_bits (to_bits x)) x))","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"  let to_field (x : t) : Field.t =","counters":[]},{"line":"    Field.project (Pickles_types.Vector.to_list (to_bits x))","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":46,"col_end":46,"count":2},{"col_start":55,"col_end":55,"count":2}]},{"line":"","counters":[]},{"line":"  let to_input (x : t) =","counters":[]},{"line":"    Random_oracle_input.Chunked.packed (to_field x, num_bits)","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":47,"col_end":47,"count":2}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  type var = Field.Var.t","counters":[]},{"line":"","counters":[]},{"line":"  let range_check (t : var) =","counters":[]},{"line":"    let%bind actual =","counters":[]},{"line":"      make_checked (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          let _, _, actual_packed =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Pickles.Scalar_challenge.to_field_checked' ~num_bits m","counters":[]},{"line":"              (Kimchi_backend_common.Scalar_challenge.create t)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"          in","counters":[]},{"line":"          actual_packed )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    Field.Checked.Assert.equal t actual","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let var_of_value x =","counters":[]},{"line":"    Pickles_types.Vector.map ~f:Boolean.var_of_value (to_bits x)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"  let of_field (x : Field.t) : t =","counters":[]},{"line":"    of_bits","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Pickles_types.Vector.of_list_and_length_exn","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"         (List.take (Field.unpack x) num_bits)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"         Num_bits.n )","counters":[]},{"line":"","counters":[]},{"line":"  let typ : (var, t) Typ.t =","counters":[]},{"line":"    let (Typ typ) = Field.typ in","counters":[]},{"line":"    Typ.transport","counters":[{"col_start":16,"col_end":16,"count":1}]},{"line":"      (Typ { typ with check = (fun x -> make_checked_ast @@ range_check x) })","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"      ~there:to_field ~back:of_field","counters":[]},{"line":"","counters":[]},{"line":"  let var_to_input (x : var) = Random_oracle_input.Chunked.packed (x, num_bits)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let if_ = Tick.Run.Field.if_","counters":[]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ( 'pk","counters":[{"col_start":6,"col_end":6,"count":3981}]},{"line":"           , 'id","counters":[]},{"line":"           , 'token_permissions","counters":[]},{"line":"           , 'token_symbol","counters":[]},{"line":"           , 'amount","counters":[]},{"line":"           , 'nonce","counters":[]},{"line":"           , 'receipt_chain_hash","counters":[]},{"line":"           , 'delegate","counters":[]},{"line":"           , 'state_hash","counters":[]},{"line":"           , 'timing","counters":[]},{"line":"           , 'permissions","counters":[]},{"line":"           , 'zkapp_opt )","counters":[]},{"line":"           t =","counters":[{"col_start":11,"col_end":11,"count":27}]},{"line":"        { public_key : 'pk","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; token_id : 'id","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; token_permissions : 'token_permissions","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        ; token_symbol : 'token_symbol","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; balance : 'amount","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ; nonce : 'nonce","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; receipt_chain_hash : 'receipt_chain_hash","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        ; delegate : 'delegate","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; voting_for : 'state_hash","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        ; timing : 'timing","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; permissions : 'permissions","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; zkapp : 'zkapp_opt","counters":[{"col_start":10,"col_end":10,"count":1},{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, equal, compare, hash, yojson, fields, hlist]","counters":[{"col_start":67,"col_end":67,"count":3}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type ( 'pk","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"           , 'tid","counters":[]},{"line":"           , 'token_permissions","counters":[]},{"line":"           , 'amount","counters":[]},{"line":"           , 'nonce","counters":[]},{"line":"           , 'receipt_chain_hash","counters":[]},{"line":"           , 'delegate","counters":[]},{"line":"           , 'state_hash","counters":[]},{"line":"           , 'timing","counters":[]},{"line":"           , 'permissions","counters":[]},{"line":"           , 'snapp_opt )","counters":[]},{"line":"           t =","counters":[{"col_start":11,"col_end":11,"count":14}]},{"line":"        { public_key : 'pk","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; token_id : 'tid","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"        ; token_permissions : 'token_permissions","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"        ; balance : 'amount","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"        ; nonce : 'nonce","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ; receipt_chain_hash : 'receipt_chain_hash","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        ; delegate : 'delegate","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"        ; voting_for : 'state_hash","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"        ; timing : 'timing","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"        ; permissions : 'permissions","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; snapp : 'snapp_opt","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving sexp, equal, compare, hash, yojson, fields, hlist]","counters":[{"col_start":67,"col_end":67,"count":1}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let token = Poly.token_id","counters":[]},{"line":"","counters":[]},{"line":"module Key = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Public_key.Compressed.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":15,"col_end":15,"count":0}]},{"line":"      [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Identifier = Account_id","counters":[]},{"line":"","counters":[]},{"line":"type key = Key.t [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"module Timing = Account_timing","counters":[]},{"line":"","counters":[]},{"line":"module Binable_arg = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":276},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( Public_key.Compressed.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Token_id.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Token_permissions.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Token_symbol.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Balance.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Nonce.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Receipt.Chain_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Public_key.Compressed.Stable.V1.t option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"        , State_hash.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Timing.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Permissions.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        , Zkapp_account.Stable.V2.t option )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        (* TODO: Cache the digest of this? *)","counters":[]},{"line":"        Poly.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      let public_key (t : t) : key = t.public_key","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let check = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned_binable","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t = Binable_arg.Stable.V2.t","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":13,"col_end":13,"count":0}]},{"line":"    [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":50,"col_end":50,"count":1}]},{"line":"","counters":[]},{"line":"    include","counters":[]},{"line":"      Binable.Of_binable_without_uuid","counters":[]},{"line":"        (Binable_arg.Stable.V2)","counters":[]},{"line":"        (struct","counters":[]},{"line":"          type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"          let to_binable = check","counters":[]},{"line":"","counters":[]},{"line":"          let of_binable = check","counters":[]},{"line":"        end)","counters":[]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"    let public_key (t : t) : key = t.public_key","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally Stable.Latest.(public_key)]","counters":[]},{"line":"","counters":[]},{"line":"let identifier ({ public_key; token_id; _ } : t) =","counters":[]},{"line":"  Account_id.create public_key token_id","counters":[{"col_start":2,"col_end":2,"count":38}]},{"line":"","counters":[]},{"line":"type value =","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"  ( Public_key.Compressed.t","counters":[]},{"line":"  , Token_id.t","counters":[]},{"line":"  , Token_permissions.t","counters":[]},{"line":"  , Token_symbol.t","counters":[]},{"line":"  , Balance.t","counters":[]},{"line":"  , Nonce.t","counters":[]},{"line":"  , Receipt.Chain_hash.t","counters":[]},{"line":"  , Public_key.Compressed.t option","counters":[]},{"line":"  , State_hash.t","counters":[]},{"line":"  , Timing.t","counters":[]},{"line":"  , Permissions.t","counters":[]},{"line":"  , Zkapp_account.t option )","counters":[]},{"line":"  Poly.t","counters":[]},{"line":"[@@deriving sexp]","counters":[]},{"line":"","counters":[]},{"line":"let key_gen = Public_key.Compressed.gen","counters":[]},{"line":"","counters":[]},{"line":"let initialize account_id : t =","counters":[]},{"line":"  let public_key = Account_id.public_key account_id in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let token_id = Account_id.token_id account_id in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let delegate =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (* Only allow delegation if this account is for the default token. *)","counters":[]},{"line":"    if Token_id.(equal default token_id) then Some public_key else None","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"  in","counters":[]},{"line":"  { public_key","counters":[]},{"line":"  ; token_id","counters":[]},{"line":"  ; token_permissions = Token_permissions.default","counters":[]},{"line":"  ; token_symbol = \"\"","counters":[]},{"line":"  ; balance = Balance.zero","counters":[]},{"line":"  ; nonce = Nonce.zero","counters":[]},{"line":"  ; receipt_chain_hash = Receipt.Chain_hash.empty","counters":[]},{"line":"  ; delegate","counters":[]},{"line":"  ; voting_for = State_hash.dummy","counters":[]},{"line":"  ; timing = Timing.Untimed","counters":[]},{"line":"  ; permissions = Permissions.user_default","counters":[]},{"line":"  ; zkapp = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let hash_zkapp_account_opt = function","counters":[]},{"line":"  | None ->","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      Lazy.force Zkapp_account.default_digest","counters":[]},{"line":"  | Some (a : Zkapp_account.t) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Zkapp_account.digest a","counters":[]},{"line":"","counters":[]},{"line":"let delegate_opt = Option.value ~default:Public_key.Compressed.empty","counters":[]},{"line":"","counters":[]},{"line":"let to_input (t : t) =","counters":[]},{"line":"  let open Random_oracle.Input.Chunked in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  let f mk acc field = mk (Core_kernel.Field.get field t) :: acc in","counters":[{"col_start":23,"col_end":23,"count":12},{"col_start":24,"col_end":24,"count":12},{"col_start":47,"col_end":47,"count":12}]},{"line":"  Poly.Fields.fold ~init:[]","counters":[]},{"line":"    ~public_key:(f Public_key.Compressed.to_input)","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    ~token_id:(f Token_id.to_input) ~balance:(f Balance.to_input)","counters":[{"col_start":15,"col_end":15,"count":1},{"col_start":46,"col_end":46,"count":1}]},{"line":"    ~token_permissions:(f Token_permissions.to_input)","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"    ~token_symbol:(f Token_symbol.to_input) ~nonce:(f Nonce.to_input)","counters":[{"col_start":19,"col_end":19,"count":1},{"col_start":52,"col_end":52,"count":1}]},{"line":"    ~receipt_chain_hash:(f Receipt.Chain_hash.to_input)","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"    ~delegate:(f (Fn.compose Public_key.Compressed.to_input delegate_opt))","counters":[{"col_start":15,"col_end":15,"count":1},{"col_start":27,"col_end":27,"count":1}]},{"line":"    ~voting_for:(f State_hash.to_input) ~timing:(f Timing.to_input)","counters":[{"col_start":17,"col_end":17,"count":1},{"col_start":49,"col_end":49,"count":1}]},{"line":"    ~zkapp:(f (Fn.compose field hash_zkapp_account_opt))","counters":[{"col_start":12,"col_end":12,"count":1},{"col_start":24,"col_end":24,"count":1}]},{"line":"    ~permissions:(f Permissions.to_input)","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"  |> List.reduce_exn ~f:append","counters":[]},{"line":"","counters":[]},{"line":"let crypto_hash_prefix = Hash_prefix.account","counters":[]},{"line":"","counters":[]},{"line":"let crypto_hash t =","counters":[]},{"line":"  Random_oracle.hash ~init:crypto_hash_prefix","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    (Random_oracle.pack_input (to_input t))","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":38,"col_end":38,"count":1}]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"type var =","counters":[]},{"line":"  ( Public_key.Compressed.var","counters":[]},{"line":"  , Token_id.Checked.t","counters":[]},{"line":"  , Token_permissions.var","counters":[]},{"line":"  , Token_symbol.var","counters":[]},{"line":"  , Balance.var","counters":[]},{"line":"  , Nonce.Checked.t","counters":[]},{"line":"  , Receipt.Chain_hash.var","counters":[]},{"line":"  , Public_key.Compressed.var","counters":[]},{"line":"  , State_hash.var","counters":[]},{"line":"  , Timing.var","counters":[]},{"line":"  , Permissions.Checked.t","counters":[]},{"line":"    (* TODO: This is a hack that lets us avoid unhashing zkApp accounts when we don't need to *)","counters":[]},{"line":"  , Field.Var.t * Zkapp_account.t option As_prover.Ref.t )","counters":[]},{"line":"  Poly.t","counters":[]},{"line":"","counters":[]},{"line":"let identifier_of_var ({ public_key; token_id; _ } : var) =","counters":[]},{"line":"  Account_id.Checked.create public_key token_id","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let typ' zkapp =","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    [ Public_key.Compressed.typ","counters":[]},{"line":"    ; Token_id.typ","counters":[]},{"line":"    ; Token_permissions.typ","counters":[]},{"line":"    ; Token_symbol.typ","counters":[]},{"line":"    ; Balance.typ","counters":[]},{"line":"    ; Nonce.typ","counters":[]},{"line":"    ; Receipt.Chain_hash.typ","counters":[]},{"line":"    ; Typ.transport Public_key.Compressed.typ ~there:delegate_opt","counters":[{"col_start":18,"col_end":18,"count":2}]},{"line":"        ~back:(fun delegate ->","counters":[]},{"line":"          if Public_key.Compressed.(equal empty) delegate then None","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"          else Some delegate )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    ; State_hash.typ","counters":[]},{"line":"    ; Timing.typ","counters":[]},{"line":"    ; Permissions.typ","counters":[]},{"line":"    ; zkapp","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"    ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"let typ : (var, value) Typ.t =","counters":[]},{"line":"  let zkapp :","counters":[]},{"line":"      ( Field.Var.t * Zkapp_account.t option As_prover.Ref.t","counters":[]},{"line":"      , Zkapp_account.t option )","counters":[]},{"line":"      Typ.t =","counters":[]},{"line":"    let account :","counters":[]},{"line":"        (Zkapp_account.t option As_prover.Ref.t, Zkapp_account.t option) Typ.t =","counters":[]},{"line":"      Typ.Internal.ref ()","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"    in","counters":[]},{"line":"    Typ.(Field.typ * account)","counters":[]},{"line":"    |> Typ.transport ~there:(fun x -> (hash_zkapp_account_opt x, x)) ~back:snd","counters":[{"col_start":19,"col_end":19,"count":1},{"col_start":38,"col_end":38,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"  in","counters":[]},{"line":"  typ' zkapp","counters":[{"col_start":5,"col_end":5,"count":1}]},{"line":"","counters":[]},{"line":"let var_of_t","counters":[]},{"line":"    ({ public_key","counters":[]},{"line":"     ; token_id","counters":[]},{"line":"     ; token_permissions","counters":[]},{"line":"     ; token_symbol","counters":[]},{"line":"     ; balance","counters":[]},{"line":"     ; nonce","counters":[]},{"line":"     ; receipt_chain_hash","counters":[]},{"line":"     ; delegate","counters":[]},{"line":"     ; voting_for","counters":[]},{"line":"     ; timing","counters":[]},{"line":"     ; permissions","counters":[]},{"line":"     ; zkapp","counters":[]},{"line":"     } :","counters":[]},{"line":"      value ) =","counters":[]},{"line":"  { Poly.public_key = Public_key.Compressed.var_of_t public_key","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  ; token_id = Token_id.Checked.constant token_id","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"  ; token_permissions = Token_permissions.var_of_t token_permissions","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"  ; token_symbol = Token_symbol.var_of_value token_symbol","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  ; balance = Balance.var_of_t balance","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; nonce = Nonce.Checked.constant nonce","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  ; receipt_chain_hash = Receipt.Chain_hash.var_of_t receipt_chain_hash","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"  ; delegate = Public_key.Compressed.var_of_t (delegate_opt delegate)","counters":[{"col_start":44,"col_end":44,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"  ; voting_for = State_hash.var_of_t voting_for","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"  ; timing = Timing.var_of_t timing","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; permissions = Permissions.Checked.constant permissions","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  ; zkapp = Field.Var.constant (hash_zkapp_account_opt zkapp)","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  module Unhashed = struct","counters":[]},{"line":"    type t =","counters":[]},{"line":"      ( Public_key.Compressed.var","counters":[]},{"line":"      , Token_id.Checked.t","counters":[]},{"line":"      , Token_permissions.var","counters":[]},{"line":"      , Token_symbol.var","counters":[]},{"line":"      , Balance.var","counters":[]},{"line":"      , Nonce.Checked.t","counters":[]},{"line":"      , Receipt.Chain_hash.var","counters":[]},{"line":"      , Public_key.Compressed.var","counters":[]},{"line":"      , State_hash.var","counters":[]},{"line":"      , Timing.var","counters":[]},{"line":"      , Permissions.Checked.t","counters":[]},{"line":"      , Zkapp_account.Checked.t )","counters":[]},{"line":"      Poly.t","counters":[]},{"line":"","counters":[]},{"line":"    let typ : (t, Stable.Latest.t) Typ.t =","counters":[]},{"line":"      typ'","counters":[{"col_start":9,"col_end":9,"count":1}]},{"line":"        (Typ.transport Zkapp_account.typ","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"           ~there:(fun t -> Option.value t ~default:Zkapp_account.default)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"           ~back:(fun t -> Some t) )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_input (t : var) =","counters":[]},{"line":"    let f mk acc field = mk (Core_kernel.Field.get field t) :: acc in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"    let open Random_oracle.Input.Chunked in","counters":[]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      (Poly.Fields.fold ~init:[]","counters":[]},{"line":"         ~zkapp:(f (fun (x, _) -> field x))","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"         ~permissions:(f Permissions.Checked.to_input)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"         ~public_key:(f Public_key.Compressed.Checked.to_input)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"         ~token_id:(f Token_id.Checked.to_input)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"         ~token_symbol:(f Token_symbol.var_to_input)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"         ~token_permissions:(f Token_permissions.var_to_input)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"         ~balance:(f Balance.var_to_input) ~nonce:(f Nonce.Checked.to_input)","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"         ~receipt_chain_hash:(f Receipt.Chain_hash.var_to_input)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"         ~delegate:(f Public_key.Compressed.Checked.to_input)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"         ~voting_for:(f State_hash.var_to_input)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"         ~timing:(f Timing.var_to_input) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  let digest t =","counters":[]},{"line":"    make_checked (fun () ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        Random_oracle.Checked.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          hash ~init:crypto_hash_prefix (pack_input (to_input t))) )","counters":[{"col_start":50,"col_end":50,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"  let balance_upper_bound = Bignum_bigint.(one lsl Balance.length_in_bits)","counters":[]},{"line":"","counters":[]},{"line":"  let amount_upper_bound = Bignum_bigint.(one lsl Amount.length_in_bits)","counters":[]},{"line":"","counters":[]},{"line":"  let min_balance_at_slot ~global_slot ~cliff_time ~cliff_amount ~vesting_period","counters":[]},{"line":"      ~vesting_increment ~initial_minimum_balance =","counters":[]},{"line":"    let%bind before_cliff = Global_slot.Checked.(global_slot < cliff_time) in","counters":[]},{"line":"    let%bind else_branch =","counters":[]},{"line":"      make_checked (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          let _, slot_diff =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Tick.Run.run_checked","counters":[]},{"line":"              (Global_slot.Checked.sub_or_zero global_slot cliff_time)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"          in","counters":[]},{"line":"          let cliff_decrement = cliff_amount in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let min_balance_less_cliff_decrement, _ =","counters":[]},{"line":"            Tick.Run.run_checked","counters":[]},{"line":"              (Balance.Checked.sub_amount_flagged initial_minimum_balance","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"                 cliff_decrement )","counters":[]},{"line":"          in","counters":[]},{"line":"          let num_periods, _ =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Tick.Run.run_checked","counters":[]},{"line":"              (Global_slot.Checked.div_mod slot_diff vesting_period)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"          in","counters":[]},{"line":"          let vesting_decrement =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Tick.Run.Field.mul","counters":[]},{"line":"              (Global_slot.Checked.to_field num_periods)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"              (Amount.pack_var vesting_increment)","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"          in","counters":[]},{"line":"          let min_balance_less_cliff_and_vesting_decrements =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Tick.Run.run_checked","counters":[]},{"line":"              (Balance.Checked.sub_or_zero min_balance_less_cliff_decrement","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                 (Balance.Checked.Unsafe.of_field vesting_decrement) )","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"          in","counters":[]},{"line":"          min_balance_less_cliff_and_vesting_decrements )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    Balance.Checked.if_ before_cliff ~then_:initial_minimum_balance","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ~else_:else_branch","counters":[]},{"line":"","counters":[]},{"line":"  let has_locked_tokens ~global_slot (t : var) =","counters":[]},{"line":"    let open Timing.As_record in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let { is_timed = _","counters":[]},{"line":"        ; initial_minimum_balance","counters":[]},{"line":"        ; cliff_time","counters":[]},{"line":"        ; cliff_amount","counters":[]},{"line":"        ; vesting_period","counters":[]},{"line":"        ; vesting_increment","counters":[]},{"line":"        } =","counters":[]},{"line":"      t.timing","counters":[]},{"line":"    in","counters":[]},{"line":"    let%bind cur_min_balance =","counters":[]},{"line":"      min_balance_at_slot ~global_slot ~initial_minimum_balance ~cliff_time","counters":[]},{"line":"        ~cliff_amount ~vesting_period ~vesting_increment","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map zero_min_balance =","counters":[]},{"line":"      Balance.equal_var Balance.(var_of_t zero) cur_min_balance","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"    in","counters":[]},{"line":"    (*Note: Untimed accounts will always have zero min balance*)","counters":[]},{"line":"    Boolean.not zero_min_balance","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let has_permission ~to_ (account : var) =","counters":[]},{"line":"    match to_ with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `Send ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Permissions.Auth_required.Checked.eval_no_proof account.permissions.send","counters":[]},{"line":"          ~signature_verifies:Boolean.true_","counters":[]},{"line":"    | `Receive ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Permissions.Auth_required.Checked.eval_no_proof","counters":[]},{"line":"          account.permissions.receive ~signature_verifies:Boolean.false_","counters":[]},{"line":"    | `Set_delegate ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Permissions.Auth_required.Checked.eval_no_proof","counters":[]},{"line":"          account.permissions.set_delegate ~signature_verifies:Boolean.true_","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"let digest = crypto_hash","counters":[]},{"line":"","counters":[]},{"line":"let empty =","counters":[]},{"line":"  { Poly.public_key = Public_key.Compressed.empty","counters":[]},{"line":"  ; token_id = Token_id.default","counters":[]},{"line":"  ; token_permissions = Token_permissions.default","counters":[]},{"line":"  ; token_symbol = Token_symbol.default","counters":[]},{"line":"  ; balance = Balance.zero","counters":[]},{"line":"  ; nonce = Nonce.zero","counters":[]},{"line":"  ; receipt_chain_hash = Receipt.Chain_hash.empty","counters":[]},{"line":"  ; delegate = None","counters":[]},{"line":"  ; voting_for = State_hash.dummy","counters":[]},{"line":"  ; timing = Timing.Untimed","counters":[]},{"line":"  ; permissions =","counters":[]},{"line":"      Permissions.user_default","counters":[]},{"line":"      (* TODO: This should maybe be Permissions.empty *)","counters":[]},{"line":"  ; zkapp = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let empty_digest = digest empty","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"","counters":[]},{"line":"let create account_id balance =","counters":[]},{"line":"  let public_key = Account_id.public_key account_id in","counters":[{"col_start":2,"col_end":2,"count":18}]},{"line":"  let token_id = Account_id.token_id account_id in","counters":[{"col_start":2,"col_end":2,"count":18}]},{"line":"  let delegate =","counters":[{"col_start":2,"col_end":2,"count":18}]},{"line":"    (* Only allow delegation if this account is for the default token. *)","counters":[]},{"line":"    if Token_id.(equal default) token_id then Some public_key else None","counters":[{"col_start":21,"col_end":21,"count":18},{"col_start":46,"col_end":46,"count":18},{"col_start":67,"col_end":67,"count":0}]},{"line":"  in","counters":[]},{"line":"  { Poly.public_key","counters":[]},{"line":"  ; token_id","counters":[]},{"line":"  ; token_permissions = Token_permissions.default","counters":[]},{"line":"  ; token_symbol = Token_symbol.default","counters":[]},{"line":"  ; balance","counters":[]},{"line":"  ; nonce = Nonce.zero","counters":[]},{"line":"  ; receipt_chain_hash = Receipt.Chain_hash.empty","counters":[]},{"line":"  ; delegate","counters":[]},{"line":"  ; voting_for = State_hash.dummy","counters":[]},{"line":"  ; timing = Timing.Untimed","counters":[]},{"line":"  ; permissions = Permissions.user_default","counters":[]},{"line":"  ; zkapp = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let create_timed account_id balance ~initial_minimum_balance ~cliff_time","counters":[]},{"line":"    ~cliff_amount ~vesting_period ~vesting_increment =","counters":[]},{"line":"  if Global_slot.(equal vesting_period zero) then","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    Or_error.errorf","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      !\"Error creating timed account for account id %{sexp: Account_id.t}: \\","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"        vesting period must be greater than zero\"","counters":[]},{"line":"      account_id","counters":[]},{"line":"  else","counters":[]},{"line":"    let public_key = Account_id.public_key account_id in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let token_id = Account_id.token_id account_id in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let delegate =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (* Only allow delegation if this account is for the default token. *)","counters":[]},{"line":"      if Token_id.(equal default) token_id then Some public_key else None","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"    in","counters":[]},{"line":"    Or_error.return","counters":[]},{"line":"      { Poly.public_key","counters":[]},{"line":"      ; token_id","counters":[]},{"line":"      ; token_permissions = Token_permissions.default","counters":[]},{"line":"      ; token_symbol = Token_symbol.default","counters":[]},{"line":"      ; balance","counters":[]},{"line":"      ; nonce = Nonce.zero","counters":[]},{"line":"      ; receipt_chain_hash = Receipt.Chain_hash.empty","counters":[]},{"line":"      ; delegate","counters":[]},{"line":"      ; voting_for = State_hash.dummy","counters":[]},{"line":"      ; zkapp = None","counters":[]},{"line":"      ; permissions = Permissions.user_default","counters":[]},{"line":"      ; timing =","counters":[]},{"line":"          Timing.Timed","counters":[]},{"line":"            { initial_minimum_balance","counters":[]},{"line":"            ; cliff_time","counters":[]},{"line":"            ; cliff_amount","counters":[]},{"line":"            ; vesting_period","counters":[]},{"line":"            ; vesting_increment","counters":[]},{"line":"            }","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"(* no vesting after cliff time + 1 slot *)","counters":[]},{"line":"let create_time_locked public_key balance ~initial_minimum_balance ~cliff_time =","counters":[]},{"line":"  create_timed public_key balance ~initial_minimum_balance ~cliff_time","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~vesting_period:Global_slot.(succ zero)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ~vesting_increment:initial_minimum_balance","counters":[]},{"line":"","counters":[]},{"line":"let min_balance_at_slot ~global_slot ~cliff_time ~cliff_amount ~vesting_period","counters":[]},{"line":"    ~vesting_increment ~initial_minimum_balance =","counters":[]},{"line":"  let open Unsigned in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  if Global_slot.(global_slot < cliff_time) then initial_minimum_balance","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"    (* If vesting period is zero then everything vests immediately at the cliff *)","counters":[]},{"line":"  else if Global_slot.(equal vesting_period zero) then Balance.zero","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"  else","counters":[]},{"line":"    match Balance.(initial_minimum_balance - cliff_amount) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Balance.zero","counters":[]},{"line":"    | Some min_balance_past_cliff -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* take advantage of fact that global slots are uint32's *)","counters":[]},{"line":"        let num_periods =","counters":[]},{"line":"          UInt32.(","counters":[]},{"line":"            Infix.((global_slot - cliff_time) / vesting_period)","counters":[]},{"line":"            |> to_int64 |> UInt64.of_int64)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        in","counters":[]},{"line":"        let vesting_decrement =","counters":[]},{"line":"          let vesting_increment = Amount.to_uint64 vesting_increment in","counters":[]},{"line":"          if","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            try","counters":[]},{"line":"              UInt64.(compare Infix.(max_int / num_periods) vesting_increment)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"              < 0","counters":[]},{"line":"            with Division_by_zero -> false","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          then","counters":[]},{"line":"            (* The vesting decrement will overflow, use [max_int] instead. *)","counters":[]},{"line":"            UInt64.max_int |> Amount.of_uint64","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"          else","counters":[]},{"line":"            UInt64.Infix.(num_periods * vesting_increment) |> Amount.of_uint64","counters":[{"col_start":62,"col_end":62,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"        in","counters":[]},{"line":"        match Balance.(min_balance_past_cliff - vesting_decrement) with","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Balance.zero","counters":[]},{"line":"        | Some amt ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            amt )","counters":[]},{"line":"","counters":[]},{"line":"let incremental_balance_between_slots ~start_slot ~end_slot ~cliff_time","counters":[]},{"line":"    ~cliff_amount ~vesting_period ~vesting_increment ~initial_minimum_balance :","counters":[]},{"line":"    Unsigned.UInt64.t =","counters":[]},{"line":"  let open Unsigned in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let min_balance_at_start_slot =","counters":[]},{"line":"    min_balance_at_slot ~global_slot:start_slot ~cliff_time ~cliff_amount","counters":[]},{"line":"      ~vesting_period ~vesting_increment ~initial_minimum_balance","counters":[]},{"line":"    |> Balance.to_amount |> Amount.to_uint64","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  in","counters":[]},{"line":"  let min_balance_at_end_slot =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    min_balance_at_slot ~global_slot:end_slot ~cliff_time ~cliff_amount","counters":[]},{"line":"      ~vesting_period ~vesting_increment ~initial_minimum_balance","counters":[]},{"line":"    |> Balance.to_amount |> Amount.to_uint64","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"  in","counters":[]},{"line":"  UInt64.Infix.(min_balance_at_start_slot - min_balance_at_end_slot)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let has_locked_tokens ~global_slot (account : t) =","counters":[]},{"line":"  match account.timing with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Untimed ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      false","counters":[]},{"line":"  | Timed","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { initial_minimum_balance","counters":[]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      } ->","counters":[]},{"line":"      let curr_min_balance =","counters":[]},{"line":"        min_balance_at_slot ~global_slot ~cliff_time ~cliff_amount","counters":[]},{"line":"          ~vesting_period ~vesting_increment ~initial_minimum_balance","counters":[]},{"line":"      in","counters":[]},{"line":"      Balance.(curr_min_balance > zero)","counters":[]},{"line":"","counters":[]},{"line":"let has_permission ~to_ (account : t) =","counters":[]},{"line":"  match to_ with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `Send ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Permissions.Auth_required.check account.permissions.send","counters":[]},{"line":"        Control.Tag.Signature","counters":[]},{"line":"  | `Receive ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Permissions.Auth_required.check account.permissions.receive","counters":[]},{"line":"        Control.Tag.None_given","counters":[]},{"line":"  | `Set_delegate ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Permissions.Auth_required.check account.permissions.set_delegate","counters":[]},{"line":"        Control.Tag.Signature","counters":[]},{"line":"","counters":[]},{"line":"let liquid_balance_at_slot ~global_slot (account : t) =","counters":[]},{"line":"  match account.timing with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Untimed ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      account.balance","counters":[]},{"line":"  | Timed","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { initial_minimum_balance","counters":[]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      } ->","counters":[]},{"line":"      Balance.sub_amount account.balance","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"        (Balance.to_amount","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"           (min_balance_at_slot ~global_slot ~cliff_time ~cliff_amount","counters":[]},{"line":"              ~vesting_period ~vesting_increment ~initial_minimum_balance ) )","counters":[]},{"line":"      |> Option.value_exn","counters":[]},{"line":"","counters":[]},{"line":"let gen =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[]},{"line":"  let%bind public_key = Public_key.Compressed.gen in","counters":[]},{"line":"  let%bind token_id = Token_id.gen in","counters":[]},{"line":"  let%map balance = Currency.Balance.gen in","counters":[]},{"line":"  create (Account_id.create public_key token_id) balance","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let gen_with_constrained_balance ~low ~high =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind public_key = Public_key.Compressed.gen in","counters":[]},{"line":"  let%bind token_id = Token_id.gen in","counters":[]},{"line":"  let%map balance = Currency.Balance.gen_incl low high in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"  create (Account_id.create public_key token_id) balance","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let gen_timed =","counters":[]},{"line":"  let open Quickcheck.Let_syntax in","counters":[]},{"line":"  let%bind public_key = Public_key.Compressed.gen in","counters":[]},{"line":"  let%bind token_id = Token_id.gen in","counters":[]},{"line":"  let account_id = Account_id.create public_key token_id in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind balance = Currency.Balance.gen in","counters":[]},{"line":"  let%bind initial_minimum_balance = Currency.Balance.gen in","counters":[]},{"line":"  let%bind cliff_time = Global_slot.gen in","counters":[]},{"line":"  let%bind cliff_amount = Amount.gen in","counters":[]},{"line":"  (* vesting period must be at least one to avoid division by zero *)","counters":[]},{"line":"  let%bind vesting_period =","counters":[]},{"line":"    Int.gen_incl 1 100 >>= Fn.compose return Global_slot.of_int","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%map vesting_increment = Amount.gen in","counters":[]},{"line":"  create_timed account_id balance ~initial_minimum_balance ~cliff_time","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~cliff_amount ~vesting_period ~vesting_increment","counters":[{"col_start":51,"col_end":51,"count":1}]}]}