{"filename":"src/lib/state_or_error/state_or_error_intf.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(*State monad with or_error (a monad of type (state -> (a * state) Or_error.t))  *)","counters":[]},{"line":"module type State_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type State_intf1 = sig","counters":[]},{"line":"  type 'a t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type State_intf2 = sig","counters":[]},{"line":"  type ('a, 'b) t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S = sig","counters":[]},{"line":"  include Monad.S","counters":[]},{"line":"","counters":[]},{"line":"  type state","counters":[]},{"line":"","counters":[]},{"line":"  val run_state : 'a t -> state:state -> ('a * state) Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val get : state t","counters":[]},{"line":"","counters":[]},{"line":"  val put : state -> unit t","counters":[]},{"line":"","counters":[]},{"line":"  val error_if : bool -> message:string -> value:'a -> 'a t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S2 = sig","counters":[]},{"line":"  include Monad.S2","counters":[]},{"line":"","counters":[]},{"line":"  type 'a state","counters":[]},{"line":"","counters":[]},{"line":"  val run_state : ('b, 'a) t -> state:'a state -> ('b * 'a state) Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val get : ('a state, 'a) t","counters":[]},{"line":"","counters":[]},{"line":"  val put : 'a state -> (unit, 'a) t","counters":[]},{"line":"","counters":[]},{"line":"  val error_if : bool -> message:string -> value:'a -> ('a, _) t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type S3 = sig","counters":[]},{"line":"  include Monad.S3","counters":[]},{"line":"","counters":[]},{"line":"  type ('a, 'b) state","counters":[]},{"line":"","counters":[]},{"line":"  val run_state :","counters":[]},{"line":"    ('c, 'a, 'b) t -> state:('a, 'b) state -> ('c * ('a, 'b) state) Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val get : (('a, 'b) state, 'a, 'b) t","counters":[]},{"line":"","counters":[]},{"line":"  val put : ('a, 'b) state -> (unit, 'a, 'b) t","counters":[]},{"line":"","counters":[]},{"line":"  val error_if : bool -> message:string -> value:'a -> ('a, _, _) t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}