{"filename":"src/lib/empty_hashes/empty_hashes.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type Hash_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val merge : height:int -> t -> t -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let merge_hash (type hash) (module Hash : Hash_intf with type t = hash) height","counters":[]},{"line":"    (last_hash : hash) =","counters":[]},{"line":"  Hash.merge ~height last_hash last_hash","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let cache hash_mod ~init_hash depth =","counters":[]},{"line":"  let last_hash = ref init_hash in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Immutable_array.of_array","counters":[]},{"line":"  @@ Array.init (depth + 1) ~f:(fun i ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"         if Int.equal i 0 then !last_hash","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"         else (","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"           last_hash := merge_hash hash_mod (i - 1) !last_hash ;","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"           !last_hash ) )","counters":[]},{"line":"","counters":[]},{"line":"let extensible_cache hash_mod ~init_hash =","counters":[]},{"line":"  let empty_hashes = ref [| init_hash |] in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  fun i ->","counters":[]},{"line":"    let prev = !empty_hashes in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let height = Array.length prev - 1 in","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"    let deficit = i - height in","counters":[]},{"line":"    ( if deficit > 0 then","counters":[]},{"line":"      let last_hash = ref (Array.last prev) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      empty_hashes :=","counters":[]},{"line":"        Array.append prev","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          (Array.init deficit ~f:(fun i ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"               last_hash := merge_hash hash_mod (i + height) !last_hash ;","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"               !last_hash ) ) ) ;","counters":[]},{"line":"    !empty_hashes.(i)","counters":[{"col_start":4,"col_end":4,"count":0}]}]}