{"filename":"src/lib/consensus/epoch.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Signed","counters":[]},{"line":"open Unsigned","counters":[]},{"line":"open Num_util","counters":[]},{"line":"","counters":[]},{"line":"include Mina_numbers.Nat.Make32 ()","counters":[]},{"line":"","counters":[]},{"line":"module Time = Block_time","counters":[]},{"line":"","counters":[]},{"line":"let of_time_exn ~(constants : Constants.t) t : t =","counters":[]},{"line":"  if Time.(t < constants.genesis_state_timestamp) then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    raise","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Invalid_argument","counters":[]},{"line":"         \"Epoch.of_time: time is earlier than genesis block timestamp\" ) ;","counters":[]},{"line":"  let time_since_genesis = Time.diff t constants.genesis_state_timestamp in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  uint32_of_int64","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Int64.Infix.(","counters":[]},{"line":"      Time.Span.to_ms time_since_genesis","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      / Time.Span.(to_ms constants.epoch_duration))","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"let start_time ~(constants : Constants.t) (epoch : t) =","counters":[]},{"line":"  let ms =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let open Int64.Infix in","counters":[]},{"line":"    Block_time.Span.to_ms","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      Block_time.(to_span_since_epoch constants.genesis_state_timestamp)","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    + (int64_of_uint32 epoch * Block_time.Span.(to_ms constants.epoch_duration))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"  in","counters":[]},{"line":"  Block_time.of_span_since_epoch (Block_time.Span.of_ms ms)","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"let end_time ~(constants : Constants.t) (t : t) =","counters":[]},{"line":"  Time.add (start_time t ~constants) constants.epoch_duration","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let slot_start_time ~(constants : Constants.t) (epoch : t) (slot : Slot.t) =","counters":[]},{"line":"  Block_time.add","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (start_time epoch ~constants)","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"    (Block_time.Span.of_ms","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"       Int64.Infix.(","counters":[]},{"line":"         int64_of_uint32 slot * Time.Span.to_ms constants.slot_duration_ms) )","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"let slot_end_time ~(constants : Constants.t) (epoch : t) (slot : Slot.t) =","counters":[]},{"line":"  Time.add (slot_start_time epoch slot ~constants) constants.slot_duration_ms","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let epoch_and_slot_of_time_exn ~(constants : Constants.t) tm : t * Slot.t =","counters":[]},{"line":"  let epoch = of_time_exn tm ~constants in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let time_since_epoch = Block_time.diff tm (start_time epoch ~constants) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"  let slot =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    uint32_of_int64","counters":[]},{"line":"    @@ Int64.Infix.(","counters":[]},{"line":"         Time.Span.to_ms time_since_epoch","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"         / Time.Span.to_ms constants.slot_duration_ms)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  in","counters":[]},{"line":"  (epoch, slot)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let diff_in_slots ~(constants : Constants.t) ((epoch, slot) : t * Slot.t)","counters":[]},{"line":"    ((epoch', slot') : t * Slot.t) : int64 =","counters":[]},{"line":"  let ( < ) x y =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let open Core_kernel in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Int64.compare x y < 0","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  in","counters":[]},{"line":"  let ( > ) x y =","counters":[]},{"line":"    let open Core_kernel in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Int64.compare x y > 0","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"  in","counters":[]},{"line":"  let open Int64.Infix in","counters":[]},{"line":"  let of_uint32 = UInt32.to_int64 in","counters":[]},{"line":"  let epoch, slot = (of_uint32 epoch, of_uint32 slot) in","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"  let epoch', slot' = (of_uint32 epoch', of_uint32 slot') in","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  let epoch_size = UInt32.to_int64 constants.slots_per_epoch in","counters":[]},{"line":"  let epoch_diff = epoch - epoch' in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  if epoch_diff > 0L then","counters":[]},{"line":"    ((epoch_diff - 1L) * epoch_size) + slot + (epoch_size - slot')","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else if epoch_diff < 0L then","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"    ((epoch_diff + 1L) * epoch_size) - (epoch_size - slot) - slot'","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else slot - slot'","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let%test_unit \"test diff_in_slots\" =","counters":[]},{"line":"  let constants = Lazy.force Constants.for_unit_tests in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Int64.Infix in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let ( !^ ) = UInt32.of_int in","counters":[]},{"line":"  let ( !@ ) = Fn.compose ( !^ ) Int64.to_int in","counters":[]},{"line":"  let epoch_size_int64 = UInt32.to_int64 constants.slots_per_epoch in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  [%test_eq: int64] (diff_in_slots (!^0, !^5) (!^0, !^0) ~constants) 5L ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"  [%test_eq: int64] (diff_in_slots (!^3, !^23) (!^3, !^20) ~constants) 3L ;","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"  [%test_eq: int64]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (diff_in_slots (!^4, !^4) (!^3, !^0) ~constants)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    (epoch_size_int64 + 4L) ;","counters":[]},{"line":"  [%test_eq: int64]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (diff_in_slots (!^5, !^2) (!^4, !@(epoch_size_int64 - 3L)) ~constants)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    5L ;","counters":[]},{"line":"  [%test_eq: int64]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (diff_in_slots (!^6, !^42) (!^2, !^16) ~constants)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"    ((epoch_size_int64 * 3L) + 42L + (epoch_size_int64 - 16L)) ;","counters":[]},{"line":"  [%test_eq: int64]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (diff_in_slots (!^2, !@(epoch_size_int64 - 1L)) (!^3, !^4) ~constants)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    (0L - 5L) ;","counters":[]},{"line":"  [%test_eq: int64]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"    (diff_in_slots (!^1, !^3) (!^7, !^27) ~constants)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    (0L - ((epoch_size_int64 * 5L) + (epoch_size_int64 - 3L) + 27L))","counters":[]},{"line":"","counters":[]},{"line":"let incr ~(constants : Constants.t) ((epoch, slot) : t * Slot.t) =","counters":[]},{"line":"  let open UInt32 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  if","counters":[]},{"line":"    Slot.equal slot","counters":[]},{"line":"      (sub (Mina_numbers.Length.to_uint32 constants.slots_per_epoch) one)","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"  then (add epoch one, zero)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"  else (epoch, add slot one)","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":27,"col_end":27,"count":1}]}]}