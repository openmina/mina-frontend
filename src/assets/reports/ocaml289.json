{"filename":"src/lib/transition_handler/block_sink.ml","lines":[{"line":"open Network_peer","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Async","counters":[]},{"line":"open Pipe_lib.Strict_pipe","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"","counters":[]},{"line":"type stream_msg =","counters":[]},{"line":"  [ `Transition of Mina_block.t Envelope.Incoming.t ]","counters":[]},{"line":"  * [ `Time_received of Block_time.t ]","counters":[]},{"line":"  * [ `Valid_cb of Mina_net2.Validation_callback.t ]","counters":[]},{"line":"","counters":[]},{"line":"type block_sink_config =","counters":[]},{"line":"  { logger : Logger.t","counters":[]},{"line":"  ; slot_duration_ms : Block_time.Span.t","counters":[]},{"line":"  ; on_push : unit -> unit Deferred.t","counters":[]},{"line":"  ; time_controller : Block_time.Controller.t","counters":[]},{"line":"  ; log_gossip_heard : bool","counters":[]},{"line":"  ; consensus_constants : Consensus.Constants.t","counters":[]},{"line":"  ; genesis_constants : Genesis_constants.t","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"type t =","counters":[]},{"line":"  | Sink of","counters":[]},{"line":"      { writer : (stream_msg, synchronous, unit Deferred.t) Writer.t","counters":[]},{"line":"      ; rate_limiter : Network_pool.Rate_limiter.t","counters":[]},{"line":"      ; logger : Logger.t","counters":[]},{"line":"      ; on_push : unit -> unit Deferred.t","counters":[]},{"line":"      ; time_controller : Block_time.Controller.t","counters":[]},{"line":"      ; log_gossip_heard : bool","counters":[]},{"line":"      ; consensus_constants : Consensus.Constants.t","counters":[]},{"line":"      ; genesis_constants : Genesis_constants.t","counters":[]},{"line":"      }","counters":[]},{"line":"  | Void","counters":[]},{"line":"","counters":[]},{"line":"type Structured_log_events.t +=","counters":[]},{"line":"  | Block_received of { state_hash : State_hash.t; sender : Envelope.Sender.t }","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"  [@@deriving register_event { msg = \"Received a block from $sender\" }]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":27,"col_end":27,"count":3}]},{"line":"","counters":[]},{"line":"let push sink (`Transition e, `Time_received tm, `Valid_cb cb) =","counters":[]},{"line":"  match sink with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Void ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Deferred.unit","counters":[]},{"line":"  | Sink","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { writer","counters":[]},{"line":"      ; rate_limiter","counters":[]},{"line":"      ; logger","counters":[]},{"line":"      ; on_push","counters":[]},{"line":"      ; time_controller","counters":[]},{"line":"      ; log_gossip_heard","counters":[]},{"line":"      ; consensus_constants","counters":[]},{"line":"      ; genesis_constants","counters":[]},{"line":"      } ->","counters":[]},{"line":"      O1trace.sync_thread \"handle_block_gossip\"","counters":[]},{"line":"      @@ fun () ->","counters":[]},{"line":"      let%bind () = on_push () in","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Network.gossip_messages_received) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      let state = Envelope.Incoming.data e in","counters":[]},{"line":"      let processing_start_time =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Block_time.(now time_controller |> to_time_exn)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      in","counters":[]},{"line":"      don't_wait_for","counters":[]},{"line":"        ( match%map Mina_net2.Validation_callback.await cb with","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"        | Some `Accept ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let processing_time_span =","counters":[]},{"line":"              Time.diff","counters":[]},{"line":"                Block_time.(now time_controller |> to_time_exn)","counters":[{"col_start":30,"col_end":30,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"                processing_start_time","counters":[]},{"line":"            in","counters":[]},{"line":"            Mina_metrics.Block_latency.(","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Validation_acceptance_time.update processing_time_span)","counters":[]},{"line":"        | _ ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            () ) ;","counters":[]},{"line":"      Perf_histograms.add_span ~name:\"external_transition_latency\"","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Core.Time.abs_diff","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"           Block_time.(now time_controller |> to_time_exn)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"           Mina_block.(","counters":[]},{"line":"             header state |> Header.protocol_state","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"             |> Protocol_state.blockchain_state |> Blockchain_state.timestamp","counters":[{"col_start":46,"col_end":46,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"             |> Block_time.to_time_exn) ) ;","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"      Mina_metrics.(Gauge.inc_one Network.new_state_received) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      if log_gossip_heard then","counters":[]},{"line":"        [%str_log info]","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"          ~metadata:[ (\"external_transition\", Mina_block.to_yojson state) ]","counters":[{"col_start":65,"col_end":65,"count":0}]},{"line":"          (Block_received","counters":[]},{"line":"             { state_hash =","counters":[]},{"line":"                 Mina_block.(","counters":[]},{"line":"                   header state |> Header.protocol_state","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"                   |> Protocol_state.hashes)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"                   .state_hash","counters":[]},{"line":"             ; sender = Envelope.Incoming.sender e","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"             } ) ;","counters":[]},{"line":"      Mina_net2.Validation_callback.set_message_type cb `Block ;","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      Mina_metrics.(Counter.inc_one Network.Block.received) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"      let sender = Envelope.Incoming.sender e in","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        match","counters":[]},{"line":"          Network_pool.Rate_limiter.add rate_limiter sender ~now:(Time.now ())","counters":[{"col_start":73,"col_end":73,"count":0}]},{"line":"            ~score:1","counters":[]},{"line":"        with","counters":[]},{"line":"        | `Capacity_exceeded ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            [%log warn] \"$sender has sent many blocks. This is very unusual.\"","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"              ~metadata:[ (\"sender\", Envelope.Sender.to_yojson sender) ] ;","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"            Mina_net2.Validation_callback.fire_if_not_already_fired cb `Reject ;","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            Deferred.unit","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"        | `Within_capacity ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            Writer.write writer (`Transition e, `Time_received tm, `Valid_cb cb)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      in","counters":[]},{"line":"      let transactions =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Mina_block.transactions state","counters":[]},{"line":"          ~constraint_constants:Genesis_constants.Constraint_constants.compiled","counters":[]},{"line":"      in","counters":[]},{"line":"      let exists_too_big_txn =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (* we only detect and log the first too-big transaction *)","counters":[]},{"line":"        List.exists transactions ~f:(fun txn ->","counters":[]},{"line":"            let size_validity =","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Mina_transaction.Transaction.valid_size ~genesis_constants","counters":[]},{"line":"                txn.data","counters":[]},{"line":"            in","counters":[]},{"line":"            match size_validity with","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            | Ok () ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                false","counters":[]},{"line":"            | Error err ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [%log warn]","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  \"Rejecting block with at least one too-big transaction\"","counters":[]},{"line":"                  ~metadata:","counters":[]},{"line":"                    [ (\"size_violation\", Error_json.error_to_yojson err) ] ;","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"                true )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      in","counters":[]},{"line":"      if exists_too_big_txn then","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Mina_net2.Validation_callback.fire_if_not_already_fired cb `Reject ;","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      let lift_consensus_time =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Fn.compose Unsigned.UInt32.to_int","counters":[]},{"line":"          Consensus.Data.Consensus_time.to_uint32","counters":[]},{"line":"      in","counters":[]},{"line":"      let tn_production_consensus_time =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Data.Consensus_state.consensus_time","counters":[]},{"line":"        @@ Protocol_state.consensus_state @@ Mina_block.Header.protocol_state","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"        @@ Mina_block.header (Envelope.Incoming.data e)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"      in","counters":[]},{"line":"      let tn_production_slot =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        lift_consensus_time tn_production_consensus_time","counters":[]},{"line":"      in","counters":[]},{"line":"      let tn_production_time =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Consensus.Data.Consensus_time.to_time ~constants:consensus_constants","counters":[]},{"line":"          tn_production_consensus_time","counters":[]},{"line":"      in","counters":[]},{"line":"      let tm_slot =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        lift_consensus_time","counters":[]},{"line":"          (Consensus.Data.Consensus_time.of_time_exn","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"             ~constants:consensus_constants tm )","counters":[]},{"line":"      in","counters":[]},{"line":"      Mina_metrics.Block_latency.Gossip_slots.update","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (Float.of_int (tm_slot - tn_production_slot)) ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      Mina_metrics.Block_latency.Gossip_time.update","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Block_time.(Span.to_time_span @@ diff tm tn_production_time) ;","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      Deferred.unit","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"let log_rate_limiter_occasionally rl ~logger ~label =","counters":[]},{"line":"  let t = Time.Span.of_min 1. in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  every t (fun () ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      [%log debug]","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"        ~metadata:[ (\"rate_limiter\", Network_pool.Rate_limiter.summary rl) ]","counters":[{"col_start":69,"col_end":69,"count":0}]},{"line":"        !\"%s $rate_limiter\" label )","counters":[]},{"line":"","counters":[]},{"line":"let create","counters":[]},{"line":"    { logger","counters":[]},{"line":"    ; slot_duration_ms","counters":[]},{"line":"    ; on_push","counters":[]},{"line":"    ; time_controller","counters":[]},{"line":"    ; log_gossip_heard","counters":[]},{"line":"    ; consensus_constants","counters":[]},{"line":"    ; genesis_constants","counters":[]},{"line":"    } =","counters":[]},{"line":"  let rate_limiter =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Network_pool.Rate_limiter.create","counters":[]},{"line":"      ~capacity:","counters":[]},{"line":"        ( (* Max of 20 transitions per slot per peer. *)","counters":[]},{"line":"          20","counters":[]},{"line":"        , `Per (Block_time.Span.to_time_span slot_duration_ms) )","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  log_rate_limiter_occasionally rate_limiter ~logger ~label:\"new_block\" ;","counters":[]},{"line":"  let reader, writer = create Synchronous in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ( reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  , Sink","counters":[]},{"line":"      { writer","counters":[]},{"line":"      ; rate_limiter","counters":[]},{"line":"      ; logger","counters":[]},{"line":"      ; on_push","counters":[]},{"line":"      ; time_controller","counters":[]},{"line":"      ; log_gossip_heard","counters":[]},{"line":"      ; consensus_constants","counters":[]},{"line":"      ; genesis_constants","counters":[]},{"line":"      } )","counters":[]},{"line":"","counters":[]},{"line":"let void = Void","counters":[{"col_start":14,"col_end":14,"count":2}]}]}