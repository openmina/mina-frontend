{"filename":"src/lib/transition_handler/breadcrumb_builder.ml","lines":[{"line":"open Mina_base","counters":[]},{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Cache_lib","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"let build_subtrees_of_breadcrumbs ~logger ~precomputed_values ~verifier","counters":[]},{"line":"    ~trust_system ~frontier ~initial_hash subtrees_of_enveloped_transitions =","counters":[]},{"line":"  let missing_parent_msg =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Printf.sprintf","counters":[]},{"line":"      \"Transition frontier already garbage-collected the parent of %s\"","counters":[]},{"line":"      (Mina_base.State_hash.to_base58_check initial_hash)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"  in","counters":[]},{"line":"  (* If the breadcrumb we are targeting is removed from the transition","counters":[]},{"line":"   * frontier while we're catching up, it means this path is not on the","counters":[]},{"line":"   * critical path that has been chosen in the frontier. As such, we should","counters":[]},{"line":"   * drop it on the floor. *)","counters":[]},{"line":"  let breadcrumb_if_present logger =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match Transition_frontier.find frontier initial_hash with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [%log error]","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"          ~metadata:","counters":[]},{"line":"            [ (\"state_hash\", Mina_base.State_hash.to_yojson initial_hash)","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"            ; ( \"transition_hashes\"","counters":[]},{"line":"              , `List","counters":[]},{"line":"                  (List.map subtrees_of_enveloped_transitions ~f:(fun subtree ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                       Rose_tree.to_yojson","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                         (fun (enveloped_transitions, _vc) ->","counters":[]},{"line":"                           let transition, _ =","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                             enveloped_transitions |> Cached.peek","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"                             |> Envelope.Incoming.data","counters":[]},{"line":"                           in","counters":[]},{"line":"                           Mina_base.State_hash.(","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                             to_yojson (With_state_hashes.state_hash transition))","counters":[{"col_start":67,"col_end":67,"count":0}]},{"line":"                           )","counters":[]},{"line":"                         subtree ) ) )","counters":[]},{"line":"            ]","counters":[]},{"line":"          \"Transition frontier already garbage-collected the parent of \\","counters":[]},{"line":"           $state_hash\" ;","counters":[]},{"line":"        Or_error.error_string missing_parent_msg","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | Some breadcrumb ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Or_error.return breadcrumb","counters":[]},{"line":"  in","counters":[]},{"line":"  Deferred.Or_error.List.map subtrees_of_enveloped_transitions","counters":[]},{"line":"    ~f:(fun subtree_of_enveloped_transitions ->","counters":[]},{"line":"      let%bind.Deferred.Or_error init_breadcrumb =","counters":[]},{"line":"        breadcrumb_if_present","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"          (Logger.extend logger","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"             [ (\"Check\", `String \"Before creating breadcrumb\") ] )","counters":[]},{"line":"        |> Deferred.return","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"      in","counters":[]},{"line":"      Rose_tree.Deferred.Or_error.fold_map_over_subtrees","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        subtree_of_enveloped_transitions","counters":[]},{"line":"        ~init:(Cached.pure init_breadcrumb, None)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"        ~f:(fun (cached_parent, _parent_vc)","counters":[]},{"line":"                ( Rose_tree.T ((cached_enveloped_transition, valid_cb), _) as","counters":[]},{"line":"                subtree ) ->","counters":[]},{"line":"          let%map.Deferred cached_result =","counters":[]},{"line":"            Cached.transform cached_enveloped_transition","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"              ~f:(fun enveloped_transition ->","counters":[]},{"line":"                let open Deferred.Or_error.Let_syntax in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let transition_with_initial_validation =","counters":[]},{"line":"                  Envelope.Incoming.data enveloped_transition","counters":[]},{"line":"                in","counters":[]},{"line":"                let transition_receipt_time = Some (Time.now ()) in","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"                let transition_with_hash, _ =","counters":[]},{"line":"                  transition_with_initial_validation","counters":[]},{"line":"                in","counters":[]},{"line":"                let mostly_validated_transition =","counters":[]},{"line":"                  (* TODO: handle this edge case more gracefully *)","counters":[]},{"line":"                  (* since we are building a disconnected subtree of breadcrumbs,","counters":[]},{"line":"                   * we skip this step in validation *)","counters":[]},{"line":"                  Mina_block.Validation.skip_frontier_dependencies_validation","counters":[]},{"line":"                    `This_block_belongs_to_a_detached_subtree","counters":[]},{"line":"                    transition_with_initial_validation","counters":[]},{"line":"                in","counters":[]},{"line":"                let sender = Envelope.Incoming.sender enveloped_transition in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let parent = Cached.peek cached_parent in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                let expected_parent_hash =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Transition_frontier.Breadcrumb.state_hash parent","counters":[]},{"line":"                in","counters":[]},{"line":"                let actual_parent_hash =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  transition_with_hash |> With_hash.data |> Mina_block.header","counters":[{"col_start":55,"col_end":55,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"                  |> Mina_block.Header.protocol_state","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"                  |> Mina_state.Protocol_state.previous_state_hash","counters":[]},{"line":"                in","counters":[]},{"line":"                let%bind () =","counters":[]},{"line":"                  Deferred.return","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                    (Result.ok_if_true","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"                       (State_hash.equal actual_parent_hash expected_parent_hash)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"                       ~error:","counters":[]},{"line":"                         (Error.of_string","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                            \"Previous external transition hash does not equal \\","counters":[]},{"line":"                             to current external transition's parent hash\" ) )","counters":[]},{"line":"                in","counters":[]},{"line":"                let open Deferred.Let_syntax in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                match%bind","counters":[]},{"line":"                  Deferred.Or_error.try_with ~here:[%here] (fun () ->","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                      Transition_frontier.Breadcrumb.build ~logger","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        ~precomputed_values ~verifier ~trust_system ~parent","counters":[]},{"line":"                        ~transition:mostly_validated_transition","counters":[]},{"line":"                        ~sender:(Some sender) ~transition_receipt_time () )","counters":[]},{"line":"                with","counters":[]},{"line":"                | Error _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Deferred.return @@ Or_error.error_string missing_parent_msg","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"                | Ok result -> (","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    match result with","counters":[]},{"line":"                    | Ok new_breadcrumb ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        let open Result.Let_syntax in","counters":[]},{"line":"                        Mina_metrics.(","counters":[]},{"line":"                          Counter.inc_one","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"                            Transition_frontier_controller","counters":[]},{"line":"                            .breadcrumbs_built_by_builder) ;","counters":[]},{"line":"                        Deferred.return","counters":[]},{"line":"                          (let%map (_ : Transition_frontier.Breadcrumb.t) =","counters":[]},{"line":"                             breadcrumb_if_present","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"                               (Logger.extend logger","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"                                  [ ( \"Check\"","counters":[]},{"line":"                                    , `String \"After creating breadcrumb\" )","counters":[]},{"line":"                                  ] )","counters":[]},{"line":"                           in","counters":[]},{"line":"                           new_breadcrumb )","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"                    | Error err -> (","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"                        (* propagate bans through subtree *)","counters":[]},{"line":"                        let subtree_nodes = Rose_tree.flatten subtree in","counters":[]},{"line":"                        let ip_address_set =","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          let sender_from_tree_node node =","counters":[]},{"line":"                            Envelope.Incoming.sender (Cached.peek node)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"                          in","counters":[]},{"line":"                          List.fold subtree_nodes","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"                            ~init:(Set.empty (module Network_peer.Peer))","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                            ~f:(fun inet_addrs (node, _vc) ->","counters":[]},{"line":"                              match sender_from_tree_node node with","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"                              | Local ->","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                                  failwith","counters":[]},{"line":"                                    \"build_subtrees_of_breadcrumbs: sender of \\","counters":[]},{"line":"                                     external transition should not be Local\"","counters":[]},{"line":"                              | Remote peer ->","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                                  Set.add inet_addrs peer )","counters":[]},{"line":"                        in","counters":[]},{"line":"                        let ip_addresses = Set.to_list ip_address_set in","counters":[]},{"line":"                        let trust_system_record_invalid msg error =","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"                          let%map () =","counters":[]},{"line":"                            Deferred.List.iter ip_addresses ~f:(fun ip_addr ->","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"                                Trust_system.record trust_system logger ip_addr","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                                  ( Trust_system.Actions","counters":[]},{"line":"                                    .Gossiped_invalid_transition","counters":[]},{"line":"                                  , Some (msg, []) ) )","counters":[]},{"line":"                          in","counters":[]},{"line":"                          Error error","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                        in","counters":[]},{"line":"                        match err with","counters":[]},{"line":"                        | `Invalid_staged_ledger_hash error ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            trust_system_record_invalid","counters":[]},{"line":"                              \"invalid staged ledger hash\" error","counters":[]},{"line":"                        | `Invalid_staged_ledger_diff error ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            trust_system_record_invalid","counters":[]},{"line":"                              \"invalid staged ledger diff\" error","counters":[]},{"line":"                        | `Fatal_error exn ->","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                            Deferred.return (Or_error.of_exn exn) ) ) )","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"            |> Cached.sequence_deferred","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"          in","counters":[]},{"line":"          Result.map ~f:(Fn.flip Tuple2.create valid_cb)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"          @@ Cached.sequence_result cached_result ) )","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":52,"col_end":52,"count":2}]}]}