{"filename":"src/lib/consensus/constants.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Snarky_backendless","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"open Unsigned","counters":[]},{"line":"module Length = Mina_numbers.Length","counters":[]},{"line":"","counters":[]},{"line":"module Poly = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type ('length, 'time, 'timespan) t =","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":39,"col_end":39,"count":6}]},{"line":"        { k : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"        ; delta : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"        ; slots_per_sub_window : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; slots_per_window : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; sub_windows_per_window : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        ; slots_per_epoch : 'length (* The first slot after the grace period. *)","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; grace_period_end : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; checkpoint_window_slots_per_year : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; checkpoint_window_size_in_slots : 'length","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        ; block_window_duration_ms : 'timespan","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        ; slot_duration_ms : 'timespan","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; epoch_duration : 'timespan","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; delta_duration : 'timespan","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; genesis_state_timestamp : 'time","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving equal, compare, hash, sexp, to_yojson, hlist]","counters":[{"col_start":62,"col_end":62,"count":3}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":1}]},{"line":"      ( Length.Stable.V1.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Block_time.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      , Block_time.Span.Stable.V1.t )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      Poly.Stable.V2.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving equal, ord, hash, sexp, to_yojson]","counters":[{"col_start":49,"col_end":49,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"type var =","counters":[]},{"line":"  (Length.Checked.t, Block_time.Checked.t, Block_time.Span.Checked.t) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"module type M_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  type length","counters":[]},{"line":"","counters":[]},{"line":"  type time","counters":[]},{"line":"","counters":[]},{"line":"  type timespan","counters":[]},{"line":"","counters":[]},{"line":"  type bool_type","counters":[]},{"line":"","counters":[]},{"line":"  val constant : int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_length : length -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_length : t -> length","counters":[]},{"line":"","counters":[]},{"line":"  val of_timespan : timespan -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_timespan : t -> timespan","counters":[]},{"line":"","counters":[]},{"line":"  val of_time : time -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_time : t -> time","counters":[]},{"line":"","counters":[]},{"line":"  val zero : t","counters":[]},{"line":"","counters":[]},{"line":"  val one : t","counters":[]},{"line":"","counters":[]},{"line":"  val ( / ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( * ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val ( + ) : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val min : t -> t -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Constants_UInt32 :","counters":[]},{"line":"  M_intf","counters":[]},{"line":"    with type length = Length.t","counters":[]},{"line":"     and type time = Block_time.t","counters":[]},{"line":"     and type timespan = Block_time.Span.t = struct","counters":[]},{"line":"  type t = UInt32.t","counters":[]},{"line":"","counters":[]},{"line":"  type length = Length.t","counters":[]},{"line":"","counters":[]},{"line":"  type time = Block_time.t","counters":[]},{"line":"","counters":[]},{"line":"  type timespan = Block_time.Span.t","counters":[]},{"line":"","counters":[]},{"line":"  type bool_type = bool","counters":[]},{"line":"","counters":[]},{"line":"  let constant = UInt32.of_int","counters":[]},{"line":"","counters":[]},{"line":"  let zero = UInt32.zero","counters":[]},{"line":"","counters":[]},{"line":"  let one = UInt32.one","counters":[]},{"line":"","counters":[]},{"line":"  let of_length = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let to_length = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"  let of_time = Fn.compose UInt32.of_int64 Block_time.to_int64","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let to_time = Fn.compose Block_time.of_int64 UInt32.to_int64","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"","counters":[]},{"line":"  let of_timespan = Fn.compose UInt32.of_int64 Block_time.Span.to_ms","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"  let to_timespan = Fn.compose Block_time.Span.of_ms UInt32.to_int64","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"  let ( / ) = UInt32.Infix.( / )","counters":[]},{"line":"","counters":[]},{"line":"  let ( * ) = UInt32.mul","counters":[]},{"line":"","counters":[]},{"line":"  let ( + ) = UInt32.add","counters":[]},{"line":"","counters":[]},{"line":"  let min = UInt32.min","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module N =","counters":[]},{"line":"  Mina_numbers.Nat.Make_checked","counters":[]},{"line":"    (Unsigned_extended.UInt64)","counters":[]},{"line":"    (Snark_bits.Bits.UInt64)","counters":[]},{"line":"","counters":[]},{"line":"module Constants_checked :","counters":[]},{"line":"  M_intf","counters":[]},{"line":"    with type length = Length.Checked.t","counters":[]},{"line":"     and type time = Block_time.Checked.t","counters":[]},{"line":"     and type timespan = Block_time.Span.Checked.t = struct","counters":[]},{"line":"  type t = N.var","counters":[]},{"line":"","counters":[]},{"line":"  type length = Length.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  type time = Block_time.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  type timespan = Block_time.Span.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"  type bool_type = Boolean.var","counters":[]},{"line":"","counters":[]},{"line":"  let constant c = N.Unsafe.of_field (Field.Var.constant (Field.of_int c))","counters":[{"col_start":19,"col_end":19,"count":2},{"col_start":55,"col_end":55,"count":2},{"col_start":69,"col_end":69,"count":2}]},{"line":"","counters":[]},{"line":"  let zero = constant 0","counters":[{"col_start":20,"col_end":20,"count":1}]},{"line":"","counters":[]},{"line":"  let one = constant 1","counters":[{"col_start":19,"col_end":19,"count":1}]},{"line":"","counters":[]},{"line":"  let of_length = Fn.compose N.Unsafe.of_field Length.Checked.to_field","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"  let to_length = Fn.compose Length.Checked.Unsafe.of_field N.to_field","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"","counters":[]},{"line":"  let of_time : Block_time.Checked.t -> t =","counters":[]},{"line":"    Fn.compose N.Unsafe.of_field Block_time.Checked.to_field","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"","counters":[]},{"line":"  let to_time : t -> Block_time.Checked.t =","counters":[]},{"line":"    Fn.compose Block_time.Checked.Unsafe.of_field N.to_field","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"","counters":[]},{"line":"  let of_timespan : timespan -> t =","counters":[]},{"line":"    Fn.compose N.Unsafe.of_field Block_time.Span.Checked.to_field","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"","counters":[]},{"line":"  let to_timespan : t -> timespan =","counters":[]},{"line":"    Fn.compose Block_time.Span.Checked.Unsafe.of_field N.to_field","counters":[{"col_start":13,"col_end":13,"count":1}]},{"line":"","counters":[]},{"line":"  let ( / ) (t : t) (t' : t) = Run.run_checked (N.div_mod t t') |> fst","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"  let ( * ) x y = Run.run_checked (N.mul x y)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let ( + ) x y = Run.run_checked (N.add x y)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let min x y = Run.run_checked (N.min x y)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let create' (type a b c)","counters":[]},{"line":"    (module M : M_intf","counters":[]},{"line":"      with type length = a","counters":[]},{"line":"       and type time = b","counters":[]},{"line":"       and type timespan = c )","counters":[]},{"line":"    ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"    ~(protocol_constants : (a, a, b) Genesis_constants.Protocol.Poly.t) :","counters":[]},{"line":"    (a, b, c) Poly.t =","counters":[]},{"line":"  let open M in","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  let block_window_duration_ms =","counters":[]},{"line":"    constant constraint_constants.block_window_duration_ms","counters":[]},{"line":"  in","counters":[]},{"line":"  let k = of_length protocol_constants.k in","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  let delta = of_length protocol_constants.delta in","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  (*TODO: sub_windows_per_window, slots_per_sub_window are currently dummy","counters":[]},{"line":"    values and need to be updated before mainnet*)","counters":[]},{"line":"  let slots_per_sub_window =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    of_length protocol_constants.slots_per_sub_window","counters":[]},{"line":"  in","counters":[]},{"line":"  let sub_windows_per_window =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    constant constraint_constants.sub_windows_per_window","counters":[]},{"line":"  in","counters":[]},{"line":"  let slots_per_window = slots_per_sub_window * sub_windows_per_window in","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"  let slots_per_epoch = of_length protocol_constants.slots_per_epoch in","counters":[]},{"line":"  let module Slot = struct","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    let duration_ms = block_window_duration_ms","counters":[]},{"line":"  end in","counters":[]},{"line":"  let module Epoch = struct","counters":[]},{"line":"    let size = slots_per_epoch","counters":[]},{"line":"","counters":[]},{"line":"    (* Amount of time in total for an epoch *)","counters":[]},{"line":"    let duration = Slot.duration_ms * size","counters":[]},{"line":"  end in","counters":[]},{"line":"  let delta_duration = Slot.duration_ms * (delta + M.one) in","counters":[]},{"line":"  let num_days = 3. in","counters":[]},{"line":"  assert (Float.(num_days < 14.)) ;","counters":[{"col_start":9,"col_end":9,"count":2}]},{"line":"  (* We forgo updating the min density for the first [num_days] days (or epoch, whichever comes first)","counters":[]},{"line":"      of the network's operation. The reasoning is as follows:","counters":[]},{"line":"","counters":[]},{"line":"      - There may be many empty slots in the beginning of the network, as everyone","counters":[]},{"line":"        gets their nodes up and running. [num_days] days gives all involved in the project","counters":[]},{"line":"        a chance to observe the actual fill rate and try to fix what's keeping it down.","counters":[]},{"line":"      - With actual network parameters, 1 epoch = 2 weeks > [num_days] days,","counters":[]},{"line":"        which means the long fork rule will not come into play during the grace period,","counters":[]},{"line":"        and then we still have several days to compute min-density for the next epoch. *)","counters":[]},{"line":"  let grace_period_end =","counters":[]},{"line":"    let slots =","counters":[]},{"line":"      let n_days =","counters":[]},{"line":"        let n_days_ms =","counters":[]},{"line":"          Time_ns.Span.(to_ms (of_day num_days))","counters":[{"col_start":28,"col_end":28,"count":2},{"col_start":36,"col_end":36,"count":2}]},{"line":"          |> Float.round_up |> Float.to_int |> M.constant","counters":[{"col_start":31,"col_end":31,"count":2},{"col_start":47,"col_end":47,"count":2}]},{"line":"        in","counters":[]},{"line":"        M.( / ) n_days_ms block_window_duration_ms","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":14,"col_end":14,"count":2}]},{"line":"      in","counters":[]},{"line":"      M.min n_days slots_per_epoch","counters":[{"col_start":10,"col_end":10,"count":2}]},{"line":"    in","counters":[]},{"line":"    match constraint_constants.fork with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"        slots","counters":[]},{"line":"    | Some f ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        M.( + )","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          (M.constant (Unsigned.UInt32.to_int f.previous_global_slot))","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          slots","counters":[]},{"line":"  in","counters":[]},{"line":"  let res : (a, b, c) Poly.t =","counters":[]},{"line":"    { Poly.k = to_length k","counters":[{"col_start":23,"col_end":23,"count":2}]},{"line":"    ; delta = to_length delta","counters":[{"col_start":22,"col_end":22,"count":2}]},{"line":"    ; block_window_duration_ms = to_timespan block_window_duration_ms","counters":[{"col_start":43,"col_end":43,"count":2}]},{"line":"    ; slots_per_sub_window = to_length slots_per_sub_window","counters":[{"col_start":37,"col_end":37,"count":2}]},{"line":"    ; slots_per_window = to_length slots_per_window","counters":[{"col_start":33,"col_end":33,"count":2}]},{"line":"    ; sub_windows_per_window = to_length sub_windows_per_window","counters":[{"col_start":39,"col_end":39,"count":2}]},{"line":"    ; slots_per_epoch = to_length slots_per_epoch","counters":[{"col_start":32,"col_end":32,"count":2}]},{"line":"    ; grace_period_end = to_length grace_period_end","counters":[{"col_start":33,"col_end":33,"count":2}]},{"line":"    ; slot_duration_ms = to_timespan Slot.duration_ms","counters":[{"col_start":35,"col_end":35,"count":2}]},{"line":"    ; epoch_duration = to_timespan Epoch.duration","counters":[{"col_start":33,"col_end":33,"count":2}]},{"line":"    ; checkpoint_window_slots_per_year = to_length zero","counters":[{"col_start":49,"col_end":49,"count":2}]},{"line":"    ; checkpoint_window_size_in_slots = to_length zero","counters":[{"col_start":48,"col_end":48,"count":2}]},{"line":"    ; delta_duration = to_timespan delta_duration","counters":[{"col_start":33,"col_end":33,"count":2}]},{"line":"    ; genesis_state_timestamp = protocol_constants.genesis_state_timestamp","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  res","counters":[]},{"line":"","counters":[]},{"line":"let create ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"    ~(protocol_constants : Genesis_constants.Protocol.t) : t =","counters":[]},{"line":"  let protocol_constants =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    Mina_base.Protocol_constants_checked.value_of_t protocol_constants","counters":[]},{"line":"  in","counters":[]},{"line":"  let constants =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    create' (module Constants_UInt32) ~constraint_constants ~protocol_constants","counters":[]},{"line":"  in","counters":[]},{"line":"  let checkpoint_window_slots_per_year, checkpoint_window_size_in_slots =","counters":[{"col_start":2,"col_end":2,"count":2}]},{"line":"    let per_year = 12 in","counters":[]},{"line":"    let slots_per_year =","counters":[]},{"line":"      let one_year_ms = Core.Time.Span.(to_ms (of_day 365.)) |> Float.to_int in","counters":[{"col_start":44,"col_end":44,"count":2},{"col_start":52,"col_end":52,"count":2}]},{"line":"      one_year_ms","counters":[{"col_start":6,"col_end":6,"count":2}]},{"line":"      / (Block_time.Span.to_ms constants.slot_duration_ms |> Int64.to_int_exn)","counters":[{"col_start":61,"col_end":61,"count":2},{"col_start":76,"col_end":76,"count":2}]},{"line":"    in","counters":[]},{"line":"    let size_in_slots =","counters":[]},{"line":"      assert (slots_per_year mod per_year = 0) ;","counters":[{"col_start":13,"col_end":13,"count":2}]},{"line":"      slots_per_year / per_year","counters":[]},{"line":"    in","counters":[]},{"line":"    (Length.of_int slots_per_year, Length.of_int size_in_slots)","counters":[{"col_start":17,"col_end":17,"count":2},{"col_start":47,"col_end":47,"count":2}]},{"line":"  in","counters":[]},{"line":"  { constants with","counters":[]},{"line":"    checkpoint_window_size_in_slots","counters":[]},{"line":"  ; checkpoint_window_slots_per_year","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let for_unit_tests =","counters":[]},{"line":"  lazy","counters":[]},{"line":"    (create","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"       ~constraint_constants:","counters":[]},{"line":"         Genesis_constants.Constraint_constants.for_unit_tests","counters":[]},{"line":"       ~protocol_constants:Genesis_constants.for_unit_tests.protocol )","counters":[]},{"line":"","counters":[]},{"line":"let to_protocol_constants","counters":[]},{"line":"    ({ k","counters":[]},{"line":"     ; delta","counters":[]},{"line":"     ; genesis_state_timestamp","counters":[]},{"line":"     ; slots_per_sub_window","counters":[]},{"line":"     ; slots_per_epoch","counters":[]},{"line":"     ; _","counters":[]},{"line":"     } :","counters":[]},{"line":"      _ Poly.t ) =","counters":[]},{"line":"  { Mina_base.Protocol_constants_checked.Poly.k","counters":[{"col_start":2,"col_end":2,"count":4}]},{"line":"  ; delta","counters":[]},{"line":"  ; genesis_state_timestamp","counters":[]},{"line":"  ; slots_per_sub_window","counters":[]},{"line":"  ; slots_per_epoch","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let typ =","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Length.Checked.typ","counters":[]},{"line":"    ; Block_time.Span.Checked.typ","counters":[]},{"line":"    ; Block_time.Span.Checked.typ","counters":[]},{"line":"    ; Block_time.Span.Checked.typ","counters":[]},{"line":"    ; Block_time.Span.Checked.typ","counters":[]},{"line":"    ; Block_time.Checked.typ","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"    ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"let to_input (t : t) =","counters":[]},{"line":"  Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (Array.concat","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"       [ Array.map ~f:Length.to_input","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"           [| t.k","counters":[]},{"line":"            ; t.delta","counters":[]},{"line":"            ; t.slots_per_sub_window","counters":[]},{"line":"            ; t.slots_per_window","counters":[]},{"line":"            ; t.sub_windows_per_window","counters":[]},{"line":"            ; t.slots_per_epoch","counters":[]},{"line":"            ; t.grace_period_end","counters":[]},{"line":"            ; t.checkpoint_window_slots_per_year","counters":[]},{"line":"            ; t.checkpoint_window_size_in_slots","counters":[]},{"line":"           |]","counters":[]},{"line":"       ; Array.map ~f:Block_time.Span.to_input","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"           [| t.block_window_duration_ms","counters":[]},{"line":"            ; t.slot_duration_ms","counters":[]},{"line":"            ; t.epoch_duration","counters":[]},{"line":"            ; t.delta_duration","counters":[]},{"line":"           |]","counters":[]},{"line":"       ; [| Block_time.to_input t.genesis_state_timestamp |]","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"       ] )","counters":[]},{"line":"","counters":[]},{"line":"let gc_parameters (constants : t) =","counters":[]},{"line":"  let open Unsigned.UInt32 in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Unsigned.UInt32.Infix in","counters":[]},{"line":"  let delay = Block_time.Span.to_ms constants.delta_duration |> of_int64 in","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"  let gc_width = delay * of_int 2 in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"  (* epoch, slot components of gc_width *)","counters":[]},{"line":"  let gc_width_epoch = gc_width / constants.slots_per_epoch in","counters":[]},{"line":"  let gc_width_slot = gc_width mod constants.slots_per_epoch in","counters":[]},{"line":"  let gc_interval = gc_width in","counters":[]},{"line":"  ( `Acceptable_network_delay delay","counters":[]},{"line":"  , `Gc_width gc_width","counters":[]},{"line":"  , `Gc_width_epoch gc_width_epoch","counters":[]},{"line":"  , `Gc_width_slot gc_width_slot","counters":[]},{"line":"  , `Gc_interval gc_interval )","counters":[]},{"line":"","counters":[]},{"line":"module Checked = struct","counters":[]},{"line":"  let to_input (t : var) =","counters":[]},{"line":"    Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (Array.concat","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"         [ Array.map ~f:Length.Checked.to_input","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"             [| t.k","counters":[]},{"line":"              ; t.delta","counters":[]},{"line":"              ; t.slots_per_sub_window","counters":[]},{"line":"              ; t.slots_per_window","counters":[]},{"line":"              ; t.sub_windows_per_window","counters":[]},{"line":"              ; t.slots_per_epoch","counters":[]},{"line":"              ; t.grace_period_end","counters":[]},{"line":"              ; t.checkpoint_window_slots_per_year","counters":[]},{"line":"              ; t.checkpoint_window_size_in_slots","counters":[]},{"line":"             |]","counters":[]},{"line":"         ; Array.map ~f:Block_time.Span.Checked.to_input","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"             [| t.block_window_duration_ms","counters":[]},{"line":"              ; t.slot_duration_ms","counters":[]},{"line":"              ; t.epoch_duration","counters":[]},{"line":"              ; t.delta_duration","counters":[]},{"line":"             |]","counters":[]},{"line":"         ; [| Block_time.Checked.to_input t.genesis_state_timestamp |]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"         ] )","counters":[]},{"line":"","counters":[]},{"line":"  let create ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"      ~(protocol_constants : Mina_base.Protocol_constants_checked.var) :","counters":[]},{"line":"      var Checked.t =","counters":[]},{"line":"    let%bind constants =","counters":[]},{"line":"      make_checked (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"          create'","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (module Constants_checked)","counters":[]},{"line":"            ~constraint_constants ~protocol_constants )","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map checkpoint_window_slots_per_year, checkpoint_window_size_in_slots =","counters":[]},{"line":"      let constant c =","counters":[]},{"line":"        N.Unsafe.of_field (Field.Var.constant (Field.of_int c))","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":44,"col_end":44,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"      in","counters":[]},{"line":"      let per_year = constant 12 in","counters":[]},{"line":"      let slot_duration_ms =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        N.Unsafe.of_field","counters":[]},{"line":"          (Block_time.Span.Checked.to_field constants.slot_duration_ms)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind slots_per_year, _ =","counters":[]},{"line":"        let one_year_ms =","counters":[]},{"line":"          constant (Core.Time.Span.(to_ms (of_day 365.)) |> Float.to_int)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"        in","counters":[]},{"line":"        N.div_mod one_year_ms slot_duration_ms","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%map size_in_slots =","counters":[]},{"line":"        let%bind size_in_slots, rem = N.div_mod slots_per_year per_year in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"        let%map () = N.Assert.equal rem (constant 0) in","counters":[{"col_start":34,"col_end":34,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        size_in_slots","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      in","counters":[]},{"line":"      let to_length = Fn.compose Length.Checked.Unsafe.of_field N.to_field in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      (to_length slots_per_year, to_length size_in_slots)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"    in","counters":[]},{"line":"    { constants with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      checkpoint_window_slots_per_year","counters":[]},{"line":"    ; checkpoint_window_size_in_slots","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"checked = unchecked\" =","counters":[]},{"line":"  let open Mina_base in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let for_unit_tests = Genesis_constants.for_unit_tests.protocol in","counters":[]},{"line":"  let constraint_constants =","counters":[]},{"line":"    Genesis_constants.Constraint_constants.for_unit_tests","counters":[]},{"line":"  in","counters":[]},{"line":"  let test =","counters":[]},{"line":"    Test_util.test_equal Protocol_constants_checked.typ typ","counters":[]},{"line":"      (fun protocol_constants ->","counters":[]},{"line":"        Checked.create ~constraint_constants ~protocol_constants )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      (fun protocol_constants ->","counters":[]},{"line":"        create ~constraint_constants","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~protocol_constants:","counters":[]},{"line":"            (Protocol_constants_checked.t_of_value protocol_constants) )","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"  in","counters":[]},{"line":"  Quickcheck.test ~trials:100 Protocol_constants_checked.Value.gen","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~examples:[ Protocol_constants_checked.value_of_t for_unit_tests ]","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"    ~f:test","counters":[{"col_start":10,"col_end":10,"count":1}]}]}