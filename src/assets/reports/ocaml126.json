{"filename":"src/lib/pickles/step_branch_data.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Hlist","counters":[]},{"line":"open Common","counters":[]},{"line":"open Import","counters":[]},{"line":"","counters":[]},{"line":"(* The data obtained from \"compiling\" an inductive rule into a circuit. *)","counters":[]},{"line":"type ( 'a_var","counters":[]},{"line":"     , 'a_value","counters":[]},{"line":"     , 'ret_var","counters":[]},{"line":"     , 'ret_value","counters":[]},{"line":"     , 'auxiliary_var","counters":[]},{"line":"     , 'auxiliary_value","counters":[]},{"line":"     , 'max_proofs_verified","counters":[]},{"line":"     , 'branches","counters":[]},{"line":"     , 'prev_vars","counters":[]},{"line":"     , 'prev_values","counters":[]},{"line":"     , 'local_widths","counters":[]},{"line":"     , 'local_heights )","counters":[]},{"line":"     t =","counters":[]},{"line":"  | T :","counters":[]},{"line":"      { proofs_verified :","counters":[]},{"line":"          'proofs_verified Nat.t * ('prev_vars, 'proofs_verified) Hlist.Length.t","counters":[]},{"line":"      ; index : int","counters":[]},{"line":"      ; lte : ('proofs_verified, 'max_proofs_verified) Nat.Lte.t","counters":[]},{"line":"      ; domains : Domains.t","counters":[]},{"line":"      ; rule :","counters":[]},{"line":"          ( 'prev_vars","counters":[]},{"line":"          , 'prev_values","counters":[]},{"line":"          , 'local_widths","counters":[]},{"line":"          , 'local_heights","counters":[]},{"line":"          , 'a_var","counters":[]},{"line":"          , 'a_value","counters":[]},{"line":"          , 'ret_var","counters":[]},{"line":"          , 'ret_value","counters":[]},{"line":"          , 'auxiliary_var","counters":[]},{"line":"          , 'auxiliary_value )","counters":[]},{"line":"          Inductive_rule.t","counters":[]},{"line":"      ; main :","counters":[]},{"line":"             step_domains:(Domains.t, 'branches) Vector.t","counters":[]},{"line":"          -> unit","counters":[]},{"line":"          -> ( (Unfinalized.t, 'max_proofs_verified) Vector.t","counters":[]},{"line":"             , Impls.Step.Field.t","counters":[]},{"line":"             , (Impls.Step.Field.t, 'max_proofs_verified) Vector.t )","counters":[]},{"line":"             Types.Step.Statement.t","counters":[]},{"line":"      ; requests :","counters":[]},{"line":"          (module Requests.Step.S","counters":[]},{"line":"             with type statement = 'a_value","counters":[]},{"line":"              and type max_proofs_verified = 'max_proofs_verified","counters":[]},{"line":"              and type prev_values = 'prev_values","counters":[]},{"line":"              and type local_signature = 'local_widths","counters":[]},{"line":"              and type local_branches = 'local_heights","counters":[]},{"line":"              and type return_value = 'ret_value","counters":[]},{"line":"              and type auxiliary_value = 'auxiliary_value )","counters":[]},{"line":"      }","counters":[]},{"line":"      -> ( 'a_var","counters":[]},{"line":"         , 'a_value","counters":[]},{"line":"         , 'ret_var","counters":[]},{"line":"         , 'ret_value","counters":[]},{"line":"         , 'auxiliary_var","counters":[]},{"line":"         , 'auxiliary_value","counters":[]},{"line":"         , 'max_proofs_verified","counters":[]},{"line":"         , 'branches","counters":[]},{"line":"         , 'prev_vars","counters":[]},{"line":"         , 'prev_values","counters":[]},{"line":"         , 'local_widths","counters":[]},{"line":"         , 'local_heights )","counters":[]},{"line":"         t","counters":[]},{"line":"","counters":[]},{"line":"(* Compile an inductive rule. *)","counters":[]},{"line":"let create","counters":[]},{"line":"    (type branches max_proofs_verified local_signature local_branches var value","counters":[]},{"line":"    a_var a_value ret_var ret_value prev_vars prev_values ) ~index","counters":[]},{"line":"    ~(self : (var, value, max_proofs_verified, branches) Tag.t) ~wrap_domains","counters":[]},{"line":"    ~(step_uses_lookup : Pickles_types.Plonk_types.Opt.Flag.t)","counters":[]},{"line":"    ~(max_proofs_verified : max_proofs_verified Nat.t)","counters":[]},{"line":"    ~(proofs_verifieds : (int, branches) Vector.t) ~(branches : branches Nat.t)","counters":[]},{"line":"    ~(public_input :","counters":[]},{"line":"       ( var","counters":[]},{"line":"       , value","counters":[]},{"line":"       , a_var","counters":[]},{"line":"       , a_value","counters":[]},{"line":"       , ret_var","counters":[]},{"line":"       , ret_value )","counters":[]},{"line":"       Inductive_rule.public_input ) ~auxiliary_typ var_to_field_elements","counters":[]},{"line":"    value_to_field_elements (rule : _ Inductive_rule.t) =","counters":[]},{"line":"  Timer.clock __LOC__ ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let module HT = H4.T (Tag) in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let (T (self_width, proofs_verified)) = HT.length rule.prevs in","counters":[]},{"line":"  let rec extract_lengths :","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      type a b n m k.","counters":[]},{"line":"         (a, b, n, m) HT.t","counters":[]},{"line":"      -> (a, k) Length.t","counters":[]},{"line":"      -> n H1.T(Nat).t * m H1.T(Nat).t * (n, k) Length.t * (m, k) Length.t =","counters":[]},{"line":"   fun ts len ->","counters":[]},{"line":"    match (ts, len) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [], Z ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ([], [], Z, Z)","counters":[]},{"line":"    | t :: ts, S len -> (","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let ns, ms, len_ns, len_ms = extract_lengths ts len in","counters":[]},{"line":"        match Type_equal.Id.same_witness self.id t.id with","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Some T ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            (max_proofs_verified :: ns, branches :: ms, S len_ns, S len_ms)","counters":[]},{"line":"        | None ->","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            let (module M), branches =","counters":[]},{"line":"              match t.kind with","counters":[]},{"line":"              | Compiled ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  let d = Types_map.lookup_compiled t.id in","counters":[]},{"line":"                  (d.max_proofs_verified, d.branches)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"              | Side_loaded ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  let d = Types_map.lookup_side_loaded t.id in","counters":[]},{"line":"                  (d.permanent.max_proofs_verified, d.permanent.branches)","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            in","counters":[]},{"line":"            let T = M.eq in","counters":[]},{"line":"            (M.n :: ns, branches :: ms, S len_ns, S len_ms) )","counters":[]},{"line":"  in","counters":[]},{"line":"  Timer.clock __LOC__ ;","counters":[]},{"line":"  let widths, heights, local_signature_length, local_branches_length =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    extract_lengths rule.prevs proofs_verified","counters":[]},{"line":"  in","counters":[]},{"line":"  let lte = Nat.lte_exn self_width max_proofs_verified in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let requests = Requests.Step.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let (typ : (var, value) Impls.Step.Typ.t) =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match public_input with","counters":[]},{"line":"    | Input typ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        typ","counters":[]},{"line":"    | Output typ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        typ","counters":[]},{"line":"    | Input_and_output (input_typ, output_typ) ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Impls.Step.Typ.(input_typ * output_typ)","counters":[]},{"line":"  in","counters":[]},{"line":"  Timer.clock __LOC__ ;","counters":[]},{"line":"  let step ~step_domains =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Step_main.step_main requests","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"      (Nat.Add.create max_proofs_verified)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"      rule","counters":[]},{"line":"      ~basic:","counters":[]},{"line":"        { public_input = typ","counters":[]},{"line":"        ; proofs_verifieds","counters":[]},{"line":"        ; wrap_domains","counters":[]},{"line":"        ; step_domains","counters":[]},{"line":"        ; step_uses_lookup","counters":[]},{"line":"        }","counters":[]},{"line":"      ~public_input ~auxiliary_typ ~self_branches:branches ~proofs_verified","counters":[]},{"line":"      ~local_signature:widths ~local_signature_length ~local_branches:heights","counters":[]},{"line":"      ~local_branches_length ~lte ~self","counters":[]},{"line":"    |> unstage","counters":[]},{"line":"  in","counters":[]},{"line":"  Timer.clock __LOC__ ;","counters":[]},{"line":"  let own_domains =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let main =","counters":[]},{"line":"      step","counters":[]},{"line":"        ~step_domains:","counters":[]},{"line":"          (Vector.init branches ~f:(fun _ -> Fix_domains.rough_domains))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    in","counters":[]},{"line":"    let etyp =","counters":[]},{"line":"      Impls.Step.input ~proofs_verified:max_proofs_verified","counters":[]},{"line":"        ~wrap_rounds:Backend.Tock.Rounds.n ~uses_lookup:No","counters":[]},{"line":"      (* TODO *)","counters":[]},{"line":"    in","counters":[]},{"line":"    Fix_domains.domains","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      (module Impls.Step)","counters":[]},{"line":"      (T (Snarky_backendless.Typ.unit (), Fn.id, Fn.id))","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      etyp main","counters":[]},{"line":"  in","counters":[]},{"line":"  Timer.clock __LOC__ ;","counters":[]},{"line":"  T","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { proofs_verified = (self_width, proofs_verified)","counters":[]},{"line":"    ; index","counters":[]},{"line":"    ; lte","counters":[]},{"line":"    ; rule","counters":[]},{"line":"    ; domains = own_domains","counters":[]},{"line":"    ; main = step","counters":[]},{"line":"    ; requests","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":4,"count":2}]}]}