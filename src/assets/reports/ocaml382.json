{"filename":"src/lib/mina_base/unix/graphql_scalars.ml","lines":[{"line":"open Graphql_basic_scalars.Utils","counters":[]},{"line":"open Graphql_basic_scalars.Testing","counters":[]},{"line":"","counters":[]},{"line":"module Make (Schema : Schema) = struct","counters":[]},{"line":"  module type Json_intf =","counters":[]},{"line":"    Json_intf_any_typ with type ('a, 'b) typ := ('a, 'b) Schema.typ","counters":[]},{"line":"","counters":[]},{"line":"  module TokenId =","counters":[]},{"line":"    Make_scalar_using_to_string","counters":[]},{"line":"      (Mina_base.Token_id)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"TokenId\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"String representation of a token's UInt64 identifier\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module StateHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.State_hash)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"StateHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"Base58Check-encoded state hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module ChainHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Receipt.Chain_hash)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"ChainHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"Base58Check-encoded chain hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module EpochSeed =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Epoch_seed)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"EpochSeed\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"Base58Check-encoded epoch seed\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module LedgerHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Ledger_hash)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"LedgerHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"Base58Check-encoded ledger hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module StagedLedgerAuxHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Staged_ledger_hash.Aux_hash)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"StagedLedgerAuxHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc =","counters":[]},{"line":"          \"Base58Check-encoded hash of the staged ledger hash's aux_hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module PendingCoinbaseHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Pending_coinbase.Hash)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"PendingCoinbaseHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"Base58Check-encoded hash of a pending coinbase hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module PendingCoinbaseAuxHash =","counters":[]},{"line":"    Make_scalar_using_base58_check","counters":[]},{"line":"      (Mina_base.Staged_ledger_hash.Pending_coinbase_aux)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"PendingCoinbaseAuxHash\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc =","counters":[]},{"line":"          \"Base58Check-encoded hash of a pending coinbase auxiliary hash\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module FieldElem =","counters":[]},{"line":"    Make_scalar_using_to_string","counters":[]},{"line":"      (Mina_base.Zkapp_basic.F)","counters":[]},{"line":"      (struct","counters":[]},{"line":"        let name = \"FieldElem\"","counters":[]},{"line":"","counters":[]},{"line":"        let doc = \"field element\"","counters":[]},{"line":"      end)","counters":[]},{"line":"      (Schema)","counters":[]},{"line":"","counters":[]},{"line":"  module TransactionStatusFailure :","counters":[]},{"line":"    Json_intf with type t = Mina_base.Transaction_status.Failure.t = struct","counters":[]},{"line":"    open Mina_base.Transaction_status.Failure","counters":[]},{"line":"","counters":[]},{"line":"    type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"    let parse json =","counters":[]},{"line":"      json |> Yojson.Basic.Util.to_string |> of_string","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      |> Base.Result.ok_or_failwith","counters":[]},{"line":"","counters":[]},{"line":"    let serialize x = `String (to_string x)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"    let typ () =","counters":[]},{"line":"      Schema.scalar \"TransactionStatusFailure\" ~doc:\"transaction status failure\"","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        ~coerce:serialize","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Make (Schema)","counters":[]},{"line":"","counters":[]},{"line":"let%test_module \"Roundtrip tests\" =","counters":[]},{"line":"  ( module struct","counters":[]},{"line":"    include Make (Test_schema)","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"TokenId\" = (module Make_test (TokenId) (Mina_base.Token_id))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"StateHash\" =","counters":[]},{"line":"      (module Make_test (StateHash) (Mina_base.State_hash))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"ChainHash\" =","counters":[]},{"line":"      (module Make_test (ChainHash) (Mina_base.Receipt.Chain_hash))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"EpochSeed\" =","counters":[]},{"line":"      (module Make_test (EpochSeed) (Mina_base.Epoch_seed))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"LedgerHash\" =","counters":[]},{"line":"      (module Make_test (LedgerHash) (Mina_base.Ledger_hash))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"TransactionStatusFailure\" =","counters":[]},{"line":"      ( module Make_test","counters":[]},{"line":"                 (TransactionStatusFailure)","counters":[]},{"line":"                 (Mina_base.Transaction_status.Failure) )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"FieldElem\" =","counters":[]},{"line":"      ( module struct","counters":[]},{"line":"        module FieldElem_gen = struct","counters":[]},{"line":"          include Mina_base.Zkapp_basic.F","counters":[]},{"line":"","counters":[]},{"line":"          let gen =","counters":[]},{"line":"            Core_kernel.Int.quickcheck_generator","counters":[]},{"line":"            |> Core_kernel.Quickcheck.Generator.map ~f:Pasta_bindings.Fp.of_int","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        include Make_test (FieldElem) (FieldElem_gen)","counters":[]},{"line":"      end )","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"PendingCoinbaseHash\" =","counters":[]},{"line":"      (module Make_test (PendingCoinbaseHash) (Mina_base.Pending_coinbase.Hash))","counters":[]},{"line":"","counters":[]},{"line":"    let%test_module \"StagedLedgerAuxHash\" =","counters":[]},{"line":"      ( module struct","counters":[]},{"line":"        module StagedledgerAuxHash_gen = struct","counters":[]},{"line":"          include Mina_base.Staged_ledger_hash.Aux_hash","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        include Make_test (StagedLedgerAuxHash) (StagedledgerAuxHash_gen)","counters":[]},{"line":"      end )","counters":[]},{"line":"  end )","counters":[{"col_start":6,"col_end":6,"count":2}]}]}