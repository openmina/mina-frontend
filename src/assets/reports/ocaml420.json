{"filename":"src/lib/gossip_net/intf.ml","lines":[{"line":"open Async","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"open Pipe_lib","counters":[]},{"line":"open Network_peer.Rpc_intf","counters":[]},{"line":"","counters":[]},{"line":"type ban_creator = { banned_peer : Peer.t; banned_until : Time.t }","counters":[{"col_start":0,"col_end":0,"count":0},{"col_start":5,"col_end":5,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"[@@deriving fields]","counters":[]},{"line":"","counters":[]},{"line":"type ban_notification = { banned_peer : Peer.t; banned_until : Time.t }","counters":[]},{"line":"","counters":[]},{"line":"module type Gossip_net_intf = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  module Rpc_intf : Rpc_interface_intf","counters":[]},{"line":"","counters":[]},{"line":"  val restart_helper : t -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val peers : t -> Peer.t list Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val bandwidth_info :","counters":[]},{"line":"       t","counters":[]},{"line":"    -> ([ `Input of float ] * [ `Output of float ] * [ `Cpu_usage of float ])","counters":[]},{"line":"       Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val set_node_status : t -> string -> unit Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val get_peer_node_status : t -> Peer.t -> string Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val initial_peers : t -> Mina_net2.Multiaddr.t list","counters":[]},{"line":"","counters":[]},{"line":"  val add_peer : t -> Peer.t -> is_seed:bool -> unit Deferred.Or_error.t","counters":[]},{"line":"","counters":[]},{"line":"  val connection_gating : t -> Mina_net2.connection_gating Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val set_connection_gating :","counters":[]},{"line":"    t -> Mina_net2.connection_gating -> Mina_net2.connection_gating Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val random_peers : t -> int -> Peer.t list Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val random_peers_except :","counters":[]},{"line":"    t -> int -> except:Peer.Hash_set.t -> Peer.t list Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val query_peer' :","counters":[]},{"line":"       ?how:Monad_sequence.how","counters":[]},{"line":"    -> ?heartbeat_timeout:Time_ns.Span.t","counters":[]},{"line":"    -> ?timeout:Time.Span.t","counters":[]},{"line":"    -> t","counters":[]},{"line":"    -> Peer.Id.t","counters":[]},{"line":"    -> ('q, 'r) Rpc_intf.rpc","counters":[]},{"line":"    -> 'q list","counters":[]},{"line":"    -> 'r list rpc_response Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val query_peer :","counters":[]},{"line":"       ?heartbeat_timeout:Time_ns.Span.t","counters":[]},{"line":"    -> ?timeout:Time.Span.t","counters":[]},{"line":"    -> t","counters":[]},{"line":"    -> Peer.Id.t","counters":[]},{"line":"    -> ('q, 'r) Rpc_intf.rpc","counters":[]},{"line":"    -> 'q","counters":[]},{"line":"    -> 'r rpc_response Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val query_random_peers :","counters":[]},{"line":"       t","counters":[]},{"line":"    -> int","counters":[]},{"line":"    -> ('q, 'r) Rpc_intf.rpc","counters":[]},{"line":"    -> 'q","counters":[]},{"line":"    -> 'r rpc_response Deferred.t List.t Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val broadcast_state :","counters":[]},{"line":"    ?origin_topic:string -> t -> Message.state_msg -> unit Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val broadcast_transaction_pool_diff :","counters":[]},{"line":"       ?origin_topic:string","counters":[]},{"line":"    -> t","counters":[]},{"line":"    -> Message.transaction_pool_diff_msg","counters":[]},{"line":"    -> unit Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val broadcast_snark_pool_diff :","counters":[]},{"line":"    ?origin_topic:string -> t -> Message.snark_pool_diff_msg -> unit Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val on_first_connect : t -> f:(unit -> 'a) -> 'a Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val on_first_high_connectivity : t -> f:(unit -> 'a) -> 'a Deferred.t","counters":[]},{"line":"","counters":[]},{"line":"  val ban_notification_reader : t -> ban_notification Linear_pipe.Reader.t","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}