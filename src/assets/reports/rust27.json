{"filename":"src/tree_version.rs","lines":[{"line":"use std::{fmt::Debug, hash::Hash};","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"","counters":[]},{"line":"use crate::account::{get_legacy_hash_of, Account, AccountLegacy, TokenId, TokenIdLegacy};","counters":[]},{"line":"","counters":[]},{"line":"pub trait TreeVersion {","counters":[]},{"line":"    type Account: Debug + Clone;","counters":[]},{"line":"    type TokenId: Debug + Clone + Hash + PartialEq;","counters":[]},{"line":"","counters":[]},{"line":"    fn hash_node(depth: usize, left: Fp, right: Fp) -> Fp;","counters":[]},{"line":"    fn hash_leaf(leaf: &Self::Account) -> Fp;","counters":[]},{"line":"    fn empty_hash_at_depth(depth: usize) -> Fp;","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct V1;","counters":[]},{"line":"","counters":[]},{"line":"#[derive(Clone, Debug)]","counters":[{"col_start":16,"col_end":21,"count":0}]},{"line":"pub struct V2;","counters":[]},{"line":"","counters":[]},{"line":"impl TreeVersion for V2 {","counters":[]},{"line":"    type Account = Account;","counters":[]},{"line":"    type TokenId = TokenId;","counters":[]},{"line":"","counters":[]},{"line":"    fn hash_node(depth: usize, left: Fp, right: Fp) -> Fp {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        let param = format!(\"MinaMklTree{:03}\", depth);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        crate::hash::hash_with_kimchi(param.as_str(), &[left, right])","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn hash_leaf(leaf: &Self::Account) -> Fp {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        leaf.hash()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn empty_hash_at_depth(depth: usize) -> Fp {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        // let now = std::time::Instant::now();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        (0..depth).fold(Account::empty().hash(), |prev_hash, depth| {","counters":[{"col_start":0,"col_end":49,"count":0},{"col_start":68,"col_end":69,"count":0}]},{"line":"            Self::hash_node(depth, prev_hash, prev_hash)","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"        // elog!(\"empty_hash_at_depth={:?} {:?}\", depth, now.elapsed());","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"        // res","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl TreeVersion for V1 {","counters":[]},{"line":"    type Account = AccountLegacy;","counters":[]},{"line":"    type TokenId = TokenIdLegacy;","counters":[]},{"line":"","counters":[]},{"line":"    fn hash_node(depth: usize, left: Fp, right: Fp) -> Fp {","counters":[{"col_start":4,"col_end":59,"count":0}]},{"line":"        use mina_hasher::{create_legacy, Hashable, Hasher, ROInput};","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"        #[derive(Clone)]","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"        struct TwoHashes(Fp, Fp);","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"        impl Hashable for TwoHashes {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            type D = u32; // depth","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"            fn to_roinput(&self) -> ROInput {","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                let mut roi = ROInput::new();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                roi = roi.append_field(self.0);","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                roi = roi.append_field(self.1);","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                roi","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            fn domain_string(depth: Self::D) -> Option<String> {","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                Some(format!(\"CodaMklTree{:03}\", depth))","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let mut hasher = create_legacy::<TwoHashes>(depth as u32);","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"        hasher.update(&TwoHashes(left, right));","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        hasher.digest()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn hash_leaf(leaf: &Self::Account) -> Fp {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        use mina_hasher::{create_legacy, Hasher};","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        let mut hasher = create_legacy::<AccountLegacy>(());","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        hasher.update(leaf);","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        hasher.digest()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn empty_hash_at_depth(depth: usize) -> Fp {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        (0..depth).fold(account_empty_legacy_hash(), |prev_hash, depth| {","counters":[{"col_start":0,"col_end":53,"count":0},{"col_start":72,"col_end":73,"count":0}]},{"line":"            Self::hash_node(depth, prev_hash, prev_hash)","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        })","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub fn account_empty_legacy_hash() -> Fp {","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    get_legacy_hash_of((), &AccountLegacy::empty())","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]}]}