{"filename":"src/lib/pickles/limb_vector/constant.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"","counters":[]},{"line":"type 'n t = (Int64.t, 'n) Vector.t [@@deriving sexp_of]","counters":[{"col_start":0,"col_end":0,"count":0}]},{"line":"","counters":[]},{"line":"let to_bits t =","counters":[]},{"line":"  Vector.to_list t","counters":[{"col_start":2,"col_end":2,"count":31},{"col_start":15,"col_end":15,"count":31}]},{"line":"  |> List.concat_map ~f:(fun n ->","counters":[]},{"line":"         let test_bit i = Int64.(shift_right n i land one = one) in","counters":[{"col_start":9,"col_end":9,"count":62},{"col_start":26,"col_end":26,"count":3968},{"col_start":43,"col_end":43,"count":3968}]},{"line":"         List.init 64 ~f:test_bit )","counters":[]},{"line":"","counters":[]},{"line":"module Hex64 = struct","counters":[]},{"line":"  module T = struct","counters":[]},{"line":"    type t = Int64.t [@@deriving yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"","counters":[]},{"line":"    (* Modify the [of_yojson] handler to add a case for [`String].","counters":[]},{"line":"       This isn't necessary when using Yojson's parser, because it will","counters":[]},{"line":"       correctly infer [`Intlit] for any possible value that appears here.","counters":[]},{"line":"       However, if this json was constructed from a GraphQL query then it will","counters":[]},{"line":"       be encoded as a [`String] and the conversion will fail unless we handle","counters":[]},{"line":"       it ourselves.","counters":[]},{"line":"    *)","counters":[]},{"line":"    let of_yojson yojson =","counters":[]},{"line":"      match yojson with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | `String x -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          try Result.Ok (Int64.of_string x)","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          with _ -> Result.Error \"Constant.Make.Hex64.t\" )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          of_yojson yojson","counters":[]},{"line":"","counters":[]},{"line":"    include (Int64 : module type of Int64 with type t := t)","counters":[]},{"line":"","counters":[]},{"line":"    let to_hex t =","counters":[]},{"line":"      let lo = t land of_int 0xffffff in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"      let mi = (t lsr 24) land of_int 0xffffff in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      let hi = (t lsr 48) land of_int 0xffff in","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"      sprintf \"%04x%06x%06x\" (to_int_exn hi) (to_int_exn mi) (to_int_exn lo)","counters":[{"col_start":39,"col_end":39,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"    let of_hex h =","counters":[]},{"line":"      let f s = Hex.of_string (\"0x\" ^ s) in","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"      let hi, lo = String.(f (sub h ~pos:0 ~len:8), f (sub h ~pos:8 ~len:8)) in","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      (hi lsl 32) lor lo","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"int64 hex\" =","counters":[]},{"line":"      Quickcheck.test (Int64.gen_incl zero max_value) ~f:(fun x ->","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          assert (equal x (of_hex (to_hex x))) )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"    let sexp_of_t = Fn.compose String.sexp_of_t to_hex","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"","counters":[]},{"line":"    let t_of_sexp = Fn.compose of_hex String.t_of_sexp","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  include T","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = (T.t[@version_asserted])","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1},{"col_start":16,"col_end":16,"count":0}]},{"line":"      [@@deriving compare, sexp, yojson, hash, equal]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (N : Vector.Nat_intf) = struct","counters":[]},{"line":"  module A = Vector.With_length (N)","counters":[]},{"line":"","counters":[]},{"line":"  let length = 64 * Nat.to_int N.n","counters":[{"col_start":29,"col_end":29,"count":6}]},{"line":"","counters":[]},{"line":"  type t = Hex64.t A.t [@@deriving sexp, compare, yojson, hash, equal]","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":11,"col_end":11,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"  let to_bits = to_bits","counters":[]},{"line":"","counters":[]},{"line":"  let of_bits bits =","counters":[]},{"line":"    let pack =","counters":[{"col_start":4,"col_end":4,"count":31}]},{"line":"      List.foldi ~init:Int64.zero ~f:(fun i acc b ->","counters":[]},{"line":"          if b then Int64.(acc lor shift_left one i) else acc )","counters":[{"col_start":10,"col_end":10,"count":3968},{"col_start":20,"col_end":20,"count":2023},{"col_start":44,"col_end":44,"count":2023},{"col_start":58,"col_end":58,"count":1945}]},{"line":"    in","counters":[]},{"line":"    let bits =","counters":[]},{"line":"      List.groupi ~break:(fun i _ _ -> i mod 64 = 0) bits |> List.map ~f:pack","counters":[{"col_start":16,"col_end":16,"count":31},{"col_start":39,"col_end":39,"count":3937}]},{"line":"    in","counters":[]},{"line":"    let n = List.length bits in","counters":[{"col_start":4,"col_end":4,"count":31}]},{"line":"    let n_expected = Nat.to_int N.n in","counters":[{"col_start":4,"col_end":4,"count":31}]},{"line":"    assert (n <= n_expected) ;","counters":[{"col_start":4,"col_end":4,"count":31},{"col_start":11,"col_end":11,"count":31}]},{"line":"    let bits = bits @ List.init (n_expected - n) ~f:(fun _ -> Int64.zero) in","counters":[{"col_start":30,"col_end":30,"count":31},{"col_start":62,"col_end":62,"count":0}]},{"line":"    Vector.of_list_and_length_exn bits N.n","counters":[]},{"line":"","counters":[]},{"line":"  let of_tick_field x =","counters":[]},{"line":"    of_bits (List.take (Backend.Tick.Field.to_bits x) length)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let of_tock_field x =","counters":[]},{"line":"    of_bits (List.take (Backend.Tock.Field.to_bits x) length)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let to_tick_field t = Backend.Tick.Field.of_bits (to_bits t)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  let to_tock_field t = Backend.Tock.Field.of_bits (to_bits t)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"","counters":[]},{"line":"  let dummy : t = Vector.init N.n ~f:(fun _ -> Int64.one)","counters":[{"col_start":28,"col_end":28,"count":6},{"col_start":47,"col_end":47,"count":14}]},{"line":"","counters":[]},{"line":"  let zero : t = Vector.init N.n ~f:(fun _ -> Int64.zero)","counters":[{"col_start":27,"col_end":27,"count":6},{"col_start":46,"col_end":46,"count":14}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}