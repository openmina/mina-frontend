{"filename":"src/mask/mask_impl.rs","lines":[{"line":"use std::{","counters":[]},{"line":"    collections::{HashMap, HashSet},","counters":[]},{"line":"    path::PathBuf,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::CompressedPubKey;","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    account::{Account, AccountId, TokenId},","counters":[]},{"line":"    address::{Address, AddressIterator, Direction},","counters":[]},{"line":"    base::{AccountIndex, BaseLedger, GetOrCreated, MerklePath, Uuid},","counters":[]},{"line":"    database::{Database, DatabaseError},","counters":[]},{"line":"    mask::UnregisterBehavior,","counters":[]},{"line":"    next_uuid,","counters":[]},{"line":"    tree_version::{TreeVersion, V2},","counters":[]},{"line":"    HashesMatrix,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use super::Mask;","counters":[]},{"line":"","counters":[]},{"line":"pub enum MaskImpl {","counters":[]},{"line":"    Root {","counters":[]},{"line":"        database: Database<V2>,","counters":[]},{"line":"        childs: HashMap<Uuid, Mask>,","counters":[]},{"line":"    },","counters":[]},{"line":"    Attached {","counters":[]},{"line":"        parent: Mask,","counters":[]},{"line":"        owning_account: HashMap<AccountIndex, Account>,","counters":[]},{"line":"        token_to_account: HashMap<TokenId, AccountId>,","counters":[]},{"line":"        id_to_addr: HashMap<AccountId, Address>,","counters":[]},{"line":"        last_location: Option<Address>,","counters":[]},{"line":"        depth: u8,","counters":[]},{"line":"        childs: HashMap<Uuid, Mask>,","counters":[]},{"line":"        hashes: HashesMatrix,","counters":[]},{"line":"        uuid: Uuid,","counters":[]},{"line":"    },","counters":[]},{"line":"    Unattached {","counters":[]},{"line":"        depth: u8,","counters":[]},{"line":"        childs: HashMap<Uuid, Mask>,","counters":[]},{"line":"        owning_account: HashMap<AccountIndex, Account>,","counters":[]},{"line":"        token_to_account: HashMap<TokenId, AccountId>,","counters":[]},{"line":"        id_to_addr: HashMap<AccountId, Address>,","counters":[]},{"line":"        last_location: Option<Address>,","counters":[]},{"line":"        hashes: HashesMatrix,","counters":[]},{"line":"        uuid: Uuid,","counters":[]},{"line":"    },","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"/// Drop implementation used on tests only !","counters":[]},{"line":"#[cfg(test)]","counters":[]},{"line":"impl Drop for MaskImpl {","counters":[]},{"line":"    fn drop(&mut self) {","counters":[]},{"line":"        if self.uuid().starts_with(\"temporary\") {","counters":[]},{"line":"            return;","counters":[]},{"line":"        }","counters":[]},{"line":"        super::tests::remove_mask(&self.get_uuid());","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Clone for MaskImpl {","counters":[]},{"line":"    fn clone(&self) -> Self {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Self::Root { database, childs } => Self::Root {","counters":[{"col_start":25,"col_end":59,"count":-2}]},{"line":"                database: database.clone_db(database.get_directory().unwrap()),","counters":[{"col_start":0,"col_end":79,"count":-2}]},{"line":"                childs: childs.clone(),","counters":[{"col_start":0,"col_end":39,"count":-2}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":-2}]},{"line":"            Self::Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":2}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":2}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":2}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":2}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":2}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":22,"count":2}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":2}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":2}]},{"line":"                uuid: _,","counters":[{"col_start":0,"col_end":24,"count":2}]},{"line":"            } => Self::Attached {","counters":[{"col_start":0,"col_end":33,"count":2}]},{"line":"                parent: parent.clone(),","counters":[{"col_start":0,"col_end":39,"count":2}]},{"line":"                owning_account: owning_account.clone(),","counters":[{"col_start":0,"col_end":55,"count":2}]},{"line":"                token_to_account: token_to_account.clone(),","counters":[{"col_start":0,"col_end":59,"count":2}]},{"line":"                id_to_addr: id_to_addr.clone(),","counters":[{"col_start":0,"col_end":47,"count":2}]},{"line":"                last_location: last_location.clone(),","counters":[{"col_start":0,"col_end":53,"count":2}]},{"line":"                depth: *depth,","counters":[{"col_start":0,"col_end":30,"count":2}]},{"line":"                childs: childs.clone(),","counters":[{"col_start":0,"col_end":39,"count":2}]},{"line":"                hashes: hashes.clone(),","counters":[{"col_start":0,"col_end":39,"count":2}]},{"line":"                uuid: next_uuid(),","counters":[{"col_start":0,"col_end":34,"count":2}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":2}]},{"line":"            Self::Unattached {","counters":[]},{"line":"                depth,","counters":[{"col_start":16,"col_end":22,"count":0}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                uuid: _,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            } => Self::Unattached {","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                depth: *depth,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                childs: childs.clone(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                owning_account: owning_account.clone(),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                token_to_account: token_to_account.clone(),","counters":[{"col_start":0,"col_end":59,"count":0}]},{"line":"                id_to_addr: id_to_addr.clone(),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                last_location: last_location.clone(),","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                hashes: hashes.clone(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                uuid: next_uuid(),","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl std::fmt::Debug for MaskImpl {","counters":[]},{"line":"    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Self::Root { database, childs } => f","counters":[{"col_start":25,"col_end":48,"count":0}]},{"line":"                .debug_struct(\"Root\")","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                .field(\"database_uuid\", &database.get_uuid())","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                .field(\"database\", &database)","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                .field(\"childs\", &childs.len())","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                .finish(),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            Self::Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                uuid,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            } => f","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                .debug_struct(\"Attached\")","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                .field(\"uuid\", uuid)","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .field(\"parent\", &parent.get_uuid())","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"                .field(\"owning_account\", &owning_account.len())","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                .field(\"token_to_account\", &token_to_account.len())","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                .field(\"id_to_addr\", &id_to_addr.len())","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                .field(\"last_location\", last_location)","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                .field(\"depth\", depth)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                .field(\"num_accounts\", &self.num_accounts())","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                .field(\"childs\", &childs.len())","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                .field(\"hashes_matrix\", &hashes)","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                .finish(),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            Self::Unattached {","counters":[]},{"line":"                depth,","counters":[{"col_start":16,"col_end":22,"count":0}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                uuid,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            } => f","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                .debug_struct(\"Unattached\")","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"                .field(\"depth\", depth)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                .field(\"childs\", &childs.len())","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"                .field(\"owning_account\", &owning_account.len())","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                .field(\"token_to_account\", &token_to_account.len())","counters":[{"col_start":0,"col_end":67,"count":0}]},{"line":"                .field(\"id_to_addr\", &id_to_addr.len())","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                .field(\"last_location\", last_location)","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"                .field(\"uuid\", uuid)","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                .field(\"hashes_matrix\", &hashes)","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                .finish(),","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"use MaskImpl::*;","counters":[]},{"line":"","counters":[]},{"line":"/// For debug purpose only","counters":[]},{"line":"#[derive(Debug)]","counters":[{"col_start":9,"col_end":10,"count":213},{"col_start":13,"col_end":14,"count":213}]},{"line":"pub enum MaskImplShort {","counters":[]},{"line":"    Root______(Uuid),","counters":[]},{"line":"    Attached__(Uuid),","counters":[]},{"line":"    Unattached(Uuid),","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl MaskImpl {","counters":[]},{"line":"    /// For debug purpose only","counters":[]},{"line":"    pub fn short(&self) -> MaskImplShort {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => MaskImplShort::Root______(database.get_uuid()),","counters":[{"col_start":19,"col_end":83,"count":0}]},{"line":"            Attached { uuid, .. } => MaskImplShort::Attached__(uuid.clone()),","counters":[{"col_start":23,"col_end":76,"count":0}]},{"line":"            Unattached { uuid, .. } => MaskImplShort::Unattached(uuid.clone()),","counters":[{"col_start":25,"col_end":78,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn is_attached(&self) -> bool {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Attached { .. } => true,","counters":[{"col_start":31,"col_end":35,"count":0}]},{"line":"            Root { .. } | Unattached { .. } => false,","counters":[{"col_start":47,"col_end":52,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub(super) fn any_child_alive(&self) -> bool {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        let childs = match self {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { childs, .. } => childs,","counters":[{"col_start":19,"col_end":41,"count":0}]},{"line":"            Attached { childs, .. } => childs,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { childs, .. } => childs,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        !childs.is_empty()","counters":[{"col_start":8,"col_end":26,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// Make `mask` a child of `self`","counters":[]},{"line":"    pub fn register_mask(&mut self, self_mask: Mask, mask: Mask) -> Mask {","counters":[{"col_start":4,"col_end":74,"count":0}]},{"line":"        let childs = self.childs();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        let old = childs.insert(mask.get_uuid(), mask.clone());","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        assert!(old.is_none(), \"mask is already registered\");","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":31,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"        let parent_last_filled = self.last_filled();","counters":[{"col_start":12,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"        mask.set_parent(self_mask, Some(parent_last_filled));","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"        mask","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// Detach this mask from its parent","counters":[]},{"line":"    pub fn unregister_mask(&mut self, behavior: UnregisterBehavior, remove_from_parent: bool) {","counters":[{"col_start":4,"col_end":94,"count":0}]},{"line":"        use UnregisterBehavior::*;","counters":[]},{"line":"","counters":[]},{"line":"        let parent = match self.get_parent() {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":44,"count":0}]},{"line":"            Some(parent) => parent,","counters":[{"col_start":17,"col_end":34,"count":0}]},{"line":"            None => return,","counters":[{"col_start":20,"col_end":26,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let trigger_detach_signal = matches!(behavior, Check | Recursive);","counters":[{"col_start":12,"col_end":33,"count":0},{"col_start":36,"col_end":44,"count":0},{"col_start":45,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"        match behavior {","counters":[{"col_start":14,"col_end":22,"count":0}]},{"line":"            Check => {","counters":[]},{"line":"                assert!(","counters":[{"col_start":16,"col_end":24,"count":0}]},{"line":"                    self.childs().is_empty(),","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"                    \"mask has {} children that must be unregistered first\",","counters":[{"col_start":20,"col_end":75,"count":0}]},{"line":"                    self.childs().len()","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                );","counters":[]},{"line":"            }","counters":[]},{"line":"            IPromiseIAmReparentingThisMask => (),","counters":[{"col_start":46,"col_end":48,"count":0}]},{"line":"            Recursive => {","counters":[]},{"line":"                for child in self.childs().values_mut() {","counters":[{"col_start":20,"col_end":25,"count":0},{"col_start":29,"col_end":55,"count":0},{"col_start":56,"col_end":57,"count":0}]},{"line":"                    child.unregister_mask_impl(Recursive, false);","counters":[{"col_start":0,"col_end":65,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        // Remove only when our parent is not unregistering us","counters":[]},{"line":"        if remove_from_parent {","counters":[{"col_start":11,"col_end":29,"count":0}]},{"line":"            let removed = parent.remove_child_uuid(self.uuid());","counters":[{"col_start":16,"col_end":64,"count":0}]},{"line":"            assert!(removed.is_some(), \"Mask not a child of the parent\");","counters":[{"col_start":0,"col_end":37,"count":0},{"col_start":39,"col_end":71,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        self.unset_parent(trigger_detach_signal);","counters":[{"col_start":8,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn remove_and_reparent(&mut self) {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        // let root_hash = self.merkle_root();","counters":[]},{"line":"","counters":[]},{"line":"        let (parent, childs, uuid) = match self {","counters":[{"col_start":13,"col_end":33,"count":0},{"col_start":43,"col_end":47,"count":0}]},{"line":"            Root { .. } => panic!(\"Cannot reparent a root mask\"),","counters":[{"col_start":27,"col_end":64,"count":0}]},{"line":"            Unattached { .. } => panic!(\"Cannot reparent a unattached mask\"),","counters":[{"col_start":33,"col_end":76,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                uuid,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (parent, childs, uuid.clone()),","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let childs = std::mem::take(childs);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        // we can only reparent if merkle roots are the same","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        // assert_eq!(parent.merkle_root(), root_hash);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        parent","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            .remove_child_uuid(uuid)","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            .expect(\"Parent doesn't have this mask as child\");","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"        for child in childs.values() {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":28,"col_end":36,"count":0},{"col_start":37,"col_end":38,"count":0}]},{"line":"            child.remove_parent();","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            parent.register_mask(child.clone());","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        self.remove_parent();","counters":[{"col_start":8,"col_end":29,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn set_parent(&mut self, parent: Mask, parent_last_filled: Option<Option<Address>>) {","counters":[{"col_start":4,"col_end":93,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { .. } => panic!(\"set_parent() on a root\"),","counters":[{"col_start":27,"col_end":59,"count":0}]},{"line":"            Attached { .. } => panic!(\"mask is already attached\"),","counters":[{"col_start":31,"col_end":65,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                depth,","counters":[{"col_start":16,"col_end":22,"count":0}]},{"line":"                childs,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                uuid,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                use std::mem::{replace, take};","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"                *self = Attached {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                    parent,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    owning_account: take(owning_account),","counters":[{"col_start":0,"col_end":57,"count":0}]},{"line":"                    token_to_account: take(token_to_account),","counters":[{"col_start":0,"col_end":61,"count":0}]},{"line":"                    id_to_addr: take(id_to_addr),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                    last_location: take(last_location),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"                    depth: *depth,","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                    childs: take(childs),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    hashes: replace(hashes, HashesMatrix::new(*depth as usize)),","counters":[{"col_start":0,"col_end":80,"count":0}]},{"line":"                    uuid: replace(uuid, \"temporary_set_parent\".to_string()),","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                };","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"                let last_filled = match parent_last_filled {","counters":[{"col_start":20,"col_end":31,"count":0},{"col_start":40,"col_end":58,"count":0}]},{"line":"                    Some(last_filled) => last_filled,","counters":[{"col_start":25,"col_end":52,"count":0}]},{"line":"                    None => self.last_filled(), // This will lock the parent,","counters":[{"col_start":28,"col_end":46,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                if let Attached { last_location, .. } = self {","counters":[{"col_start":34,"col_end":47,"count":0},{"col_start":56,"col_end":60,"count":0},{"col_start":61,"col_end":62,"count":0}]},{"line":"                    *last_location = last_filled;","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"                };","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn uuid(&self) -> Uuid {","counters":[{"col_start":4,"col_end":28,"count":0}]},{"line":"        self.get_uuid()","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_parent(&self) -> Option<Mask> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { .. } | Unattached { .. } => None,","counters":[{"col_start":47,"col_end":51,"count":0}]},{"line":"            Attached { parent, .. } => Some(parent.clone()),","counters":[{"col_start":23,"col_end":59,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn unset_parent(&mut self, trigger_detach_signal: bool) {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        let parent = self.remove_parent();","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        assert!(","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"            parent.is_some(),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"            \"unset_parent called on a non-attached mask\"","counters":[{"col_start":12,"col_end":56,"count":0}]},{"line":"        );","counters":[]},{"line":"","counters":[]},{"line":"        if trigger_detach_signal {","counters":[{"col_start":11,"col_end":32,"count":0},{"col_start":33,"col_end":34,"count":0}]},{"line":"            // TODO: Async.Ivar.fill_if_empty t.detached_parent_signal () ;","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// get hash from mask, if present, else from its parent","counters":[]},{"line":"    pub fn get_hash(&mut self, addr: Address) -> Option<Fp> {","counters":[{"col_start":4,"col_end":61,"count":0}]},{"line":"        self.get_inner_hash_at_addr(addr).ok()","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// commit all state to the parent, flush state locally","counters":[]},{"line":"    pub fn commit(&mut self) {","counters":[{"col_start":4,"col_end":30,"count":0}]},{"line":"        let depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        let self_uuid = self.uuid();","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"        // let old_root_hash = self.merkle_root();","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { .. } => panic!(\"commit on a root\"),","counters":[{"col_start":27,"col_end":53,"count":0}]},{"line":"            Unattached { .. } => panic!(\"commit on a unattached mask\"),","counters":[{"col_start":33,"col_end":70,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                assert_ne!(parent.get_uuid(), self_uuid);","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"                let accounts = {","counters":[{"col_start":20,"col_end":32,"count":0}]},{"line":"                    token_to_account.clear();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"                    id_to_addr.clear();","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"                    hashes.clear();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"                    std::mem::take(owning_account)","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                for (index, account) in accounts {","counters":[{"col_start":21,"col_end":35,"count":0},{"col_start":40,"col_end":48,"count":0},{"col_start":49,"col_end":50,"count":0}]},{"line":"                    let addr = Address::from_index(index.clone(), depth);","counters":[{"col_start":0,"col_end":73,"count":0}]},{"line":"                    parent.set_impl(addr, account, Some(self_uuid.clone()));","counters":[{"col_start":0,"col_end":76,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"                // Parent merkle root after committing should be the same as the \\","counters":[]},{"line":"                // old one in the mask","counters":[]},{"line":"                // assert_eq!(old_root_hash, parent.merkle_root()); // TODO: Assert this only in #[cfg(test)]","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// called when parent sets an account; update local state","counters":[]},{"line":"    ///","counters":[]},{"line":"    /// if the mask's parent sets an account, we can prune an entry in the mask","counters":[]},{"line":"    /// if the account in the parent is the same in the mask *)","counters":[]},{"line":"    pub fn parent_set_notify(&mut self, account_index: AccountIndex, account: &Account) {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        assert!(self.is_attached());","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        for child in self.childs().values() {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":21,"col_end":43,"count":0}]},{"line":"            child.parent_set_notify(account_index.clone(), account)","counters":[{"col_start":12,"col_end":67,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        match self {","counters":[{"col_start":14,"col_end":18,"count":0}]},{"line":"            Root { .. } => panic!(\"parent_set_notify on a root\"),","counters":[{"col_start":27,"col_end":64,"count":0}]},{"line":"            Unattached { .. } => panic!(\"parent_set_notify on an unattached\"),","counters":[{"col_start":33,"col_end":77,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                let account_id = account.id();","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"                hashes.invalidate_hashes(account_index);","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"                let own_account = match {","counters":[{"col_start":20,"col_end":31,"count":0},{"col_start":40,"col_end":41,"count":0}]},{"line":"                    id_to_addr","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                        .get(&account_id)","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                        .and_then(|addr| owning_account.get(&addr.to_index()))","counters":[{"col_start":0,"col_end":34,"count":0},{"col_start":41,"col_end":77,"count":0},{"col_start":77,"col_end":78,"count":0}]},{"line":"                        .cloned()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                } {","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"                    Some(own) => own,","counters":[{"col_start":25,"col_end":36,"count":0}]},{"line":"                    None => return,","counters":[{"col_start":28,"col_end":34,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                if own_account != *account {","counters":[{"col_start":19,"col_end":42,"count":0}]},{"line":"                    // Do not delete our account if it is different than the parent one","counters":[]},{"line":"                    return;","counters":[{"col_start":20,"col_end":26,"count":0}]},{"line":"                }","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"                self.remove_own_account(&[account_id]);","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn remove_parent(&mut self) -> Option<Mask> {","counters":[{"col_start":4,"col_end":53,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { .. } => panic!(\"remove_parent on a root\"),","counters":[{"col_start":27,"col_end":60,"count":0}]},{"line":"            Unattached { .. } => panic!(\"remove_parent on an unattached\"),","counters":[{"col_start":33,"col_end":73,"count":0}]},{"line":"            Attached { .. } => (),","counters":[{"col_start":31,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        let Self::Attached {","counters":[]},{"line":"            parent,","counters":[{"col_start":12,"col_end":19,"count":0}]},{"line":"            owning_account,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            token_to_account,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            id_to_addr,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            last_location,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            depth,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            childs,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            hashes,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            uuid","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"        } = self else {","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"            // We previously checked it's an attached mask","counters":[]},{"line":"            unreachable!()","counters":[{"col_start":12,"col_end":26,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let parent = parent.clone();","counters":[{"col_start":12,"col_end":36,"count":0}]},{"line":"        let owning_account = std::mem::take(owning_account);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        let depth = std::mem::take(depth);","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        let childs = std::mem::take(childs);","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        let token_to_account = std::mem::take(token_to_account);","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        let id_to_addr = std::mem::take(id_to_addr);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        let last_location = std::mem::take(last_location);","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        let hashes = std::mem::replace(hashes, HashesMatrix::new(depth as usize));","counters":[{"col_start":0,"col_end":82,"count":0}]},{"line":"        let uuid = std::mem::replace(uuid, \"temporary\".to_string());","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"        *self = Self::Unattached {","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            owning_account,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            token_to_account,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            id_to_addr,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"            last_location,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            depth,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            childs,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            hashes,","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            uuid,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        Some(parent)","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn remove_child_uuid(&mut self, uuid: Uuid) -> Option<Mask> {","counters":[{"col_start":4,"col_end":69,"count":0}]},{"line":"        self.childs().remove(&uuid)","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn childs(&mut self) -> &mut HashMap<Uuid, Mask> {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { childs, .. } => childs,","counters":[{"col_start":19,"col_end":41,"count":0}]},{"line":"            Attached { childs, .. } => childs,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { childs, .. } => childs,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_cached_hash(&self, addr: &Address) -> Option<Fp> {","counters":[{"col_start":4,"col_end":60,"count":0}]},{"line":"        let matrix = match self {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { database, .. } => return database.get_cached_hash(addr),","counters":[{"col_start":19,"col_end":74,"count":0}]},{"line":"            Attached { hashes, .. } => hashes,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { hashes, .. } => hashes,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        matrix.get(addr).copied()","counters":[{"col_start":8,"col_end":33,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_cached_hash(&mut self, addr: &Address, hash: Fp) {","counters":[{"col_start":4,"col_end":60,"count":0},{"col_start":60,"col_end":61,"count":0}]},{"line":"        let matrix = match self {","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { database, .. } => return database.set_cached_hash(addr, hash),","counters":[{"col_start":19,"col_end":80,"count":0}]},{"line":"            Attached { hashes, .. } => hashes,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { hashes, .. } => hashes,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        matrix.set(addr, hash);","counters":[{"col_start":8,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn empty_hash_at_depth(&mut self, depth: usize) -> Fp {","counters":[{"col_start":4,"col_end":62,"count":0}]},{"line":"        let matrix = match self {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { database, .. } => return database.empty_hash_at_depth(depth),","counters":[{"col_start":19,"col_end":79,"count":0}]},{"line":"            Attached { hashes, .. } => hashes,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { hashes, .. } => hashes,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        matrix.empty_hash_at_depth(depth)","counters":[{"col_start":8,"col_end":41,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn invalidate_hashes(&mut self, account_index: AccountIndex) {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        let matrix = match self {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { database, .. } => return database.invalidate_hashes(account_index),","counters":[{"col_start":19,"col_end":85,"count":0}]},{"line":"            Attached { hashes, .. } => hashes,","counters":[{"col_start":23,"col_end":45,"count":0}]},{"line":"            Unattached { hashes, .. } => hashes,","counters":[{"col_start":25,"col_end":47,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        matrix.invalidate_hashes(account_index)","counters":[{"col_start":8,"col_end":47,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn compute_hash_or_parent(&mut self, addr: Address, last_account: &Address) -> Fp {","counters":[{"col_start":4,"col_end":90,"count":0}]},{"line":"        let (matrix, own, parent) = match self {","counters":[{"col_start":13,"col_end":32,"count":0},{"col_start":42,"col_end":46,"count":0}]},{"line":"            Root { database, .. } => {","counters":[{"col_start":19,"col_end":38,"count":0}]},{"line":"                return database.with(|db| db.emulate_tree_recursive(addr, last_account));","counters":[{"col_start":0,"col_end":37,"count":0},{"col_start":42,"col_end":87,"count":0},{"col_start":87,"col_end":88,"count":0}]},{"line":"            }","counters":[]},{"line":"            Attached {","counters":[]},{"line":"                hashes,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                parent,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (hashes, id_to_addr, Some(parent)),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                hashes, id_to_addr, ..","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            } => (hashes, id_to_addr, None),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(hash) = matrix.get(&addr).cloned() {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":54,"count":0}]},{"line":"            return hash;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // Check if we have any children accounts in our mask","counters":[]},{"line":"        // When we don't have accounts here, delegate to parent","counters":[]},{"line":"        // TODO: Make that faster","counters":[]},{"line":"        let hash = if own.values().any(|a| addr.is_parent_of(a)) {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":22,"col_end":39,"count":0},{"col_start":43,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"            self.emulate_tree_recursive(addr, last_account)","counters":[{"col_start":12,"col_end":59,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            // Recurse to parents until we found a mask having accounts on this address","counters":[]},{"line":"            let parent = parent.as_ref().unwrap();","counters":[{"col_start":16,"col_end":50,"count":0}]},{"line":"            parent.with(|parent| parent.compute_hash_or_parent(addr.clone(), last_account))","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":33,"col_end":90,"count":0},{"col_start":90,"col_end":91,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        hash","counters":[{"col_start":8,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn compute_hash_or_parent_for_merkle_path(","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        last_account: &Address,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        path: &mut AddressIterator,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        merkle_path: &mut Vec<MerklePath>,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        first: bool,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    ) -> Fp {","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"        let (matrix, own, parent) = match self {","counters":[{"col_start":13,"col_end":32,"count":0},{"col_start":42,"col_end":46,"count":0}]},{"line":"            Root { database, .. } => {","counters":[{"col_start":19,"col_end":38,"count":0}]},{"line":"                return database","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                    .with(|db| db.emulate_tree_to_get_path(addr, last_account, path, merkle_path));","counters":[{"col_start":0,"col_end":26,"count":0},{"col_start":31,"col_end":97,"count":0},{"col_start":97,"col_end":98,"count":0}]},{"line":"            }","counters":[]},{"line":"            Attached {","counters":[]},{"line":"                hashes,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                parent,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (hashes, id_to_addr, Some(parent)),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                hashes, id_to_addr, ..","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            } => (hashes, id_to_addr, None),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if !first {","counters":[{"col_start":11,"col_end":17,"count":0}]},{"line":"            if let Some(hash) = matrix.get(&addr).cloned() {","counters":[{"col_start":24,"col_end":28,"count":0},{"col_start":32,"col_end":58,"count":0}]},{"line":"                return hash;","counters":[{"col_start":23,"col_end":27,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // Check if we have any children accounts in our mask","counters":[]},{"line":"        // When we don't have accounts here, delegate to parent","counters":[]},{"line":"        // TODO: Make that faster","counters":[]},{"line":"        let hash = if own.values().any(|a| addr.is_parent_of(a)) {","counters":[{"col_start":12,"col_end":16,"count":0},{"col_start":22,"col_end":39,"count":0},{"col_start":43,"col_end":63,"count":0},{"col_start":63,"col_end":64,"count":0}]},{"line":"            self.emulate_merkle_path_recursive(addr, last_account, path, merkle_path)","counters":[{"col_start":12,"col_end":85,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            // Recurse to parents until we found a mask having accounts on this address","counters":[]},{"line":"            let parent = parent.as_ref().unwrap();","counters":[{"col_start":16,"col_end":50,"count":0}]},{"line":"            parent.with(|parent| {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":33,"col_end":34,"count":0}]},{"line":"                parent.compute_hash_or_parent_for_merkle_path(","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                    addr,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    last_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                    path,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                    merkle_path,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    first,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                )","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        hash","counters":[{"col_start":8,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn depth(&self) -> u8 {","counters":[{"col_start":4,"col_end":31,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.depth(),","counters":[{"col_start":19,"col_end":53,"count":0}]},{"line":"            Attached { depth, .. } => *depth,","counters":[{"col_start":23,"col_end":44,"count":0}]},{"line":"            Unattached { depth, .. } => *depth,","counters":[{"col_start":25,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn emulate_tree_to_get_hash_at(&mut self, addr: Address) -> Fp {","counters":[]},{"line":"        if let Some(hash) = self.get_cached_hash(&addr) {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":55,"count":0}]},{"line":"            return hash;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let last_account = self","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            .last_filled()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .unwrap_or_else(|| Address::first(self.depth() as usize));","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":31,"col_end":68,"count":0},{"col_start":68,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"        self.compute_hash_or_parent(addr, &last_account)","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"        // self.emulate_tree_recursive(addr, &last_account)","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    // fn emulate_recursive(&mut self, addr: Address, nremaining: &mut usize) -> Fp {","counters":[]},{"line":"    fn emulate_tree_recursive(&mut self, addr: Address, last_account: &Address) -> Fp {","counters":[{"col_start":4,"col_end":87,"count":0}]},{"line":"        let tree_depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        let current_depth = tree_depth - addr.length();","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        if current_depth == 0 {","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            return self","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"                .get_account_hash(addr.to_index())","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                .unwrap_or_else(|| self.empty_hash_at_depth(0));","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":35,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let mut get_child_hash = |addr: Address| {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            if let Some(hash) = self.get_cached_hash(&addr) {","counters":[{"col_start":24,"col_end":28,"count":0},{"col_start":32,"col_end":59,"count":0}]},{"line":"                hash","counters":[{"col_start":16,"col_end":20,"count":0}]},{"line":"            } else if addr.is_before(last_account) {","counters":[{"col_start":22,"col_end":50,"count":0}]},{"line":"                self.compute_hash_or_parent(addr, last_account)","counters":[{"col_start":16,"col_end":63,"count":0}]},{"line":"            } else {","counters":[]},{"line":"                self.empty_hash_at_depth(current_depth - 1)","counters":[{"col_start":16,"col_end":59,"count":0}]},{"line":"            }","counters":[]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let left_hash = get_child_hash(addr.child_left());","counters":[{"col_start":12,"col_end":58,"count":0}]},{"line":"        let right_hash = get_child_hash(addr.child_right());","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"        match self.get_cached_hash(&addr) {","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            Some(hash) => hash,","counters":[{"col_start":17,"col_end":30,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                let hash = V2::hash_node(current_depth - 1, left_hash, right_hash);","counters":[{"col_start":20,"col_end":83,"count":0}]},{"line":"                self.set_cached_hash(&addr, hash);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                hash","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn emulate_merkle_path_recursive(","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        last_account: &Address,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"        path: &mut AddressIterator,","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        merkle_path: &mut Vec<MerklePath>,","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    ) -> Fp {","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        let tree_depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        if addr.length() == tree_depth {","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            return self","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"                .get_account_hash(addr.to_index())","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                .unwrap_or_else(|| self.empty_hash_at_depth(0));","counters":[{"col_start":0,"col_end":32,"count":0},{"col_start":35,"col_end":62,"count":0},{"col_start":62,"col_end":63,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let next_direction = path.next();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"        // We go until the end of the path","counters":[]},{"line":"        if let Some(direction) = next_direction.as_ref() {","counters":[{"col_start":20,"col_end":29,"count":0},{"col_start":33,"col_end":56,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"            let child = match direction {","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":30,"col_end":39,"count":0}]},{"line":"                Direction::Left => addr.child_left(),","counters":[{"col_start":35,"col_end":52,"count":0}]},{"line":"                Direction::Right => addr.child_right(),","counters":[{"col_start":36,"col_end":54,"count":0}]},{"line":"            };","counters":[]},{"line":"            self.emulate_merkle_path_recursive(child, last_account, path, merkle_path);","counters":[{"col_start":12,"col_end":86,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let depth_in_tree = tree_depth - addr.length();","counters":[{"col_start":12,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"        let mut get_child_hash = |addr: Address| match self.get_cached_hash(&addr) {","counters":[{"col_start":0,"col_end":33,"count":0},{"col_start":49,"col_end":82,"count":0}]},{"line":"            Some(hash) => hash,","counters":[{"col_start":17,"col_end":30,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                if addr.is_before(last_account) {","counters":[{"col_start":19,"col_end":47,"count":0}]},{"line":"                    self.compute_hash_or_parent_for_merkle_path(","counters":[{"col_start":20,"col_end":64,"count":0}]},{"line":"                        addr,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        last_account,","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"                        path,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                        merkle_path,","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                        false,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                    )","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    self.empty_hash_at_depth(depth_in_tree - 1)","counters":[{"col_start":20,"col_end":63,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        };","counters":[{"col_start":8,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let left = get_child_hash(addr.child_left());","counters":[{"col_start":12,"col_end":53,"count":0}]},{"line":"        let right = get_child_hash(addr.child_right());","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        if let Some(direction) = next_direction {","counters":[{"col_start":20,"col_end":29,"count":0},{"col_start":33,"col_end":47,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"            let hash = match direction {","counters":[{"col_start":0,"col_end":20,"count":0},{"col_start":29,"col_end":38,"count":0}]},{"line":"                Direction::Left => MerklePath::Left(right),","counters":[{"col_start":35,"col_end":58,"count":0}]},{"line":"                Direction::Right => MerklePath::Right(left),","counters":[{"col_start":36,"col_end":59,"count":0}]},{"line":"            };","counters":[]},{"line":"            merkle_path.push(hash);","counters":[{"col_start":12,"col_end":34,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        match self.get_cached_hash(&addr) {","counters":[{"col_start":14,"col_end":41,"count":0}]},{"line":"            Some(hash) => hash,","counters":[{"col_start":17,"col_end":30,"count":0}]},{"line":"            None => {","counters":[]},{"line":"                let hash = V2::hash_node(depth_in_tree - 1, left, right);","counters":[{"col_start":20,"col_end":73,"count":0}]},{"line":"                self.set_cached_hash(&addr, hash);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"                hash","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove_own_account(&mut self, ids: &[AccountId]) {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { .. } => todo!(),","counters":[{"col_start":27,"col_end":34,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ..","counters":[]},{"line":"            }","counters":[]},{"line":"            | Attached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ..","counters":[]},{"line":"            } => {","counters":[]},{"line":"                let mut addrs = ids","counters":[{"col_start":20,"col_end":35,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .map(|account_id| id_to_addr.remove(account_id).unwrap())","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":38,"col_end":76,"count":0},{"col_start":76,"col_end":77,"count":0}]},{"line":"                    .collect::<Vec<_>>();","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                addrs.sort_by_key(Address::to_index);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"","counters":[]},{"line":"                for addr in addrs.iter().rev() {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":46,"count":0}]},{"line":"                    let account_index = addr.to_index();","counters":[{"col_start":24,"col_end":56,"count":0}]},{"line":"                    hashes.invalidate_hashes(account_index.clone());","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"                    let account = owning_account.remove(&account_index).unwrap();","counters":[{"col_start":0,"col_end":81,"count":0}]},{"line":"                    token_to_account.remove(&account.token_id).unwrap();","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"","counters":[]},{"line":"                    if last_location","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                        .as_ref()","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                        .map(|last| last == addr)","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":36,"col_end":48,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                        .unwrap_or(false)","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"                    {","counters":[{"col_start":20,"col_end":21,"count":0}]},{"line":"                        *last_location = addr.prev();","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"                    }","counters":[{"col_start":0,"col_end":21,"count":0},{"col_start":21,"col_end":22,"count":0}]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"                if owning_account.is_empty() {","counters":[{"col_start":19,"col_end":44,"count":0},{"col_start":45,"col_end":46,"count":0}]},{"line":"                    *last_location = None;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub(super) fn set_impl(","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        account: Account,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        child_to_ignore: Option<Uuid>,","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"    ) {","counters":[{"col_start":0,"col_end":7,"count":0}]},{"line":"        let account_index = addr.to_index();","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"","counters":[]},{"line":"        for (uuid, child) in self.childs() {","counters":[{"col_start":13,"col_end":24,"count":0},{"col_start":34,"col_end":42,"count":0}]},{"line":"            if Some(uuid) == child_to_ignore.as_ref() {","counters":[{"col_start":15,"col_end":53,"count":0}]},{"line":"                continue;","counters":[{"col_start":16,"col_end":24,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"            child.parent_set_notify(account_index.clone(), &account)","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        match self {","counters":[{"col_start":14,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.set(addr, account),","counters":[{"col_start":19,"col_end":64,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                ..","counters":[]},{"line":"            }","counters":[]},{"line":"            | Attached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                ..","counters":[]},{"line":"            } => {","counters":[]},{"line":"                let account_id = account.id();","counters":[{"col_start":20,"col_end":46,"count":0}]},{"line":"                let token_id = account.token_id.clone();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"                owning_account.insert(account_index.clone(), account);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"                id_to_addr.insert(account_id.clone(), addr.clone());","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                token_to_account.insert(token_id, account_id);","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"                if last_location","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                    .as_ref()","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                    .map(|l| l.to_index() < addr.to_index())","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":59,"count":0},{"col_start":59,"col_end":60,"count":0}]},{"line":"                    .unwrap_or(true)","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"                {","counters":[{"col_start":16,"col_end":17,"count":0}]},{"line":"                    *last_location = Some(addr);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"                self.invalidate_hashes(account_index);","counters":[{"col_start":16,"col_end":53,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub(super) fn remove_accounts_without_notif(&mut self, ids: &[AccountId]) {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.remove_accounts(ids),","counters":[{"col_start":19,"col_end":66,"count":0}]},{"line":"            Unattached { .. } => self.remove_own_account(ids),","counters":[{"col_start":33,"col_end":61,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent, id_to_addr, ..","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            } => {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                let (mask_keys, parent_keys): (Vec<_>, Vec<_>) = ids","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .cloned()","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                    .partition(|id| id_to_addr.contains_key(id));","counters":[{"col_start":0,"col_end":31,"count":0},{"col_start":36,"col_end":63,"count":2860},{"col_start":63,"col_end":65,"count":0}]},{"line":"","counters":[]},{"line":"                if !parent_keys.is_empty() {","counters":[{"col_start":0,"col_end":42,"count":0},{"col_start":43,"col_end":44,"count":0}]},{"line":"                    parent.remove_accounts_without_notif(&parent_keys);","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"                }","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":17,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"                self.remove_own_account(&mask_keys);","counters":[{"col_start":16,"col_end":51,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn recurse_on_childs<F>(&mut self, fun: &mut F)","counters":[{"col_start":4,"col_end":51,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(&mut MaskImpl),","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":4,"count":0}]},{"line":"        for child in self.childs().values_mut() {","counters":[{"col_start":12,"col_end":17,"count":0},{"col_start":21,"col_end":47,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"            child.with(|child| {","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":31,"col_end":32,"count":0}]},{"line":"                fun(child);","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                child.recurse_on_childs(fun)","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"            });","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":15,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    /// For tests only, check if the address is in the mask, without checking parent","counters":[]},{"line":"    #[cfg(test)]","counters":[]},{"line":"    pub fn test_is_in_mask(&self, addr: &Address) -> bool {","counters":[]},{"line":"        match self {","counters":[]},{"line":"            Root { database, .. } => database.get(addr.clone()).is_some(),","counters":[]},{"line":"            Unattached { owning_account, .. } | Attached { owning_account, .. } => {","counters":[]},{"line":"                let index = addr.to_index();","counters":[]},{"line":"                owning_account.contains_key(&index)","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    /// For tests only","counters":[]},{"line":"    #[cfg(test)]","counters":[]},{"line":"    pub fn test_matrix(&self) -> HashesMatrix {","counters":[]},{"line":"        match self {","counters":[]},{"line":"            Root { database, .. } => database.test_matrix(),","counters":[]},{"line":"            Unattached { hashes, .. } | Attached { hashes, .. } => hashes.clone(),","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl BaseLedger for MaskImpl {","counters":[]},{"line":"    fn to_list(&self) -> Vec<Account> {","counters":[{"col_start":4,"col_end":39,"count":0}]},{"line":"        let depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        let num_accounts = self.num_accounts() as u64;","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        (0..num_accounts)","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            .map(AccountIndex)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            .filter_map(|index| self.get(Address::from_index(index, depth)))","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":32,"col_end":75,"count":0},{"col_start":75,"col_end":76,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn iter<F>(&self, mut fun: F)","counters":[{"col_start":4,"col_end":33,"count":0}]},{"line":"    where","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"        F: FnMut(&Account),","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"    {","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"        let depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"        let num_accounts = self.num_accounts() as u64;","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"        (0..num_accounts)","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"            .map(AccountIndex)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            .filter_map(|index| self.get(Address::from_index(index, depth)))","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":32,"col_end":75,"count":2860},{"col_start":75,"col_end":76,"count":0}]},{"line":"            .for_each(|account| fun(&account));","counters":[{"col_start":0,"col_end":22,"count":0},{"col_start":32,"col_end":45,"count":0},{"col_start":45,"col_end":47,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn fold<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        let depth = self.depth() as usize;","counters":[]},{"line":"        let num_accounts = self.num_accounts() as u64;","counters":[]},{"line":"        let mut accum = init;","counters":[]},{"line":"","counters":[]},{"line":"        for account in (0..num_accounts)","counters":[]},{"line":"            .map(AccountIndex)","counters":[]},{"line":"            .filter_map(|index| self.get(Address::from_index(index, depth)))","counters":[]},{"line":"        {","counters":[]},{"line":"            accum = fun(accum, &account)","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        accum","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_with_ignored_accounts<B, F>(","counters":[]},{"line":"        &self,","counters":[]},{"line":"        ignoreds: HashSet<AccountId>,","counters":[]},{"line":"        init: B,","counters":[]},{"line":"        mut fun: F,","counters":[]},{"line":"    ) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> B,","counters":[]},{"line":"    {","counters":[]},{"line":"        self.fold(init, |accum, account| {","counters":[]},{"line":"            if !ignoreds.contains(&account.id()) {","counters":[]},{"line":"                fun(accum, account)","counters":[]},{"line":"            } else {","counters":[]},{"line":"                accum","counters":[]},{"line":"            }","counters":[]},{"line":"        })","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn fold_until<B, F>(&self, init: B, mut fun: F) -> B","counters":[]},{"line":"    where","counters":[]},{"line":"        F: FnMut(B, &Account) -> std::ops::ControlFlow<B, B>,","counters":[]},{"line":"    {","counters":[]},{"line":"        use std::ops::ControlFlow::*;","counters":[]},{"line":"","counters":[]},{"line":"        let depth = self.depth() as usize;","counters":[]},{"line":"        let num_accounts = self.num_accounts() as u64;","counters":[]},{"line":"        let mut accum = init;","counters":[]},{"line":"","counters":[]},{"line":"        for account in (0..num_accounts)","counters":[]},{"line":"            .map(AccountIndex)","counters":[]},{"line":"            .filter_map(|index| self.get(Address::from_index(index, depth)))","counters":[]},{"line":"        {","counters":[]},{"line":"            match fun(accum, &account) {","counters":[]},{"line":"                Continue(acc) => accum = acc,","counters":[]},{"line":"                Break(acc) => {","counters":[]},{"line":"                    accum = acc;","counters":[]},{"line":"                    break;","counters":[]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        accum","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"    fn accounts(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        let mut set = HashSet::with_capacity(self.num_accounts());","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"        self.iter(|account| {","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":28,"col_end":29,"count":0}]},{"line":"            set.insert(account.id());","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        });","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":0}]},{"line":"","counters":[]},{"line":"        set","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn token_owner(&self, token_id: TokenId) -> Option<AccountId> {","counters":[{"col_start":4,"col_end":66,"count":0}]},{"line":"        let (parent, token_to_account) = match self {","counters":[{"col_start":13,"col_end":37,"count":0},{"col_start":47,"col_end":51,"count":0}]},{"line":"            Root { database, .. } => return database.token_owner(token_id),","counters":[{"col_start":19,"col_end":74,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (Some(parent), token_to_account),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                token_to_account, ..","counters":[{"col_start":16,"col_end":36,"count":0}]},{"line":"            } => (None, token_to_account),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(account_id) = token_to_account.get(&token_id).cloned() {","counters":[{"col_start":20,"col_end":30,"count":0},{"col_start":34,"col_end":74,"count":0}]},{"line":"            return Some(account_id);","counters":[{"col_start":19,"col_end":35,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        parent.as_ref()?.token_owner(token_id)","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":25,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn token_owners(&self) -> HashSet<AccountId> {","counters":[{"col_start":4,"col_end":50,"count":0}]},{"line":"        // TODO: Not sure if it's the correct impl","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        self.to_list()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            .into_iter()","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            .map(|account| account.id())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":27,"col_end":39,"count":0},{"col_start":39,"col_end":40,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn tokens(&self, public_key: CompressedPubKey) -> HashSet<TokenId> {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        let mut set = HashSet::with_capacity(1024);","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"        for account in self.to_list() {","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":28,"col_end":37,"count":0}]},{"line":"            if account.public_key == public_key {","counters":[{"col_start":15,"col_end":47,"count":0},{"col_start":48,"col_end":49,"count":0}]},{"line":"                set.insert(account.token_id);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"        set","counters":[{"col_start":8,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account(&self, account_id: &AccountId) -> Option<Address> {","counters":[{"col_start":4,"col_end":77,"count":0}]},{"line":"        let (parent, id_to_addr) = match self {","counters":[{"col_start":13,"col_end":31,"count":0},{"col_start":41,"col_end":45,"count":0}]},{"line":"            Root { database, .. } => return database.location_of_account(account_id),","counters":[{"col_start":19,"col_end":84,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent, id_to_addr, ..","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            } => (Some(parent), id_to_addr),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            Unattached { id_to_addr, .. } => (None, id_to_addr),","counters":[{"col_start":25,"col_end":63,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(addr) = id_to_addr.get(account_id).cloned() {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":63,"count":0}]},{"line":"            return Some(addr);","counters":[{"col_start":19,"col_end":29,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        parent.as_ref()?.location_of_account(account_id)","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":25,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn location_of_account_batch(","counters":[{"col_start":4,"col_end":33,"count":0}]},{"line":"        &self,","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"        account_ids: &[AccountId],","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"    ) -> Vec<(AccountId, Option<Address>)> {","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"        account_ids","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|account_id| {","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":30,"col_end":31,"count":0}]},{"line":"                let addr = self.location_of_account(account_id);","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                (account_id.clone(), addr)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"            })","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_or_create_account(","counters":[]},{"line":"        &mut self,","counters":[]},{"line":"        account_id: AccountId,","counters":[]},{"line":"        account: Account,","counters":[]},{"line":"    ) -> Result<GetOrCreated, DatabaseError> {","counters":[]},{"line":"        if let Some(addr) = self.location_of_account(&account_id) {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":65,"count":0}]},{"line":"            return Ok(GetOrCreated::Existed(addr));","counters":[{"col_start":19,"col_end":50,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let last_filled = self.last_filled();","counters":[{"col_start":0,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"        let result = match self {","counters":[{"col_start":12,"col_end":18,"count":0},{"col_start":27,"col_end":31,"count":0}]},{"line":"            Root { database, .. } => database.get_or_create_account(account_id, account)?,","counters":[{"col_start":19,"col_end":88,"count":0},{"col_start":88,"col_end":89,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                ..","counters":[]},{"line":"            }","counters":[]},{"line":"            | Attached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                token_to_account,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                id_to_addr,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"                ..","counters":[]},{"line":"            } => {","counters":[]},{"line":"                let location = match last_filled {","counters":[{"col_start":20,"col_end":28,"count":0},{"col_start":37,"col_end":48,"count":0}]},{"line":"                    Some(last) => last.next().ok_or(DatabaseError::OutOfLeaves)?,","counters":[{"col_start":25,"col_end":79,"count":0},{"col_start":79,"col_end":80,"count":0}]},{"line":"                    None => Address::first(*depth as usize),","counters":[{"col_start":28,"col_end":59,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                let account_index: AccountIndex = location.to_index();","counters":[{"col_start":20,"col_end":70,"count":0}]},{"line":"                let token_id = account.token_id.clone();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"                id_to_addr.insert(account_id.clone(), location.clone());","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"                *last_location = Some(location.clone());","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"                token_to_account.insert(token_id, account_id);","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"                owning_account.insert(account_index.clone(), account);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"                self.invalidate_hashes(account_index);","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"","counters":[]},{"line":"                GetOrCreated::Added(location)","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"            }","counters":[]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        elog!(\"get_or_create_account added\");","counters":[{"col_start":8,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        // let addr = result.clone();","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"        // let account_index = addr.to_index();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        // self.recurse_on_childs(&mut |child| {","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"        //     child.with(|child| {","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"        //         child.invalidate_hashes(account_index.clone());","counters":[{"col_start":0,"col_end":66,"count":0}]},{"line":"        //     })","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        // });","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(result)","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn close(&self) {","counters":[{"col_start":4,"col_end":21,"count":0}]},{"line":"        // Drop","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn last_filled(&self) -> Option<Address> {","counters":[{"col_start":4,"col_end":46,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.last_filled(),","counters":[{"col_start":19,"col_end":59,"count":0}]},{"line":"            Unattached { last_location, .. } => last_location.clone(),","counters":[{"col_start":25,"col_end":69,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                last_location,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"                ..","counters":[]},{"line":"            } => {","counters":[]},{"line":"                let last_filled_parent = match parent.last_filled() {","counters":[{"col_start":20,"col_end":38,"count":0},{"col_start":47,"col_end":67,"count":0}]},{"line":"                    Some(last) => last,","counters":[{"col_start":25,"col_end":38,"count":0}]},{"line":"                    None => return last_location.clone(),","counters":[{"col_start":35,"col_end":56,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                let last_filled = match last_location {","counters":[{"col_start":20,"col_end":31,"count":0},{"col_start":40,"col_end":53,"count":0}]},{"line":"                    Some(last) => last,","counters":[{"col_start":25,"col_end":38,"count":0}]},{"line":"                    None => return Some(last_filled_parent),","counters":[{"col_start":35,"col_end":59,"count":0}]},{"line":"                };","counters":[]},{"line":"","counters":[]},{"line":"                let last_filled_parent_index = last_filled_parent.to_index();","counters":[{"col_start":20,"col_end":77,"count":0}]},{"line":"                let last_filled_index = last_filled.to_index();","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"","counters":[]},{"line":"                if last_filled_index > last_filled_parent_index {","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                    Some(last_filled.clone())","counters":[{"col_start":20,"col_end":45,"count":0}]},{"line":"                } else {","counters":[]},{"line":"                    Some(last_filled_parent)","counters":[{"col_start":20,"col_end":44,"count":0}]},{"line":"                }","counters":[]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_uuid(&self) -> Uuid {","counters":[{"col_start":4,"col_end":32,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.get_uuid(),","counters":[{"col_start":19,"col_end":56,"count":0}]},{"line":"            Attached { uuid, .. } | Unattached { uuid, .. } => uuid.clone(),","counters":[{"col_start":23,"col_end":27,"count":0},{"col_start":49,"col_end":53,"count":0},{"col_start":63,"col_end":75,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_directory(&self) -> Option<PathBuf> {","counters":[{"col_start":4,"col_end":48,"count":0}]},{"line":"        match self {","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            Root { database, .. } => database.get_directory(),","counters":[{"col_start":19,"col_end":61,"count":0}]},{"line":"            Attached { parent, .. } => parent.get_directory(),","counters":[{"col_start":23,"col_end":61,"count":0}]},{"line":"            Unattached { .. } => None,","counters":[{"col_start":33,"col_end":37,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_account_hash(&mut self, account_index: AccountIndex) -> Option<Fp> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        let (mut parent, owning_account, matrix, depth) = match self {","counters":[{"col_start":13,"col_end":54,"count":0},{"col_start":64,"col_end":68,"count":0}]},{"line":"            Root { database, .. } => return database.get_account_hash(account_index),","counters":[{"col_start":19,"col_end":84,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (Some(parent), owning_account, hashes, depth),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            Unattached {","counters":[]},{"line":"                owning_account,","counters":[{"col_start":16,"col_end":31,"count":0}]},{"line":"                hashes,","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                depth,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (None, owning_account, hashes, depth),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(account) = owning_account.get(&account_index).cloned() {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":74,"count":0}]},{"line":"            let addr = Address::from_index(account_index, *depth as usize);","counters":[{"col_start":16,"col_end":74,"count":0}]},{"line":"","counters":[]},{"line":"            if let Some(hash) = matrix.get(&addr).cloned() {","counters":[{"col_start":24,"col_end":28,"count":0},{"col_start":32,"col_end":58,"count":0}]},{"line":"                return Some(hash);","counters":[{"col_start":23,"col_end":33,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"","counters":[]},{"line":"            let hash = account.hash();","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            matrix.set(&addr, hash);","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"            return Some(hash);","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        parent.as_mut()?.get_account_hash(account_index)","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":25,"col_end":56,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get(&self, addr: Address) -> Option<Account> {","counters":[{"col_start":4,"col_end":52,"count":0}]},{"line":"        let (parent, owning_account) = match self {","counters":[{"col_start":13,"col_end":35,"count":0},{"col_start":45,"col_end":49,"count":0}]},{"line":"            Root { database, .. } => return database.get(addr),","counters":[{"col_start":19,"col_end":62,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent,","counters":[{"col_start":16,"col_end":23,"count":0}]},{"line":"                owning_account,","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                ..","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            } => (Some(parent), owning_account),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"            Unattached { owning_account, .. } => (None, owning_account),","counters":[{"col_start":25,"col_end":71,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(account) = owning_account.get(&addr.to_index()).cloned() {","counters":[{"col_start":20,"col_end":27,"count":0},{"col_start":31,"col_end":76,"count":0}]},{"line":"            return Some(account);","counters":[{"col_start":19,"col_end":32,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        parent.as_ref()?.get(addr)","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":25,"col_end":34,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_batch(&self, addr: &[Address]) -> Vec<(Address, Option<Account>)> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        addr.iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|addr| (addr.clone(), self.get(addr.clone())))","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":24,"col_end":62,"count":2860},{"col_start":62,"col_end":63,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set(&mut self, addr: Address, account: Account) {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        self.set_impl(addr, account, None)","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_batch(&mut self, list: &[(Address, Account)]) {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        for (addr, account) in list {","counters":[{"col_start":13,"col_end":26,"count":0},{"col_start":31,"col_end":35,"count":0}]},{"line":"            self.set(addr.clone(), account.clone())","counters":[{"col_start":12,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_at_index(&self, index: AccountIndex) -> Option<Account> {","counters":[{"col_start":4,"col_end":68,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth() as usize);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        self.get(addr)","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_at_index(&mut self, index: AccountIndex, account: Account) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth() as usize);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        self.set(addr, account);","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        Ok(())","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn index_of_account(&self, account_id: AccountId) -> Option<AccountIndex> {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        let (parent, id_to_addr) = match self {","counters":[{"col_start":13,"col_end":31,"count":0},{"col_start":41,"col_end":45,"count":0}]},{"line":"            Root { database, .. } => return database.index_of_account(account_id),","counters":[{"col_start":19,"col_end":81,"count":0}]},{"line":"            Attached {","counters":[]},{"line":"                parent, id_to_addr, ..","counters":[{"col_start":16,"col_end":38,"count":0}]},{"line":"            } => (Some(parent), id_to_addr),","counters":[{"col_start":0,"col_end":43,"count":0}]},{"line":"            Unattached { id_to_addr, .. } => (None, id_to_addr),","counters":[{"col_start":25,"col_end":63,"count":0}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        if let Some(addr) = id_to_addr.get(&account_id).cloned() {","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":28,"col_end":64,"count":0}]},{"line":"            return Some(addr.to_index());","counters":[{"col_start":19,"col_end":40,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        parent.as_ref()?.index_of_account(account_id)","counters":[{"col_start":0,"col_end":23,"count":0},{"col_start":23,"col_end":24,"count":0},{"col_start":25,"col_end":53,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_root(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        // elog!(\"MERKLE_ROOT={:?}\", self.short());","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        let hash = self.emulate_tree_to_get_hash_at(Address::root());","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        // self.emulate_tree_to_get_hash()","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        let num_accounts = self.num_accounts();","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        elog!(\"merkle_root={} num_accounts={:?}\", hash, num_accounts);","counters":[{"col_start":0,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"        hash","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        elog!(\"merkle_path short={:?}\", self.short());","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"        // elog!(\"merkle_path num_accounts={:?} addr={:?}\", self.num_accounts(), addr);","counters":[]},{"line":"","counters":[]},{"line":"        if let Root { database, .. } = self {","counters":[{"col_start":22,"col_end":30,"count":0},{"col_start":39,"col_end":43,"count":0}]},{"line":"            return database.merkle_path(addr);","counters":[{"col_start":19,"col_end":45,"count":0}]},{"line":"        };","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        let mut merkle_path = Vec::with_capacity(addr.length());","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"        let mut path = addr.into_iter();","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"        let addr = Address::root();","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"","counters":[]},{"line":"        let last_account = self","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            .last_filled()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .unwrap_or_else(|| Address::first(self.depth() as usize));","counters":[{"col_start":0,"col_end":28,"count":0},{"col_start":31,"col_end":68,"count":0},{"col_start":68,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"        // elog!(\"merkle_path last_account={:?}\", last_account);","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"","counters":[]},{"line":"        self.compute_hash_or_parent_for_merkle_path(","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            addr,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            &last_account,","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            &mut path,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"            &mut merkle_path,","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            true,","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        // self.emulate_merkle_path_recursive(addr, &last_account, &mut path, &mut merkle_path);","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"","counters":[]},{"line":"        merkle_path","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_index(&mut self, index: AccountIndex) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":80,"count":0}]},{"line":"        let addr = Address::from_index(index, self.depth() as usize);","counters":[{"col_start":0,"col_end":69,"count":0}]},{"line":"        self.merkle_path(addr)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn remove_accounts(&mut self, ids: &[AccountId]) {","counters":[{"col_start":4,"col_end":54,"count":0}]},{"line":"        let indexes: Vec<_> = ids","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .filter_map(|id| {","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":29,"col_end":30,"count":0}]},{"line":"                let addr = self.location_of_account(id)?;","counters":[{"col_start":20,"col_end":24,"count":0},{"col_start":27,"col_end":55,"count":0},{"col_start":55,"col_end":56,"count":0}]},{"line":"                Some(addr.to_index())","counters":[{"col_start":16,"col_end":37,"count":0}]},{"line":"            })","counters":[{"col_start":12,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"            .collect();","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"","counters":[]},{"line":"        self.remove_accounts_without_notif(ids);","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"        self.recurse_on_childs(&mut |child| {","counters":[{"col_start":0,"col_end":36,"count":0},{"col_start":44,"col_end":45,"count":0}]},{"line":"            for index in &indexes {","counters":[{"col_start":16,"col_end":21,"count":0},{"col_start":25,"col_end":33,"count":0},{"col_start":34,"col_end":35,"count":0}]},{"line":"                child.invalidate_hashes(index.clone());","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0}]},{"line":"        });","counters":[{"col_start":8,"col_end":9,"count":0},{"col_start":9,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn detached_signal(&mut self) {","counters":[{"col_start":4,"col_end":35,"count":0}]},{"line":"        todo!()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn depth(&self) -> u8 {","counters":[{"col_start":4,"col_end":27,"count":0}]},{"line":"        self.depth()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn num_accounts(&self) -> usize {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        self.last_filled()","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"            .map(|addr| addr.to_index().0 as usize + 1)","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":24,"col_end":54,"count":0},{"col_start":54,"col_end":55,"count":0}]},{"line":"            .unwrap_or(0)","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn merkle_path_at_addr(&mut self, addr: Address) -> Vec<MerklePath> {","counters":[{"col_start":4,"col_end":73,"count":0}]},{"line":"        self.merkle_path(addr)","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_inner_hash_at_addr(&mut self, addr: Address) -> Result<Fp, ()> {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        let self_depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        if addr.length() > self_depth {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            return Err(());","counters":[{"col_start":19,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(self.emulate_tree_to_get_hash_at(addr))","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_inner_hash_at_addr(&mut self, _addr: Address, _hash: Fp) -> Result<(), ()> {","counters":[{"col_start":4,"col_end":87,"count":0}]},{"line":"        todo!()","counters":[{"col_start":0,"col_end":15,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn set_all_accounts_rooted_at(","counters":[{"col_start":4,"col_end":34,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        addr: Address,","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"        accounts: &[Account],","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"    ) -> Result<(), ()> {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        let depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"        if addr.length() > depth {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"            return Err(());","counters":[{"col_start":19,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        for (child_addr, account) in addr.iter_children(depth).zip(accounts) {","counters":[{"col_start":13,"col_end":32,"count":0},{"col_start":37,"col_end":76,"count":0},{"col_start":77,"col_end":78,"count":0}]},{"line":"            self.set(child_addr, account.clone());","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Ok(())","counters":[{"col_start":8,"col_end":14,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn get_all_accounts_rooted_at(&self, addr: Address) -> Option<Vec<(Address, Account)>> {","counters":[{"col_start":4,"col_end":92,"count":0}]},{"line":"        let self_depth = self.depth() as usize;","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"        if addr.length() > self_depth {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            return None;","counters":[{"col_start":19,"col_end":23,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        let accounts = addr","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            .iter_children(self_depth)","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"            .filter_map(|addr| Some((addr.clone(), self.get(addr)?)))","counters":[{"col_start":0,"col_end":24,"count":0},{"col_start":31,"col_end":65,"count":0},{"col_start":65,"col_end":66,"count":0},{"col_start":67,"col_end":68,"count":0},{"col_start":68,"col_end":69,"count":0}]},{"line":"            .collect::<Vec<_>>();","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"        if accounts.is_empty() {","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            None","counters":[{"col_start":12,"col_end":16,"count":0}]},{"line":"        } else {","counters":[]},{"line":"            Some(accounts)","counters":[{"col_start":12,"col_end":26,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn make_space_for(&mut self, _space: usize) {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        // No op, we're in memory","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn commit(&mut self) {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        self.commit()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}