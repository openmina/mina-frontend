{"filename":"src/fuzzing/context.rs","lines":[{"line":"use std::io::Write;","counters":[]},{"line":"use std::{fs, str::FromStr};","counters":[]},{"line":"","counters":[]},{"line":"use ark_ff::Zero;","counters":[]},{"line":"","counters":[]},{"line":"use mina_hasher::Fp;","counters":[]},{"line":"use mina_signer::{CompressedPubKey, Keypair};","counters":[]},{"line":"use rand::{rngs::SmallRng, seq::SliceRandom, Rng, SeedableRng};","counters":[]},{"line":"use ringbuffer::{AllocRingBuffer, RingBuffer, RingBufferExt, RingBufferWrite};","counters":[]},{"line":"","counters":[]},{"line":"use crate::{","counters":[]},{"line":"    scan_state::{","counters":[]},{"line":"        currency::{Amount, BlockTime, Fee, Length, Magnitude, Slot},","counters":[]},{"line":"        scan_state::ConstraintConstants,","counters":[]},{"line":"        transaction_logic::{","counters":[]},{"line":"            apply_transaction,","counters":[]},{"line":"            protocol_state::{EpochData, EpochLedger, ProtocolStateView},","counters":[]},{"line":"            transaction_applied::{signed_command_applied, CommandApplied, Varying},","counters":[]},{"line":"            Transaction, TransactionStatus, UserCommand,","counters":[]},{"line":"        },","counters":[]},{"line":"    },","counters":[]},{"line":"    staged_ledger::sparse_ledger::LedgerIntf,","counters":[]},{"line":"    Account, AccountId, Mask, Timing, TokenId,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use crate::fuzzing::{","counters":[]},{"line":"    generator::{Generator, GeneratorRange32, GeneratorRange64},","counters":[]},{"line":"    mutator::Mutator,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"use crate::ffi::util::{deserialize, serialize};","counters":[]},{"line":"","counters":[]},{"line":"/// Same values when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"const CONSTRAINT_CONSTANTS: ConstraintConstants = ConstraintConstants {","counters":[]},{"line":"    sub_windows_per_window: 11,","counters":[]},{"line":"    ledger_depth: 35,","counters":[]},{"line":"    work_delay: 2,","counters":[]},{"line":"    block_window_duration_ms: 180000,","counters":[]},{"line":"    transaction_capacity_log_2: 7,","counters":[]},{"line":"    pending_coinbase_depth: 5,","counters":[]},{"line":"    coinbase_amount: Amount::from_u64(720000000000),","counters":[]},{"line":"    supercharged_coinbase_factor: 2,","counters":[]},{"line":"    account_creation_fee: Fee::from_u64(1000000000),","counters":[]},{"line":"    fork: None,","counters":[]},{"line":"};","counters":[]},{"line":"","counters":[]},{"line":"// Taken from ocaml_tests","counters":[]},{"line":"/// Same values when we run `dune runtest src/lib/staged_ledger -f`","counters":[]},{"line":"fn dummy_state_view(global_slot_since_genesis: Option<Slot>) -> ProtocolStateView {","counters":[{"col_start":0,"col_end":83,"count":0}]},{"line":"    // TODO: Use OCaml implementation, not hardcoded value","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"    let f = |s: &str| Fp::from_str(s).unwrap();","counters":[{"col_start":0,"col_end":9,"count":0},{"col_start":22,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"    ProtocolStateView {","counters":[{"col_start":4,"col_end":23,"count":0}]},{"line":"        snarked_ledger_hash: f(","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"            \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":92,"count":0}]},{"line":"        ),","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        timestamp: BlockTime::from_u64(1600251300000),","counters":[{"col_start":0,"col_end":54,"count":0}]},{"line":"        blockchain_length: Length::from_u32(1),","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        min_window_density: Length::from_u32(77),","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        last_vrf_output: (),","counters":[{"col_start":0,"col_end":28,"count":0}]},{"line":"        total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"        global_slot_since_hard_fork: Slot::from_u32(0),","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"        global_slot_since_genesis: global_slot_since_genesis.unwrap_or_else(Slot::zero),","counters":[{"col_start":0,"col_end":88,"count":0}]},{"line":"        staking_epoch_data: EpochData {","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            ledger: EpochLedger {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                hash: f(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            seed: Fp::zero(),","counters":[{"col_start":0,"col_end":29,"count":0}]},{"line":"            start_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            lock_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            epoch_length: Length::from_u32(1),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        next_epoch_data: EpochData {","counters":[{"col_start":0,"col_end":36,"count":0}]},{"line":"            ledger: EpochLedger {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"                hash: f(","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    \"19095410909873291354237217869735884756874834695933531743203428046904386166496\",","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"                ),","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"                total_currency: Amount::from_u64(10016100000000000),","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            seed: f(","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"                \"18512313064034685696641580142878809378857342939026666126913761777372978255172\",","counters":[{"col_start":0,"col_end":96,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            start_checkpoint: Fp::zero(),","counters":[{"col_start":0,"col_end":41,"count":0}]},{"line":"            lock_checkpoint: f(","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                \"9196091926153144288494889289330016873963015481670968646275122329689722912273\",","counters":[{"col_start":0,"col_end":95,"count":0}]},{"line":"            ),","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            epoch_length: Length::from_u32(2),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"        },","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[{"col_start":0,"col_end":1,"count":0}]},{"line":"","counters":[]},{"line":"#[derive(Clone)]","counters":[{"col_start":9,"col_end":10,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"pub enum PermissionModel {","counters":[]},{"line":"    Any,     // Allow any (random) combination of permissions","counters":[]},{"line":"    Empty,   // Permissions are always set to None","counters":[]},{"line":"    Initial, // Permissions are always set to \"user_default\" set (signature only).","counters":[]},{"line":"    Default, // \"default\" permissions as set by SnarkyJS when deploying a zkApp.","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct FuzzerState {","counters":[]},{"line":"    pub ledger: Mask,","counters":[]},{"line":"    pub potential_senders: Vec<Keypair>,","counters":[]},{"line":"    pub potential_new_accounts: Vec<Keypair>,","counters":[]},{"line":"    pub cache: AllocRingBuffer<Transaction>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl Clone for FuzzerState {","counters":[]},{"line":"    fn clone(&self) -> Self {","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            ledger: self.ledger.copy(),","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            potential_senders: self.potential_senders.clone(),","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"            potential_new_accounts: self.potential_new_accounts.clone(),","counters":[{"col_start":0,"col_end":72,"count":0}]},{"line":"            cache: self.cache.clone(),","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct FuzzerCtx {","counters":[]},{"line":"    pub constraint_constants: ConstraintConstants,","counters":[]},{"line":"    pub txn_state_view: ProtocolStateView,","counters":[]},{"line":"    pub fuzzcases_path: String,","counters":[]},{"line":"    pub rng: SmallRng,","counters":[]},{"line":"    pub permission_model: PermissionModel,","counters":[]},{"line":"    pub state: FuzzerState,","counters":[]},{"line":"    pub snapshots: AllocRingBuffer<FuzzerState>,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FuzzerCtx {","counters":[]},{"line":"    pub fn create_inital_accounts(&mut self, n: usize) {","counters":[{"col_start":4,"col_end":56,"count":0}]},{"line":"        for _ in 0..n {","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            loop {","counters":[{"col_start":12,"col_end":18,"count":0}]},{"line":"                let keypair: Keypair = self.gen();","counters":[{"col_start":0,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"                if !self","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"                    .state","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"                    .potential_senders","counters":[{"col_start":0,"col_end":38,"count":0}]},{"line":"                    .iter()","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"                    .any(|x| x.public == keypair.public)","counters":[{"col_start":0,"col_end":25,"count":0},{"col_start":29,"col_end":55,"count":0},{"col_start":55,"col_end":56,"count":0}]},{"line":"                {","counters":[]},{"line":"                    let pk_compressed = keypair.public.into_compressed();","counters":[{"col_start":24,"col_end":73,"count":0}]},{"line":"                    let account_id = AccountId::new(pk_compressed, TokenId::default());","counters":[{"col_start":0,"col_end":87,"count":0}]},{"line":"                    let mut account = Account::initialize(&account_id);","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"                    account.balance = GeneratorRange64::gen_range(self, 1_000_000_000..=u64::MAX);","counters":[{"col_start":0,"col_end":98,"count":0}]},{"line":"                    account.nonce = GeneratorRange32::gen_range(self, 0..=u32::MAX);","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"                    account.timing = Timing::Untimed;","counters":[{"col_start":0,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"                    self.state.potential_senders.push(keypair);","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"                    self.state","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"                        .ledger","counters":[{"col_start":0,"col_end":31,"count":0}]},{"line":"                        .create_new_account(account_id, account)","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"                        .unwrap();","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"                    break;","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"                }","counters":[{"col_start":17,"col_end":18,"count":0}]},{"line":"            }","counters":[]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_account(&mut self, pkey: &CompressedPubKey) -> Option<Account> {","counters":[{"col_start":4,"col_end":79,"count":0}]},{"line":"        let account_location = self","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            .state","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .ledger","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .location_of_account(&AccountId::new(pkey.clone(), TokenId::default()));","counters":[{"col_start":0,"col_end":84,"count":0}]},{"line":"","counters":[]},{"line":"        account_location.map(|location| self.state.ledger.get(&location).unwrap())","counters":[{"col_start":0,"col_end":29,"count":0},{"col_start":40,"col_end":81,"count":0},{"col_start":81,"col_end":82,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn find_keypair(&mut self, pkey: &CompressedPubKey) -> Option<&Keypair> {","counters":[{"col_start":4,"col_end":81,"count":0}]},{"line":"        self.state","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .potential_senders","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .find(|x| x.public.into_compressed() == *pkey)","counters":[{"col_start":0,"col_end":18,"count":0},{"col_start":22,"col_end":57,"count":0},{"col_start":57,"col_end":58,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn random_keypair(&mut self) -> Keypair {","counters":[{"col_start":4,"col_end":49,"count":0}]},{"line":"        self.state","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"            .potential_senders","counters":[{"col_start":0,"col_end":30,"count":0}]},{"line":"            .choose(&mut self.rng)","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            .unwrap()","counters":[{"col_start":0,"col_end":21,"count":0}]},{"line":"            .clone()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn random_transaction(&mut self) -> Transaction {","counters":[{"col_start":4,"col_end":57,"count":0}]},{"line":"        if !self.state.cache.is_empty() && self.rng.gen_bool(0.5) {","counters":[{"col_start":0,"col_end":39,"count":0},{"col_start":43,"col_end":65,"count":0}]},{"line":"            // Pick transaction from cache and mutate it","counters":[]},{"line":"            let index = self.rng.gen_range(0..self.state.cache.len());","counters":[{"col_start":16,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"            if let Some(mut transaction) = self.state.cache.get_absolute(index).cloned() {","counters":[{"col_start":24,"col_end":39,"count":0},{"col_start":43,"col_end":88,"count":0}]},{"line":"                self.mutate(&mut transaction);","counters":[{"col_start":16,"col_end":46,"count":0}]},{"line":"                return transaction;","counters":[{"col_start":0,"col_end":34,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        // Generate random transaction","counters":[]},{"line":"        self.gen()","counters":[{"col_start":8,"col_end":18,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn take_snapshot(&mut self) {","counters":[{"col_start":4,"col_end":37,"count":0}]},{"line":"        println!(\"Taking snapshot...\");","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"        self.snapshots.push(self.state.clone());","counters":[{"col_start":0,"col_end":48,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn restore_snapshot(&mut self) {","counters":[{"col_start":4,"col_end":40,"count":0}]},{"line":"        if !self.snapshots.is_empty() {","counters":[{"col_start":0,"col_end":37,"count":0}]},{"line":"            // Pick random snapshot","counters":[]},{"line":"            let index = self.rng.gen_range(0..self.snapshots.len());","counters":[{"col_start":16,"col_end":67,"count":0}]},{"line":"","counters":[]},{"line":"            if let Some(state) = self.snapshots.get_absolute(index).cloned() {","counters":[{"col_start":24,"col_end":29,"count":0},{"col_start":33,"col_end":76,"count":0},{"col_start":77,"col_end":78,"count":0}]},{"line":"                println!(\"Restoring snapshot {}...\", index);","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"                self.state = state;","counters":[{"col_start":0,"col_end":35,"count":0}]},{"line":"            }","counters":[{"col_start":0,"col_end":13,"count":0},{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":0}]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn serialize_transaction(tx: &Transaction) -> Vec<u8> {","counters":[{"col_start":4,"col_end":63,"count":0}]},{"line":"        /*","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"                We don't have generated types for Transaction, but we have one","counters":[{"col_start":0,"col_end":78,"count":0}]},{"line":"                for UserCommand (MinaBaseUserCommandStableV2). Extract and","counters":[{"col_start":0,"col_end":74,"count":0}]},{"line":"                serialize the inner UserCommand and let a OCaml wrapper build","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"                the transaction.","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        */","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"        match &tx {","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            Transaction::Command(user_command) => serialize(user_command),","counters":[{"col_start":33,"col_end":73,"count":0}]},{"line":"            _ => unimplemented!(),","counters":[{"col_start":17,"col_end":33,"count":0}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn serialize_ledger(&self) -> Vec<u8> {","counters":[{"col_start":4,"col_end":47,"count":0}]},{"line":"        serialize(&self.get_ledger_accounts())","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    fn save_fuzzcase(&self, tx: &Transaction, filename: &String) {","counters":[{"col_start":4,"col_end":66,"count":0}]},{"line":"        let filename = self.fuzzcases_path.clone() + &filename + \".fuzzcase\";","counters":[{"col_start":0,"col_end":77,"count":0}]},{"line":"","counters":[]},{"line":"        println!(\"Saving fuzzcase: {}\", filename);","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"        let user_command = match tx {","counters":[{"col_start":12,"col_end":24,"count":-1},{"col_start":33,"col_end":35,"count":0}]},{"line":"            Transaction::Command(user_command) => user_command.clone(),","counters":[{"col_start":33,"col_end":70,"count":-1}]},{"line":"            _ => unimplemented!(),","counters":[{"col_start":17,"col_end":33,"count":1}]},{"line":"        };","counters":[]},{"line":"","counters":[]},{"line":"        let fuzzcase = serialize(&(self.get_ledger_accounts(), user_command));","counters":[{"col_start":12,"col_end":78,"count":-1}]},{"line":"","counters":[]},{"line":"        let mut file = fs::OpenOptions::new()","counters":[{"col_start":0,"col_end":45,"count":-1}]},{"line":"            .write(true)","counters":[{"col_start":0,"col_end":24,"count":-1}]},{"line":"            .truncate(true)","counters":[{"col_start":0,"col_end":27,"count":-1}]},{"line":"            .create(true)","counters":[{"col_start":0,"col_end":25,"count":-1}]},{"line":"            .open(filename)","counters":[{"col_start":0,"col_end":27,"count":-1}]},{"line":"            .unwrap();","counters":[{"col_start":0,"col_end":22,"count":-1}]},{"line":"","counters":[]},{"line":"        file.write_all(fuzzcase.as_slice()).unwrap();","counters":[{"col_start":0,"col_end":53,"count":-1}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":-1}]},{"line":"","counters":[]},{"line":"    pub fn load_fuzzcase(&mut self, file_path: &String) -> Transaction {","counters":[{"col_start":4,"col_end":72,"count":0}]},{"line":"        println!(\"Loading fuzzcase: {}\", file_path);","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"        let bytes = fs::read(file_path).unwrap();","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        let (accounts, user_command) = deserialize::<(Vec<Account>, UserCommand)>(bytes.as_slice());","counters":[{"col_start":0,"col_end":100,"count":0}]},{"line":"","counters":[]},{"line":"        let depth = self.constraint_constants.ledger_depth as usize;","counters":[{"col_start":0,"col_end":68,"count":0}]},{"line":"        let root = Mask::new_root(crate::Database::create(depth.try_into().unwrap()));","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"","counters":[]},{"line":"        self.state.ledger = root.make_child();","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"        for account in accounts {","counters":[{"col_start":12,"col_end":19,"count":0},{"col_start":23,"col_end":31,"count":0},{"col_start":32,"col_end":33,"count":0}]},{"line":"            self.state","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"                .ledger","counters":[{"col_start":0,"col_end":23,"count":0}]},{"line":"                .create_new_account(account.id(), account)","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                .unwrap();","counters":[{"col_start":0,"col_end":26,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        Transaction::Command(user_command)","counters":[{"col_start":8,"col_end":42,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn apply_transaction(","counters":[{"col_start":4,"col_end":29,"count":0}]},{"line":"        &mut self,","counters":[{"col_start":0,"col_end":18,"count":0}]},{"line":"        tx: &Transaction,","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        expected_root_hash: &Fp,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"    ) -> Result<(), ()> {","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        let mut ledger = self.state.ledger.make_child();","counters":[{"col_start":0,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"        let applied = apply_transaction(","counters":[{"col_start":0,"col_end":40,"count":0}]},{"line":"            &self.constraint_constants,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            &self.txn_state_view,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            &mut ledger,","counters":[{"col_start":0,"col_end":24,"count":0}]},{"line":"            &tx,","counters":[{"col_start":0,"col_end":16,"count":0}]},{"line":"        );","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"        //println!(\"tx: {:?} applied: {:?}\", tx, applied);","counters":[]},{"line":"","counters":[]},{"line":"        if let Ok(applied) = applied {","counters":[{"col_start":18,"col_end":25,"count":-127},{"col_start":29,"col_end":36,"count":0}]},{"line":"            // Save applied transactions in the cache for later use (mutation)","counters":[]},{"line":"            if *applied.transaction_status() == TransactionStatus::Applied {","counters":[{"col_start":15,"col_end":74,"count":-127}]},{"line":"                let transaction = applied.transaction().data;","counters":[{"col_start":20,"col_end":60,"count":0}]},{"line":"","counters":[]},{"line":"                // Only save zkApp transactions that include account updates","counters":[]},{"line":"                if let Transaction::Command(UserCommand::ZkAppCommand(tx)) = &transaction {","counters":[{"col_start":70,"col_end":72,"count":0},{"col_start":77,"col_end":89,"count":0}]},{"line":"                    if !tx.account_updates.is_empty() {","counters":[{"col_start":23,"col_end":53,"count":0}]},{"line":"                        println!(\"Storing in cache {:?}\", transaction);","counters":[{"col_start":24,"col_end":71,"count":0}]},{"line":"                        self.state.cache.push(transaction)","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"                    }","counters":[{"col_start":21,"col_end":22,"count":0}]},{"line":"                }","counters":[{"col_start":17,"col_end":18,"count":117}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":-127}]},{"line":"","counters":[]},{"line":"            // Add new accounts created by the transaction to the potential senders list","counters":[]},{"line":"            let new_accounts = match applied.varying {","counters":[{"col_start":16,"col_end":28,"count":-10},{"col_start":37,"col_end":52,"count":-10}]},{"line":"                Varying::Command(command) => match command {","counters":[{"col_start":33,"col_end":58,"count":-10}]},{"line":"                    CommandApplied::SignedCommand(cmd) => match cmd.body {","counters":[{"col_start":50,"col_end":72,"count":-10}]},{"line":"                        signed_command_applied::Body::Payments { new_accounts } => {","counters":[{"col_start":65,"col_end":84,"count":-10}]},{"line":"                            Some(new_accounts)","counters":[{"col_start":0,"col_end":46,"count":-10}]},{"line":"                        }","counters":[]},{"line":"                        _ => None,","counters":[{"col_start":29,"col_end":33,"count":0}]},{"line":"                    },","counters":[]},{"line":"                    CommandApplied::ZkappCommand(cmd) => Some(cmd.new_accounts),","counters":[{"col_start":49,"col_end":79,"count":0}]},{"line":"                },","counters":[]},{"line":"                _ => unimplemented!(),","counters":[{"col_start":21,"col_end":37,"count":0}]},{"line":"            };","counters":[]},{"line":"","counters":[]},{"line":"            if let Some(new_accounts) = new_accounts {","counters":[{"col_start":24,"col_end":36,"count":-10},{"col_start":40,"col_end":52,"count":-10}]},{"line":"                let new_accounts = self.state.potential_new_accounts.iter().filter(|kp| {","counters":[{"col_start":20,"col_end":83,"count":-10},{"col_start":88,"col_end":89,"count":155}]},{"line":"                    new_accounts","counters":[{"col_start":0,"col_end":32,"count":155}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":155}]},{"line":"                        .any(|acc| acc.public_key == kp.public.into_compressed())","counters":[{"col_start":0,"col_end":29,"count":155},{"col_start":35,"col_end":80,"count":155},{"col_start":80,"col_end":81,"count":155}]},{"line":"                });","counters":[{"col_start":0,"col_end":17,"count":155},{"col_start":17,"col_end":18,"count":-10}]},{"line":"","counters":[]},{"line":"                for acc in new_accounts {","counters":[{"col_start":20,"col_end":23,"count":-10},{"col_start":27,"col_end":39,"count":-10}]},{"line":"                    if !self","counters":[{"col_start":23,"col_end":28,"count":-10}]},{"line":"                        .state","counters":[{"col_start":0,"col_end":30,"count":-10}]},{"line":"                        .potential_senders","counters":[{"col_start":0,"col_end":42,"count":-10}]},{"line":"                        .iter()","counters":[{"col_start":0,"col_end":31,"count":-10}]},{"line":"                        .any(|x| x.public == acc.public)","counters":[{"col_start":0,"col_end":29,"count":-10},{"col_start":33,"col_end":55,"count":0},{"col_start":55,"col_end":56,"count":-10}]},{"line":"                    {","counters":[]},{"line":"                        self.state.potential_senders.push(acc.clone())","counters":[{"col_start":24,"col_end":70,"count":0}]},{"line":"                    }","counters":[{"col_start":21,"col_end":22,"count":0}]},{"line":"                }","counters":[]},{"line":"","counters":[]},{"line":"                self.state.potential_new_accounts.clear();","counters":[{"col_start":16,"col_end":57,"count":0}]},{"line":"            }","counters":[{"col_start":13,"col_end":14,"count":0}]},{"line":"        }","counters":[{"col_start":9,"col_end":10,"count":127}]},{"line":"","counters":[]},{"line":"        let rust_ledger_root_hash = ledger.merkle_root();","counters":[{"col_start":12,"col_end":57,"count":127}]},{"line":"","counters":[]},{"line":"        if expected_root_hash != &rust_ledger_root_hash {","counters":[{"col_start":0,"col_end":55,"count":127}]},{"line":"            println!(","counters":[{"col_start":12,"col_end":21,"count":10}]},{"line":"                \"Ledger hash mismatch: {:?} != {:?} (expected)\",","counters":[{"col_start":0,"col_end":64,"count":10}]},{"line":"                rust_ledger_root_hash, expected_root_hash","counters":[{"col_start":0,"col_end":57,"count":10}]},{"line":"            );","counters":[{"col_start":0,"col_end":14,"count":10}]},{"line":"            let bigint: num_bigint::BigUint = rust_ledger_root_hash.into();","counters":[{"col_start":0,"col_end":75,"count":10}]},{"line":"            self.save_fuzzcase(tx, &bigint.to_string());","counters":[{"col_start":0,"col_end":56,"count":10}]},{"line":"            Err(())","counters":[{"col_start":0,"col_end":19,"count":10}]},{"line":"        } else {","counters":[]},{"line":"            ledger.commit();","counters":[{"col_start":12,"col_end":28,"count":117}]},{"line":"            Ok(())","counters":[{"col_start":0,"col_end":18,"count":117}]},{"line":"        }","counters":[]},{"line":"    }","counters":[{"col_start":4,"col_end":5,"count":127}]},{"line":"","counters":[]},{"line":"    pub fn get_ledger_root(&mut self) -> Fp {","counters":[{"col_start":4,"col_end":45,"count":0}]},{"line":"        self.state.ledger.merkle_root()","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn get_ledger_accounts(&self) -> Vec<Account> {","counters":[{"col_start":4,"col_end":55,"count":0}]},{"line":"        let locations = self.state.ledger.account_locations();","counters":[{"col_start":0,"col_end":62,"count":0}]},{"line":"        locations","counters":[{"col_start":0,"col_end":17,"count":0}]},{"line":"            .iter()","counters":[{"col_start":0,"col_end":19,"count":0}]},{"line":"            .map(|x| self.state.ledger.get(x).unwrap())","counters":[{"col_start":0,"col_end":17,"count":0},{"col_start":21,"col_end":54,"count":0},{"col_start":54,"col_end":55,"count":0}]},{"line":"            .collect()","counters":[{"col_start":0,"col_end":22,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"pub struct FuzzerCtxBuilder {","counters":[]},{"line":"    constraint_constants: Option<ConstraintConstants>,","counters":[]},{"line":"    txn_state_view: Option<ProtocolStateView>,","counters":[]},{"line":"    fuzzcases_path: Option<String>,","counters":[]},{"line":"    seed: u64,","counters":[]},{"line":"    initial_accounts: usize,","counters":[]},{"line":"    permission_model: PermissionModel,","counters":[]},{"line":"    cache_size: usize,","counters":[]},{"line":"    snapshots_size: usize,","counters":[]},{"line":"}","counters":[]},{"line":"","counters":[]},{"line":"impl FuzzerCtxBuilder {","counters":[]},{"line":"    pub fn new() -> Self {","counters":[{"col_start":4,"col_end":26,"count":0}]},{"line":"        Self {","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            constraint_constants: None,","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            txn_state_view: None,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            fuzzcases_path: None,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            seed: 0,","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            initial_accounts: 10,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            permission_model: PermissionModel::Default,","counters":[{"col_start":0,"col_end":55,"count":0}]},{"line":"            cache_size: ringbuffer::RINGBUFFER_DEFAULT_CAPACITY,","counters":[{"col_start":0,"col_end":64,"count":0}]},{"line":"            snapshots_size: 128,","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"        }","counters":[{"col_start":0,"col_end":9,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn constants(&mut self, constraint_constants: ConstraintConstants) -> &mut Self {","counters":[{"col_start":4,"col_end":89,"count":0}]},{"line":"        self.constraint_constants = Some(constraint_constants);","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn state_view(&mut self, txn_state_view: ProtocolStateView) -> &mut Self {","counters":[{"col_start":4,"col_end":82,"count":0}]},{"line":"        self.txn_state_view = Some(txn_state_view);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn fuzzcases_path(&mut self, fuzzcases_path: String) -> &mut Self {","counters":[{"col_start":4,"col_end":75,"count":0}]},{"line":"        self.fuzzcases_path = Some(fuzzcases_path);","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn seed(&mut self, seed: u64) -> &mut Self {","counters":[{"col_start":4,"col_end":52,"count":0}]},{"line":"        self.seed = seed;","counters":[{"col_start":0,"col_end":25,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn initial_accounts(&mut self, initial_accounts: usize) -> &mut Self {","counters":[{"col_start":4,"col_end":78,"count":0}]},{"line":"        self.initial_accounts = initial_accounts;","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn permission_model(&mut self, permission_model: PermissionModel) -> &mut Self {","counters":[{"col_start":4,"col_end":88,"count":0}]},{"line":"        self.permission_model = permission_model;","counters":[{"col_start":0,"col_end":49,"count":0}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"","counters":[]},{"line":"    pub fn cache_size(&mut self, cache_size: usize) -> &mut Self {","counters":[{"col_start":4,"col_end":65,"count":0}]},{"line":"        assert!(cache_size != 0 && cache_size.is_power_of_two());","counters":[{"col_start":8,"col_end":15,"count":0},{"col_start":16,"col_end":31,"count":0},{"col_start":35,"col_end":63,"count":155}]},{"line":"        self.cache_size = cache_size;","counters":[{"col_start":8,"col_end":37,"count":-465}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":-465}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":-465}]},{"line":"","counters":[]},{"line":"    pub fn snapshots_size(&mut self, snapshots_size: usize) -> &mut Self {","counters":[{"col_start":4,"col_end":73,"count":2325}]},{"line":"        assert!(snapshots_size != 0 && snapshots_size.is_power_of_two());","counters":[{"col_start":8,"col_end":15,"count":2325},{"col_start":16,"col_end":35,"count":2325},{"col_start":39,"col_end":71,"count":0}]},{"line":"        self.snapshots_size = snapshots_size;","counters":[{"col_start":8,"col_end":45,"count":2170}]},{"line":"        self","counters":[{"col_start":0,"col_end":12,"count":2170}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":2170}]},{"line":"","counters":[]},{"line":"    pub fn build(&mut self) -> FuzzerCtx {","counters":[{"col_start":4,"col_end":42,"count":0}]},{"line":"        let constraint_constants = self","counters":[{"col_start":0,"col_end":39,"count":0}]},{"line":"            .constraint_constants","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            .clone()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            .unwrap_or(CONSTRAINT_CONSTANTS);","counters":[{"col_start":0,"col_end":45,"count":0}]},{"line":"        let depth = constraint_constants.ledger_depth as usize;","counters":[{"col_start":0,"col_end":63,"count":0}]},{"line":"        let root = Mask::new_root(crate::Database::create(depth.try_into().unwrap()));","counters":[{"col_start":0,"col_end":86,"count":0}]},{"line":"        let txn_state_view = self","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            .txn_state_view","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            .clone()","counters":[{"col_start":0,"col_end":20,"count":0}]},{"line":"            .unwrap_or(dummy_state_view(None));","counters":[{"col_start":0,"col_end":47,"count":0}]},{"line":"        let fuzzcases_path = self.fuzzcases_path.clone().unwrap_or(\"./\".to_string());","counters":[{"col_start":0,"col_end":85,"count":0}]},{"line":"","counters":[]},{"line":"        let mut ctx = FuzzerCtx {","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            constraint_constants,","counters":[{"col_start":0,"col_end":33,"count":0}]},{"line":"            txn_state_view,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            fuzzcases_path,","counters":[{"col_start":0,"col_end":27,"count":0}]},{"line":"            rng: SmallRng::seed_from_u64(self.seed),","counters":[{"col_start":0,"col_end":52,"count":0}]},{"line":"            state: FuzzerState {","counters":[{"col_start":0,"col_end":32,"count":0}]},{"line":"                ledger: root.make_child(),","counters":[{"col_start":0,"col_end":42,"count":0}]},{"line":"                potential_senders: Vec::new(),","counters":[{"col_start":0,"col_end":46,"count":0}]},{"line":"                potential_new_accounts: Vec::new(),","counters":[{"col_start":0,"col_end":51,"count":0}]},{"line":"                cache: AllocRingBuffer::with_capacity(self.cache_size),","counters":[{"col_start":0,"col_end":71,"count":0}]},{"line":"            },","counters":[{"col_start":0,"col_end":14,"count":0}]},{"line":"            permission_model: self.permission_model.clone(),","counters":[{"col_start":0,"col_end":60,"count":0}]},{"line":"            snapshots: AllocRingBuffer::with_capacity(self.snapshots_size),","counters":[{"col_start":0,"col_end":75,"count":0}]},{"line":"        };","counters":[{"col_start":0,"col_end":10,"count":0}]},{"line":"","counters":[]},{"line":"        ctx.create_inital_accounts(self.initial_accounts);","counters":[{"col_start":0,"col_end":58,"count":0}]},{"line":"        ctx","counters":[{"col_start":0,"col_end":11,"count":0}]},{"line":"    }","counters":[{"col_start":0,"col_end":5,"count":0}]},{"line":"}","counters":[]}]}