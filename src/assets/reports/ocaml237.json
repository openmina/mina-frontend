{"filename":"src/lib/pickles/unfinalized.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Backend","counters":[]},{"line":"open Impls.Step","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"open Common","counters":[]},{"line":"open Import","counters":[]},{"line":"module Shifted_value = Shifted_value.Type2","counters":[]},{"line":"","counters":[]},{"line":"(* Unfinalized dlog-based proof, along with a flag which is true iff it","counters":[]},{"line":"   is expected to verify. This allows for situations like the blockchain","counters":[]},{"line":"   SNARK where we let the previous proof fail in the base case.","counters":[]},{"line":"*)","counters":[]},{"line":"type t =","counters":[]},{"line":"  ( Field.t","counters":[]},{"line":"  , Field.t Scalar_challenge.t","counters":[]},{"line":"  , Other_field.t Shifted_value.t","counters":[]},{"line":"  , ( ( Field.t Scalar_challenge.t","counters":[]},{"line":"      , Other_field.t Shifted_value.t )","counters":[]},{"line":"      Types.Step.Proof_state.Deferred_values.Plonk.In_circuit.Lookup.t","counters":[]},{"line":"    , Boolean.var )","counters":[]},{"line":"    Plonk_types.Opt.t","counters":[]},{"line":"  , ( Field.t Scalar_challenge.t Bulletproof_challenge.t","counters":[]},{"line":"    , Tock.Rounds.n )","counters":[]},{"line":"    Pickles_types.Vector.t","counters":[]},{"line":"  , Field.t","counters":[]},{"line":"  , Boolean.var )","counters":[]},{"line":"  Types.Step.Proof_state.Per_proof.In_circuit.t","counters":[]},{"line":"","counters":[]},{"line":"module Plonk_checks = struct","counters":[]},{"line":"  include Plonk_checks","counters":[]},{"line":"  include Plonk_checks.Make (Shifted_value) (Plonk_checks.Scalars.Tock)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Constant = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    ( Challenge.Constant.t","counters":[]},{"line":"    , Challenge.Constant.t Scalar_challenge.t","counters":[]},{"line":"    , Tock.Field.t Shifted_value.t","counters":[]},{"line":"    , ( Challenge.Constant.t Scalar_challenge.t","counters":[]},{"line":"      , Tock.Field.t Shifted_value.t )","counters":[]},{"line":"      Types.Step.Proof_state.Deferred_values.Plonk.In_circuit.Lookup.t","counters":[]},{"line":"      option","counters":[]},{"line":"    , ( Challenge.Constant.t Scalar_challenge.t Bulletproof_challenge.t","counters":[]},{"line":"      , Tock.Rounds.n )","counters":[]},{"line":"      Vector.t","counters":[]},{"line":"    , Digest.Constant.t","counters":[]},{"line":"    , bool )","counters":[]},{"line":"    Types.Step.Proof_state.Per_proof.In_circuit.t","counters":[]},{"line":"","counters":[]},{"line":"  let shift = Shifted_value.Shift.create (module Tock.Field)","counters":[{"col_start":39,"col_end":39,"count":1}]},{"line":"","counters":[]},{"line":"  let dummy : t Lazy.t =","counters":[]},{"line":"    lazy","counters":[]},{"line":"      (let one_chal = Challenge.Constant.dummy in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"       let open Ro in","counters":[]},{"line":"       let alpha = scalar_chal () in","counters":[]},{"line":"       let beta = chal () in","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"       let gamma = chal () in","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"       let zeta = scalar_chal () in","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"       let chals :","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"           _ Composition_types.Wrap.Proof_state.Deferred_values.Plonk.Minimal.t","counters":[]},{"line":"           =","counters":[]},{"line":"         { alpha = Common.Ipa.Wrap.endo_to_field alpha","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"         ; beta = Challenge.Constant.to_tock_field beta","counters":[{"col_start":49,"col_end":49,"count":0}]},{"line":"         ; gamma = Challenge.Constant.to_tock_field gamma","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"         ; zeta = Common.Ipa.Wrap.endo_to_field zeta","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"         ; joint_combiner = None","counters":[]},{"line":"         }","counters":[]},{"line":"       in","counters":[]},{"line":"       let evals =","counters":[]},{"line":"         Plonk_types.Evals.to_in_circuit Dummy.evals_combined.evals.evals","counters":[]},{"line":"       in","counters":[]},{"line":"       let env =","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"         Plonk_checks.scalars_env","counters":[]},{"line":"           (module Tock.Field)","counters":[]},{"line":"           ~srs_length_log2:Common.Max_degree.wrap_log2","counters":[]},{"line":"           ~endo:Endo.Wrap_inner_curve.base ~mds:Tock_field_sponge.params.mds","counters":[]},{"line":"           ~field_of_hex:","counters":[]},{"line":"             (Core_kernel.Fn.compose Tock.Field.of_bigint","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                Kimchi_pasta.Pasta.Bigint256.of_hex_string )","counters":[]},{"line":"           ~domain:","counters":[]},{"line":"             (Plonk_checks.domain","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                (module Tock.Field)","counters":[]},{"line":"                (wrap_domains ~proofs_verified:2).h ~shifts:Common.tock_shifts","counters":[]},{"line":"                ~domain_generator:Tock.Field.domain_generator )","counters":[]},{"line":"           chals evals","counters":[]},{"line":"       in","counters":[]},{"line":"       let plonk =","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"         Plonk_checks.derive_plonk (module Tock.Field) ~env ~shift chals evals","counters":[]},{"line":"       in","counters":[]},{"line":"       { deferred_values =","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"           { plonk = { plonk with alpha; beta; gamma; zeta; lookup = None }","counters":[]},{"line":"           ; combined_inner_product = Shifted_value (tock ())","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"           ; xi = Scalar_challenge.create one_chal","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"           ; bulletproof_challenges = Dummy.Ipa.Wrap.challenges","counters":[]},{"line":"           ; b = Shifted_value (tock ())","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"           }","counters":[]},{"line":"       ; should_finalize = false","counters":[]},{"line":"       ; sponge_digest_before_evaluations = Digest.Constant.dummy","counters":[]},{"line":"       } )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let typ ~wrap_rounds ~uses_lookup : (t, Constant.t) Typ.t =","counters":[]},{"line":"  Types.Step.Proof_state.Per_proof.typ","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (module Impl)","counters":[]},{"line":"    (Shifted_value.typ Other_field.typ)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    ~assert_16_bits:(Step_verifier.assert_n_bits ~n:16)","counters":[]},{"line":"    ~zero:Common.Lookup_parameters.tick_zero ~uses_lookup","counters":[{"col_start":56,"col_end":56,"count":2}]}]}