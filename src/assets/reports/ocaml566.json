{"filename":"src/lib/mina_base/account_update.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base_util","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]},{"line":"","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"module Impl = Pickles.Impls.Step","counters":[]},{"line":"open Mina_numbers","counters":[]},{"line":"open Currency","counters":[]},{"line":"open Pickles_types","counters":[]},{"line":"module Digest = Random_oracle.Digest","counters":[]},{"line":"","counters":[]},{"line":"module type Type = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Authorization_kind = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"            Mina_wire_types.Mina_base.Account_update.Authorization_kind.V1.t =","counters":[]},{"line":"        | None_given","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Signature","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        | Proof","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  module Structured = struct","counters":[]},{"line":"    type t = { is_signed : bool; is_proved : bool } [@@deriving hlist]","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"    let to_input ({ is_signed; is_proved } : t) =","counters":[]},{"line":"      let f x = if x then Field.one else Field.zero in","counters":[{"col_start":6,"col_end":6,"count":1},{"col_start":16,"col_end":16,"count":2},{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":2}]},{"line":"      Random_oracle_input.Chunked.packeds","counters":[]},{"line":"        [| (f is_signed, 1); (f is_proved, 1) |]","counters":[{"col_start":12,"col_end":12,"count":1},{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"    [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      type t = { is_signed : Boolean.var; is_proved : Boolean.var }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [@@deriving hlist]","counters":[]},{"line":"","counters":[]},{"line":"      let to_input { is_signed; is_proved } =","counters":[]},{"line":"        let f (x : Boolean.var) = (x :> Field.Var.t) in","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"        Random_oracle_input.Chunked.packeds","counters":[]},{"line":"          [| (f is_signed, 1); (f is_proved, 1) |]","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let typ =","counters":[]},{"line":"      Typ.of_hlistable ~var_to_hlist:Checked.to_hlist","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"        ~var_of_hlist:Checked.of_hlist ~value_to_hlist:to_hlist","counters":[]},{"line":"        ~value_of_hlist:of_hlist","counters":[]},{"line":"        [ Boolean.typ; Boolean.typ ]","counters":[]},{"line":"","counters":[]},{"line":"    [%%endif]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let to_structured : t -> Structured.t = function","counters":[]},{"line":"    | None_given ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        { is_signed = false; is_proved = false }","counters":[]},{"line":"    | Signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { is_signed = true; is_proved = false }","counters":[]},{"line":"    | Proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { is_signed = false; is_proved = true }","counters":[]},{"line":"","counters":[]},{"line":"  let of_structured_exn : Structured.t -> t = function","counters":[]},{"line":"    | { is_signed = false; is_proved = false } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None_given","counters":[]},{"line":"    | { is_signed = true; is_proved = false } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Signature","counters":[]},{"line":"    | { is_signed = false; is_proved = true } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Proof","counters":[]},{"line":"    | { is_signed = true; is_proved = true } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Invalid authorization kind\"","counters":[]},{"line":"","counters":[]},{"line":"  let to_string = function","counters":[]},{"line":"    | None_given ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"None_given\"","counters":[]},{"line":"    | Signature ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Signature\"","counters":[]},{"line":"    | Proof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        \"Proof\"","counters":[]},{"line":"","counters":[]},{"line":"  let of_string_exn = function","counters":[]},{"line":"    | \"None_given\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        None_given","counters":[]},{"line":"    | \"Signature\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Signature","counters":[]},{"line":"    | \"Proof\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Proof","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwith \"Invalid authorization kind\"","counters":[]},{"line":"","counters":[]},{"line":"  let gen = Quickcheck.Generator.of_list [ None_given; Signature; Proof ]","counters":[{"col_start":39,"col_end":39,"count":1}]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    iso_string ~name:\"AuthorizationKind\" ~js_type:(Custom \"AuthorizationKind\")","counters":[]},{"line":"      ~to_string ~of_string:of_string_exn obj","counters":[]},{"line":"","counters":[]},{"line":"  let to_input x = Structured.to_input (to_structured x)","counters":[{"col_start":19,"col_end":19,"count":1},{"col_start":52,"col_end":52,"count":1}]},{"line":"","counters":[]},{"line":"  [%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = Structured.Checked","counters":[]},{"line":"","counters":[]},{"line":"  let typ =","counters":[]},{"line":"    Structured.typ |> Typ.transport ~there:to_structured ~back:of_structured_exn","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"","counters":[]},{"line":"  [%%endif]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Call_type = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Call | Delegate_call","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":15,"col_end":15,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen =","counters":[]},{"line":"    Quickcheck.Generator.(map bool) ~f:(function","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"      | true ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Call","counters":[]},{"line":"      | false ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Delegate_call )","counters":[]},{"line":"","counters":[]},{"line":"  let to_string = function Call -> \"call\" | Delegate_call -> \"delegate_call\"","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"  let of_string = function","counters":[]},{"line":"    | \"call\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Call","counters":[]},{"line":"    | \"delegate_call\" ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Delegate_call","counters":[]},{"line":"    | s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"Invalid call type: %s\" s ()","counters":[]},{"line":"","counters":[]},{"line":"  let quickcheck_generator =","counters":[]},{"line":"    Quickcheck.Generator.map Bool.quickcheck_generator ~f:(function","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"      | false ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Call","counters":[]},{"line":"      | true ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Delegate_call )","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Update = struct","counters":[]},{"line":"  module Timing_info = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"              Mina_wire_types.Mina_base.Account_update.Update.Timing_info.V1.t =","counters":[]},{"line":"          { initial_minimum_balance : Balance.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"          ; cliff_time : Global_slot.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"          ; cliff_amount : Amount.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          ; vesting_period : Global_slot.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"          ; vesting_increment : Amount.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, compare, equal, sexp, hash, yojson, hlist, fields]","counters":[{"col_start":76,"col_end":76,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type value = t","counters":[]},{"line":"","counters":[]},{"line":"    let gen =","counters":[]},{"line":"      let open Quickcheck.Let_syntax in","counters":[]},{"line":"      let%bind initial_minimum_balance = Balance.gen in","counters":[]},{"line":"      let%bind cliff_time = Global_slot.gen in","counters":[]},{"line":"      let%bind cliff_amount =","counters":[]},{"line":"        Amount.gen_incl Amount.zero (Balance.to_amount initial_minimum_balance)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%bind vesting_period =","counters":[]},{"line":"        Global_slot.gen_incl Global_slot.(succ zero) (Global_slot.of_int 10)","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"      in","counters":[]},{"line":"      let%map vesting_increment =","counters":[]},{"line":"        Amount.gen_incl Amount.one (Amount.of_int 100)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      in","counters":[]},{"line":"      { initial_minimum_balance","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ; cliff_time","counters":[]},{"line":"      ; cliff_amount","counters":[]},{"line":"      ; vesting_period","counters":[]},{"line":"      ; vesting_increment","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let to_input (t : t) =","counters":[]},{"line":"      List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        [ Balance.to_input t.initial_minimum_balance","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"        ; Global_slot.to_input t.cliff_time","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"        ; Amount.to_input t.cliff_amount","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"        ; Global_slot.to_input t.vesting_period","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"        ; Amount.to_input t.vesting_increment","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let dummy =","counters":[]},{"line":"      let slot_unused = Global_slot.zero in","counters":[]},{"line":"      let balance_unused = Balance.zero in","counters":[]},{"line":"      let amount_unused = Amount.zero in","counters":[]},{"line":"      { initial_minimum_balance = balance_unused","counters":[]},{"line":"      ; cliff_time = slot_unused","counters":[]},{"line":"      ; cliff_amount = amount_unused","counters":[]},{"line":"      ; vesting_period = slot_unused","counters":[]},{"line":"      ; vesting_increment = amount_unused","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let to_account_timing (t : t) : Account_timing.t =","counters":[]},{"line":"      Timed","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { initial_minimum_balance = t.initial_minimum_balance","counters":[]},{"line":"        ; cliff_time = t.cliff_time","counters":[]},{"line":"        ; cliff_amount = t.cliff_amount","counters":[]},{"line":"        ; vesting_period = t.vesting_period","counters":[]},{"line":"        ; vesting_increment = t.vesting_increment","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"    let of_account_timing (t : Account_timing.t) : t option =","counters":[]},{"line":"      match t with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Untimed ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"      | Timed t ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some","counters":[]},{"line":"            { initial_minimum_balance = t.initial_minimum_balance","counters":[]},{"line":"            ; cliff_time = t.cliff_time","counters":[]},{"line":"            ; cliff_amount = t.cliff_amount","counters":[]},{"line":"            ; vesting_period = t.vesting_period","counters":[]},{"line":"            ; vesting_increment = t.vesting_increment","counters":[]},{"line":"            }","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { initial_minimum_balance : Balance.Checked.t","counters":[]},{"line":"        ; cliff_time : Global_slot.Checked.t","counters":[]},{"line":"        ; cliff_amount : Amount.Checked.t","counters":[]},{"line":"        ; vesting_period : Global_slot.Checked.t","counters":[]},{"line":"        ; vesting_increment : Amount.Checked.t","counters":[]},{"line":"        }","counters":[]},{"line":"      [@@deriving hlist]","counters":[]},{"line":"","counters":[]},{"line":"      let constant (t : value) : t =","counters":[]},{"line":"        { initial_minimum_balance = Balance.var_of_t t.initial_minimum_balance","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; cliff_time = Global_slot.Checked.constant t.cliff_time","counters":[{"col_start":50,"col_end":50,"count":0}]},{"line":"        ; cliff_amount = Amount.var_of_t t.cliff_amount","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; vesting_period = Global_slot.Checked.constant t.vesting_period","counters":[{"col_start":54,"col_end":54,"count":0}]},{"line":"        ; vesting_increment = Amount.var_of_t t.vesting_increment","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"      let to_input","counters":[]},{"line":"          ({ initial_minimum_balance","counters":[]},{"line":"           ; cliff_time","counters":[]},{"line":"           ; cliff_amount","counters":[]},{"line":"           ; vesting_period","counters":[]},{"line":"           ; vesting_increment","counters":[]},{"line":"           } :","counters":[]},{"line":"            t ) =","counters":[]},{"line":"        List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [ Balance.var_to_input initial_minimum_balance","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          ; Global_slot.Checked.to_input cliff_time","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; Amount.var_to_input cliff_amount","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ; Global_slot.Checked.to_input vesting_period","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; Amount.var_to_input vesting_increment","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"          ]","counters":[]},{"line":"","counters":[]},{"line":"      let to_account_timing (t : t) : Account_timing.var =","counters":[]},{"line":"        { is_timed = Boolean.true_","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ; initial_minimum_balance = t.initial_minimum_balance","counters":[]},{"line":"        ; cliff_time = t.cliff_time","counters":[]},{"line":"        ; cliff_amount = t.cliff_amount","counters":[]},{"line":"        ; vesting_period = t.vesting_period","counters":[]},{"line":"        ; vesting_increment = t.vesting_increment","counters":[]},{"line":"        }","counters":[]},{"line":"","counters":[]},{"line":"      let of_account_timing (t : Account_timing.var) : t =","counters":[]},{"line":"        { initial_minimum_balance = t.initial_minimum_balance","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ; cliff_time = t.cliff_time","counters":[]},{"line":"        ; cliff_amount = t.cliff_amount","counters":[]},{"line":"        ; vesting_period = t.vesting_period","counters":[]},{"line":"        ; vesting_increment = t.vesting_increment","counters":[]},{"line":"        }","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    let typ : (Checked.t, t) Typ.t =","counters":[]},{"line":"      Typ.of_hlistable","counters":[{"col_start":21,"col_end":21,"count":1}]},{"line":"        [ Balance.typ","counters":[]},{"line":"        ; Global_slot.typ","counters":[]},{"line":"        ; Amount.typ","counters":[]},{"line":"        ; Global_slot.typ","counters":[]},{"line":"        ; Amount.typ","counters":[]},{"line":"        ]","counters":[]},{"line":"        ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[]},{"line":"        ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"      Fields.make_creator obj ~initial_minimum_balance:!.balance","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        ~cliff_time:!.global_slot ~cliff_amount:!.amount","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"        ~vesting_period:!.global_slot ~vesting_increment:!.amount","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"      |> finish \"Timing\" ~t_toplevel_annots","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  open Zkapp_basic","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      (* TODO: Have to check that the public key is not = Public_key.Compressed.empty here.  *)","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Account_update.Update.V1.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { app_state :","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"            F.Stable.V1.t Set_or_keep.Stable.V1.t Zkapp_state.V.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"        ; delegate : Public_key.Compressed.Stable.V1.t Set_or_keep.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":55,"col_end":55,"count":0},{"col_start":77,"col_end":77,"count":0}]},{"line":"        ; verification_key :","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"            Verification_key_wire.Stable.V1.t Set_or_keep.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":46,"col_end":46,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        ; permissions : Permissions.Stable.V2.t Set_or_keep.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"        ; zkapp_uri : string Set_or_keep.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        ; token_symbol :","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"            Account.Token_symbol.Stable.V1.t Set_or_keep.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":67,"col_end":67,"count":0}]},{"line":"        ; timing : Timing_info.Stable.V1.t Set_or_keep.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"        ; voting_for : State_hash.Stable.V1.t Set_or_keep.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, compare, equal, sexp, hash, yojson, fields, hlist]","counters":[{"col_start":74,"col_end":74,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen ?(token_account = false) ?(zkapp_account = false) ?vk","counters":[{"col_start":28,"col_end":28,"count":1},{"col_start":53,"col_end":53,"count":1}]},{"line":"      ?permissions_auth () : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    let%bind app_state =","counters":[]},{"line":"      let%bind fields =","counters":[]},{"line":"        let field_gen = Snark_params.Tick.Field.gen in","counters":[]},{"line":"        Quickcheck.Generator.list_with_length 8 (Set_or_keep.gen field_gen)","counters":[{"col_start":44,"col_end":44,"count":1},{"col_start":63,"col_end":63,"count":1}]},{"line":"      in","counters":[]},{"line":"      (* won't raise because length is correct *)","counters":[]},{"line":"      Quickcheck.Generator.return (Zkapp_state.V.of_list_exn fields)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind delegate =","counters":[]},{"line":"      if not token_account then Set_or_keep.gen Public_key.Compressed.gen","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"      else return Set_or_keep.Keep","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind verification_key =","counters":[]},{"line":"      if zkapp_account then","counters":[]},{"line":"        Set_or_keep.gen","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"          (Quickcheck.Generator.return","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"             ( match vk with","counters":[]},{"line":"             | None ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 let data = Pickles.Side_loaded.Verification_key.dummy in","counters":[]},{"line":"                 let hash = Zkapp_account.digest_vk data in","counters":[]},{"line":"                 { With_hash.data; hash }","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"             | Some vk ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 vk ) )","counters":[]},{"line":"      else return Set_or_keep.Keep","counters":[{"col_start":11,"col_end":11,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind permissions =","counters":[]},{"line":"      match permissions_auth with","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          return Set_or_keep.Keep","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"      | Some auth_tag ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let%map permissions = Permissions.gen ~auth_tag in","counters":[]},{"line":"          Set_or_keep.Set permissions","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind zkapp_uri =","counters":[]},{"line":"      let uri_gen =","counters":[]},{"line":"        Quickcheck.Generator.of_list","counters":[]},{"line":"          [ \"https://www.example.com\"","counters":[]},{"line":"          ; \"https://www.minaprotocol.com\"","counters":[]},{"line":"          ; \"https://www.gurgle.com\"","counters":[]},{"line":"          ; \"https://faceplant.com\"","counters":[]},{"line":"          ]","counters":[]},{"line":"      in","counters":[]},{"line":"      Set_or_keep.gen uri_gen","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind token_symbol =","counters":[]},{"line":"      let token_gen =","counters":[]},{"line":"        Quickcheck.Generator.of_list","counters":[]},{"line":"          [ \"MINA\"; \"TOKEN1\"; \"TOKEN2\"; \"TOKEN3\"; \"TOKEN4\"; \"TOKEN5\" ]","counters":[]},{"line":"      in","counters":[]},{"line":"      Set_or_keep.gen token_gen","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":20,"col_end":20,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind voting_for = Set_or_keep.gen Field.gen in","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    (* a new account for the Account_update.t is in the ledger when we use","counters":[]},{"line":"       this generated update in tests, so the timing must be Keep","counters":[]},{"line":"    *)","counters":[]},{"line":"    let timing = Set_or_keep.Keep in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    return","counters":[]},{"line":"      ( { app_state","counters":[]},{"line":"        ; delegate","counters":[]},{"line":"        ; verification_key","counters":[]},{"line":"        ; permissions","counters":[]},{"line":"        ; zkapp_uri","counters":[]},{"line":"        ; token_symbol","counters":[]},{"line":"        ; timing","counters":[]},{"line":"        ; voting_for","counters":[]},{"line":"        }","counters":[]},{"line":"        : t )","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    open Pickles.Impls.Step","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { app_state : Field.t Set_or_keep.Checked.t Zkapp_state.V.t","counters":[]},{"line":"      ; delegate : Public_key.Compressed.var Set_or_keep.Checked.t","counters":[]},{"line":"      ; verification_key :","counters":[]},{"line":"          ( Boolean.var","counters":[]},{"line":"          , ( Side_loaded_verification_key.t option","counters":[]},{"line":"            , Field.Constant.t )","counters":[]},{"line":"            With_hash.t","counters":[]},{"line":"            Data_as_hash.t )","counters":[]},{"line":"          Zkapp_basic.Flagged_option.t","counters":[]},{"line":"          Set_or_keep.Checked.t","counters":[]},{"line":"      ; permissions : Permissions.Checked.t Set_or_keep.Checked.t","counters":[]},{"line":"      ; zkapp_uri : string Data_as_hash.t Set_or_keep.Checked.t","counters":[]},{"line":"      ; token_symbol : Account.Token_symbol.var Set_or_keep.Checked.t","counters":[]},{"line":"      ; timing : Timing_info.Checked.t Set_or_keep.Checked.t","counters":[]},{"line":"      ; voting_for : State_hash.var Set_or_keep.Checked.t","counters":[]},{"line":"      }","counters":[]},{"line":"    [@@deriving hlist]","counters":[]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        ({ app_state","counters":[]},{"line":"         ; delegate","counters":[]},{"line":"         ; verification_key","counters":[]},{"line":"         ; permissions","counters":[]},{"line":"         ; zkapp_uri","counters":[]},{"line":"         ; token_symbol","counters":[]},{"line":"         ; timing","counters":[]},{"line":"         ; voting_for","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) =","counters":[]},{"line":"      let open Random_oracle_input.Chunked in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      List.reduce_exn ~f:append","counters":[]},{"line":"        [ Zkapp_state.to_input app_state","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"            ~f:(Set_or_keep.Checked.to_input ~f:field)","counters":[]},{"line":"        ; Set_or_keep.Checked.to_input delegate","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            ~f:Public_key.Compressed.Checked.to_input","counters":[]},{"line":"        ; Set_or_keep.Checked.to_input verification_key ~f:(fun x ->","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"              field (Data_as_hash.hash x.data) )","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; Set_or_keep.Checked.to_input permissions","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            ~f:Permissions.Checked.to_input","counters":[]},{"line":"        ; Set_or_keep.Checked.to_input zkapp_uri ~f:Data_as_hash.to_input","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; Set_or_keep.Checked.to_input token_symbol","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"            ~f:Account.Token_symbol.var_to_input","counters":[]},{"line":"        ; Set_or_keep.Checked.to_input timing ~f:Timing_info.Checked.to_input","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; Set_or_keep.Checked.to_input voting_for ~f:State_hash.var_to_input","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let noop : t =","counters":[]},{"line":"    { app_state =","counters":[]},{"line":"        Vector.init Zkapp_state.Max_state_size.n ~f:(fun _ -> Set_or_keep.Keep)","counters":[{"col_start":18,"col_end":18,"count":1},{"col_start":62,"col_end":62,"count":8}]},{"line":"    ; delegate = Keep","counters":[]},{"line":"    ; verification_key = Keep","counters":[]},{"line":"    ; permissions = Keep","counters":[]},{"line":"    ; zkapp_uri = Keep","counters":[]},{"line":"    ; token_symbol = Keep","counters":[]},{"line":"    ; timing = Keep","counters":[]},{"line":"    ; voting_for = Keep","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let dummy = noop","counters":[]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ app_state","counters":[]},{"line":"       ; delegate","counters":[]},{"line":"       ; verification_key","counters":[]},{"line":"       ; permissions","counters":[]},{"line":"       ; zkapp_uri","counters":[]},{"line":"       ; token_symbol","counters":[]},{"line":"       ; timing","counters":[]},{"line":"       ; voting_for","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) =","counters":[]},{"line":"    let open Random_oracle_input.Chunked in","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"    List.reduce_exn ~f:append","counters":[]},{"line":"      [ Zkapp_state.to_input app_state","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~f:(Set_or_keep.to_input ~dummy:Field.zero ~f:field)","counters":[]},{"line":"      ; Set_or_keep.to_input delegate","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~dummy:(Zkapp_precondition.Eq_data.Tc.public_key ()).default","counters":[{"col_start":57,"col_end":57,"count":1}]},{"line":"          ~f:Public_key.Compressed.to_input","counters":[]},{"line":"      ; Set_or_keep.to_input","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          (Set_or_keep.map verification_key ~f:With_hash.hash)","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"          ~dummy:Field.zero ~f:field","counters":[]},{"line":"      ; Set_or_keep.to_input permissions ~dummy:Permissions.user_default","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~f:Permissions.to_input","counters":[]},{"line":"      ; Set_or_keep.to_input","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          (Set_or_keep.map ~f:Zkapp_account.hash_zkapp_uri zkapp_uri)","counters":[{"col_start":25,"col_end":25,"count":1}]},{"line":"          ~dummy:(Zkapp_account.hash_zkapp_uri_opt None)","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"          ~f:field","counters":[]},{"line":"      ; Set_or_keep.to_input token_symbol ~dummy:Account.Token_symbol.default","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~f:Account.Token_symbol.to_input","counters":[]},{"line":"      ; Set_or_keep.to_input timing ~dummy:Timing_info.dummy","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~f:Timing_info.to_input","counters":[]},{"line":"      ; Set_or_keep.to_input voting_for ~dummy:State_hash.dummy","counters":[{"col_start":27,"col_end":27,"count":1}]},{"line":"          ~f:State_hash.to_input","counters":[]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let typ () : (Checked.t, t) Typ.t =","counters":[]},{"line":"    let open Pickles.Impls.Step in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Typ.of_hlistable","counters":[]},{"line":"      [ Zkapp_state.typ (Set_or_keep.typ ~dummy:Field.Constant.zero Field.typ)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      ; Set_or_keep.typ ~dummy:Public_key.Compressed.empty","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          Public_key.Compressed.typ","counters":[]},{"line":"      ; Set_or_keep.optional_typ","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          (Data_as_hash.typ ~hash:With_hash.hash)","counters":[]},{"line":"          ~to_option:(function","counters":[]},{"line":"            | { With_hash.data = Some data; hash } ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                Some { With_hash.data; hash }","counters":[]},{"line":"            | { With_hash.data = None; _ } ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                None )","counters":[]},{"line":"          ~of_option:(function","counters":[]},{"line":"            | Some { With_hash.data; hash } ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { With_hash.data = Some data; hash }","counters":[]},{"line":"            | None ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { With_hash.data = None; hash = Field.Constant.zero } )","counters":[]},{"line":"        |> Typ.transport_var","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"             ~there:","counters":[]},{"line":"               (Set_or_keep.Checked.map","counters":[]},{"line":"                  ~f:(fun { Zkapp_basic.Flagged_option.data; _ } -> data) )","counters":[{"col_start":68,"col_end":68,"count":0}]},{"line":"             ~back:(fun x ->","counters":[]},{"line":"               Set_or_keep.Checked.map x ~f:(fun data ->","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                   { Zkapp_basic.Flagged_option.data","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                   ; is_some = Set_or_keep.Checked.is_set x","counters":[{"col_start":56,"col_end":56,"count":0}]},{"line":"                   } ) )","counters":[]},{"line":"      ; Set_or_keep.typ ~dummy:Permissions.user_default Permissions.typ","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ; Set_or_keep.optional_typ","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"          (Data_as_hash.optional_typ ~hash:Zkapp_account.hash_zkapp_uri","counters":[]},{"line":"             ~non_preimage:(Zkapp_account.hash_zkapp_uri_opt None)","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"             ~dummy_value:\"\" )","counters":[]},{"line":"          ~to_option:Fn.id ~of_option:Fn.id","counters":[]},{"line":"      ; Set_or_keep.typ ~dummy:Account.Token_symbol.default","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          Account.Token_symbol.typ","counters":[]},{"line":"      ; Set_or_keep.typ ~dummy:Timing_info.dummy Timing_info.typ","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ; Set_or_keep.typ ~dummy:State_hash.dummy State_hash.typ","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"    let zkapp_uri =","counters":[]},{"line":"      with_checked","counters":[]},{"line":"        ~checked:(Data_as_hash.deriver string)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ~name:\"ZkappUri\" string","counters":[]},{"line":"    in","counters":[]},{"line":"    let token_symbol =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      with_checked","counters":[]},{"line":"        ~checked:(js_only (Js_layout.leaf_type (Custom \"TokenSymbol\")))","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"        ~name:\"TokenSymbol\" string","counters":[]},{"line":"    in","counters":[]},{"line":"    finish \"AccountUpdateModification\" ~t_toplevel_annots","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    @@ Fields.make_creator","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"         ~app_state:!.(Zkapp_state.deriver @@ Set_or_keep.deriver field)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"         ~delegate:!.(Set_or_keep.deriver public_key)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"         ~verification_key:!.(Set_or_keep.deriver verification_key_with_hash)","counters":[{"col_start":28,"col_end":28,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"         ~permissions:!.(Set_or_keep.deriver Permissions.deriver)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"         ~zkapp_uri:!.(Set_or_keep.deriver zkapp_uri)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"         ~token_symbol:!.(Set_or_keep.deriver token_symbol)","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"         ~timing:!.(Set_or_keep.deriver Timing_info.deriver)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"         ~voting_for:!.(Set_or_keep.deriver State_hash.deriver)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"         obj","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip\" =","counters":[]},{"line":"    let app_state =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Zkapp_state.V.of_list_exn","counters":[]},{"line":"        Set_or_keep.","counters":[]},{"line":"          [ Set (F.negate F.one); Keep; Keep; Keep; Keep; Keep; Keep; Keep ]","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    in","counters":[]},{"line":"    let verification_key =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Set_or_keep.Set","counters":[]},{"line":"        (let data =","counters":[]},{"line":"           Pickles.Side_loaded.Verification_key.(","counters":[]},{"line":"             dummy |> to_base58_check |> of_base58_check_exn)","counters":[{"col_start":36,"col_end":36,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"         in","counters":[]},{"line":"         let hash = Zkapp_account.digest_vk data in","counters":[]},{"line":"         { With_hash.data; hash } )","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"    in","counters":[]},{"line":"    let update : t =","counters":[]},{"line":"      { app_state","counters":[]},{"line":"      ; delegate = Set_or_keep.Set Public_key.Compressed.empty","counters":[]},{"line":"      ; verification_key","counters":[]},{"line":"      ; permissions = Set_or_keep.Set Permissions.user_default","counters":[]},{"line":"      ; zkapp_uri = Set_or_keep.Set \"https://www.example.com\"","counters":[]},{"line":"      ; token_symbol = Set_or_keep.Set \"TOKEN\"","counters":[]},{"line":"      ; timing = Set_or_keep.Set Timing_info.dummy","counters":[]},{"line":"      ; voting_for = Set_or_keep.Set State_hash.dummy","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] update (update |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Events = Zkapp_account.Events","counters":[]},{"line":"module Sequence_events = Zkapp_account.Sequence_events","counters":[]},{"line":"","counters":[]},{"line":"module Account_precondition = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"            Mina_wire_types.Mina_base.Account_update.Account_precondition.V1.t =","counters":[]},{"line":"        | Full of Zkapp_precondition.Account.Stable.V2.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        | Nonce of Account.Nonce.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"        | Accept","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":52,"col_end":52,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    Quickcheck.Generator.variant3 Zkapp_precondition.Account.gen","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"      Account.Nonce.gen Unit.quickcheck_generator","counters":[]},{"line":"    |> Quickcheck.Generator.map ~f:(function","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"         | `A x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Full x","counters":[]},{"line":"         | `B x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Nonce x","counters":[]},{"line":"         | `C () ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Accept )","counters":[]},{"line":"","counters":[]},{"line":"  let to_full = function","counters":[]},{"line":"    | Full s ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        s","counters":[]},{"line":"    | Nonce n ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        { Zkapp_precondition.Account.accept with","counters":[]},{"line":"          nonce = Check { lower = n; upper = n }","counters":[]},{"line":"        }","counters":[]},{"line":"    | Accept ->","counters":[{"col_start":6,"col_end":6,"count":1}]},{"line":"        Zkapp_precondition.Account.accept","counters":[]},{"line":"","counters":[]},{"line":"  let of_full (p : Zkapp_precondition.Account.t) =","counters":[]},{"line":"    let module A = Zkapp_precondition.Account in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    if A.equal p A.accept then Accept","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    else","counters":[]},{"line":"      match p.nonce with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Ignore ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Full p","counters":[]},{"line":"      | Check { lower; upper } as n ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          if","counters":[]},{"line":"            A.equal p { A.accept with nonce = n }","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"            && Account.Nonce.equal lower upper","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          then Nonce lower","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          else Full p","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  module Tag = struct","counters":[]},{"line":"    type t = Full | Nonce | Accept [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let tag : t -> Tag.t = function","counters":[]},{"line":"    | Full _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Full","counters":[]},{"line":"    | Nonce _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Nonce","counters":[]},{"line":"    | Accept ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Accept","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    iso_record ~of_record:of_full ~to_record:to_full","counters":[]},{"line":"      Zkapp_precondition.Account.deriver obj","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip accept\" =","counters":[]},{"line":"    let account_precondition : t = Accept in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] account_precondition","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (account_precondition |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip nonce\" =","counters":[]},{"line":"    let account_precondition : t = Nonce (Account_nonce.of_int 928472) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] account_precondition","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (account_precondition |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip full\" =","counters":[]},{"line":"    let n = Account_nonce.of_int 4513 in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let account_precondition : t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Full","counters":[]},{"line":"        { Zkapp_precondition.Account.accept with","counters":[]},{"line":"          nonce = Check { lower = n; upper = n }","counters":[]},{"line":"        ; delegate = Check Public_key.Compressed.empty","counters":[]},{"line":"        }","counters":[]},{"line":"    in","counters":[]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: t] account_precondition","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (account_precondition |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"  let%test_unit \"to_json\" =","counters":[]},{"line":"    let account_precondition : t = Nonce (Account_nonce.of_int 34928) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = deriver (Fd.o ()) in","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"    [%test_eq: string]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (account_precondition |> Fd.to_json full |> Yojson.Safe.to_string)","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"      ( {json|{","counters":[]},{"line":"          balance: null,","counters":[]},{"line":"          nonce: {lower: \"34928\", upper: \"34928\"},","counters":[]},{"line":"          receiptChainHash: null, delegate: null,","counters":[]},{"line":"          state: [null,null,null,null,null,null,null,null],","counters":[]},{"line":"          sequenceState: null, provedState: null, isNew: null","counters":[]},{"line":"        }|json}","counters":[]},{"line":"      |> Yojson.Safe.from_string |> Yojson.Safe.to_string )","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"  let digest (t : t) =","counters":[]},{"line":"    let digest x =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Random_oracle.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        hash ~init:Hash_prefix_states.account_update_account_precondition","counters":[]},{"line":"          (pack_input x))","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"    in","counters":[]},{"line":"    to_full t |> Zkapp_precondition.Account.to_input |> digest","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t = Zkapp_precondition.Account.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    let digest (t : t) =","counters":[]},{"line":"      let digest x =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Random_oracle.Checked.(","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          hash ~init:Hash_prefix_states.account_update_account_precondition","counters":[]},{"line":"            (pack_input x))","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      in","counters":[]},{"line":"      Zkapp_precondition.Account.Checked.to_input t |> digest","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"","counters":[]},{"line":"    let nonce (t : t) = t.nonce","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ () : (Zkapp_precondition.Account.Checked.t, t) Typ.t =","counters":[]},{"line":"    Typ.transport (Zkapp_precondition.Account.typ ()) ~there:to_full","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      ~back:(fun s -> Full s)","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let nonce = function","counters":[]},{"line":"    | Full { nonce; _ } ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        nonce","counters":[]},{"line":"    | Nonce nonce ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Check { lower = nonce; upper = nonce }","counters":[]},{"line":"    | Accept ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ignore","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Preconditions = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Account_update.Preconditions.V1.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { network : Zkapp_precondition.Protocol_state.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        ; account : Account_precondition.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, sexp, equal, yojson, hash, hlist, compare, fields]","counters":[{"col_start":74,"col_end":74,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"    Fields.make_creator obj","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"      ~network:!.Zkapp_precondition.Protocol_state.deriver","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      ~account:!.Account_precondition.deriver","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"    |> finish \"Preconditions\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let to_input ({ network; account } : t) =","counters":[]},{"line":"    List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      [ Zkapp_precondition.Protocol_state.to_input network","counters":[{"col_start":49,"col_end":49,"count":1}]},{"line":"      ; Zkapp_precondition.Account.to_input","counters":[{"col_start":42,"col_end":42,"count":1}]},{"line":"          (Account_precondition.to_full account)","counters":[{"col_start":38,"col_end":38,"count":1}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let gen =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"    let%map network = Zkapp_precondition.Protocol_state.gen","counters":[]},{"line":"    and account = Account_precondition.gen in","counters":[]},{"line":"    { network; account }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    module Type_of_var (V : sig","counters":[]},{"line":"      type var","counters":[]},{"line":"    end) =","counters":[]},{"line":"    struct","counters":[]},{"line":"      type t = V.var","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Int_as_prover_ref = struct","counters":[]},{"line":"      type t = int As_prover.Ref.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { network : Zkapp_precondition.Protocol_state.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; account : Account_precondition.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving annot, hlist, fields]","counters":[]},{"line":"","counters":[]},{"line":"    let to_input ({ network; account } : t) =","counters":[]},{"line":"      List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ Zkapp_precondition.Protocol_state.Checked.to_input network","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"        ; Zkapp_precondition.Account.Checked.to_input account","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"        ]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ () : (Checked.t, t) Typ.t =","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ Zkapp_precondition.Protocol_state.typ; Account_precondition.typ () ]","counters":[{"col_start":70,"col_end":70,"count":0}]},{"line":"      ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let accept =","counters":[]},{"line":"    { network = Zkapp_precondition.Protocol_state.accept","counters":[]},{"line":"    ; account = Account_precondition.Accept","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Body = struct","counters":[]},{"line":"  (* Why isn't this derived automatically? *)","counters":[]},{"line":"  let hash_fold_array f init x = Array.fold ~init ~f x","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  module Events' = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = Pickles.Backend.Tick.Field.Stable.V1.t array list","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":60,"col_end":60,"count":0},{"col_start":62,"col_end":62,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"        [@@deriving sexp, equal, hash, compare, yojson]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Wire = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { public_key : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          ; token_id : Token_id.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; update : Update.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          ; balance_change :","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"              (Amount.Stable.V1.t, Sgn.Stable.V1.t) Signed_poly.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          ; increment_nonce : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; sequence_events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          ; call_data : Pickles.Backend.Tick.Field.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"          ; preconditions : Preconditions.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; use_full_commitment : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; caller : Call_type.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ; authorization_kind : Authorization_kind.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let gen =","counters":[]},{"line":"      let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"      let%map public_key = Public_key.Compressed.gen","counters":[]},{"line":"      and token_id = Token_id.gen","counters":[]},{"line":"      and update = Update.gen ()","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"      and balance_change = Currency.Amount.Signed.gen","counters":[]},{"line":"      and increment_nonce = Quickcheck.Generator.bool","counters":[]},{"line":"      and events = return []","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      and sequence_events = return []","counters":[{"col_start":33,"col_end":33,"count":1}]},{"line":"      and call_data = Field.gen","counters":[]},{"line":"      and preconditions = Preconditions.gen","counters":[]},{"line":"      and use_full_commitment = Quickcheck.Generator.bool","counters":[]},{"line":"      and caller = Call_type.gen","counters":[]},{"line":"      and authorization_kind = Authorization_kind.gen in","counters":[]},{"line":"      { public_key","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      ; token_id","counters":[]},{"line":"      ; update","counters":[]},{"line":"      ; balance_change","counters":[]},{"line":"      ; increment_nonce","counters":[]},{"line":"      ; events","counters":[]},{"line":"      ; sequence_events","counters":[]},{"line":"      ; call_data","counters":[]},{"line":"      ; preconditions","counters":[]},{"line":"      ; use_full_commitment","counters":[]},{"line":"      ; caller","counters":[]},{"line":"      ; authorization_kind","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Graphql_repr = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { public_key : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          ; token_id : Token_id.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; update : Update.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          ; balance_change :","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"              (Amount.Stable.V1.t, Sgn.Stable.V1.t) Signed_poly.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          ; increment_nonce : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; sequence_events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          ; call_data : Pickles.Backend.Tick.Field.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"          ; call_depth : int","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          ; preconditions : Preconditions.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; use_full_commitment : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; caller : Token_id.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"          ; authorization_kind : Authorization_kind.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":69,"col_end":69,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"      Fields.make_creator obj ~public_key:!.public_key ~update:!.Update.deriver","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        ~token_id:!.Token_id.deriver ~balance_change:!.balance_change","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"        ~increment_nonce:!.bool ~events:!.Events.deriver","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        ~sequence_events:!.Sequence_events.deriver ~call_data:!.field","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"        ~preconditions:!.Preconditions.deriver ~use_full_commitment:!.bool","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"        ~caller:!.Token_id.deriver ~call_depth:!.int","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"        ~authorization_kind:!.Authorization_kind.deriver","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"      |> finish \"AccountUpdateBody\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"    let dummy : t =","counters":[]},{"line":"      { public_key = Public_key.Compressed.empty","counters":[]},{"line":"      ; update = Update.dummy","counters":[]},{"line":"      ; token_id = Token_id.default","counters":[]},{"line":"      ; balance_change = Amount.Signed.zero","counters":[]},{"line":"      ; increment_nonce = false","counters":[]},{"line":"      ; events = []","counters":[]},{"line":"      ; sequence_events = []","counters":[]},{"line":"      ; call_data = Field.zero","counters":[]},{"line":"      ; call_depth = 0","counters":[]},{"line":"      ; preconditions = Preconditions.accept","counters":[]},{"line":"      ; use_full_commitment = false","counters":[]},{"line":"      ; caller = Token_id.default","counters":[]},{"line":"      ; authorization_kind = None_given","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Simple = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { public_key : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          ; token_id : Token_id.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"          ; update : Update.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          ; balance_change :","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"              (Amount.Stable.V1.t, Sgn.Stable.V1.t) Signed_poly.Stable.V1.t","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          ; increment_nonce : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          ; events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"          ; sequence_events : Events'.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"          ; call_data : Pickles.Backend.Tick.Field.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"          ; call_depth : int","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          ; preconditions : Preconditions.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"          ; use_full_commitment : bool","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          ; caller : Call_type.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ; authorization_kind : Authorization_kind.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":69,"col_end":69,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Account_update.Body.V1.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { public_key : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"        ; token_id : Token_id.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"        ; update : Update.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"        ; balance_change :","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"            (Amount.Stable.V1.t, Sgn.Stable.V1.t) Signed_poly.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":72,"col_end":72,"count":0}]},{"line":"        ; increment_nonce : bool","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"        ; events : Events'.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; sequence_events : Events'.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        ; call_data : Pickles.Backend.Tick.Field.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"        ; preconditions : Preconditions.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"        ; use_full_commitment : bool","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"        ; caller : Token_id.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"        ; authorization_kind : Authorization_kind.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":27,"col_end":27,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, sexp, equal, yojson, hash, hlist, compare, fields]","counters":[{"col_start":74,"col_end":74,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let to_wire (p : t) caller : Wire.t =","counters":[]},{"line":"    { public_key = p.public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; token_id = p.token_id","counters":[]},{"line":"    ; update = p.update","counters":[]},{"line":"    ; balance_change = p.balance_change","counters":[]},{"line":"    ; increment_nonce = p.increment_nonce","counters":[]},{"line":"    ; events = p.events","counters":[]},{"line":"    ; sequence_events = p.sequence_events","counters":[]},{"line":"    ; call_data = p.call_data","counters":[]},{"line":"    ; preconditions = p.preconditions","counters":[]},{"line":"    ; use_full_commitment = p.use_full_commitment","counters":[]},{"line":"    ; caller","counters":[]},{"line":"    ; authorization_kind = p.authorization_kind","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let of_graphql_repr","counters":[]},{"line":"      ({ public_key","counters":[]},{"line":"       ; token_id","counters":[]},{"line":"       ; update","counters":[]},{"line":"       ; balance_change","counters":[]},{"line":"       ; increment_nonce","counters":[]},{"line":"       ; events","counters":[]},{"line":"       ; sequence_events","counters":[]},{"line":"       ; call_data","counters":[]},{"line":"       ; preconditions","counters":[]},{"line":"       ; use_full_commitment","counters":[]},{"line":"       ; caller","counters":[]},{"line":"       ; call_depth = _","counters":[]},{"line":"       ; authorization_kind","counters":[]},{"line":"       } :","counters":[]},{"line":"        Graphql_repr.t ) : t =","counters":[]},{"line":"    { public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; token_id","counters":[]},{"line":"    ; update","counters":[]},{"line":"    ; balance_change","counters":[]},{"line":"    ; increment_nonce","counters":[]},{"line":"    ; events","counters":[]},{"line":"    ; sequence_events","counters":[]},{"line":"    ; call_data","counters":[]},{"line":"    ; preconditions","counters":[]},{"line":"    ; use_full_commitment","counters":[]},{"line":"    ; caller","counters":[]},{"line":"    ; authorization_kind","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let to_graphql_repr","counters":[]},{"line":"      ({ public_key","counters":[]},{"line":"       ; token_id","counters":[]},{"line":"       ; update","counters":[]},{"line":"       ; balance_change","counters":[]},{"line":"       ; increment_nonce","counters":[]},{"line":"       ; events","counters":[]},{"line":"       ; sequence_events","counters":[]},{"line":"       ; call_data","counters":[]},{"line":"       ; preconditions","counters":[]},{"line":"       ; use_full_commitment","counters":[]},{"line":"       ; caller","counters":[]},{"line":"       ; authorization_kind","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) ~call_depth : Graphql_repr.t =","counters":[]},{"line":"    { Graphql_repr.public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; token_id","counters":[]},{"line":"    ; update","counters":[]},{"line":"    ; balance_change","counters":[]},{"line":"    ; increment_nonce","counters":[]},{"line":"    ; events","counters":[]},{"line":"    ; sequence_events","counters":[]},{"line":"    ; call_data","counters":[]},{"line":"    ; preconditions","counters":[]},{"line":"    ; use_full_commitment","counters":[]},{"line":"    ; caller","counters":[]},{"line":"    ; call_depth","counters":[]},{"line":"    ; authorization_kind","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  module Fee_payer = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = Mina_wire_types.Mina_base.Account_update.Body.Fee_payer.V1.t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { public_key : Public_key.Compressed.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          ; fee : Fee.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"          ; valid_until : Global_slot.Stable.V1.t option [@name \"validUntil\"]","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":48,"col_end":48,"count":0},{"col_start":50,"col_end":50,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          ; nonce : Account_nonce.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, sexp, equal, yojson, hash, compare, hlist, fields]","counters":[{"col_start":76,"col_end":76,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"      let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"      let%map public_key = Public_key.Compressed.gen","counters":[]},{"line":"      and fee = Currency.Fee.gen","counters":[]},{"line":"      and valid_until = Option.quickcheck_generator Global_slot.gen","counters":[{"col_start":50,"col_end":50,"count":1}]},{"line":"      and nonce = Account.Nonce.gen in","counters":[]},{"line":"      { public_key; fee; valid_until; nonce }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let dummy : t =","counters":[]},{"line":"      { public_key = Public_key.Compressed.empty","counters":[]},{"line":"      ; fee = Fee.zero","counters":[]},{"line":"      ; valid_until = None","counters":[]},{"line":"      ; nonce = Account_nonce.zero","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let fee obj =","counters":[]},{"line":"        iso_string obj ~name:\"Fee\" ~js_type:UInt64 ~to_string:Fee.to_string","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ~of_string:Fee.of_string","counters":[]},{"line":"      in","counters":[]},{"line":"      let ( !. ) ?skip_data = ( !. ) ?skip_data ~t_fields_annots in","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"      Fields.make_creator obj ~public_key:!.public_key ~fee:!.fee","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"        ~valid_until:","counters":[]},{"line":"          !.Fields_derivers_zkapps.Derivers.(","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"              option ~js_type:Or_undefined @@ uint32 @@ o ())","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"        ~nonce:!.uint32","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"      |> finish \"FeePayerBody\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"    let%test_unit \"json roundtrip\" =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let full = o () in","counters":[]},{"line":"      let _a = deriver full in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      [%test_eq: t] dummy (dummy |> to_json full |> of_json full)","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let of_fee_payer (t : Fee_payer.t) : t =","counters":[]},{"line":"    { public_key = t.public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; token_id = Token_id.default","counters":[]},{"line":"    ; update = Update.noop","counters":[]},{"line":"    ; balance_change =","counters":[]},{"line":"        { Signed_poly.sgn = Sgn.Neg; magnitude = Amount.of_fee t.fee }","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"    ; increment_nonce = true","counters":[]},{"line":"    ; events = []","counters":[]},{"line":"    ; sequence_events = []","counters":[]},{"line":"    ; call_data = Field.zero","counters":[]},{"line":"    ; preconditions =","counters":[]},{"line":"        { Preconditions.network =","counters":[]},{"line":"            (let valid_until =","counters":[]},{"line":"               Option.value ~default:Global_slot.max_value t.valid_until","counters":[]},{"line":"             in","counters":[]},{"line":"             { Zkapp_precondition.Protocol_state.accept with","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"               global_slot_since_genesis =","counters":[]},{"line":"                 Check { lower = Global_slot.zero; upper = valid_until }","counters":[]},{"line":"             } )","counters":[]},{"line":"        ; account = Account_precondition.Nonce t.nonce","counters":[]},{"line":"        }","counters":[]},{"line":"    ; use_full_commitment = true","counters":[]},{"line":"    ; caller = Token_id.default","counters":[]},{"line":"    ; authorization_kind = Signature","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let to_fee_payer_exn (t : t) : Fee_payer.t =","counters":[]},{"line":"    let { public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        ; token_id = _","counters":[]},{"line":"        ; update = _","counters":[]},{"line":"        ; balance_change","counters":[]},{"line":"        ; increment_nonce = _","counters":[]},{"line":"        ; events = _","counters":[]},{"line":"        ; sequence_events = _","counters":[]},{"line":"        ; call_data = _","counters":[]},{"line":"        ; preconditions","counters":[]},{"line":"        ; use_full_commitment = _","counters":[]},{"line":"        ; caller = _","counters":[]},{"line":"        ; authorization_kind = _","counters":[]},{"line":"        } =","counters":[]},{"line":"      t","counters":[]},{"line":"    in","counters":[]},{"line":"    let fee =","counters":[]},{"line":"      Currency.Fee.of_uint64","counters":[]},{"line":"        (balance_change.magnitude |> Currency.Amount.to_uint64)","counters":[{"col_start":61,"col_end":61,"count":0}]},{"line":"    in","counters":[]},{"line":"    let nonce =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match preconditions.account with","counters":[]},{"line":"      | Nonce nonce ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Mina_numbers.Account_nonce.of_uint32 nonce","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"      | Full _ | Accept ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"          failwith \"Expected a nonce for fee payer account precondition\"","counters":[]},{"line":"    in","counters":[]},{"line":"    let valid_until =","counters":[]},{"line":"      match preconditions.network.global_slot_since_genesis with","counters":[]},{"line":"      | Ignore ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"      | Check { upper; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some upper","counters":[]},{"line":"    in","counters":[]},{"line":"    { public_key; fee; valid_until; nonce }","counters":[]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    module Type_of_var (V : sig","counters":[]},{"line":"      type var","counters":[]},{"line":"    end) =","counters":[]},{"line":"    struct","counters":[]},{"line":"      type t = V.var","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Int_as_prover_ref = struct","counters":[]},{"line":"      type t = int As_prover.Ref.t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      { public_key : Public_key.Compressed.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; token_id : Token_id.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; update : Update.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; balance_change : Amount.Signed.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; increment_nonce : Boolean.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; events : Events.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; sequence_events : Sequence_events.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; call_data : Field.Var.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; preconditions : Preconditions.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; use_full_commitment : Boolean.var","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; caller : Token_id.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      ; authorization_kind : Authorization_kind.Checked.t","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving annot, hlist, fields]","counters":[]},{"line":"","counters":[]},{"line":"    let to_input","counters":[]},{"line":"        ({ public_key","counters":[]},{"line":"         ; token_id","counters":[]},{"line":"         ; update","counters":[]},{"line":"         ; balance_change","counters":[]},{"line":"         ; increment_nonce","counters":[]},{"line":"         ; events","counters":[]},{"line":"         ; sequence_events","counters":[]},{"line":"         ; call_data","counters":[]},{"line":"         ; preconditions","counters":[]},{"line":"         ; use_full_commitment","counters":[]},{"line":"         ; caller","counters":[]},{"line":"         ; authorization_kind","counters":[]},{"line":"         } :","counters":[]},{"line":"          t ) =","counters":[]},{"line":"      List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        [ Public_key.Compressed.Checked.to_input public_key","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"        ; Token_id.Checked.to_input token_id","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Update.Checked.to_input update","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"        ; Snark_params.Tick.Run.run_checked","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"            (Amount.Signed.Checked.to_input balance_change)","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ; Random_oracle_input.Chunked.packed","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"            ((increment_nonce :> Field.Var.t), 1)","counters":[]},{"line":"        ; Events.var_to_input events","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"        ; Sequence_events.var_to_input sequence_events","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"        ; Random_oracle_input.Chunked.field call_data","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"        ; Preconditions.Checked.to_input preconditions","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"        ; Random_oracle_input.Chunked.packed","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"            ((use_full_commitment :> Field.Var.t), 1)","counters":[]},{"line":"        ; Token_id.Checked.to_input caller","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"        ; Authorization_kind.Checked.to_input authorization_kind","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"        ]","counters":[]},{"line":"","counters":[]},{"line":"    let digest (t : t) =","counters":[]},{"line":"      Random_oracle.Checked.(","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        hash ~init:Hash_prefix.zkapp_body (pack_input (to_input t)))","counters":[{"col_start":52,"col_end":52,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let typ () : (Checked.t, t) Typ.t =","counters":[]},{"line":"    Typ.of_hlistable","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ Public_key.Compressed.typ","counters":[]},{"line":"      ; Token_id.typ","counters":[]},{"line":"      ; Update.typ ()","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"      ; Amount.Signed.typ","counters":[]},{"line":"      ; Boolean.typ","counters":[]},{"line":"      ; Events.typ","counters":[]},{"line":"      ; Sequence_events.typ","counters":[]},{"line":"      ; Field.typ","counters":[]},{"line":"      ; Preconditions.typ ()","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      ; Impl.Boolean.typ","counters":[]},{"line":"      ; Token_id.typ","counters":[]},{"line":"      ; Authorization_kind.typ","counters":[]},{"line":"      ]","counters":[]},{"line":"      ~var_to_hlist:Checked.to_hlist ~var_of_hlist:Checked.of_hlist","counters":[]},{"line":"      ~value_to_hlist:to_hlist ~value_of_hlist:of_hlist","counters":[]},{"line":"","counters":[]},{"line":"  let dummy : t =","counters":[]},{"line":"    { public_key = Public_key.Compressed.empty","counters":[]},{"line":"    ; update = Update.dummy","counters":[]},{"line":"    ; token_id = Token_id.default","counters":[]},{"line":"    ; balance_change = Amount.Signed.zero","counters":[]},{"line":"    ; increment_nonce = false","counters":[]},{"line":"    ; events = []","counters":[]},{"line":"    ; sequence_events = []","counters":[]},{"line":"    ; call_data = Field.zero","counters":[]},{"line":"    ; preconditions = Preconditions.accept","counters":[]},{"line":"    ; use_full_commitment = false","counters":[]},{"line":"    ; caller = Token_id.default","counters":[]},{"line":"    ; authorization_kind = None_given","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip\" =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let full = o () in","counters":[]},{"line":"    let _a = Graphql_repr.deriver full in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [%test_eq: Graphql_repr.t] Graphql_repr.dummy","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (Graphql_repr.dummy |> to_json full |> of_json full)","counters":[{"col_start":35,"col_end":35,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let to_input","counters":[]},{"line":"      ({ public_key","counters":[]},{"line":"       ; update","counters":[]},{"line":"       ; token_id","counters":[]},{"line":"       ; balance_change","counters":[]},{"line":"       ; increment_nonce","counters":[]},{"line":"       ; events","counters":[]},{"line":"       ; sequence_events","counters":[]},{"line":"       ; call_data","counters":[]},{"line":"       ; preconditions","counters":[]},{"line":"       ; use_full_commitment","counters":[]},{"line":"       ; caller","counters":[]},{"line":"       ; authorization_kind","counters":[]},{"line":"       } :","counters":[]},{"line":"        t ) =","counters":[]},{"line":"    List.reduce_exn ~f:Random_oracle_input.Chunked.append","counters":[{"col_start":4,"col_end":4,"count":1}]},{"line":"      [ Public_key.Compressed.to_input public_key","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"      ; Token_id.to_input token_id","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Update.to_input update","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"      ; Amount.Signed.to_input balance_change","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"      ; Random_oracle_input.Chunked.packed (field_of_bool increment_nonce, 1)","counters":[{"col_start":41,"col_end":41,"count":1},{"col_start":56,"col_end":56,"count":1}]},{"line":"      ; Events.to_input events","counters":[{"col_start":22,"col_end":22,"count":1}]},{"line":"      ; Sequence_events.to_input sequence_events","counters":[{"col_start":31,"col_end":31,"count":1}]},{"line":"      ; Random_oracle_input.Chunked.field call_data","counters":[{"col_start":40,"col_end":40,"count":1}]},{"line":"      ; Preconditions.to_input preconditions","counters":[{"col_start":29,"col_end":29,"count":1}]},{"line":"      ; Random_oracle_input.Chunked.packed (field_of_bool use_full_commitment, 1)","counters":[{"col_start":41,"col_end":41,"count":1},{"col_start":56,"col_end":56,"count":1}]},{"line":"      ; Token_id.to_input caller","counters":[{"col_start":24,"col_end":24,"count":1}]},{"line":"      ; Authorization_kind.to_input authorization_kind","counters":[{"col_start":34,"col_end":34,"count":1}]},{"line":"      ]","counters":[]},{"line":"","counters":[]},{"line":"  let digest (t : t) =","counters":[]},{"line":"    Random_oracle.(hash ~init:Hash_prefix.zkapp_body (pack_input (to_input t)))","counters":[{"col_start":4,"col_end":4,"count":1},{"col_start":63,"col_end":63,"count":1},{"col_start":73,"col_end":73,"count":1}]},{"line":"","counters":[]},{"line":"  module Digested = struct","counters":[]},{"line":"    type t = Random_oracle.Digest.t","counters":[]},{"line":"","counters":[]},{"line":"    module Checked = struct","counters":[]},{"line":"      type t = Random_oracle.Checked.Digest.t","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let gen caller =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map public_key = Public_key.Compressed.gen","counters":[]},{"line":"    and token_id = Token_id.gen","counters":[]},{"line":"    and update = Update.gen ()","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    and balance_change = Currency.Amount.Signed.gen","counters":[]},{"line":"    and increment_nonce = Quickcheck.Generator.bool","counters":[]},{"line":"    and events = return []","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    and sequence_events = return []","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"    and call_data = Field.gen","counters":[]},{"line":"    and preconditions = Preconditions.gen","counters":[]},{"line":"    and use_full_commitment = Quickcheck.Generator.bool","counters":[]},{"line":"    and authorization_kind = Authorization_kind.gen in","counters":[]},{"line":"    { public_key","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; token_id","counters":[]},{"line":"    ; update","counters":[]},{"line":"    ; balance_change","counters":[]},{"line":"    ; increment_nonce","counters":[]},{"line":"    ; events","counters":[]},{"line":"    ; sequence_events","counters":[]},{"line":"    ; call_data","counters":[]},{"line":"    ; preconditions","counters":[]},{"line":"    ; use_full_commitment","counters":[]},{"line":"    ; caller","counters":[]},{"line":"    ; authorization_kind","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  module Graphql_repr = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        (** An account update in a zkApp transaction *)","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { body : Body.Graphql_repr.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"          ; authorization : Control.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":69,"col_end":69,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let deriver obj =","counters":[]},{"line":"      let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"      Fields.make_creator obj","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        ~body:!.Body.Graphql_repr.deriver","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"        ~authorization:!.Control.deriver","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"      |> finish \"ZkappAccountUpdate\" ~t_toplevel_annots","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Simple = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { body : Body.Simple.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"          ; authorization : Control.Stable.V2.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":69,"col_end":69,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Wire = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":2}]},{"line":"          { body : Body.Wire.Stable.V1.t; authorization : Control.Stable.V2.t }","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":54,"col_end":54,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":76,"col_end":76,"count":0}]},{"line":"        [@@deriving sexp, equal, yojson, hash, compare]","counters":[{"col_start":54,"col_end":54,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"      let open Quickcheck.Generator.Let_syntax in","counters":[]},{"line":"      let%map body = Body.Wire.gen","counters":[]},{"line":"      and authorization = Control.gen_with_dummies in","counters":[]},{"line":"      { body; authorization }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let quickcheck_generator : t Quickcheck.Generator.t = gen","counters":[]},{"line":"","counters":[]},{"line":"    let quickcheck_observer : t Quickcheck.Observer.t =","counters":[]},{"line":"      Quickcheck.Observer.of_hash (module Stable.Latest)","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"","counters":[]},{"line":"    let quickcheck_shrinker : t Quickcheck.Shrinker.t =","counters":[]},{"line":"      Quickcheck.Shrinker.empty ()","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      (** A account_update to a zkApp transaction *)","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Account_update.V1.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { body : Body.Stable.V1.t; authorization : Control.Stable.V2.t }","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":35,"col_end":35,"count":0},{"col_start":47,"col_end":47,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"      [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":67,"col_end":67,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let of_graphql_repr ({ body; authorization } : Graphql_repr.t) : t =","counters":[]},{"line":"    { authorization; body = Body.of_graphql_repr body }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let to_graphql_repr ({ body; authorization } : t) ~call_depth : Graphql_repr.t","counters":[]},{"line":"      =","counters":[]},{"line":"    { authorization; body = Body.to_graphql_repr ~call_depth body }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  let gen caller : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Generator.Let_syntax in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map body = Body.gen caller","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"    and authorization = Control.gen_with_dummies in","counters":[]},{"line":"    { body; authorization }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_wire (p : t) caller : Wire.t =","counters":[]},{"line":"    { body = Body.to_wire p.body caller; authorization = p.authorization }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"","counters":[]},{"line":"  let digest (t : t) = Body.digest t.body","counters":[{"col_start":23,"col_end":23,"count":1}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    type t = Body.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    let digest (t : t) = Body.Checked.digest t","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip dummy\" =","counters":[]},{"line":"    let dummy : Graphql_repr.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      to_graphql_repr ~call_depth:0","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        { body = Body.dummy; authorization = Control.dummy_of_tag Signature }","counters":[{"col_start":64,"col_end":64,"count":0}]},{"line":"    in","counters":[]},{"line":"    let module Fd = Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = Graphql_repr.deriver @@ Fd.o () in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    [%test_eq: Graphql_repr.t] dummy","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (dummy |> Fd.to_json full |> Fd.of_json full)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Fee_payer = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Mina_wire_types.Mina_base.Account_update.Fee_payer.V1.t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { body : Body.Fee_payer.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":13,"col_end":13,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"        ; authorization : Signature.Stable.V1.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        }","counters":[]},{"line":"      [@@deriving annot, sexp, equal, yojson, hash, compare, fields]","counters":[{"col_start":67,"col_end":67,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[]},{"line":"    let%map body = Body.Fee_payer.gen in","counters":[]},{"line":"    let authorization = Signature.dummy in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    { body; authorization }","counters":[]},{"line":"","counters":[]},{"line":"  let quickcheck_generator : t Quickcheck.Generator.t = gen","counters":[]},{"line":"","counters":[]},{"line":"  let quickcheck_observer : t Quickcheck.Observer.t =","counters":[]},{"line":"    Quickcheck.Observer.of_hash (module Stable.Latest)","counters":[{"col_start":30,"col_end":30,"count":1}]},{"line":"","counters":[]},{"line":"  let quickcheck_shrinker : t Quickcheck.Shrinker.t =","counters":[]},{"line":"    Quickcheck.Shrinker.empty ()","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"","counters":[]},{"line":"  let account_id (t : t) : Account_id.t =","counters":[]},{"line":"    Account_id.create t.body.public_key Token_id.default","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let to_account_update (t : t) : T.t =","counters":[]},{"line":"    { authorization = Control.Signature t.authorization","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    ; body = Body.of_fee_payer t.body","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let deriver obj =","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let ( !. ) = ( !. ) ~t_fields_annots in","counters":[]},{"line":"    Fields.make_creator obj ~body:!.Body.Fee_payer.deriver","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"      ~authorization:!.Control.signature_deriver","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    |> finish \"ZkappFeePayer\" ~t_toplevel_annots","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"json roundtrip\" =","counters":[]},{"line":"    let dummy : t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { body = Body.Fee_payer.dummy; authorization = Signature.dummy }","counters":[]},{"line":"    in","counters":[]},{"line":"    let open Fields_derivers_zkapps.Derivers in","counters":[]},{"line":"    let full = o () in","counters":[]},{"line":"    let _a = deriver full in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [%test_eq: t] dummy (dummy |> to_json full |> of_json full)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"let account_id (t : t) : Account_id.t =","counters":[]},{"line":"  Account_id.create t.body.public_key t.body.token_id","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let of_fee_payer ({ body; authorization } : Fee_payer.t) : t =","counters":[]},{"line":"  { authorization = Signature authorization; body = Body.of_fee_payer body }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"","counters":[]},{"line":"(** The change in balance to apply to the target account of this account_update.","counters":[]},{"line":"      When this is negative, the amount will be withdrawn from the account and","counters":[]},{"line":"      made available to later zkapp_command in the same transaction.","counters":[]},{"line":"      When this is positive, the amount will be deposited into the account from","counters":[]},{"line":"      the funds made available by previous zkapp_command in the same transaction.","counters":[]},{"line":"*)","counters":[]},{"line":"let balance_change (t : t) : Amount.Signed.t = t.body.balance_change","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"let protocol_state_precondition (t : t) : Zkapp_precondition.Protocol_state.t =","counters":[]},{"line":"  t.body.preconditions.network","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let public_key (t : t) : Public_key.Compressed.t = t.body.public_key","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"let token_id (t : t) : Token_id.t = t.body.token_id","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"let use_full_commitment (t : t) : bool = t.body.use_full_commitment","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"let increment_nonce (t : t) : bool = t.body.increment_nonce","counters":[{"col_start":37,"col_end":37,"count":0},{"col_start":58,"col_end":58,"count":1}]}]}