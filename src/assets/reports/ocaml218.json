{"filename":"src/lib/mina_lib/conf_dir.ml","lines":[{"line":"(* conf_dir.ml -- config directory management *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core","counters":[]},{"line":"","counters":[]},{"line":"let compute_conf_dir conf_dir_opt =","counters":[]},{"line":"  let home = Sys.home_directory () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  Option.value ~default:(home ^/ Cli_lib.Default.conf_dir_name) conf_dir_opt","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"let check_and_set_lockfile ~logger conf_dir =","counters":[]},{"line":"  let lockfile = conf_dir ^/ \".mina-lock\" in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  match Sys.file_exists lockfile with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `No -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let open Async in","counters":[]},{"line":"      match%map","counters":[]},{"line":"        Monitor.try_with ~here:[%here] ~extract_exn:true (fun () ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            Writer.with_file ~exclusive:true lockfile ~f:(fun writer ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                let pid = Unix.getpid () in","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                return (Writer.writef writer \"%d\\n\" (Pid.to_int pid)) ) )","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          [%log info] \"Created daemon lockfile $lockfile\"","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"            ~metadata:[ (\"lockfile\", `String lockfile) ] ;","counters":[]},{"line":"          Exit_handlers.register_async_shutdown_handler ~logger","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            ~description:\"Remove daemon lockfile\" (fun () ->","counters":[]},{"line":"              match%bind Sys.file_exists lockfile with","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"              | `Yes ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  Unix.unlink lockfile","counters":[]},{"line":"              | _ ->","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  return () )","counters":[]},{"line":"      | Error exn ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error.tag_arg (Error.of_exn exn)","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"            \"Could not create the daemon lockfile\" (\"lockfile\", lockfile)","counters":[]},{"line":"            [%sexp_of: string * string]","counters":[]},{"line":"          |> Error.raise )","counters":[]},{"line":"  | `Yes -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let open Async in","counters":[]},{"line":"      match%map","counters":[]},{"line":"        Monitor.try_with ~here:[%here] ~extract_exn:true (fun () ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            Reader.with_file ~exclusive:true lockfile ~f:(fun reader ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                let%bind pid =","counters":[]},{"line":"                  let rm_and_raise () =","counters":[]},{"line":"                    Core.Unix.unlink lockfile ;","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                    Mina_user_error.raise","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      \"Invalid format in lockfile (removing it)\"","counters":[]},{"line":"                  in","counters":[]},{"line":"                  match%map Reader.read_line reader with","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"                  | `Ok s -> (","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      try Pid.of_string s with _ -> rm_and_raise () )","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"                  | `Eof ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      rm_and_raise ()","counters":[]},{"line":"                in","counters":[]},{"line":"                let still_running =","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (* using signal 0 does not send a signal; see man page `kill(2)` *)","counters":[]},{"line":"                  match Signal.(send zero) (`Pid pid) with","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"                  | `Ok ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      true","counters":[]},{"line":"                  | `No_such_process ->","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      false","counters":[]},{"line":"                in","counters":[]},{"line":"                if still_running then","counters":[]},{"line":"                  if Pid.equal pid (Unix.getpid ()) then","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"                    (* can happen when running in Docker *)","counters":[]},{"line":"                    return ()","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  else","counters":[]},{"line":"                    Mina_user_error.raisef","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                      \"A daemon (process id %d) is already running with the \\","counters":[]},{"line":"                       current configuration directory (%s)\"","counters":[]},{"line":"                      (Pid.to_int pid) conf_dir","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"                else (","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"                  [%log info] \"Removing lockfile for terminated process\"","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"                    ~metadata:","counters":[]},{"line":"                      [ (\"lockfile\", `String lockfile)","counters":[]},{"line":"                      ; (\"pid\", `Int (Pid.to_int pid))","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"                      ] ;","counters":[]},{"line":"                  Unix.unlink lockfile ) ) )","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok () ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          ()","counters":[]},{"line":"      | Error exn ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Error.tag_arg (Error.of_exn exn) \"Error processing lockfile\"","counters":[{"col_start":22,"col_end":22,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"            (\"lockfile\", lockfile) [%sexp_of: string * string]","counters":[]},{"line":"          |> Error.raise )","counters":[]},{"line":"  | `Unknown ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error.create \"Could not determine whether the daemon lockfile exists\"","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"        (\"lockfile\", lockfile) [%sexp_of: string * string]","counters":[]},{"line":"      |> Error.raise","counters":[]},{"line":"","counters":[]},{"line":"let get_hw_info () =","counters":[]},{"line":"  let open Async in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind linux_info =","counters":[]},{"line":"    if String.equal Sys.os_type \"Unix\" then","counters":[]},{"line":"      match%map Process.run ~prog:\"uname\" ~args:[ \"-a\" ] () with","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      | Ok s when String.is_prefix s ~prefix:\"Linux\" ->","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"          Some s","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"    else return None","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  in","counters":[]},{"line":"  if Option.is_some linux_info then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let linux_hw_progs =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      [ (\"cat\", [ \"/etc/os-release\" ])","counters":[]},{"line":"      ; (\"lscpu\", [])","counters":[]},{"line":"      ; (\"lsgpu\", [])","counters":[]},{"line":"      ; (\"lsmem\", [])","counters":[]},{"line":"      ; (\"lsblk\", [])","counters":[]},{"line":"      ]","counters":[]},{"line":"    in","counters":[]},{"line":"    let%map outputs =","counters":[]},{"line":"      Deferred.List.map linux_hw_progs ~f:(fun (prog, args) ->","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"          let header =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            sprintf \"*** Output from '%s' ***\\n\"","counters":[]},{"line":"              (String.concat ~sep:\" \" (prog :: args))","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"          in","counters":[]},{"line":"          let%bind output =","counters":[]},{"line":"            match%map Process.run_lines ~prog ~args () with","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            | Ok lines ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                lines","counters":[]},{"line":"            | Error err ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                [ sprintf \"Error: %s\" (Error.to_string_hum err) ]","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"          in","counters":[]},{"line":"          return ((header :: output) @ [ \"\" ]) )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    Some (Option.value_exn linux_info :: List.concat outputs)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":51,"col_end":51,"count":0}]},{"line":"  else (* TODO: Mac, other Unixes *)","counters":[]},{"line":"    return None","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"let export_logs_to_tar ?basename ~conf_dir =","counters":[]},{"line":"  let open Async in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Deferred.Result.Let_syntax in","counters":[]},{"line":"  let basename =","counters":[]},{"line":"    match basename with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let date, day = Time.(now () |> to_date_ofday ~zone:Zone.utc) in","counters":[{"col_start":32,"col_end":32,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"        let Time.Span.Parts.{ hr; min; sec; _ } = Time.Ofday.to_parts day in","counters":[]},{"line":"        sprintf \"%s_%02d-%02d-%02d\" (Date.to_string date) hr min sec","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":14,"col_end":14,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    | Some basename ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        basename","counters":[]},{"line":"  in","counters":[]},{"line":"  let export_dir = conf_dir ^/ \"exported_logs\" in","counters":[]},{"line":"  ( match Core.Sys.file_exists export_dir with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | `No ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Core.Unix.mkdir export_dir","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      () ) ;","counters":[]},{"line":"  let tarfile = export_dir ^/ basename ^ \".tar.gz\" in","counters":[]},{"line":"  let log_files =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Core.Sys.ls_dir conf_dir","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"    |> List.filter ~f:(String.is_substring ~substring:\".log\")","counters":[]},{"line":"  in","counters":[]},{"line":"  let%bind.Deferred hw_info_opt = get_hw_info () in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"  let%bind.Deferred hw_file_opt =","counters":[]},{"line":"    if Option.is_some hw_info_opt then","counters":[]},{"line":"      let open Async in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let hw_info = \"hardware.info\" in","counters":[]},{"line":"      let hw_info_file = conf_dir ^/ hw_info in","counters":[]},{"line":"      match%map","counters":[]},{"line":"        Monitor.try_with ~here:[%here] ~extract_exn:true (fun () ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"            Writer.with_file ~exclusive:true hw_info_file ~f:(fun writer ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"                Deferred.List.map (Option.value_exn hw_info_opt) ~f:(fun line ->","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"                    return (Writer.write_line writer line) ) ) )","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"      with","counters":[]},{"line":"      | Ok _units ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some hw_info","counters":[]},{"line":"      | Error _exn ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (* carry on, despite the error *)","counters":[]},{"line":"          None","counters":[]},{"line":"    else Deferred.return None","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"  in","counters":[]},{"line":"  let base_files = \"mina.version\" :: log_files in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let files =","counters":[]},{"line":"    Option.value_map hw_file_opt ~default:base_files ~f:(fun hw_file ->","counters":[]},{"line":"        hw_file :: base_files )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  let tmp_dir = Filename.temp_dir ~in_dir:\"/tmp\" (\"mina-logs_\" ^ basename) \"\" in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let files_in_dir dir = List.map files ~f:(fun file -> dir ^/ file) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"  let conf_dir_files = files_in_dir conf_dir in","counters":[]},{"line":"  let%bind _result0 =","counters":[]},{"line":"    Process.run ~prog:\"cp\" ~args:((\"-p\" :: conf_dir_files) @ [ tmp_dir ]) ()","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"  in","counters":[]},{"line":"  let%bind _result1 =","counters":[]},{"line":"    Process.run ~prog:\"tar\"","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"      ~args:","counters":[]},{"line":"        ( [ \"-C\"","counters":[]},{"line":"          ; tmp_dir","counters":[]},{"line":"          ; (* Create gzipped tar file [file]. *)","counters":[]},{"line":"            \"-czf\"","counters":[]},{"line":"          ; tarfile","counters":[]},{"line":"          ]","counters":[]},{"line":"        @ files )","counters":[]},{"line":"      ()","counters":[]},{"line":"  in","counters":[]},{"line":"  let tmp_dir_files = files_in_dir tmp_dir in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let open Deferred.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind () = Deferred.List.iter tmp_dir_files ~f:Unix.remove in","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"  let%bind () = Unix.rmdir tmp_dir in","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"  Deferred.Or_error.return tarfile","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":33,"col_end":33,"count":2}]}]}