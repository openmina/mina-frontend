{"filename":"src/lib/vrf_lib/integrated.ml","lines":[{"line":"module Make","counters":[]},{"line":"    (Impl : Snarky_backendless.Snark_intf.S) (Scalar : sig","counters":[]},{"line":"      type value","counters":[]},{"line":"","counters":[]},{"line":"      type var","counters":[]},{"line":"    end) (Group : sig","counters":[]},{"line":"      open Impl","counters":[]},{"line":"","counters":[]},{"line":"      type value","counters":[]},{"line":"","counters":[]},{"line":"      type var","counters":[]},{"line":"","counters":[]},{"line":"      val scale : value -> Scalar.value -> value","counters":[]},{"line":"","counters":[]},{"line":"      module Checked : sig","counters":[]},{"line":"        module Shifted : sig","counters":[]},{"line":"          module type S =","counters":[]},{"line":"            Snarky_curves.Shifted_intf","counters":[]},{"line":"              with type 'a checked := 'a Checked.t","counters":[]},{"line":"               and type boolean_var := Boolean.var","counters":[]},{"line":"               and type curve_var := var","counters":[]},{"line":"","counters":[]},{"line":"          type 'a m = (module S with type t = 'a)","counters":[]},{"line":"        end","counters":[]},{"line":"","counters":[]},{"line":"        val scale :","counters":[]},{"line":"             (module Shifted.S with type t = 'shifted)","counters":[]},{"line":"          -> var","counters":[]},{"line":"          -> Scalar.var","counters":[]},{"line":"          -> init:'shifted","counters":[]},{"line":"          -> 'shifted Checked.t","counters":[]},{"line":"","counters":[]},{"line":"        val scale_generator :","counters":[]},{"line":"             (module Shifted.S with type t = 'shifted)","counters":[]},{"line":"          -> Scalar.var","counters":[]},{"line":"          -> init:'shifted","counters":[]},{"line":"          -> 'shifted Checked.t","counters":[]},{"line":"      end","counters":[]},{"line":"    end) (Message : sig","counters":[]},{"line":"      type value","counters":[]},{"line":"","counters":[]},{"line":"      type var","counters":[]},{"line":"","counters":[]},{"line":"      val hash_to_group :","counters":[]},{"line":"           constraint_constants:Genesis_constants.Constraint_constants.t","counters":[]},{"line":"        -> value","counters":[]},{"line":"        -> Group.value","counters":[]},{"line":"","counters":[]},{"line":"      module Checked : sig","counters":[]},{"line":"        val hash_to_group : var -> Group.var Impl.Checked.t","counters":[]},{"line":"      end","counters":[]},{"line":"    end) (Output_hash : sig","counters":[]},{"line":"      type t","counters":[]},{"line":"","counters":[]},{"line":"      type var","counters":[]},{"line":"","counters":[]},{"line":"      val hash :","counters":[]},{"line":"           constraint_constants:Genesis_constants.Constraint_constants.t","counters":[]},{"line":"        -> Message.value","counters":[]},{"line":"        -> Group.value","counters":[]},{"line":"        -> t","counters":[]},{"line":"","counters":[]},{"line":"      module Checked : sig","counters":[]},{"line":"        val hash : Message.var -> Group.var -> var Impl.Checked.t","counters":[]},{"line":"      end","counters":[]},{"line":"    end) : sig","counters":[]},{"line":"  val eval :","counters":[]},{"line":"       constraint_constants:Genesis_constants.Constraint_constants.t","counters":[]},{"line":"    -> private_key:Scalar.value","counters":[]},{"line":"    -> Message.value","counters":[]},{"line":"    -> Output_hash.t","counters":[]},{"line":"","counters":[]},{"line":"  module Checked : sig","counters":[]},{"line":"    val eval :","counters":[]},{"line":"         'shifted Group.Checked.Shifted.m","counters":[]},{"line":"      -> private_key:Scalar.var","counters":[]},{"line":"      -> Message.var","counters":[]},{"line":"      -> Output_hash.var Impl.Checked.t","counters":[]},{"line":"","counters":[]},{"line":"    val eval_and_check_public_key :","counters":[]},{"line":"         'shifted Group.Checked.Shifted.m","counters":[]},{"line":"      -> private_key:Scalar.var","counters":[]},{"line":"      -> public_key:Group.var","counters":[]},{"line":"      -> Message.var","counters":[]},{"line":"      -> Output_hash.var Impl.Checked.t","counters":[]},{"line":"  end","counters":[]},{"line":"end = struct","counters":[]},{"line":"  open Impl","counters":[]},{"line":"","counters":[]},{"line":"  let eval ~constraint_constants ~private_key m =","counters":[]},{"line":"    let h = Message.hash_to_group ~constraint_constants m in","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"    let u = Group.scale h private_key in","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"    Output_hash.hash ~constraint_constants m u","counters":[{"col_start":4,"col_end":4,"count":2}]},{"line":"","counters":[]},{"line":"  module Checked = struct","counters":[]},{"line":"    open Let_syntax","counters":[]},{"line":"","counters":[]},{"line":"    let eval (type shifted) ((module Shifted) : shifted Group.Checked.Shifted.m)","counters":[]},{"line":"        ~private_key m =","counters":[]},{"line":"      let%bind h = Message.Checked.hash_to_group m in","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"      let%bind u =","counters":[]},{"line":"        (* This use of unshift_nonzero is acceptable since if h^private_key = 0 then","counters":[]},{"line":"           the prover had a bad private key *)","counters":[]},{"line":"        Group.Checked.scale (module Shifted) h private_key ~init:Shifted.zero","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"        >>= Shifted.unshift_nonzero","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"      in","counters":[]},{"line":"      Output_hash.Checked.hash m u","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let eval_and_check_public_key (type shifted)","counters":[]},{"line":"        ((module Shifted) : shifted Group.Checked.Shifted.m) ~private_key","counters":[]},{"line":"        ~public_key message =","counters":[]},{"line":"      let%bind () =","counters":[]},{"line":"        with_label __LOC__ (fun () ->","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"            let%bind public_key_shifted = Shifted.(add zero public_key) in","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"            Group.Checked.scale_generator","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              (module Shifted)","counters":[]},{"line":"              private_key ~init:Shifted.zero","counters":[]},{"line":"            >>= Shifted.Assert.equal public_key_shifted )","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"      in","counters":[]},{"line":"      eval (module Shifted) ~private_key message","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}