{"filename":"src/libp2p_ipc/rpcs.ml","lines":[{"line":"(* TODO: it would be a good idea to code generate this file from the capnp definitions, if feasible *)","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Build","counters":[]},{"line":"open Ipc","counters":[]},{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type Rpc_intf = sig","counters":[]},{"line":"  val name : string","counters":[]},{"line":"","counters":[]},{"line":"  module Request : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val to_rpc_request_body : t -> rpc_request_body","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    val of_rpc_response_body : rpc_response_body -> t option","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type ('a, 'b) rpc =","counters":[]},{"line":"  (module Rpc_intf with type Request.t = 'a and type Response.t = 'b)","counters":[]},{"line":"","counters":[]},{"line":"module Configure = struct","counters":[]},{"line":"  let name = \"Configure\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.Configure.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.Configure req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.Configure.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.Configure resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~libp2p_config =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.Configure in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) (reader_op Request.config_set_reader libp2p_config)","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module SetGatingConfig = struct","counters":[]},{"line":"  let name = \"SetGatingConfig\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.SetGatingConfig.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.SetGatingConfig req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.SetGatingConfig.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.SetGatingConfig resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~gating_config =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.SetGatingConfig in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      (reader_op Request.gating_config_set_reader gating_config)","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Listen = struct","counters":[]},{"line":"  let name = \"Listen\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.Listen.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.Listen req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.Listen.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.Listen resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~iface =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.Listen in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) (builder_op Request.iface_set_builder iface)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module GetListeningAddrs = struct","counters":[]},{"line":"  let name = \"GetListeningAddrs\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.GetListeningAddrs.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.GetListeningAddrs req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.GetListeningAddrs.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.GetListeningAddrs resp","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ->","counters":[]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request () =","counters":[]},{"line":"    build' (module Builder.Libp2pHelperInterface.GetListeningAddrs.Request) noop","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module BeginAdvertising = struct","counters":[]},{"line":"  let name = \"BeginAdvertising\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.BeginAdvertising.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.BeginAdvertising req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.BeginAdvertising.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.BeginAdvertising resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request () =","counters":[]},{"line":"    build' (module Builder.Libp2pHelperInterface.BeginAdvertising.Request) noop","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module AddPeer = struct","counters":[]},{"line":"  let name = \"AddPeer\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.AddPeer.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.AddPeer req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.AddPeer.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.AddPeer resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~multiaddr ~is_seed =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.AddPeer in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(","counters":[]},{"line":"        builder_op multiaddr_set_builder multiaddr *> op is_seed_set is_seed)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module ListPeers = struct","counters":[]},{"line":"  let name = \"ListPeers\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.ListPeers.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.ListPeers req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.ListPeers.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.ListPeers resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request () =","counters":[]},{"line":"    build' (module Builder.Libp2pHelperInterface.ListPeers.Request) noop","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module BandwidthInfo = struct","counters":[]},{"line":"  let name = \"BandwidthInfo\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.BandwidthInfo.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.BandwidthInfo req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.BandwidthInfo.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.BandwidthInfo resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request () =","counters":[]},{"line":"    build' (module Builder.Libp2pHelperInterface.BandwidthInfo.Request) noop","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module GenerateKeypair = struct","counters":[]},{"line":"  let name = \"GenerateKeypair\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.GenerateKeypair.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.GenerateKeypair req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.GenerateKeypair.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.GenerateKeypair resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request () =","counters":[]},{"line":"    build' (module Builder.Libp2pHelperInterface.GenerateKeypair.Request) noop","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Publish = struct","counters":[]},{"line":"  let name = \"Publish\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.Publish.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.Publish req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.Publish.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.Publish resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~topic ~data =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.Publish in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) Request.(op topic_set topic *> op data_set data)","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Subscribe = struct","counters":[]},{"line":"  let name = \"Subscribe\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.Subscribe.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.Subscribe req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.Subscribe.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.Subscribe resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~topic ~subscription_id =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.Subscribe in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(","counters":[]},{"line":"        op topic_set topic","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"        *> reader_op subscription_id_set_reader subscription_id)","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Unsubscribe = struct","counters":[]},{"line":"  let name = \"Unsubscribe\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.Unsubscribe.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.Unsubscribe req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.Unsubscribe.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.Unsubscribe resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~subscription_id =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.Unsubscribe in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(reader_op subscription_id_set_reader subscription_id)","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module AddStreamHandler = struct","counters":[]},{"line":"  let name = \"AddStreamHandler\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.AddStreamHandler.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.AddStreamHandler req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.AddStreamHandler.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.AddStreamHandler resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~protocol =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.AddStreamHandler in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) Request.(op protocol_set protocol)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module RemoveStreamHandler = struct","counters":[]},{"line":"  let name = \"RemoveStreamHandler\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.RemoveStreamHandler.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.RemoveStreamHandler req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.RemoveStreamHandler.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.RemoveStreamHandler resp","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ->","counters":[]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~protocol =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.RemoveStreamHandler in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) (op Request.protocol_set protocol)","counters":[{"col_start":30,"col_end":30,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module OpenStream = struct","counters":[]},{"line":"  let name = \"OpenStream\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.OpenStream.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.OpenStream req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.OpenStream.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.OpenStream resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~peer_id ~protocol =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.OpenStream in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(","counters":[]},{"line":"        builder_op peer_set_builder peer_id *> op protocol_id_set protocol)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":45,"col_end":45,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module CloseStream = struct","counters":[]},{"line":"  let name = \"CloseStream\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.CloseStream.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.CloseStream req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.CloseStream.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.CloseStream resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~stream_id =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.CloseStream in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) Request.(reader_op stream_id_set_reader stream_id)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module ResetStream = struct","counters":[]},{"line":"  let name = \"ResetStream\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.ResetStream.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.ResetStream req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.ResetStream.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.ResetStream resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~stream_id =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.ResetStream in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) Request.(reader_op stream_id_set_reader stream_id)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module SendStream = struct","counters":[]},{"line":"  let name = \"SendStream\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.SendStream.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.SendStream req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.SendStream.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.SendStream resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~stream_id ~data =","counters":[]},{"line":"    let open Builder in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Libp2pHelperInterface.SendStream in","counters":[]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(","counters":[]},{"line":"        reader_op Request.msg_set_reader","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          (build","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"             (module StreamMessage)","counters":[]},{"line":"             ( reader_op StreamMessage.stream_id_set_reader stream_id","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"             *> op StreamMessage.data_set data ) ))","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":17,"col_end":17,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module SetNodeStatus = struct","counters":[]},{"line":"  let name = \"SetNodeStatus\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.SetNodeStatus.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.SetNodeStatus req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.SetNodeStatus.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.SetNodeStatus resp ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~data =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.SetNodeStatus in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build' (module Request) Request.(op Request.status_set data)","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module GetPeerNodeStatus = struct","counters":[]},{"line":"  let name = \"GetPeerNodeStatus\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.GetPeerNodeStatus.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.GetPeerNodeStatus req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.GetPeerNodeStatus.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.GetPeerNodeStatus resp","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"        ->","counters":[]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~peer_multiaddr =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.GetPeerNodeStatus in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      Request.(builder_op Request.peer_set_builder peer_multiaddr)","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module TestDecodeBitswapBlocks = struct","counters":[]},{"line":"  let name = \"TestDecodeBitswapBlocks\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.TestDecodeBitswapBlocks.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.TestDecodeBitswapBlocks req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.TestDecodeBitswapBlocks.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.TestDecodeBitswapBlocks","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          resp ->","counters":[]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~blocks ~root_block_hash =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.TestDecodeBitswapBlocks in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      ( list_op Request.blocks_set_list","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          (List.map blocks ~f:(fun (hash, block) ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"               build'","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"                 (module Builder.BlockWithId)","counters":[]},{"line":"                 ( op Builder.BlockWithId.blake2b_hash_set","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                     (Blake2.to_raw_string hash)","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"                 *> op Builder.BlockWithId.block_set block ) ) )","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":21,"col_end":21,"count":0}]},{"line":"      *> builder_op Request.root_block_id_set_builder","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"           (build'","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"              (module Builder.RootBlockId)","counters":[]},{"line":"              (op Builder.RootBlockId.blake2b_hash_set","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                 (Blake2.to_raw_string root_block_hash) ) ) )","counters":[{"col_start":37,"col_end":37,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module TestEncodeBitswapBlocks = struct","counters":[]},{"line":"  let name = \"TestEncodeBitswapBlocks\"","counters":[]},{"line":"","counters":[]},{"line":"  module Request = struct","counters":[]},{"line":"    type t = Builder.Libp2pHelperInterface.TestEncodeBitswapBlocks.Request.t","counters":[]},{"line":"","counters":[]},{"line":"    let to_rpc_request_body req =","counters":[]},{"line":"      Builder.Libp2pHelperInterface.RpcRequest.TestEncodeBitswapBlocks req","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Response = struct","counters":[]},{"line":"    type t = Reader.Libp2pHelperInterface.TestEncodeBitswapBlocks.Response.t","counters":[]},{"line":"","counters":[]},{"line":"    let of_rpc_response_body = function","counters":[]},{"line":"      | Reader.Libp2pHelperInterface.RpcResponseSuccess.TestEncodeBitswapBlocks","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          resp ->","counters":[]},{"line":"          Some resp","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let create_request ~max_block_size ~data =","counters":[]},{"line":"    let open Builder.Libp2pHelperInterface.TestEncodeBitswapBlocks in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    build'","counters":[]},{"line":"      (module Request)","counters":[]},{"line":"      ( op Request.data_set data","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"      *> op Request.max_block_size_set_int max_block_size )","counters":[{"col_start":7,"col_end":7,"count":0},{"col_start":10,"col_end":10,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}