{"filename":"src/lib/pipe_lib/linear_pipe.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Async_kernel","counters":[]},{"line":"module Writer = Pipe.Writer","counters":[]},{"line":"","counters":[]},{"line":"module Reader = struct","counters":[]},{"line":"  type 'a t = { pipe : 'a Pipe.Reader.t; mutable has_reader : bool }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let create () =","counters":[]},{"line":"  let r, w = Pipe.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ({ Reader.pipe = r; has_reader = false }, w)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let wrap_reader reader = { Reader.pipe = reader; has_reader = false }","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"let force_write_maybe_drop_head ~capacity writer reader x =","counters":[]},{"line":"  if Pipe.length reader.Reader.pipe > capacity then","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"    ignore","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Pipe.read_now reader.Reader.pipe","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        : [ `Eof | `Nothing_available | `Ok of 'a ] ) ;","counters":[]},{"line":"  Pipe.write_without_pushback writer x","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let create_reader ~close_on_exception f =","counters":[]},{"line":"  let r = Pipe.create_reader ~close_on_exception f in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { Reader.pipe = r; has_reader = false }","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let write w x =","counters":[]},{"line":"  ( if Pipe.is_closed w then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let logger = Logger.create () in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    [%log warn] \"writing to closed linear pipe\" ~metadata:[] ) ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":14,"col_end":14,"count":0}]},{"line":"  Pipe.write w x","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let write_if_open = Pipe.write_if_open","counters":[]},{"line":"","counters":[]},{"line":"let write_without_pushback = Pipe.write_without_pushback","counters":[]},{"line":"","counters":[]},{"line":"let write_without_pushback_if_open = Pipe.write_without_pushback_if_open","counters":[]},{"line":"","counters":[]},{"line":"exception Overflow","counters":[]},{"line":"","counters":[]},{"line":"let write_or_exn ~capacity writer reader x =","counters":[]},{"line":"  if Pipe.length reader.Reader.pipe > capacity then raise Overflow","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":52,"col_end":52,"count":0}]},{"line":"  else Pipe.write_without_pushback writer x","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let close_read (reader : 'a Reader.t) = Pipe.close_read reader.pipe","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"let close = Pipe.close","counters":[]},{"line":"","counters":[]},{"line":"let closed (reader : 'a Reader.t) = Pipe.closed reader.pipe","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"let multiple_reads_error () =","counters":[]},{"line":"  failwith","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    \"Linear_pipe.bracket: the same reader has been used multiple times. If you \\","counters":[]},{"line":"     want to rebroadcast the reader, use fork\"","counters":[]},{"line":"","counters":[]},{"line":"let bracket (reader : 'a Reader.t) dx =","counters":[]},{"line":"  if reader.has_reader then multiple_reads_error ()","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  else (","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"    reader.has_reader <- true ;","counters":[]},{"line":"    let%map x = dx in","counters":[]},{"line":"    reader.has_reader <- false ;","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    x )","counters":[]},{"line":"","counters":[]},{"line":"let set_has_reader (reader : 'a Reader.t) =","counters":[]},{"line":"  if reader.has_reader then multiple_reads_error ()","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"  else reader.has_reader <- true","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let iter ?flushed ?continue_on_error reader ~f =","counters":[]},{"line":"  bracket reader (Pipe.iter reader.Reader.pipe ?flushed ?continue_on_error ~f)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"let iter_unordered ?consumer ~max_concurrency reader ~f =","counters":[]},{"line":"  bracket reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let rec run_reader () =","counters":[]},{"line":"       match%bind Pipe.read ?consumer reader.Reader.pipe with","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"       | `Eof ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           return ()","counters":[]},{"line":"       | `Ok v ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"           let%bind () = f v in","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"           run_reader ()","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"     in","counters":[]},{"line":"     Deferred.all_unit (List.init max_concurrency ~f:(fun _ -> run_reader ()))","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"    )","counters":[]},{"line":"","counters":[]},{"line":"let drain r = iter r ~f:(fun _ -> Deferred.unit)","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"let length reader = Pipe.length reader.Reader.pipe","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"","counters":[]},{"line":"let of_list xs =","counters":[]},{"line":"  let reader = wrap_reader (Pipe.of_list xs) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"  reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let to_list reader = Pipe.to_list reader.Reader.pipe","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let fold reader ~init ~f =","counters":[]},{"line":"  bracket reader (Pipe.fold reader.Reader.pipe ~init ~f)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"(* Adapted from Async_kernel's fold impl *)","counters":[]},{"line":"let scan reader ~init ~f =","counters":[]},{"line":"  set_has_reader reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let r, w = Pipe.create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let rec loop b =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match Pipe.read_now reader.Reader.pipe with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | `Eof ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        return (Pipe.close w)","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    | `Ok v ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind next = f b v in","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"        let%bind () = Pipe.write w next in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        loop next","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"    | `Nothing_available ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let%bind _ = Pipe.values_available reader.Reader.pipe in","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"        loop b","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  don't_wait_for","counters":[]},{"line":"    ( (* Force async ala https://github.com/janestreet/async_kernel/blob/master/src/pipe.ml#L703 *)","counters":[]},{"line":"      return ()","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"    >>= fun () -> loop init ) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":18,"col_end":18,"count":0}]},{"line":"  wrap_reader r","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let map (reader : 'a Reader.t) ~f =","counters":[]},{"line":"  set_has_reader reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  wrap_reader (Pipe.map reader.Reader.pipe ~f)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"let filter_map (reader : 'a Reader.t) ~f =","counters":[]},{"line":"  set_has_reader reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  wrap_reader (Pipe.filter_map reader.Reader.pipe ~f)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"","counters":[]},{"line":"let transfer reader writer ~f =","counters":[]},{"line":"  bracket reader (Pipe.transfer reader.Reader.pipe writer ~f)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"let transfer_id reader writer =","counters":[]},{"line":"  bracket reader (Pipe.transfer_id reader.Reader.pipe writer)","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"let merge_unordered rs =","counters":[]},{"line":"  let merged_reader, merged_writer = create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  List.iter rs ~f:(fun reader ->","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"      don't_wait_for (iter reader ~f:(fun x -> Pipe.write merged_writer x)) ) ;","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let%map () = Deferred.List.iter rs ~f:closed in","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"     Pipe.close merged_writer ) ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  merged_reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"(* TODO following are all more efficient with iter',","counters":[]},{"line":" * but I get write' doesn't exist on my version of ocaml *)","counters":[]},{"line":"","counters":[]},{"line":"let fork reader n =","counters":[]},{"line":"  let pipes = List.init n ~f:(fun _ -> create ()) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"  let writers = List.map pipes ~f:(fun (_, w) -> w) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  let readers = List.map pipes ~f:(fun (r, _) -> r) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (iter reader ~f:(fun x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         Deferred.List.iter writers ~f:(fun writer ->","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"             if not (Pipe.is_closed writer) then Pipe.write writer x","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"             else return () ) ) ) ;","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let%map () = Deferred.List.iter readers ~f:closed in","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"     close_read reader ) ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  readers","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let fork2 reader =","counters":[]},{"line":"  match fork reader 2 with [ x; y ] -> (x, y) | _ -> assert false","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let fork3 reader =","counters":[]},{"line":"  match fork reader 3 with [ x; y; z ] -> (x, y, z) | _ -> assert false","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let fork4 reader =","counters":[]},{"line":"  match fork reader 4 with [ x; y; z; w ] -> (x, y, z, w) | _ -> assert false","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let fork5 reader =","counters":[]},{"line":"  match fork reader 5 with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [ x; y; z; w; v ] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (x, y, z, w, v)","counters":[]},{"line":"  | _ ->","counters":[]},{"line":"      assert false","counters":[]},{"line":"","counters":[]},{"line":"let fork6 reader =","counters":[]},{"line":"  match fork reader 6 with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | [ x; y; z; w; v; u ] ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      (x, y, z, w, v, u)","counters":[]},{"line":"  | _ ->","counters":[]},{"line":"      assert false","counters":[]},{"line":"","counters":[]},{"line":"let partition_map2 reader ~f =","counters":[]},{"line":"  let (reader_a, writer_a), (reader_b, writer_b) = (create (), create ()) in","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"  don't_wait_for","counters":[]},{"line":"    (iter reader ~f:(fun x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         match f x with","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         | `Fst x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Pipe.write writer_a x","counters":[]},{"line":"         | `Snd x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Pipe.write writer_b x ) ) ;","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let%map () = closed reader_a and () = closed reader_b in","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"     close_read reader ) ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  (reader_a, reader_b)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let partition_map3 reader ~f =","counters":[]},{"line":"  let (reader_a, writer_a), (reader_b, writer_b), (reader_c, writer_c) =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (create (), create (), create ())","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"  in","counters":[]},{"line":"  don't_wait_for","counters":[]},{"line":"    (iter reader ~f:(fun x ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         match f x with","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"         | `Fst x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Pipe.write writer_a x","counters":[]},{"line":"         | `Snd x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Pipe.write writer_b x","counters":[]},{"line":"         | `Trd x ->","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"             Pipe.write writer_c x ) ) ;","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let%map () = closed reader_a","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"     and () = closed reader_b","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"     and () = closed reader_c in","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"     close_read reader ) ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  (reader_a, reader_b, reader_c)","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let filter_map_unordered ~max_concurrency t ~f =","counters":[]},{"line":"  let reader, writer = create () in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (iter_unordered ~max_concurrency t ~f:(fun x ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"         match%bind f x with Some y -> Pipe.write writer y | None -> return () )","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"    ) ;","counters":[]},{"line":"  don't_wait_for","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (let%map () = closed reader in","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"     close_read t ) ;","counters":[{"col_start":5,"col_end":5,"count":0}]},{"line":"  reader","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let latest_ref t ~initial =","counters":[]},{"line":"  let cell = ref initial in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  don't_wait_for (iter t ~f:(fun a -> return (cell := a))) ;","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"  cell","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let values_available ({ pipe; _ } : 'a Reader.t) = Pipe.values_available pipe","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"let peek ({ pipe; _ } : 'a Reader.t) = Pipe.peek pipe","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"let release_has_reader (reader : 'a Reader.t) =","counters":[]},{"line":"  if not reader.has_reader then","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    failwith \"Linear_pipe.bracket: did not have reader\"","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"  else reader.has_reader <- false","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"","counters":[]},{"line":"let read_now reader =","counters":[]},{"line":"  set_has_reader reader ;","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let res = Pipe.read_now reader.pipe in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  release_has_reader reader ; res","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":30,"col_end":30,"count":0}]},{"line":"","counters":[]},{"line":"let read' ?max_queue_length ({ pipe; _ } : 'a Reader.t) =","counters":[]},{"line":"  Pipe.read' ?max_queue_length pipe","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let read ({ pipe; _ } : 'a Reader.t) = Pipe.read pipe","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"let read_exn reader =","counters":[]},{"line":"  match%map read reader with","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"  | `Eof ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      failwith \"Expecting a value from reader\"","counters":[]},{"line":"  | `Ok value ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      value","counters":[{"col_start":10,"col_end":10,"count":2}]}]}