{"filename":"src/lib/filtered_external_transition/filtered_external_transition.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_transaction","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"module Fee_transfer_type = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t = Fee_transfer | Fee_transfer_via_coinbase","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2},{"col_start":15,"col_end":15,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"      [@@deriving quickcheck, compare, sexp]","counters":[{"col_start":43,"col_end":43,"count":11}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Transactions = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { commands :","counters":[]},{"line":"            ( User_command.Stable.V2.t","counters":[]},{"line":"            , Transaction_hash.Stable.V1.t )","counters":[]},{"line":"            With_hash.Stable.V1.t","counters":[]},{"line":"            With_status.Stable.V2.t","counters":[]},{"line":"            list","counters":[]},{"line":"        ; fee_transfers :","counters":[]},{"line":"            (Fee_transfer.Single.Stable.V2.t * Fee_transfer_type.Stable.V1.t)","counters":[]},{"line":"            list","counters":[]},{"line":"        ; coinbase : Currency.Amount.Stable.V1.t","counters":[]},{"line":"        ; coinbase_receiver : Public_key.Compressed.Stable.V1.t option","counters":[]},{"line":"        }","counters":[{"col_start":8,"col_end":8,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Protocol_state = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":2}]},{"line":"        { previous_state_hash : State_hash.Stable.V1.t","counters":[]},{"line":"        ; blockchain_state : Mina_state.Blockchain_state.Value.Stable.V2.t","counters":[]},{"line":"        ; consensus_state : Consensus.Data.Consensus_state.Value.Stable.V1.t","counters":[]},{"line":"        }","counters":[{"col_start":8,"col_end":8,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V2 = struct","counters":[]},{"line":"    type t =","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2}]},{"line":"      { creator : Public_key.Compressed.Stable.V1.t","counters":[]},{"line":"      ; winner : Public_key.Compressed.Stable.V1.t","counters":[]},{"line":"      ; protocol_state : Protocol_state.Stable.V2.t","counters":[]},{"line":"      ; transactions : Transactions.Stable.V2.t","counters":[]},{"line":"      ; snark_jobs : Transaction_snark_work.Info.Stable.V2.t list","counters":[]},{"line":"      ; proof : Proof.Stable.V2.t","counters":[]},{"line":"      }","counters":[{"col_start":6,"col_end":6,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let participants","counters":[]},{"line":"    { transactions = { commands; fee_transfers; _ }; creator; winner; _ } =","counters":[]},{"line":"  let open Account_id.Set in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let user_command_set =","counters":[]},{"line":"    List.fold commands ~init:empty ~f:(fun set user_command ->","counters":[]},{"line":"        union set","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          (of_list @@ User_command.accounts_referenced user_command.data.data) )","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"  in","counters":[]},{"line":"  let fee_transfer_participants =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.fold fee_transfers ~init:empty ~f:(fun set (ft, _) ->","counters":[]},{"line":"        add set (Fee_transfer.Single.receiver ft) )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":44,"col_end":44,"count":0}]},{"line":"  in","counters":[]},{"line":"  add","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    (add","counters":[{"col_start":7,"col_end":7,"count":0}]},{"line":"       (union user_command_set fee_transfer_participants)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"       (Account_id.create creator Token_id.default) )","counters":[{"col_start":24,"col_end":24,"count":0}]},{"line":"    (Account_id.create winner Token_id.default)","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"let participant_pks","counters":[]},{"line":"    { transactions = { commands; fee_transfers; _ }; creator; winner; _ } =","counters":[]},{"line":"  let open Public_key.Compressed.Set in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let user_command_set =","counters":[]},{"line":"    List.fold commands ~init:empty ~f:(fun set user_command ->","counters":[]},{"line":"        union set @@ of_list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"        @@ List.map ~f:Account_id.public_key","counters":[{"col_start":43,"col_end":43,"count":0}]},{"line":"        @@ User_command.accounts_referenced user_command.data.data )","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"  in","counters":[]},{"line":"  let fee_transfer_participants =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.fold fee_transfers ~init:empty ~f:(fun set (ft, _) ->","counters":[]},{"line":"        add set ft.receiver_pk )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"  in","counters":[]},{"line":"  add (add (union user_command_set fee_transfer_participants) creator) winner","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"","counters":[]},{"line":"let commands { transactions = { Transactions.commands; _ }; _ } = commands","counters":[{"col_start":66,"col_end":66,"count":0}]},{"line":"","counters":[]},{"line":"let validate_transactions block =","counters":[]},{"line":"  let consensus_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    block |> Mina_block.header |> Mina_block.Header.protocol_state","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":65,"col_end":65,"count":0}]},{"line":"    |> Mina_state.Protocol_state.consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Consensus.Data in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let coinbase_receiver = Consensus_state.coinbase_receiver consensus_state in","counters":[]},{"line":"  let supercharge_coinbase =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Consensus_state.supercharge_coinbase consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  let staged_ledger_diff =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    block |> Mina_block.body |> Mina_block.Body.staged_ledger_diff","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  in","counters":[]},{"line":"  Staged_ledger.Pre_diff_info.get_transactions ~coinbase_receiver","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~supercharge_coinbase staged_ledger_diff","counters":[]},{"line":"","counters":[]},{"line":"let filter_protocol_state protocol_state : Protocol_state.t =","counters":[]},{"line":"  Mina_state.Protocol_state.","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    { previous_state_hash = previous_state_hash protocol_state","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"    ; blockchain_state = blockchain_state protocol_state","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"    ; consensus_state = consensus_state protocol_state","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"let of_transition block tracked_participants","counters":[]},{"line":"    (calculated_transactions : Transaction.t With_status.t list) =","counters":[]},{"line":"  let header = Mina_block.header block in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let staged_ledger_diff =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    block |> Mina_block.body |> Mina_block.Body.staged_ledger_diff","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"  in","counters":[]},{"line":"  let consensus_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    header |> Mina_block.Header.protocol_state","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"    |> Mina_state.Protocol_state.consensus_state","counters":[]},{"line":"  in","counters":[]},{"line":"  let protocol_state =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    header |> Mina_block.Header.protocol_state |> filter_protocol_state","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"  in","counters":[]},{"line":"  let transactions =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    List.fold calculated_transactions","counters":[]},{"line":"      ~init:","counters":[]},{"line":"        { Transactions.commands = []","counters":[]},{"line":"        ; fee_transfers = []","counters":[]},{"line":"        ; coinbase = Currency.Amount.zero","counters":[]},{"line":"        ; coinbase_receiver = None","counters":[]},{"line":"        } ~f:(fun acc_transactions -> function","counters":[]},{"line":"      | { data = Command command; status } -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let command = (command :> User_command.t) in","counters":[]},{"line":"          let should_include_transaction command participants =","counters":[]},{"line":"            List.exists (User_command.accounts_referenced command)","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"              ~f:(fun account_id ->","counters":[]},{"line":"                Public_key.Compressed.Set.mem participants","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"                  (Account_id.public_key account_id) )","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"          in","counters":[]},{"line":"          match tracked_participants with","counters":[]},{"line":"          | `Some interested_participants","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"            when not","counters":[]},{"line":"                   (should_include_transaction command interested_participants)","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"            ->","counters":[]},{"line":"              acc_transactions","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"          | `All | `Some _ ->","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"              (* Should include this command. *)","counters":[]},{"line":"              { acc_transactions with","counters":[]},{"line":"                commands =","counters":[]},{"line":"                  { With_status.data =","counters":[]},{"line":"                      { With_hash.data = command","counters":[]},{"line":"                      ; hash = Transaction_hash.hash_command command","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"                      }","counters":[]},{"line":"                  ; status","counters":[]},{"line":"                  }","counters":[]},{"line":"                  :: acc_transactions.commands","counters":[]},{"line":"              } )","counters":[]},{"line":"      | { data = Fee_transfer fee_transfer; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let fee_transfer_list =","counters":[]},{"line":"            List.map (Mina_base.Fee_transfer.to_list fee_transfer) ~f:(fun f ->","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"                (f, Fee_transfer_type.Fee_transfer) )","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"          in","counters":[]},{"line":"          let fee_transfers =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            match tracked_participants with","counters":[]},{"line":"            | `All ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                fee_transfer_list","counters":[]},{"line":"            | `Some interested_participants ->","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                List.filter","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"                  ~f:(fun ({ receiver_pk = pk; _ }, _) ->","counters":[]},{"line":"                    Public_key.Compressed.Set.mem interested_participants pk )","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"                  fee_transfer_list","counters":[]},{"line":"          in","counters":[]},{"line":"          { acc_transactions with","counters":[]},{"line":"            fee_transfers = fee_transfers @ acc_transactions.fee_transfers","counters":[]},{"line":"          }","counters":[]},{"line":"      | { data = Coinbase { Coinbase.amount; fee_transfer; receiver }; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let fee_transfer =","counters":[]},{"line":"            Option.map","counters":[]},{"line":"              ~f:(fun ft ->","counters":[]},{"line":"                ( Coinbase_fee_transfer.to_fee_transfer ft","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"                , Fee_transfer_type.Fee_transfer_via_coinbase ) )","counters":[]},{"line":"              fee_transfer","counters":[]},{"line":"          in","counters":[]},{"line":"          let fee_transfers =","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            List.append","counters":[]},{"line":"              (Option.to_list fee_transfer)","counters":[{"col_start":28,"col_end":28,"count":0}]},{"line":"              acc_transactions.fee_transfers","counters":[]},{"line":"          in","counters":[]},{"line":"          { acc_transactions with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"            fee_transfers","counters":[]},{"line":"          ; coinbase_receiver = Some receiver","counters":[]},{"line":"          ; coinbase =","counters":[]},{"line":"              Currency.Amount.(","counters":[]},{"line":"                Option.value_exn (add amount acc_transactions.coinbase))","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          } )","counters":[]},{"line":"  in","counters":[]},{"line":"  let snark_jobs =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    staged_ledger_diff |> Staged_ledger_diff.completed_works","counters":[{"col_start":59,"col_end":59,"count":0}]},{"line":"    |> List.map ~f:Transaction_snark_work.info","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Consensus.Data in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let creator = Consensus_state.block_creator consensus_state in","counters":[]},{"line":"  let winner = Consensus_state.block_stake_winner consensus_state in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let proof = Mina_block.Header.protocol_state_proof header in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  { creator; winner; protocol_state; transactions; snark_jobs; proof }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":69,"col_end":69,"count":2}]}]}