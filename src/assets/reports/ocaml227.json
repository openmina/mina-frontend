{"filename":"src/lib/rosetta_lib/validation.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"(* Applicative validation -- like https://hackage.haskell.org/package/validation-1.1/docs/Data-Validation.html   *)","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type ('a, 'b) t = ('a, 'b list) Result.t","counters":[]},{"line":"","counters":[]},{"line":"  let map = `Custom (fun t ~f -> Result.map ~f t)","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"","counters":[]},{"line":"  let return a = Result.return a","counters":[{"col_start":17,"col_end":17,"count":0}]},{"line":"","counters":[]},{"line":"  let fail e = Result.fail [ e ]","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"","counters":[]},{"line":"  let apply ft t =","counters":[]},{"line":"    match (ft, t) with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | Ok f, Ok a ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Ok (f a)","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"    | Error es, Ok _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error es","counters":[]},{"line":"    | Ok _, Error es ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error es","counters":[]},{"line":"    | Error es, Error es' ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Error (es @ es')","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"include Applicative.Make2 (T)","counters":[]},{"line":"","counters":[]},{"line":"module Let_syntax = struct","counters":[]},{"line":"  let return = return","counters":[]},{"line":"","counters":[]},{"line":"  module Let_syntax = struct","counters":[]},{"line":"    let return = return","counters":[]},{"line":"","counters":[]},{"line":"    let map = map","counters":[]},{"line":"","counters":[]},{"line":"    let both t1 t2 = apply (map t1 ~f:(fun x y -> (x, y))) t2","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"    module Open_on_rhs = struct end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}