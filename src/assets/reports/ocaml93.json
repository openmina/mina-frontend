{"filename":"src/lib/snark_worker/rpcs.ml","lines":[{"line":"open Async","counters":[]},{"line":"open Signature_lib","counters":[]},{"line":"","counters":[]},{"line":"(* for versioning of the types here, see","counters":[]},{"line":"","counters":[]},{"line":"   RFC 0012, and","counters":[]},{"line":"","counters":[]},{"line":"   https://ocaml.janestreet.com/ocaml-core/latest/doc/async_rpc_kernel/Async_rpc_kernel/Versioned_rpc/","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"(* for each RPC, return the Master module only, and not the versioned modules, because the functor should not","counters":[]},{"line":"   return types with bin_io; the versioned modules are defined in snark_worker.ml","counters":[]},{"line":"*)","counters":[]},{"line":"","counters":[]},{"line":"module Make (Inputs : Intf.Inputs_intf) = struct","counters":[]},{"line":"  open Inputs","counters":[]},{"line":"  open Snark_work_lib","counters":[]},{"line":"","counters":[]},{"line":"  module Get_work = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"get_work\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query = unit","counters":[]},{"line":"","counters":[]},{"line":"        type response =","counters":[]},{"line":"          ( (Transaction_witness.t, Ledger_proof.t) Work.Single.Spec.t","counters":[]},{"line":"            Work.Spec.t","counters":[]},{"line":"          * Public_key.Compressed.t )","counters":[]},{"line":"          option","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"    include Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Submit_work = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"submit_work\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query =","counters":[]},{"line":"          ( (Transaction_witness.t, Ledger_proof.t) Work.Single.Spec.t","counters":[]},{"line":"            Work.Spec.t","counters":[]},{"line":"          , Ledger_proof.t )","counters":[]},{"line":"          Work.Result.t","counters":[]},{"line":"","counters":[]},{"line":"        type response = unit","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"    include Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Failed_to_generate_snark = struct","counters":[]},{"line":"    module Master = struct","counters":[]},{"line":"      let name = \"failed_to_generate_snark\"","counters":[]},{"line":"","counters":[]},{"line":"      module T = struct","counters":[]},{"line":"        type query =","counters":[]},{"line":"          (Transaction_witness.t, Ledger_proof.t) Work.Single.Spec.t Work.Spec.t","counters":[]},{"line":"          * Public_key.Compressed.t","counters":[]},{"line":"","counters":[]},{"line":"        type response = unit","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Caller = T","counters":[]},{"line":"      module Callee = T","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    include Master.T","counters":[]},{"line":"    include Versioned_rpc.Both_convert.Plain.Make (Master)","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":1}]}]}