{"filename":"src/lib/staged_ledger_diff/diff.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"module Wire_types = Mina_wire_types.Staged_ledger_diff","counters":[]},{"line":"","counters":[]},{"line":"module Make_sig (A : Wire_types.Types.S) = struct","counters":[]},{"line":"  module type S =","counters":[]},{"line":"    Diff_intf.Full","counters":[]},{"line":"      with type 'a At_most_two.t = 'a A.At_most_two.V1.t","counters":[]},{"line":"       and type 'a At_most_two.Stable.V1.t = 'a A.At_most_two.V1.t","counters":[]},{"line":"       and type ('a, 'b) Pre_diff_two.Stable.V2.t = ('a, 'b) A.Pre_diff_two.V2.t","counters":[]},{"line":"       and type Pre_diff_with_at_most_two_coinbase.Stable.V2.t =","counters":[]},{"line":"        A.Pre_diff_with_at_most_two_coinbase.V2.t","counters":[]},{"line":"       and type 'a At_most_one.t = 'a A.At_most_one.V1.t","counters":[]},{"line":"       and type ('a, 'b) Pre_diff_one.Stable.V2.t = ('a, 'b) A.Pre_diff_one.V2.t","counters":[]},{"line":"       and type Pre_diff_with_at_most_one_coinbase.Stable.V2.t =","counters":[]},{"line":"        A.Pre_diff_with_at_most_one_coinbase.V2.t","counters":[]},{"line":"       and type t = A.V2.t","counters":[]},{"line":"       and type Stable.V2.t = A.V2.t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make_str (A : Wire_types.Concrete) = struct","counters":[]},{"line":"  module At_most_two = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type 'a t = 'a A.At_most_two.V1.t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":16,"col_end":16,"count":4}]},{"line":"          | Zero","counters":[{"col_start":10,"col_end":10,"count":2}]},{"line":"          | One of 'a option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"          | Two of ('a * 'a option) option","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":20,"col_end":20,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":25,"col_end":25,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type 'a t = 'a Stable.Latest.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      | Zero","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | One of 'a option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"      | Two of ('a * 'a option) option","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":16,"col_end":16,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":21,"col_end":21,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"    [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let increase t ws =","counters":[]},{"line":"      match (t, ws) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Zero, [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (One None)","counters":[]},{"line":"      | Zero, [ a ] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (One (Some a))","counters":[]},{"line":"      | One _, [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (Two None)","counters":[]},{"line":"      | One _, [ a ] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (Two (Some (a, None)))","counters":[]},{"line":"      | One _, [ a; a' ] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (Two (Some (a', Some a)))","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Or_error.error_string \"Error incrementing coinbase parts\"","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module At_most_one = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type 'a t = 'a A.At_most_one.V1.t = Zero | One of 'a option","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":16,"col_end":16,"count":4},{"col_start":44,"col_end":44,"count":0},{"col_start":49,"col_end":49,"count":0},{"col_start":58,"col_end":58,"count":0},{"col_start":59,"col_end":59,"count":0},{"col_start":66,"col_end":66,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type 'a t = 'a Stable.Latest.t = Zero | One of 'a option","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":37,"col_end":37,"count":0},{"col_start":42,"col_end":42,"count":0},{"col_start":51,"col_end":51,"count":0},{"col_start":52,"col_end":52,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"    [@@deriving equal, compare, sexp, yojson]","counters":[]},{"line":"","counters":[]},{"line":"    let increase t ws =","counters":[]},{"line":"      match (t, ws) with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      | Zero, [] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (One None)","counters":[]},{"line":"      | Zero, [ a ] ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Ok (One (Some a))","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Or_error.error_string \"Error incrementing coinbase parts\"","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Ft = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V1 = struct","counters":[]},{"line":"        type t = Coinbase.Fee_transfer.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1},{"col_start":17,"col_end":17,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Stable.Latest.t [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Pre_diff_two = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type ('a, 'b) t = ('a, 'b) A.Pre_diff_two.V2.t =","counters":[{"col_start":8,"col_end":8,"count":9},{"col_start":22,"col_end":22,"count":5}]},{"line":"          { completed_works : 'a list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          ; commands : 'b list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          ; coinbase : Ft.Stable.V1.t At_most_two.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"          ; internal_command_statuses : Transaction_status.Stable.V2.t list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type ('a, 'b) t = ('a, 'b) Stable.Latest.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { completed_works : 'a list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; commands : 'b list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; coinbase : Ft.t At_most_two.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      ; internal_command_statuses : Transaction_status.t list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let map t ~f1 ~f2 =","counters":[]},{"line":"      { completed_works = List.map t.completed_works ~f:f1","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      ; commands = List.map t.commands ~f:f2","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ; coinbase = t.coinbase","counters":[]},{"line":"      ; internal_command_statuses = t.internal_command_statuses","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Pre_diff_one = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type ('a, 'b) t = ('a, 'b) A.Pre_diff_one.V2.t =","counters":[{"col_start":8,"col_end":8,"count":1},{"col_start":22,"col_end":22,"count":5}]},{"line":"          { completed_works : 'a list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":30,"col_end":30,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"          ; commands : 'b list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"          ; coinbase : Ft.Stable.V1.t At_most_one.Stable.V1.t","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":23,"col_end":23,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"          ; internal_command_statuses : Transaction_status.Stable.V2.t list","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":74,"col_end":74,"count":0}]},{"line":"          }","counters":[]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":3}]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type ('a, 'b) t = ('a, 'b) Stable.Latest.t =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { completed_works : 'a list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"      ; commands : 'b list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"      ; coinbase : Ft.t At_most_one.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":19,"col_end":19,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":36,"col_end":36,"count":0}]},{"line":"      ; internal_command_statuses : Transaction_status.t list","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":32,"col_end":32,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"      }","counters":[]},{"line":"    [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"","counters":[]},{"line":"    let map t ~f1 ~f2 =","counters":[]},{"line":"      { completed_works = List.map t.completed_works ~f:f1","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":33,"col_end":33,"count":0}]},{"line":"      ; commands = List.map t.commands ~f:f2","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"      ; coinbase = t.coinbase","counters":[]},{"line":"      ; internal_command_statuses = t.internal_command_statuses","counters":[]},{"line":"      }","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Pre_diff_with_at_most_two_coinbase = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":3},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( Transaction_snark_work.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"          , User_command.Stable.V2.t With_status.Stable.V2.t )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          Pre_diff_two.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Stable.Latest.t [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Pre_diff_with_at_most_one_coinbase = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          ( Transaction_snark_work.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":12,"col_end":12,"count":0}]},{"line":"          , User_command.Stable.V2.t With_status.Stable.V2.t )","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":37,"col_end":37,"count":0}]},{"line":"          Pre_diff_one.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Stable.Latest.t [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Diff = struct","counters":[]},{"line":"    [%%versioned","counters":[]},{"line":"    module Stable = struct","counters":[]},{"line":"      [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[{"col_start":8,"col_end":8,"count":2},{"col_start":13,"col_end":13,"count":1}]},{"line":"          Pre_diff_with_at_most_two_coinbase.Stable.V2.t","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":55,"col_end":55,"count":0}]},{"line":"          * Pre_diff_with_at_most_one_coinbase.Stable.V2.t option","counters":[{"col_start":12,"col_end":12,"count":0},{"col_start":57,"col_end":57,"count":0},{"col_start":64,"col_end":64,"count":0}]},{"line":"        [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":5}]},{"line":"","counters":[]},{"line":"        let to_latest = Fn.id","counters":[]},{"line":"      end","counters":[]},{"line":"    end]","counters":[]},{"line":"","counters":[]},{"line":"    type t = Stable.Latest.t [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":13,"col_end":13,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    [@@@no_toplevel_latest_type]","counters":[]},{"line":"","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t = A.V2.t = { diff : Diff.Stable.V2.t }","counters":[{"col_start":6,"col_end":6,"count":4},{"col_start":11,"col_end":11,"count":2},{"col_start":26,"col_end":26,"count":0},{"col_start":29,"col_end":29,"count":0},{"col_start":33,"col_end":33,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"      [@@deriving equal, compare, sexp, yojson]","counters":[{"col_start":46,"col_end":46,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  type t = Stable.Latest.t = { diff : Diff.t }","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":7,"col_end":7,"count":0},{"col_start":31,"col_end":31,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  [@@deriving equal, compare, sexp, yojson, fields]","counters":[]},{"line":"","counters":[]},{"line":"  module With_valid_signatures_and_proofs = struct","counters":[]},{"line":"    type pre_diff_with_at_most_two_coinbase =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Transaction_snark_work.Checked.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , User_command.Valid.t With_status.t )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      Pre_diff_two.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"    type pre_diff_with_at_most_one_coinbase =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Transaction_snark_work.Checked.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , User_command.Valid.t With_status.t )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      Pre_diff_one.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"    type diff =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      pre_diff_with_at_most_two_coinbase","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      * pre_diff_with_at_most_one_coinbase option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"    type t = { diff : diff } [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"    let empty_diff : t =","counters":[]},{"line":"      { diff =","counters":[]},{"line":"          ( { completed_works = []","counters":[]},{"line":"            ; commands = []","counters":[]},{"line":"            ; coinbase = At_most_two.Zero","counters":[]},{"line":"            ; internal_command_statuses = []","counters":[]},{"line":"            }","counters":[]},{"line":"          , None )","counters":[]},{"line":"      }","counters":[]},{"line":"","counters":[]},{"line":"    let commands t =","counters":[]},{"line":"      (fst t.diff).commands","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":9,"col_end":9,"count":0}]},{"line":"      @ Option.value_map (snd t.diff) ~default:[] ~f:(fun d -> d.commands)","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":28,"col_end":28,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let forget_cw cw_list = List.map ~f:Transaction_snark_work.forget cw_list","counters":[{"col_start":26,"col_end":26,"count":0}]},{"line":"","counters":[]},{"line":"  let coinbase_amount","counters":[]},{"line":"      ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"      ~supercharge_coinbase =","counters":[]},{"line":"    if supercharge_coinbase then","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Currency.Amount.scale constraint_constants.coinbase_amount","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        constraint_constants.supercharged_coinbase_factor","counters":[]},{"line":"    else Some constraint_constants.coinbase_amount","counters":[{"col_start":9,"col_end":9,"count":0}]},{"line":"","counters":[]},{"line":"  let coinbase","counters":[]},{"line":"      ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"      ~supercharge_coinbase t =","counters":[]},{"line":"    let first_pre_diff, second_pre_diff_opt = t.diff in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let coinbase_amount =","counters":[]},{"line":"      coinbase_amount ~constraint_constants ~supercharge_coinbase","counters":[]},{"line":"    in","counters":[]},{"line":"    match","counters":[]},{"line":"      ( first_pre_diff.coinbase","counters":[]},{"line":"      , Option.value_map second_pre_diff_opt ~default:At_most_one.Zero","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"          ~f:(fun d -> d.coinbase) )","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"    with","counters":[]},{"line":"    | At_most_two.Zero, At_most_one.Zero ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Some Currency.Amount.zero","counters":[]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        coinbase_amount","counters":[]},{"line":"","counters":[]},{"line":"  module With_valid_signatures = struct","counters":[]},{"line":"    type pre_diff_with_at_most_two_coinbase =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Transaction_snark_work.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , User_command.Valid.t With_status.t )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      Pre_diff_two.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"    type pre_diff_with_at_most_one_coinbase =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      ( Transaction_snark_work.t","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":8,"col_end":8,"count":0}]},{"line":"      , User_command.Valid.t With_status.t )","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":29,"col_end":29,"count":0}]},{"line":"      Pre_diff_one.t","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":40,"col_end":40,"count":0}]},{"line":"","counters":[]},{"line":"    type diff =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      pre_diff_with_at_most_two_coinbase","counters":[{"col_start":6,"col_end":6,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"      * pre_diff_with_at_most_one_coinbase option","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":48,"col_end":48,"count":0}]},{"line":"    [@@deriving compare, sexp, to_yojson]","counters":[]},{"line":"","counters":[]},{"line":"    type t = { diff : diff } [@@deriving compare, sexp, to_yojson]","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0},{"col_start":18,"col_end":18,"count":0},{"col_start":22,"col_end":22,"count":0},{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"    let coinbase","counters":[]},{"line":"        ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"        ~supercharge_coinbase (t : t) =","counters":[]},{"line":"      let first_pre_diff, second_pre_diff_opt = t.diff in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let coinbase_amount =","counters":[]},{"line":"        coinbase_amount ~constraint_constants ~supercharge_coinbase","counters":[]},{"line":"      in","counters":[]},{"line":"      match","counters":[]},{"line":"        ( first_pre_diff.coinbase","counters":[]},{"line":"        , Option.value_map second_pre_diff_opt ~default:At_most_one.Zero","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"            ~f:(fun d -> d.coinbase) )","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"      with","counters":[]},{"line":"      | At_most_two.Zero, At_most_one.Zero ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some Currency.Amount.zero","counters":[]},{"line":"      | _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          coinbase_amount","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  let validate_commands (t : t)","counters":[]},{"line":"      ~(check :","counters":[]},{"line":"            User_command.t list","counters":[]},{"line":"         -> (User_command.Valid.t list, 'e) Result.t Async.Deferred.Or_error.t","counters":[]},{"line":"         ) : (With_valid_signatures.t, 'e) Result.t Async.Deferred.Or_error.t =","counters":[]},{"line":"    let map t ~f = Async.Deferred.Or_error.map t ~f:(Result.map ~f) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":19,"col_end":19,"count":0}]},{"line":"    let validate cs =","counters":[]},{"line":"      map","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        (check (List.map cs ~f:With_status.data))","counters":[{"col_start":13,"col_end":13,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"        ~f:","counters":[]},{"line":"          (List.map2_exn cs ~f:(fun c data ->","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"               { With_status.data; status = c.status } ) )","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"    in","counters":[]},{"line":"    let d1, d2 = t.diff in","counters":[]},{"line":"    map","counters":[]},{"line":"      (validate","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"         ( d1.commands","counters":[]},{"line":"         @ Option.value_map d2 ~default:[] ~f:(fun d2 -> d2.commands) ) )","counters":[{"col_start":26,"col_end":26,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"      ~f:(fun commands_all ->","counters":[]},{"line":"        let commands1, commands2 =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          List.split_n commands_all (List.length d1.commands)","counters":[{"col_start":47,"col_end":47,"count":0}]},{"line":"        in","counters":[]},{"line":"        let p1 : With_valid_signatures.pre_diff_with_at_most_two_coinbase =","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          { completed_works = d1.completed_works","counters":[]},{"line":"          ; commands = commands1","counters":[]},{"line":"          ; coinbase = d1.coinbase","counters":[]},{"line":"          ; internal_command_statuses = d1.internal_command_statuses","counters":[]},{"line":"          }","counters":[]},{"line":"        in","counters":[]},{"line":"        let p2 =","counters":[]},{"line":"          Option.value_map ~default:None d2 ~f:(fun d2 ->","counters":[]},{"line":"              Some","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                { Pre_diff_one.completed_works = d2.completed_works","counters":[]},{"line":"                ; commands = commands2","counters":[]},{"line":"                ; coinbase = d2.coinbase","counters":[]},{"line":"                ; internal_command_statuses = d2.internal_command_statuses","counters":[]},{"line":"                } )","counters":[]},{"line":"        in","counters":[]},{"line":"        ({ diff = (p1, p2) } : With_valid_signatures.t) )","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"","counters":[]},{"line":"  let forget_proof_checks (d : With_valid_signatures_and_proofs.t) :","counters":[]},{"line":"      With_valid_signatures.t =","counters":[]},{"line":"    let d1 = fst d.diff in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let p1 : With_valid_signatures.pre_diff_with_at_most_two_coinbase =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { completed_works = forget_cw d1.completed_works","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"      ; commands = d1.commands","counters":[]},{"line":"      ; coinbase = d1.coinbase","counters":[]},{"line":"      ; internal_command_statuses = d1.internal_command_statuses","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    let p2 =","counters":[]},{"line":"      Option.map (snd d.diff)","counters":[{"col_start":20,"col_end":20,"count":0}]},{"line":"        ~f:(fun d2 : With_valid_signatures.pre_diff_with_at_most_one_coinbase ->","counters":[]},{"line":"          { completed_works = forget_cw d2.completed_works","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":38,"col_end":38,"count":0}]},{"line":"          ; commands = d2.commands","counters":[]},{"line":"          ; coinbase = d2.coinbase","counters":[]},{"line":"          ; internal_command_statuses = d2.internal_command_statuses","counters":[]},{"line":"          } )","counters":[]},{"line":"    in","counters":[]},{"line":"    { diff = (p1, p2) }","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let forget_pre_diff_with_at_most_two","counters":[]},{"line":"      (pre_diff :","counters":[]},{"line":"        With_valid_signatures_and_proofs.pre_diff_with_at_most_two_coinbase ) :","counters":[]},{"line":"      Pre_diff_with_at_most_two_coinbase.t =","counters":[]},{"line":"    { completed_works = forget_cw pre_diff.completed_works","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"    ; commands =","counters":[]},{"line":"        List.map","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          ~f:(With_status.map ~f:User_command.forget_check)","counters":[]},{"line":"          pre_diff.commands","counters":[]},{"line":"    ; coinbase = pre_diff.coinbase","counters":[]},{"line":"    ; internal_command_statuses = pre_diff.internal_command_statuses","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let forget_pre_diff_with_at_most_one","counters":[]},{"line":"      (pre_diff :","counters":[]},{"line":"        With_valid_signatures_and_proofs.pre_diff_with_at_most_one_coinbase ) =","counters":[]},{"line":"    { Pre_diff_one.completed_works = forget_cw pre_diff.completed_works","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":45,"col_end":45,"count":0}]},{"line":"    ; commands =","counters":[]},{"line":"        List.map","counters":[{"col_start":15,"col_end":15,"count":0}]},{"line":"          ~f:(With_status.map ~f:User_command.forget_check)","counters":[]},{"line":"          pre_diff.commands","counters":[]},{"line":"    ; coinbase = pre_diff.coinbase","counters":[]},{"line":"    ; internal_command_statuses = pre_diff.internal_command_statuses","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let forget (t : With_valid_signatures_and_proofs.t) =","counters":[]},{"line":"    { diff =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"        ( forget_pre_diff_with_at_most_two (fst t.diff)","counters":[{"col_start":41,"col_end":41,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"        , Option.map (snd t.diff) ~f:forget_pre_diff_with_at_most_one )","counters":[{"col_start":19,"col_end":19,"count":0},{"col_start":24,"col_end":24,"count":0}]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let commands (t : t) =","counters":[]},{"line":"    (fst t.diff).commands","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0}]},{"line":"    @ Option.value_map (snd t.diff) ~default:[] ~f:(fun d -> d.commands)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"  let completed_works (t : t) =","counters":[]},{"line":"    (fst t.diff).completed_works","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":7,"col_end":7,"count":0}]},{"line":"    @ Option.value_map (snd t.diff) ~default:[] ~f:(fun d -> d.completed_works)","counters":[{"col_start":21,"col_end":21,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"  let net_return","counters":[]},{"line":"      ~(constraint_constants : Genesis_constants.Constraint_constants.t)","counters":[]},{"line":"      ~supercharge_coinbase (t : t) =","counters":[]},{"line":"    let open Currency in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let open Option.Let_syntax in","counters":[]},{"line":"    let%bind coinbase =","counters":[]},{"line":"      coinbase ~constraint_constants ~supercharge_coinbase t","counters":[{"col_start":13,"col_end":13,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind total_reward =","counters":[]},{"line":"      List.fold","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"        ~init:(Some (Amount.to_fee coinbase))","counters":[{"col_start":33,"col_end":33,"count":0}]},{"line":"        (commands t)","counters":[{"col_start":16,"col_end":16,"count":0}]},{"line":"        ~f:(fun sum cmd ->","counters":[]},{"line":"          let%bind sum = sum in","counters":[]},{"line":"          Fee.( + ) sum (User_command.fee (With_status.data cmd)) )","counters":[{"col_start":10,"col_end":10,"count":0},{"col_start":40,"col_end":40,"count":0},{"col_start":58,"col_end":58,"count":0}]},{"line":"    in","counters":[]},{"line":"    let%bind completed_works_fees =","counters":[]},{"line":"      List.fold ~init:(Some Fee.zero) (completed_works t) ~f:(fun sum work ->","counters":[{"col_start":14,"col_end":14,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"          let%bind sum = sum in","counters":[]},{"line":"          Fee.( + ) sum work.Transaction_snark_work.fee )","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"    in","counters":[]},{"line":"    Amount.(of_fee total_reward - of_fee completed_works_fees)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":17,"col_end":17,"count":0},{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let empty_diff : t =","counters":[]},{"line":"    { diff =","counters":[]},{"line":"        ( { completed_works = []","counters":[]},{"line":"          ; commands = []","counters":[]},{"line":"          ; coinbase = At_most_two.Zero","counters":[]},{"line":"          ; internal_command_statuses = []","counters":[]},{"line":"          }","counters":[]},{"line":"        , None )","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include Wire_types.Make (Make_sig) (Make_str)","counters":[{"col_start":44,"col_end":44,"count":2}]}]}