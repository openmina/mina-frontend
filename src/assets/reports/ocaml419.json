{"filename":"src/lib/transaction/transaction_hash.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"","counters":[]},{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  include Blake2.Make ()","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"module Base58_check = Codable.Make_base58_check (struct","counters":[]},{"line":"  (* for legacy compatibility *)","counters":[]},{"line":"  include Stable.Latest.With_top_version_tag","counters":[]},{"line":"","counters":[]},{"line":"  let version_byte = Base58_check.Version_bytes.transaction_hash","counters":[]},{"line":"","counters":[]},{"line":"  let description = \"Transaction Hash\"","counters":[]},{"line":"end)","counters":[]},{"line":"","counters":[]},{"line":"[%%define_locally","counters":[]},{"line":"Base58_check.(of_base58_check, of_base58_check_exn, to_base58_check)]","counters":[]},{"line":"","counters":[]},{"line":"let to_yojson t = `String (to_base58_check t)","counters":[{"col_start":18,"col_end":18,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"","counters":[]},{"line":"let of_yojson = function","counters":[]},{"line":"  | `String str ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Result.map_error (of_base58_check str) ~f:(fun _ ->","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"          \"Transaction_hash.of_yojson: Error decoding string from base58_check \\","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"           format\" )","counters":[]},{"line":"  | _ ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error \"Transaction_hash.of_yojson: Expected a string\"","counters":[]},{"line":"","counters":[]},{"line":"let hash_signed_command, hash_zkapp_command =","counters":[]},{"line":"  let mk_hasher (type a) (module M : Bin_prot.Binable.S with type t = a)","counters":[]},{"line":"      (cmd : a) =","counters":[]},{"line":"    cmd |> Binable.to_string (module M) |> digest_string","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"  in","counters":[]},{"line":"  let signed_cmd_hasher = mk_hasher (module Signed_command.Stable.Latest) in","counters":[]},{"line":"  let zkapp_cmd_hasher = mk_hasher (module Zkapp_command.Stable.Latest) in","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"  (* replace actual signatures, proofs with dummies for hashing, so we can","counters":[]},{"line":"     reproduce the transaction hashes if signatures, proofs omitted in","counters":[]},{"line":"     archive db","counters":[]},{"line":"  *)","counters":[]},{"line":"  let hash_signed_command (cmd : Signed_command.t) =","counters":[{"col_start":2,"col_end":2,"count":1}]},{"line":"    let cmd_dummy_signature = { cmd with signature = Signature.dummy } in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    signed_cmd_hasher cmd_dummy_signature","counters":[]},{"line":"  in","counters":[]},{"line":"  let hash_zkapp_command (cmd : Zkapp_command.t) =","counters":[]},{"line":"    let cmd_dummy_signatures_and_proofs =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      { cmd with","counters":[]},{"line":"        fee_payer = { cmd.fee_payer with authorization = Signature.dummy }","counters":[]},{"line":"      ; account_updates =","counters":[]},{"line":"          Zkapp_command.Call_forest.map cmd.account_updates","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"            ~f:(fun (acct_update : Account_update.t) ->","counters":[]},{"line":"              let dummy_auth =","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"                match acct_update.authorization with","counters":[]},{"line":"                | Control.Proof _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Control.Proof Proof.transaction_dummy","counters":[]},{"line":"                | Control.Signature _ ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Control.Signature Signature.dummy","counters":[]},{"line":"                | Control.None_given ->","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"                    Control.None_given","counters":[]},{"line":"              in","counters":[]},{"line":"              { acct_update with authorization = dummy_auth } )","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    zkapp_cmd_hasher cmd_dummy_signatures_and_proofs","counters":[]},{"line":"  in","counters":[]},{"line":"  (hash_signed_command, hash_zkapp_command)","counters":[]},{"line":"","counters":[]},{"line":"[%%ifdef consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"let hash_command cmd =","counters":[]},{"line":"  match cmd with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | User_command.Signed_command s ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash_signed_command s","counters":[]},{"line":"  | User_command.Zkapp_command p ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      hash_zkapp_command p","counters":[]},{"line":"","counters":[]},{"line":"let hash_signed_command_v2 = hash_signed_command","counters":[]},{"line":"","counters":[]},{"line":"let hash_signed_command_v1 (cmd : Signed_command.t_v1) =","counters":[]},{"line":"  let b58 = Signed_command.Base58_check_v1.to_base58_check cmd in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  digest_string b58","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let hash_zkapp_command_v1 = hash_zkapp_command","counters":[]},{"line":"","counters":[]},{"line":"let hash_fee_transfer fee_transfer =","counters":[]},{"line":"  fee_transfer |> Fee_transfer.Single.to_base58_check |> digest_string","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"let hash_coinbase coinbase =","counters":[]},{"line":"  coinbase |> Coinbase.to_base58_check |> digest_string","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"let hash_of_transaction_id (transaction_id : string) : t Or_error.t =","counters":[]},{"line":"  (* A transaction id might be:","counters":[]},{"line":"     - original Base58Check transaction ids of signed commands (Signed_command.V1.t), or","counters":[]},{"line":"     - a Base64 encoding of signed commands and zkApps (Signed_command.Vn.t, for n >= 2,","counters":[]},{"line":"       or Zkapp_command.Vm.t, for m >= 1)","counters":[]},{"line":"","counters":[]},{"line":"     For the Base64 case, the Bin_prot serialization leads with a version tag","counters":[]},{"line":"  *)","counters":[]},{"line":"  match Signed_command.of_base58_check_exn_v1 transaction_id with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Ok cmd_legacy ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ok (hash_signed_command_v1 cmd_legacy)","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  | Error _ -> (","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      match Base64.decode transaction_id with","counters":[]},{"line":"      | Ok s -> (","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          let len = String.length s in","counters":[]},{"line":"          let buf = Bin_prot.Common.create_buf len in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          Bin_prot.Common.blit_string_buf s buf ~len ;","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let pos_ref = ref 0 in","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          let version = Bin_prot.Std.bin_read_int ~pos_ref buf in","counters":[]},{"line":"          match version with","counters":[{"col_start":10,"col_end":10,"count":0}]},{"line":"          | 1 -> (","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (* must be a zkApp command *)","counters":[]},{"line":"              try","counters":[]},{"line":"                let cmd = Zkapp_command.Stable.V1.bin_read_t ~pos_ref buf in","counters":[]},{"line":"                Ok (hash_zkapp_command_v1 cmd)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":40,"col_end":40,"count":0}]},{"line":"              with _ ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                Or_error.error_string","counters":[]},{"line":"                  \"Could not decode serialized zkApp command (version 1)\" )","counters":[]},{"line":"          | 2 -> (","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              (* must be a signed command, until there's a V2 for zkApp commands *)","counters":[]},{"line":"              try","counters":[]},{"line":"                let cmd = Signed_command.Stable.V2.bin_read_t ~pos_ref buf in","counters":[]},{"line":"                Ok (hash_signed_command_v2 cmd)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":41,"col_end":41,"count":0}]},{"line":"              with _ ->","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"                Or_error.error_string","counters":[]},{"line":"                  \"Could not decode serialized signed command (version 2)\" )","counters":[]},{"line":"          | _ ->","counters":[{"col_start":12,"col_end":12,"count":0}]},{"line":"              Or_error.error_string","counters":[]},{"line":"                (sprintf","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"                   \"Transaction hashing not implemented for command with \\","counters":[]},{"line":"                    version %d\"","counters":[]},{"line":"                   version ) )","counters":[]},{"line":"      | Error _ ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Or_error.error_string","counters":[]},{"line":"            \"Could not decode transaction id as either Base58Check or Base64\" )","counters":[]},{"line":"","counters":[]},{"line":"module User_command_with_valid_signature = struct","counters":[]},{"line":"  type hash = T.t [@@deriving sexp, compare, hash]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"  let hash_to_yojson = to_yojson","counters":[]},{"line":"","counters":[]},{"line":"  let hash_of_yojson = of_yojson","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( (User_command.Valid.Stable.V2.t[@hash.ignore])","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        , (T.Stable.V1.t[@to_yojson hash_to_yojson]) )","counters":[]},{"line":"        With_hash.Stable.V1.t","counters":[]},{"line":"      [@@deriving sexp, hash, to_yojson]","counters":[{"col_start":39,"col_end":39,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      (* Compare only on hashes, comparing on the data too would be slower and","counters":[]},{"line":"         add no value.","counters":[]},{"line":"      *)","counters":[]},{"line":"      let compare (x : t) (y : t) = T.compare x.hash y.hash","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let create (c : User_command.Valid.t) : t =","counters":[]},{"line":"    { data = c; hash = hash_command (User_command.forget_check c) }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":34,"col_end":34,"count":0},{"col_start":61,"col_end":61,"count":0}]},{"line":"","counters":[]},{"line":"  let data ({ data; _ } : t) = data","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let command ({ data; _ } : t) = User_command.forget_check data","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let hash ({ hash; _ } : t) = hash","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let forget_check ({ data; hash } : t) =","counters":[]},{"line":"    { With_hash.data = User_command.forget_check data; hash }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  include Comparable.Make (Stable.Latest)","counters":[]},{"line":"","counters":[]},{"line":"  let make data hash : t = { data; hash }","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module User_command = struct","counters":[]},{"line":"  type hash = T.t [@@deriving sexp, compare, hash]","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"  let hash_to_yojson = to_yojson","counters":[]},{"line":"","counters":[]},{"line":"  let hash_of_yojson = of_yojson","counters":[]},{"line":"","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V2 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        ( (User_command.Stable.V2.t[@hash.ignore])","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":11,"col_end":11,"count":0}]},{"line":"        , (T.Stable.V1.t[@to_yojson hash_to_yojson]) )","counters":[]},{"line":"        With_hash.Stable.V1.t","counters":[]},{"line":"      [@@deriving sexp, hash, to_yojson]","counters":[{"col_start":39,"col_end":39,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"","counters":[]},{"line":"      (* Compare only on hashes, comparing on the data too would be slower and","counters":[]},{"line":"         add no value.","counters":[]},{"line":"      *)","counters":[]},{"line":"      let compare (x : t) (y : t) = T.compare x.hash y.hash","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let create (c : User_command.t) : t = { data = c; hash = hash_command c }","counters":[{"col_start":40,"col_end":40,"count":0},{"col_start":70,"col_end":70,"count":0}]},{"line":"","counters":[]},{"line":"  let data ({ data; _ } : t) = data","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let command ({ data; _ } : t) = data","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"","counters":[]},{"line":"  let hash ({ hash; _ } : t) = hash","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let of_checked ({ data; hash } : User_command_with_valid_signature.t) : t =","counters":[]},{"line":"    { With_hash.data = User_command.forget_check data; hash }","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":47,"col_end":47,"count":0}]},{"line":"","counters":[]},{"line":"  include Comparable.Make (Stable.Latest)","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"let%test \"signed command v1 hash from transaction id\" =","counters":[]},{"line":"  let transaction_id =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    \"BD421DxjdoLimeUh4RA4FEvHdDn6bfxyMVWiWUwbYzQkqhNUv8B5M4gCSREpu9mVueBYoHYWkwB8BMf6iS2jjV8FffvPGkuNeczBfY7YRwLuUGBRCQJ3ktFBrNuu4abqgkYhXmcS2xyzoSGxHbXkJRAokTwjQ9HP6TLSeXz9qa92nJaTeccMnkoZBmEitsZWWnTCMqDc6rhN4Z9UMpg4wzdPMwNJvLRuJBD14Dd5pR84KBoY9rrnv66rHPc4m2hH9QSEt4aEJC76BQ446pHN9ZLmyhrk28f5xZdBmYxp3hV13fJEJ3Gv1XqJMBqFxRhzCVGoKDbLAaNRb5F1u1WxTzJu5n4cMMDEYydGEpNirY2PKQqHkR8gEqjXRTkpZzP8G19qT\"","counters":[]},{"line":"  in","counters":[]},{"line":"  (* N.B.: this is the old-style hash, computed by digesting the Base58Check serialization *)","counters":[]},{"line":"  let expected_hash = \"CkpZUiKxdNnT53v5LAxnsohbLc9xabe6HcsQUtFsVVAQZB2pdNUjc\" in","counters":[]},{"line":"  let hash =","counters":[]},{"line":"    match hash_of_transaction_id transaction_id with","counters":[]},{"line":"    | Ok hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        to_base58_check hash","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    | Error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"Error getting hash: %s\" (Error.to_string_hum err) ()","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"  in","counters":[]},{"line":"  String.equal hash expected_hash","counters":[]},{"line":"","counters":[]},{"line":"let%test \"signed command v2 hash from transaction id\" =","counters":[]},{"line":"  let transaction_id =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    \"Av0BlDV3VklWpVXVRQr7cidImXn8E9nqCAxPjuyUNZ2pu3pJJxkBAP//IgAgpNU5narWobUpPXWnrzjilYnd9C6DVcafO/ZLc3vdrMgAVklWpVXVRQr7cidImXn8E9nqCAxPjuyUNZ2pu3pJJxkBFeE3d36c7ThjtioG6XUJjkISr2jfgpa99wHwhZ6neSQB/rQkVklWpVXVRQr7cidImXn8E9nqCAxPjuyUNZ2pu3pJJxkBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"","counters":[]},{"line":"  in","counters":[]},{"line":"  let expected_hash = \"CkpZcAHDStkSGLD8Whb4vjk4qMrf79TL8gKUT3sC8PUHpKmV8mpMx\" in","counters":[]},{"line":"  let hash =","counters":[]},{"line":"    match hash_of_transaction_id transaction_id with","counters":[]},{"line":"    | Ok hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        to_base58_check hash","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    | Error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"Error getting hash: %s\" (Error.to_string_hum err) ()","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"  in","counters":[]},{"line":"  String.equal hash expected_hash","counters":[]},{"line":"","counters":[]},{"line":"let%test \"zkApp v1 hash from transaction id\" =","counters":[]},{"line":"  let transaction_id =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    \"\"","counters":[]},{"line":"  in","counters":[]},{"line":"  let expected_hash = \"CkpZoJ5FpDjCQcgV7xuKHjLzCM9kzKroMW31cRKAJhJiLcvBaYrox\" in","counters":[]},{"line":"  let hash =","counters":[]},{"line":"    match hash_of_transaction_id transaction_id with","counters":[]},{"line":"    | Ok hash ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        to_base58_check hash","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"    | Error err ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        failwithf \"Error getting hash: %s\" (Error.to_string_hum err) ()","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"  in","counters":[]},{"line":"  String.equal hash expected_hash","counters":[{"col_start":32,"col_end":32,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}