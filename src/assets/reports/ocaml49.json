{"filename":"src/lib/genesis_proof/genesis_proof.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Mina_base","counters":[]},{"line":"open Mina_state","counters":[]},{"line":"","counters":[]},{"line":"module Inputs = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { runtime_config : Runtime_config.t","counters":[]},{"line":"    ; constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"    ; proof_level : Genesis_constants.Proof_level.t","counters":[]},{"line":"    ; genesis_constants : Genesis_constants.t","counters":[]},{"line":"    ; genesis_ledger : Genesis_ledger.Packed.t","counters":[]},{"line":"    ; genesis_epoch_data : Consensus.Genesis_epoch_data.t","counters":[]},{"line":"    ; genesis_body_reference : Consensus.Body_reference.t","counters":[]},{"line":"    ; consensus_constants : Consensus.Constants.t","counters":[]},{"line":"    ; protocol_state_with_hashes :","counters":[]},{"line":"        Protocol_state.value State_hash.With_state_hashes.t","counters":[]},{"line":"    ; constraint_system_digests : (string * Md5_lib.t) list option","counters":[]},{"line":"    ; blockchain_proof_system_id :","counters":[]},{"line":"        (* This is only used for calculating the hash to lookup the genesis","counters":[]},{"line":"           proof with. It is re-calculated when building the blockchain prover,","counters":[]},{"line":"           so it is always okay -- if less efficient at startup -- to pass","counters":[]},{"line":"           [None] here.","counters":[]},{"line":"        *)","counters":[]},{"line":"        Pickles.Verification_key.Id.t option","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let runtime_config { runtime_config; _ } = runtime_config","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let constraint_constants { constraint_constants; _ } = constraint_constants","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_constants { genesis_constants; _ } = genesis_constants","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let proof_level { proof_level; _ } = proof_level","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let protocol_constants t = (genesis_constants t).protocol","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let ledger_depth { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.depth genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  include Genesis_ledger.Utils","counters":[]},{"line":"","counters":[]},{"line":"  let genesis_ledger { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.t genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_epoch_data { genesis_epoch_data; _ } = genesis_epoch_data","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"  let accounts { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.accounts genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let find_new_account_record_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.find_new_account_record_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let find_new_account_record_exn_ { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.find_new_account_record_exn_ genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_keypair_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_keypair_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_pk_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_pk_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let consensus_constants { consensus_constants; _ } = consensus_constants","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state_with_hashes { protocol_state_with_hashes; _ } =","counters":[]},{"line":"    protocol_state_with_hashes","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state t = (genesis_state_with_hashes t).data","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state_hashes t = (genesis_state_with_hashes t).hash","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Proof_data = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { blockchain_proof_system_id : Pickles.Verification_key.Id.t","counters":[]},{"line":"    ; genesis_proof : Proof.t","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module T = struct","counters":[]},{"line":"  type t =","counters":[]},{"line":"    { runtime_config : Runtime_config.t","counters":[]},{"line":"    ; constraint_constants : Genesis_constants.Constraint_constants.t","counters":[]},{"line":"    ; genesis_constants : Genesis_constants.t","counters":[]},{"line":"    ; proof_level : Genesis_constants.Proof_level.t","counters":[]},{"line":"    ; genesis_ledger : Genesis_ledger.Packed.t","counters":[]},{"line":"    ; genesis_epoch_data : Consensus.Genesis_epoch_data.t","counters":[]},{"line":"    ; genesis_body_reference : Consensus.Body_reference.t","counters":[]},{"line":"    ; consensus_constants : Consensus.Constants.t","counters":[]},{"line":"    ; protocol_state_with_hashes :","counters":[]},{"line":"        Protocol_state.value State_hash.With_state_hashes.t","counters":[]},{"line":"    ; constraint_system_digests : (string * Md5_lib.t) list Lazy.t","counters":[]},{"line":"    ; proof_data : Proof_data.t option","counters":[]},{"line":"    }","counters":[]},{"line":"","counters":[]},{"line":"  let runtime_config { runtime_config; _ } = runtime_config","counters":[{"col_start":45,"col_end":45,"count":0}]},{"line":"","counters":[]},{"line":"  let constraint_constants { constraint_constants; _ } = constraint_constants","counters":[{"col_start":57,"col_end":57,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_constants { genesis_constants; _ } = genesis_constants","counters":[{"col_start":51,"col_end":51,"count":0}]},{"line":"","counters":[]},{"line":"  let proof_level { proof_level; _ } = proof_level","counters":[{"col_start":39,"col_end":39,"count":0}]},{"line":"","counters":[]},{"line":"  let protocol_constants t = (genesis_constants t).protocol","counters":[{"col_start":29,"col_end":29,"count":0},{"col_start":46,"col_end":46,"count":0}]},{"line":"","counters":[]},{"line":"  let ledger_depth { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.depth genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  include Genesis_ledger.Utils","counters":[]},{"line":"","counters":[]},{"line":"  let genesis_ledger { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.t genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_epoch_data { genesis_epoch_data; _ } = genesis_epoch_data","counters":[{"col_start":53,"col_end":53,"count":0}]},{"line":"","counters":[]},{"line":"  let accounts { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.accounts genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let find_new_account_record_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.find_new_account_record_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let find_new_account_record_exn_ { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.find_new_account_record_exn_ genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_keypair_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_keypair_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let largest_account_pk_exn { genesis_ledger; _ } =","counters":[]},{"line":"    Genesis_ledger.Packed.largest_account_pk_exn genesis_ledger","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let consensus_constants { consensus_constants; _ } = consensus_constants","counters":[{"col_start":55,"col_end":55,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state_with_hashes { protocol_state_with_hashes; _ } =","counters":[]},{"line":"    protocol_state_with_hashes","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state t = (genesis_state_with_hashes t).data","counters":[{"col_start":24,"col_end":24,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_state_hashes t = (genesis_state_with_hashes t).hash","counters":[{"col_start":31,"col_end":31,"count":0},{"col_start":56,"col_end":56,"count":0}]},{"line":"","counters":[]},{"line":"  let genesis_proof { proof_data; _ } =","counters":[]},{"line":"    Option.map proof_data ~f:(fun { Proof_data.genesis_proof = p; _ } -> p)","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"include T","counters":[]},{"line":"","counters":[]},{"line":"let base_proof (module B : Blockchain_snark.Blockchain_snark_state.S)","counters":[]},{"line":"    (t : Inputs.t) =","counters":[]},{"line":"  let genesis_ledger = Genesis_ledger.Packed.t t.genesis_ledger in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let constraint_constants = t.constraint_constants in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let consensus_constants = t.consensus_constants in","counters":[]},{"line":"  let prev_state =","counters":[]},{"line":"    Protocol_state.negative_one ~genesis_ledger","counters":[]},{"line":"      ~genesis_epoch_data:t.genesis_epoch_data ~constraint_constants","counters":[]},{"line":"      ~consensus_constants ~genesis_body_reference:t.genesis_body_reference","counters":[]},{"line":"  in","counters":[]},{"line":"  let curr = t.protocol_state_with_hashes.data in","counters":[]},{"line":"  let dummy_txn_stmt : Transaction_snark.Statement.With_sok.t =","counters":[]},{"line":"    let reg (t : Blockchain_state.Value.t) =","counters":[]},{"line":"      { t.registers with","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        pending_coinbase_stack = Mina_base.Pending_coinbase.Stack.empty","counters":[]},{"line":"      }","counters":[]},{"line":"    in","counters":[]},{"line":"    { sok_digest = Mina_base.Sok_message.Digest.default","counters":[]},{"line":"    ; source = reg (Protocol_state.blockchain_state prev_state)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    ; target = reg (Protocol_state.blockchain_state curr)","counters":[{"col_start":17,"col_end":17,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"    ; supply_increase = Currency.Amount.Signed.zero","counters":[]},{"line":"    ; fee_excess = Fee_excess.zero","counters":[]},{"line":"    }","counters":[]},{"line":"  in","counters":[]},{"line":"  let genesis_epoch_ledger =","counters":[]},{"line":"    match t.genesis_epoch_data with","counters":[]},{"line":"    | None ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        genesis_ledger","counters":[]},{"line":"    | Some data ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        data.staking.ledger","counters":[]},{"line":"  in","counters":[]},{"line":"  let open Pickles_types in","counters":[]},{"line":"  let blockchain_dummy =","counters":[]},{"line":"    Pickles.Proof.dummy Nat.N2.n Nat.N2.n Nat.N2.n ~domain_log2:16","counters":[]},{"line":"  in","counters":[]},{"line":"  let txn_dummy =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    Pickles.Proof.dummy Nat.N2.n Nat.N2.n Nat.N0.n ~domain_log2:14","counters":[]},{"line":"  in","counters":[]},{"line":"  B.step","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    ~handler:","counters":[]},{"line":"      (Consensus.Data.Prover_state.precomputed_handler ~constraint_constants","counters":[]},{"line":"         ~genesis_epoch_ledger )","counters":[]},{"line":"    { transition =","counters":[]},{"line":"        Snark_transition.genesis ~constraint_constants ~consensus_constants","counters":[]},{"line":"          ~genesis_ledger ~genesis_body_reference:t.genesis_body_reference","counters":[]},{"line":"    ; prev_state","counters":[]},{"line":"    ; prev_state_proof = blockchain_dummy","counters":[]},{"line":"    ; txn_snark = dummy_txn_stmt","counters":[]},{"line":"    ; txn_snark_proof = txn_dummy","counters":[]},{"line":"    }","counters":[]},{"line":"    t.protocol_state_with_hashes.data","counters":[]},{"line":"","counters":[]},{"line":"let digests (module T : Transaction_snark.S)","counters":[]},{"line":"    (module B : Blockchain_snark.Blockchain_snark_state.S) =","counters":[]},{"line":"  let open Lazy.Let_syntax in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let%bind txn_digests = T.constraint_system_digests in","counters":[]},{"line":"  let%map blockchain_digests = B.constraint_system_digests in","counters":[]},{"line":"  txn_digests @ blockchain_digests","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"","counters":[]},{"line":"let blockchain_snark_state (inputs : Inputs.t) :","counters":[]},{"line":"    (module Transaction_snark.S)","counters":[]},{"line":"    * (module Blockchain_snark.Blockchain_snark_state.S) =","counters":[]},{"line":"  let module T = Transaction_snark.Make (struct","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    let constraint_constants = inputs.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    let proof_level = inputs.proof_level","counters":[]},{"line":"  end) in","counters":[]},{"line":"  let module B = Blockchain_snark.Blockchain_snark_state.Make (struct","counters":[]},{"line":"    let tag = T.tag","counters":[]},{"line":"","counters":[]},{"line":"    let constraint_constants = inputs.constraint_constants","counters":[]},{"line":"","counters":[]},{"line":"    let proof_level = inputs.proof_level","counters":[]},{"line":"  end) in","counters":[]},{"line":"  ((module T), (module B))","counters":[]},{"line":"","counters":[]},{"line":"let create_values txn b (t : Inputs.t) =","counters":[]},{"line":"  let%map.Async.Deferred (), (), genesis_proof = base_proof b t in","counters":[{"col_start":58,"col_end":58,"count":0}]},{"line":"  { runtime_config = t.runtime_config","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; constraint_constants = t.constraint_constants","counters":[]},{"line":"  ; proof_level = t.proof_level","counters":[]},{"line":"  ; genesis_constants = t.genesis_constants","counters":[]},{"line":"  ; genesis_ledger = t.genesis_ledger","counters":[]},{"line":"  ; genesis_epoch_data = t.genesis_epoch_data","counters":[]},{"line":"  ; genesis_body_reference = t.genesis_body_reference","counters":[]},{"line":"  ; consensus_constants = t.consensus_constants","counters":[]},{"line":"  ; protocol_state_with_hashes = t.protocol_state_with_hashes","counters":[]},{"line":"  ; constraint_system_digests = digests txn b","counters":[{"col_start":38,"col_end":38,"count":0}]},{"line":"  ; proof_data =","counters":[]},{"line":"      Some","counters":[]},{"line":"        { blockchain_proof_system_id =","counters":[]},{"line":"            (let (module B) = b in","counters":[]},{"line":"             Lazy.force B.Proof.id )","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"        ; genesis_proof","counters":[]},{"line":"        }","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let create_values_no_proof (t : Inputs.t) =","counters":[]},{"line":"  { runtime_config = t.runtime_config","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; constraint_constants = t.constraint_constants","counters":[]},{"line":"  ; proof_level = t.proof_level","counters":[]},{"line":"  ; genesis_constants = t.genesis_constants","counters":[]},{"line":"  ; genesis_ledger = t.genesis_ledger","counters":[]},{"line":"  ; genesis_epoch_data = t.genesis_epoch_data","counters":[]},{"line":"  ; genesis_body_reference = t.genesis_body_reference","counters":[]},{"line":"  ; consensus_constants = t.consensus_constants","counters":[]},{"line":"  ; protocol_state_with_hashes = t.protocol_state_with_hashes","counters":[]},{"line":"  ; constraint_system_digests =","counters":[]},{"line":"      lazy","counters":[]},{"line":"        (let txn, b = blockchain_snark_state t in","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"         Lazy.force (digests txn b) )","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"  ; proof_data = None","counters":[]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let to_inputs (t : t) : Inputs.t =","counters":[]},{"line":"  { runtime_config = t.runtime_config","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  ; constraint_constants = t.constraint_constants","counters":[]},{"line":"  ; proof_level = t.proof_level","counters":[]},{"line":"  ; genesis_constants = t.genesis_constants","counters":[]},{"line":"  ; genesis_ledger = t.genesis_ledger","counters":[]},{"line":"  ; genesis_epoch_data = t.genesis_epoch_data","counters":[]},{"line":"  ; genesis_body_reference = t.genesis_body_reference","counters":[]},{"line":"  ; consensus_constants = t.consensus_constants","counters":[]},{"line":"  ; protocol_state_with_hashes = t.protocol_state_with_hashes","counters":[]},{"line":"  ; constraint_system_digests =","counters":[]},{"line":"      ( if Lazy.is_val t.constraint_system_digests then","counters":[]},{"line":"        Some (Lazy.force t.constraint_system_digests)","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":23,"col_end":23,"count":0}]},{"line":"      else None )","counters":[{"col_start":11,"col_end":11,"count":0}]},{"line":"  ; blockchain_proof_system_id =","counters":[]},{"line":"      ( match t.proof_data with","counters":[]},{"line":"      | Some { blockchain_proof_system_id; _ } ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          Some blockchain_proof_system_id","counters":[]},{"line":"      | None ->","counters":[{"col_start":8,"col_end":8,"count":0}]},{"line":"          None )","counters":[]},{"line":"  }","counters":[]}]}