{"filename":"src/lib/mina_wire_types/pickles/pickles.ml","lines":[{"line":"open Utils","counters":[]},{"line":"","counters":[]},{"line":"module M = struct","counters":[]},{"line":"  module Backend = struct","counters":[]},{"line":"    module Tick = struct","counters":[]},{"line":"      module Field = struct","counters":[]},{"line":"        module V1 = struct","counters":[]},{"line":"          type t = Pasta_bindings.Fp.t","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Proof = struct","counters":[]},{"line":"    type challenge_constant =","counters":[]},{"line":"      Pickles_limb_vector.Constant.Make(Pickles_types.Nat.N2).t","counters":[]},{"line":"","counters":[]},{"line":"    type tock_affine = Pasta_bindings.Fp.t * Pasta_bindings.Fp.t","counters":[]},{"line":"","counters":[]},{"line":"    type 'a step_bp_vec = 'a Kimchi_pasta.Basic.Rounds.Step_vector.Stable.V1.t","counters":[]},{"line":"","counters":[]},{"line":"    module Base = struct","counters":[]},{"line":"      module Wrap = struct","counters":[]},{"line":"        module V2 = struct","counters":[]},{"line":"          type digest_constant =","counters":[]},{"line":"            Pickles_limb_vector.Constant.Make(Pickles_types.Nat.N4).t","counters":[]},{"line":"","counters":[]},{"line":"          type tock_proof =","counters":[]},{"line":"            ( tock_affine","counters":[]},{"line":"            , Pasta_bindings.Fq.t","counters":[]},{"line":"            , Pasta_bindings.Fq.t array )","counters":[]},{"line":"            Pickles_types.Plonk_types.Proof.Stable.V2.t","counters":[]},{"line":"","counters":[]},{"line":"          type ('messages_for_next_wrap_proof, 'messages_for_next_step_proof) t =","counters":[]},{"line":"            { statement :","counters":[]},{"line":"                ( challenge_constant","counters":[]},{"line":"                , challenge_constant Kimchi_types.scalar_challenge","counters":[]},{"line":"                , Snark_params.Tick.Field.t Pickles_types.Shifted_value.Type1.t","counters":[]},{"line":"                , 'messages_for_next_wrap_proof","counters":[]},{"line":"                , digest_constant","counters":[]},{"line":"                , 'messages_for_next_step_proof","counters":[]},{"line":"                , challenge_constant Kimchi_types.scalar_challenge","counters":[]},{"line":"                  Pickles_bulletproof_challenge.V1.t","counters":[]},{"line":"                  step_bp_vec","counters":[]},{"line":"                , Pickles_composition_types.Branch_data.V1.t )","counters":[]},{"line":"                Pickles_composition_types.Wrap.Statement.Minimal.V1.t","counters":[]},{"line":"            ; prev_evals :","counters":[]},{"line":"                ( Snark_params.Tick.Field.t","counters":[]},{"line":"                , Snark_params.Tick.Field.t array )","counters":[]},{"line":"                Pickles_types.Plonk_types.All_evals.t","counters":[]},{"line":"            ; proof : tock_proof","counters":[]},{"line":"            }","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    type ('s, 'mlmb, _) with_data =","counters":[]},{"line":"      | T :","counters":[]},{"line":"          ( 'mlmb Pickles_reduced_messages_for_next_proof_over_same_field.Wrap.t","counters":[]},{"line":"          , ( 's","counters":[]},{"line":"            , (tock_affine, 'most_recent_width) Pickles_types.Vector.t","counters":[]},{"line":"            , ( challenge_constant Kimchi_types.scalar_challenge","counters":[]},{"line":"                Pickles_bulletproof_challenge.V1.t","counters":[]},{"line":"                step_bp_vec","counters":[]},{"line":"              , 'most_recent_width )","counters":[]},{"line":"              Pickles_types.Vector.t )","counters":[]},{"line":"            Pickles_reduced_messages_for_next_proof_over_same_field.Step.V1.t","counters":[]},{"line":"          )","counters":[]},{"line":"          Base.Wrap.V2.t","counters":[]},{"line":"          -> ('s, 'mlmb, _) with_data","counters":[]},{"line":"","counters":[]},{"line":"    type ('max_width, 'mlmb) t = (unit, 'mlmb, 'max_width) with_data","counters":[]},{"line":"","counters":[]},{"line":"    module Proofs_verified_2 = struct","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type nonrec t = (Pickles_types.Nat.N2.n, Pickles_types.Nat.N2.n) t","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Side_loaded = struct","counters":[]},{"line":"    module Verification_key = struct","counters":[]},{"line":"      module Vk = struct","counters":[]},{"line":"        type t =","counters":[]},{"line":"          ( Pasta_bindings.Fq.t","counters":[]},{"line":"          , Kimchi_bindings.Protocol.SRS.Fq.t","counters":[]},{"line":"          , Pasta_bindings.Fp.t Kimchi_types.or_infinity Kimchi_types.poly_comm","counters":[]},{"line":"          )","counters":[]},{"line":"          Kimchi_types.VerifierIndex.verifier_index","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      type tock_curve_affine =","counters":[]},{"line":"        Snark_params.Tick.Field.t * Snark_params.Tick.Field.t","counters":[]},{"line":"","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[]},{"line":"          ( tock_curve_affine","counters":[]},{"line":"          , Pickles_base.Proofs_verified.V1.t","counters":[]},{"line":"          , Vk.t )","counters":[]},{"line":"          Pickles_base.Side_loaded_verification_key.Poly.V2.t","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Max_width = Pickles_types.Nat.N2","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Proof = struct","counters":[]},{"line":"      module V2 = struct","counters":[]},{"line":"        type t =","counters":[]},{"line":"          (Verification_key.Max_width.n, Verification_key.Max_width.n) Proof.t","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Types = struct","counters":[]},{"line":"  module type S = sig","counters":[]},{"line":"    module Proof : sig","counters":[]},{"line":"      type ('a, 'b) t","counters":[]},{"line":"","counters":[]},{"line":"      module Proofs_verified_2 : sig","counters":[]},{"line":"        module V2 : sig","counters":[]},{"line":"          type nonrec t = (Pickles_types.Nat.N2.n, Pickles_types.Nat.N2.n) t","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Side_loaded : sig","counters":[]},{"line":"      module Verification_key : sig","counters":[]},{"line":"        module Max_width : module type of Pickles_types.Nat.N2","counters":[]},{"line":"","counters":[]},{"line":"        module V2 : sig","counters":[]},{"line":"          type t","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"","counters":[]},{"line":"      module Proof : sig","counters":[]},{"line":"        module V2 : sig","counters":[]},{"line":"          type t =","counters":[]},{"line":"            (Verification_key.Max_width.n, Verification_key.Max_width.n) Proof.t","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    module Backend : sig","counters":[]},{"line":"      module Tick : sig","counters":[]},{"line":"        module Field : sig","counters":[]},{"line":"          module V1 : sig","counters":[]},{"line":"            type t = Pasta_bindings.Fp.t","counters":[]},{"line":"          end","counters":[]},{"line":"        end","counters":[]},{"line":"      end","counters":[]},{"line":"    end","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Concrete_ = M","counters":[]},{"line":"","counters":[]},{"line":"module type Concrete =","counters":[]},{"line":"  Types.S","counters":[]},{"line":"    with type Side_loaded.Verification_key.V2.t =","counters":[]},{"line":"      M.Side_loaded.Verification_key.V2.t","counters":[]},{"line":"     and type Backend.Tick.Field.V1.t = Pasta_bindings.Fp.t","counters":[]},{"line":"     and type ('a, 'b) Proof.t = ('a, 'b) M.Proof.t","counters":[]},{"line":"","counters":[]},{"line":"module type Local_sig = Signature(Types).S","counters":[]},{"line":"","counters":[]},{"line":"module Make","counters":[]},{"line":"    (Signature : Local_sig) (F : functor (A : Concrete) -> Signature(A).S) =","counters":[]},{"line":"  F (M)","counters":[]},{"line":"include M","counters":[]}]}