{"filename":"src/lib/crypto/kimchi_backend/common/bigint.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"","counters":[]},{"line":"module type Bindings = sig","counters":[]},{"line":"  type t","counters":[]},{"line":"","counters":[]},{"line":"  val num_limbs : unit -> int","counters":[]},{"line":"","counters":[]},{"line":"  val bytes_per_limb : unit -> int","counters":[]},{"line":"","counters":[]},{"line":"  val compare : t -> t -> int","counters":[]},{"line":"","counters":[]},{"line":"  val div : t -> t -> t","counters":[]},{"line":"","counters":[]},{"line":"  val test_bit : t -> int -> bool","counters":[]},{"line":"","counters":[]},{"line":"  val print : t -> unit","counters":[]},{"line":"","counters":[]},{"line":"  val to_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val of_numeral : string -> int -> int -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_decimal_string : string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val to_bytes : t -> Bytes.t","counters":[]},{"line":"","counters":[]},{"line":"  val of_bytes : Bytes.t -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module type Intf = sig","counters":[]},{"line":"  type t [@@deriving bin_io, sexp, compare]","counters":[]},{"line":"","counters":[]},{"line":"  include Bindings with type t := t","counters":[]},{"line":"","counters":[]},{"line":"  val num_limbs : int","counters":[]},{"line":"","counters":[]},{"line":"  val bytes_per_limb : int","counters":[]},{"line":"","counters":[]},{"line":"  val length_in_bytes : int","counters":[]},{"line":"","counters":[]},{"line":"  val to_hex_string : t -> string","counters":[]},{"line":"","counters":[]},{"line":"  val of_hex_string : ?reverse:bool -> string -> t","counters":[]},{"line":"","counters":[]},{"line":"  val of_numeral : string -> base:int -> t","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make","counters":[]},{"line":"    (B : Bindings) (M : sig","counters":[]},{"line":"      val length_in_bytes : int","counters":[]},{"line":"    end) : Intf with type t = B.t = struct","counters":[]},{"line":"  include B","counters":[]},{"line":"","counters":[]},{"line":"  let num_limbs = num_limbs ()","counters":[{"col_start":26,"col_end":26,"count":1}]},{"line":"","counters":[]},{"line":"  let bytes_per_limb = bytes_per_limb ()","counters":[{"col_start":36,"col_end":36,"count":1}]},{"line":"","counters":[]},{"line":"  let length_in_bytes = num_limbs * bytes_per_limb","counters":[]},{"line":"","counters":[]},{"line":"  let to_hex_string t =","counters":[]},{"line":"    let data = to_bytes t in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    \"0x\" ^ String.uppercase (Hex.encode ~reverse:true (Bytes.to_string data))","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":26,"col_end":26,"count":0},{"col_start":38,"col_end":38,"count":0},{"col_start":69,"col_end":69,"count":0}]},{"line":"","counters":[]},{"line":"  let sexp_of_t t = to_hex_string t |> Sexp.of_string","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":32,"col_end":32,"count":0}]},{"line":"","counters":[]},{"line":"  let of_hex_string ?(reverse = true) s =","counters":[{"col_start":32,"col_end":32,"count":5470}]},{"line":"    assert (Char.equal s.[0] '0' && Char.equal s.[1] 'x') ;","counters":[{"col_start":4,"col_end":4,"count":5470},{"col_start":11,"col_end":11,"count":5470},{"col_start":21,"col_end":21,"count":5470},{"col_start":36,"col_end":36,"count":5470},{"col_start":45,"col_end":45,"count":5470}]},{"line":"    let s = String.drop_prefix s 2 in","counters":[]},{"line":"    Option.try_with (fun () -> Hex.decode ~init:Bytes.init ~reverse s)","counters":[{"col_start":4,"col_end":4,"count":5470},{"col_start":18,"col_end":18,"count":5470},{"col_start":31,"col_end":31,"count":5470}]},{"line":"    |> Option.value_exn ~here:[%here]","counters":[{"col_start":22,"col_end":22,"count":5470}]},{"line":"    |> of_bytes","counters":[]},{"line":"","counters":[]},{"line":"  let%test_unit \"hex test\" =","counters":[]},{"line":"    let bytes =","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      String.init length_in_bytes ~f:(fun _ -> Char.of_int_exn (Random.int 255))","counters":[{"col_start":47,"col_end":47,"count":0},{"col_start":73,"col_end":73,"count":0}]},{"line":"    in","counters":[]},{"line":"    let h = \"0x\" ^ Hex.encode bytes in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":28,"col_end":28,"count":0}]},{"line":"    [%test_eq: string] h (String.lowercase (to_hex_string (of_hex_string h)))","counters":[{"col_start":15,"col_end":15,"count":0},{"col_start":41,"col_end":41,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":71,"col_end":71,"count":0}]},{"line":"","counters":[]},{"line":"  let t_of_sexp s = of_hex_string (String.t_of_sexp s)","counters":[{"col_start":20,"col_end":20,"count":0},{"col_start":50,"col_end":50,"count":0}]},{"line":"","counters":[]},{"line":"  include Bin_prot.Utils.Of_minimal (struct","counters":[]},{"line":"    type nonrec t = t","counters":[]},{"line":"","counters":[]},{"line":"    (* increment if serialization changes *)","counters":[]},{"line":"    let version = 1","counters":[]},{"line":"","counters":[]},{"line":"    let bin_shape_t =","counters":[]},{"line":"      Bin_prot.Shape.basetype","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"        (Bin_prot.Shape.Uuid.of_string","counters":[{"col_start":37,"col_end":37,"count":1}]},{"line":"           (sprintf \"kimchi_backend_bigint_%d_V%d\" M.length_in_bytes version) )","counters":[{"col_start":18,"col_end":18,"count":1}]},{"line":"        []","counters":[]},{"line":"","counters":[]},{"line":"    let __bin_read_t__ _buf ~pos_ref _vint =","counters":[]},{"line":"      Bin_prot.Common.raise_variant_wrong_type \"Bigint.t\" !pos_ref","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"","counters":[]},{"line":"    let bin_size_t _ = length_in_bytes","counters":[{"col_start":23,"col_end":23,"count":270}]},{"line":"","counters":[]},{"line":"    let bin_write_t buf ~pos t =","counters":[]},{"line":"      let bytes = to_bytes t in","counters":[{"col_start":6,"col_end":6,"count":270}]},{"line":"      let len = length_in_bytes in","counters":[{"col_start":6,"col_end":6,"count":270}]},{"line":"      Bigstring.From_bytes.blit ~src:bytes ~src_pos:0 ~len:length_in_bytes","counters":[]},{"line":"        ~dst:buf ~dst_pos:pos ;","counters":[]},{"line":"      pos + len","counters":[]},{"line":"","counters":[]},{"line":"    let bin_read_t buf ~pos_ref =","counters":[]},{"line":"      let remaining_bytes = Bigstring.length buf - !pos_ref in","counters":[{"col_start":6,"col_end":6,"count":4041},{"col_start":43,"col_end":43,"count":4041}]},{"line":"      let len = length_in_bytes in","counters":[]},{"line":"      if remaining_bytes < len then","counters":[]},{"line":"        failwithf \"Bigint.bin_read_t: Expected %d bytes, got %d\"","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":16,"col_end":16,"count":0}]},{"line":"          M.length_in_bytes remaining_bytes () ;","counters":[]},{"line":"      let bytes = Bigstring.To_bytes.sub ~pos:!pos_ref ~len buf in","counters":[{"col_start":6,"col_end":6,"count":4041}]},{"line":"      pos_ref := len + !pos_ref ;","counters":[{"col_start":6,"col_end":6,"count":4041}]},{"line":"      of_bytes bytes","counters":[]},{"line":"  end)","counters":[]},{"line":"","counters":[]},{"line":"  let of_numeral s ~base = of_numeral s (String.length s) base","counters":[{"col_start":27,"col_end":27,"count":0},{"col_start":53,"col_end":53,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}