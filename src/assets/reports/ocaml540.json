{"filename":"src/lib/crypto/kimchi_backend/common/plonk_dlog_oracles.ml","lines":[{"line":"open Core_kernel","counters":[]},{"line":"open Intf","counters":[]},{"line":"","counters":[]},{"line":"module type Inputs_intf = sig","counters":[]},{"line":"  module Verifier_index : T0","counters":[]},{"line":"","counters":[]},{"line":"  module Field : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Proof : sig","counters":[]},{"line":"    type t","counters":[]},{"line":"","counters":[]},{"line":"    module Challenge_polynomial : T0","counters":[]},{"line":"","counters":[]},{"line":"    module Backend : sig","counters":[]},{"line":"      type t","counters":[]},{"line":"    end","counters":[]},{"line":"","counters":[]},{"line":"    val to_backend :","counters":[]},{"line":"      Challenge_polynomial.t list -> Field.t list -> t -> Backend.t","counters":[]},{"line":"  end","counters":[]},{"line":"","counters":[]},{"line":"  module Backend : sig","counters":[]},{"line":"    type t = Field.t Kimchi_types.oracles","counters":[]},{"line":"","counters":[]},{"line":"    val create : Verifier_index.t -> Proof.Backend.t -> t","counters":[]},{"line":"  end","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"module Make (Inputs : Inputs_intf) = struct","counters":[]},{"line":"  open Inputs","counters":[]},{"line":"","counters":[]},{"line":"  let create vk prev_challenge input (pi : Proof.t) =","counters":[]},{"line":"    let pi = Proof.to_backend prev_challenge input pi in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    Backend.create vk pi","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"","counters":[]},{"line":"  open Backend","counters":[]},{"line":"","counters":[]},{"line":"  let scalar_challenge t = Scalar_challenge.create t","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"  let alpha (t : t) = t.o.alpha_chal","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let beta (t : t) = t.o.beta","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let gamma (t : t) = t.o.gamma","counters":[{"col_start":22,"col_end":22,"count":0}]},{"line":"","counters":[]},{"line":"  let zeta (t : t) = t.o.zeta_chal","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"","counters":[]},{"line":"  let joint_combiner_chal (t : t) = Option.map ~f:fst t.o.joint_combiner","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"","counters":[]},{"line":"  let joint_combiner (t : t) = Option.map ~f:snd t.o.joint_combiner","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"  let digest_before_evaluations (t : t) = t.digest_before_evaluations","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"","counters":[]},{"line":"  let v (t : t) = t.o.v_chal","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  let u (t : t) = t.o.u_chal","counters":[{"col_start":18,"col_end":18,"count":0}]},{"line":"","counters":[]},{"line":"  let p_eval_1 (t : t) = fst t.p_eval","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let p_eval_2 (t : t) = snd t.p_eval","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"","counters":[]},{"line":"  let opening_prechallenges (t : t) =","counters":[]},{"line":"    Array.map ~f:scalar_challenge t.opening_prechallenges","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"end","counters":[{"col_start":2,"col_end":2,"count":2}]}]}