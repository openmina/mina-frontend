{"filename":"src/lib/mina_net2/keypair.ml","lines":[{"line":"open Core","counters":[]},{"line":"open Async","counters":[]},{"line":"open Network_peer","counters":[]},{"line":"","counters":[]},{"line":"[%%versioned","counters":[]},{"line":"module Stable = struct","counters":[]},{"line":"  module V1 = struct","counters":[]},{"line":"    type t = { secret : string; public : string; peer_id : Peer.Id.Stable.V1.t }","counters":[{"col_start":4,"col_end":4,"count":2},{"col_start":9,"col_end":9,"count":2},{"col_start":79,"col_end":79,"count":5}]},{"line":"","counters":[]},{"line":"    let to_latest = Fn.id","counters":[]},{"line":"  end","counters":[]},{"line":"end]","counters":[]},{"line":"","counters":[]},{"line":"let secret { secret; _ } = secret","counters":[{"col_start":27,"col_end":27,"count":0}]},{"line":"","counters":[]},{"line":"let generate_random helper =","counters":[]},{"line":"  match%map","counters":[]},{"line":"    Libp2p_helper.do_rpc helper","counters":[{"col_start":23,"col_end":23,"count":0}]},{"line":"      (module Libp2p_ipc.Rpcs.GenerateKeypair)","counters":[]},{"line":"      (Libp2p_ipc.Rpcs.GenerateKeypair.create_request ())","counters":[{"col_start":52,"col_end":52,"count":0}]},{"line":"  with","counters":[]},{"line":"  | Ok response ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      let open Libp2p_ipc.Reader in","counters":[]},{"line":"      let keypair =","counters":[]},{"line":"        Libp2pHelperInterface.GenerateKeypair.Response.result_get response","counters":[]},{"line":"      in","counters":[]},{"line":"      let peer_id =","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        keypair |> Libp2pKeypair.peer_id_get |> PeerId.id_get","counters":[{"col_start":43,"col_end":43,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"        |> Peer.Id.unsafe_of_string","counters":[]},{"line":"      in","counters":[]},{"line":"      let secret = Libp2pKeypair.private_key_get keypair in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      let public = Libp2pKeypair.public_key_get keypair in","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"      { secret; public; peer_id }","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"  | Error e ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Error.tag e ~tag:\"Other RPC error generateKeypair\" |> Error.raise","counters":[{"col_start":14,"col_end":14,"count":0}]},{"line":"","counters":[]},{"line":"let of_b64_data s =","counters":[]},{"line":"  match Base64.decode s with","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  | Ok result ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Ok result","counters":[]},{"line":"  | Error (`Msg s) ->","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"      Or_error.error_string (\"invalid base64: \" ^ s)","counters":[]},{"line":"","counters":[]},{"line":"let to_b64_data (s : string) = Base64.encode_string ~pad:true s","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"","counters":[]},{"line":"let to_string ({ secret; public; peer_id } : t) =","counters":[]},{"line":"  String.concat ~sep:\",\"","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [ to_b64_data secret; to_b64_data public; Peer.Id.to_string peer_id ]","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":36,"col_end":36,"count":0},{"col_start":62,"col_end":62,"count":0}]},{"line":"","counters":[]},{"line":"let of_string s =","counters":[]},{"line":"  let parse_with_sep sep =","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    match String.split s ~on:sep with","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    | [ secret_b64; public_b64; peer_id ] ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        let open Or_error.Let_syntax in","counters":[]},{"line":"        let%map secret = of_b64_data secret_b64","counters":[{"col_start":35,"col_end":35,"count":0}]},{"line":"        and public = of_b64_data public_b64 in","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"        ({ secret; public; peer_id = Peer.Id.unsafe_of_string peer_id } : t)","counters":[{"col_start":9,"col_end":9,"count":0},{"col_start":60,"col_end":60,"count":0}]},{"line":"    | _ ->","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"        Or_error.errorf \"%s is not a valid Keypair.to_string output\" s","counters":[]},{"line":"  in","counters":[]},{"line":"  let with_semicolon = parse_with_sep ';' in","counters":[]},{"line":"  let with_comma = parse_with_sep ',' in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  if Or_error.is_error with_semicolon then with_comma else with_semicolon","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":43,"col_end":43,"count":0},{"col_start":59,"col_end":59,"count":0}]},{"line":"","counters":[]},{"line":"let to_peer_id ({ peer_id; _ } : t) = peer_id","counters":[{"col_start":38,"col_end":38,"count":0},{"col_start":44,"col_end":44,"count":2}]}]}