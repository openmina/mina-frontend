{"filename":"src/lib/mina_base/protocol_constants_checked.ml","lines":[{"line":"[%%import \"/src/config.mlh\"]","counters":[]},{"line":"","counters":[{"col_start":0,"col_end":0,"count":1}]},{"line":"open Core_kernel","counters":[]},{"line":"open Snark_params.Tick","counters":[]},{"line":"module T = Mina_numbers.Length","counters":[]},{"line":"","counters":[]},{"line":"(*constants actually required for blockchain snark*)","counters":[]},{"line":"(* k","counters":[]},{"line":"   ,c","counters":[]},{"line":"   ,slots_per_epoch","counters":[]},{"line":"   ,slots_per_sub_window","counters":[]},{"line":"   ,sub_windows_per_window","counters":[]},{"line":"   ,checkpoint_window_size_in_slots","counters":[]},{"line":"   ,block_window_duration_ms*)","counters":[]},{"line":"","counters":[]},{"line":"module Poly = Genesis_constants.Protocol.Poly","counters":[]},{"line":"","counters":[]},{"line":"module Value = struct","counters":[]},{"line":"  [%%versioned","counters":[]},{"line":"  module Stable = struct","counters":[]},{"line":"    module V1 = struct","counters":[]},{"line":"      type t =","counters":[{"col_start":6,"col_end":6,"count":2},{"col_start":11,"col_end":11,"count":1}]},{"line":"        (T.Stable.V1.t, T.Stable.V1.t, Block_time.Stable.V1.t) Poly.Stable.V1.t","counters":[{"col_start":8,"col_end":8,"count":0},{"col_start":9,"col_end":9,"count":0},{"col_start":24,"col_end":24,"count":0},{"col_start":39,"col_end":39,"count":0},{"col_start":63,"col_end":63,"count":0}]},{"line":"      [@@deriving equal, ord, hash, sexp, yojson]","counters":[{"col_start":48,"col_end":48,"count":5}]},{"line":"","counters":[]},{"line":"      let to_latest = Fn.id","counters":[]},{"line":"    end","counters":[]},{"line":"  end]","counters":[]},{"line":"","counters":[]},{"line":"  let gen : t Quickcheck.Generator.t =","counters":[]},{"line":"    let open Quickcheck.Let_syntax in","counters":[]},{"line":"    let%bind k = Int.gen_incl 1 5000 in","counters":[{"col_start":28,"col_end":28,"count":1}]},{"line":"    let%bind delta = Int.gen_incl 0 5000 in","counters":[{"col_start":32,"col_end":32,"count":0}]},{"line":"    let%bind slots_per_epoch = Int.gen_incl k (8 * k) >>| ( * ) 3 >>| T.of_int","counters":[{"col_start":42,"col_end":42,"count":0},{"col_start":56,"col_end":56,"count":0},{"col_start":68,"col_end":68,"count":0}]},{"line":"    and slots_per_sub_window = Int.gen_incl 1 ((k + 9) / 9) in","counters":[{"col_start":42,"col_end":42,"count":0}]},{"line":"    (*TODO: Bug -> Block_time.(to_time x |> of_time) != x for certain values.","counters":[]},{"line":"      Eg: 34702788243129 <--> 34702788243128, 8094 <--> 8093*)","counters":[]},{"line":"    let%bind ms = Int64.(gen_log_uniform_incl 0L 9999999999999L) in","counters":[{"col_start":44,"col_end":44,"count":0}]},{"line":"    let end_time = Block_time.of_int64 999999999999999L in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let%map genesis_state_timestamp =","counters":[]},{"line":"      Block_time.(gen_incl (of_int64 ms) end_time)","counters":[{"col_start":25,"col_end":25,"count":0},{"col_start":35,"col_end":35,"count":0}]},{"line":"    in","counters":[]},{"line":"    { Poly.k = T.of_int k","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":22,"col_end":22,"count":0}]},{"line":"    ; delta = T.of_int delta","counters":[{"col_start":21,"col_end":21,"count":0}]},{"line":"    ; slots_per_epoch","counters":[]},{"line":"    ; slots_per_sub_window = T.of_int slots_per_sub_window","counters":[{"col_start":36,"col_end":36,"count":0}]},{"line":"    ; genesis_state_timestamp","counters":[]},{"line":"    }","counters":[]},{"line":"end","counters":[]},{"line":"","counters":[]},{"line":"type value = Value.t","counters":[]},{"line":"","counters":[]},{"line":"let value_of_t (t : Genesis_constants.Protocol.t) : value =","counters":[]},{"line":"  { k = T.of_int t.k","counters":[{"col_start":2,"col_end":2,"count":2},{"col_start":15,"col_end":15,"count":2}]},{"line":"  ; delta = T.of_int t.delta","counters":[{"col_start":19,"col_end":19,"count":2}]},{"line":"  ; slots_per_epoch = T.of_int t.slots_per_epoch","counters":[{"col_start":29,"col_end":29,"count":2}]},{"line":"  ; slots_per_sub_window = T.of_int t.slots_per_sub_window","counters":[{"col_start":34,"col_end":34,"count":2}]},{"line":"  ; genesis_state_timestamp = Block_time.of_int64 t.genesis_state_timestamp","counters":[{"col_start":48,"col_end":48,"count":2}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let t_of_value (v : value) : Genesis_constants.Protocol.t =","counters":[]},{"line":"  { k = T.to_int v.k","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"  ; delta = T.to_int v.delta","counters":[{"col_start":19,"col_end":19,"count":0}]},{"line":"  ; slots_per_epoch = T.to_int v.slots_per_epoch","counters":[{"col_start":29,"col_end":29,"count":0}]},{"line":"  ; slots_per_sub_window = T.to_int v.slots_per_sub_window","counters":[{"col_start":34,"col_end":34,"count":0}]},{"line":"  ; genesis_state_timestamp = Block_time.to_int64 v.genesis_state_timestamp","counters":[{"col_start":48,"col_end":48,"count":0}]},{"line":"  }","counters":[]},{"line":"","counters":[]},{"line":"let to_input (t : value) =","counters":[]},{"line":"  Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":2,"col_end":2,"count":5}]},{"line":"    [| T.to_input t.k","counters":[{"col_start":16,"col_end":16,"count":5}]},{"line":"     ; T.to_input t.delta","counters":[{"col_start":16,"col_end":16,"count":5}]},{"line":"     ; T.to_input t.slots_per_epoch","counters":[{"col_start":16,"col_end":16,"count":5}]},{"line":"     ; T.to_input t.slots_per_sub_window","counters":[{"col_start":16,"col_end":16,"count":5}]},{"line":"     ; Block_time.to_input t.genesis_state_timestamp","counters":[{"col_start":25,"col_end":25,"count":5}]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"[%%if defined consensus_mechanism]","counters":[]},{"line":"","counters":[]},{"line":"type var = (T.Checked.t, T.Checked.t, Block_time.Checked.t) Poly.t","counters":[]},{"line":"","counters":[]},{"line":"let typ =","counters":[]},{"line":"  Typ.of_hlistable","counters":[{"col_start":17,"col_end":17,"count":1}]},{"line":"    [ T.Checked.typ","counters":[]},{"line":"    ; T.Checked.typ","counters":[]},{"line":"    ; T.Checked.typ","counters":[]},{"line":"    ; T.Checked.typ","counters":[]},{"line":"    ; Block_time.Checked.typ","counters":[]},{"line":"    ]","counters":[]},{"line":"    ~var_to_hlist:Poly.to_hlist ~var_of_hlist:Poly.of_hlist","counters":[]},{"line":"    ~value_to_hlist:Poly.to_hlist ~value_of_hlist:Poly.of_hlist","counters":[]},{"line":"","counters":[]},{"line":"let var_to_input (var : var) =","counters":[]},{"line":"  let k = T.Checked.to_input var.k","counters":[{"col_start":2,"col_end":2,"count":0},{"col_start":27,"col_end":27,"count":0}]},{"line":"  and delta = T.Checked.to_input var.delta","counters":[{"col_start":31,"col_end":31,"count":0}]},{"line":"  and slots_per_epoch = T.Checked.to_input var.slots_per_epoch","counters":[{"col_start":41,"col_end":41,"count":0}]},{"line":"  and slots_per_sub_window = T.Checked.to_input var.slots_per_sub_window in","counters":[{"col_start":46,"col_end":46,"count":0}]},{"line":"  let genesis_state_timestamp =","counters":[]},{"line":"    Block_time.Checked.to_input var.genesis_state_timestamp","counters":[]},{"line":"  in","counters":[]},{"line":"  Array.reduce_exn ~f:Random_oracle.Input.Chunked.append","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"    [| k","counters":[]},{"line":"     ; delta","counters":[]},{"line":"     ; slots_per_epoch","counters":[]},{"line":"     ; slots_per_sub_window","counters":[]},{"line":"     ; genesis_state_timestamp","counters":[]},{"line":"    |]","counters":[]},{"line":"","counters":[]},{"line":"let%test_unit \"value = var\" =","counters":[]},{"line":"  let compiled = Genesis_constants.for_unit_tests.protocol in","counters":[{"col_start":2,"col_end":2,"count":0}]},{"line":"  let test protocol_constants =","counters":[]},{"line":"    let open Snarky_backendless in","counters":[{"col_start":4,"col_end":4,"count":0}]},{"line":"    let p_var =","counters":[]},{"line":"      let%map p = exists typ ~compute:(As_prover.return protocol_constants) in","counters":[{"col_start":23,"col_end":23,"count":0},{"col_start":54,"col_end":54,"count":0}]},{"line":"      As_prover.read typ p","counters":[{"col_start":6,"col_end":6,"count":0}]},{"line":"    in","counters":[]},{"line":"    let res = Or_error.ok_exn (run_and_check p_var) in","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":43,"col_end":43,"count":0}]},{"line":"    [%test_eq: Value.t] res protocol_constants ;","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"    [%test_eq: Value.t] protocol_constants","counters":[{"col_start":4,"col_end":4,"count":0},{"col_start":15,"col_end":15,"count":0}]},{"line":"      (t_of_value protocol_constants |> value_of_t)","counters":[{"col_start":16,"col_end":16,"count":0},{"col_start":49,"col_end":49,"count":0}]},{"line":"  in","counters":[]},{"line":"  Quickcheck.test ~trials:100 Value.gen","counters":[]},{"line":"    ~examples:[ value_of_t compiled ]","counters":[{"col_start":25,"col_end":25,"count":0}]},{"line":"    ~f:test","counters":[{"col_start":10,"col_end":10,"count":1}]},{"line":"","counters":[]},{"line":"[%%endif]","counters":[]}]}